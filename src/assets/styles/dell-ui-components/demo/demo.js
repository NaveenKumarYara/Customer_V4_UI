/*!
 * jQuery JavaScript Library v2.0.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:30Z
 */
(function (window, undefined) {
  // Can't do this because several apps including ASP.NET trace
  // the stack via arguments.caller.callee and Firefox dies if
  // you try to trace through "use strict" call chains. (#13335)
  // Support: Firefox 18+
  //"use strict";
  var
    // A central reference to the root jQuery(document)
    rootjQuery,
    // The deferred used on DOM ready
    readyList,
    // Support: IE9
    // For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
    core_strundefined = typeof undefined,
    // Use the correct document accordingly with window argument (sandbox)
    location = window.location, document = window.document, docElem = document.documentElement,
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$,
    // [[Class]] -> type pairs
    class2type = {},
    // List of deleted data cache ids, so we can reuse them
    core_deletedIds = [], core_version = '2.0.3',
    // Save a reference to some core methods
    core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim,
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      return new jQuery.fn.init(selector, context, rootjQuery);
    },
    // Used for matching numbers
    core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
    // Used for splitting on whitespace
    core_rnotwhite = /\S+/g,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    // Match a standalone tag
    rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi,
    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function (all, letter) {
      return letter.toUpperCase();
    },
    // The ready event handler and self cleanup method
    completed = function () {
      document.removeEventListener('DOMContentLoaded', completed, false);
      window.removeEventListener('load', completed, false);
      jQuery.ready();
    };
  jQuery.fn = jQuery.prototype = {
    jquery: core_version,
    constructor: jQuery,
    init: function (selector, context, rootjQuery) {
      var match, elem;
      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }
      // Handle HTML strings
      if (typeof selector === 'string') {
        if (selector.charAt(0) === '<' && selector.charAt(selector.length - 1) === '>' && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [
            null,
            selector,
            null
          ];
        } else {
          match = rquickExpr.exec(selector);
        }
        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;
            // scripts is true for back-compat
            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (jQuery.isFunction(this[match])) {
                  this[match](context[match]);  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;  // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);
            // Check parentNode to catch when Blackberry 4.6 returns
            // nodes that are no longer in the document #6963
            if (elem && elem.parentNode) {
              // Inject the element directly into the jQuery object
              this.length = 1;
              this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
          }  // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || rootjQuery).find(selector);  // HANDLE: $(expr, context)
                                                          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }  // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;  // HANDLE: $(function)
                      // Shortcut for document ready
      } else if (jQuery.isFunction(selector)) {
        return rootjQuery.ready(selector);
      }
      if (selector.selector !== undefined) {
        this.selector = selector.selector;
        this.context = selector.context;
      }
      return jQuery.makeArray(selector, this);
    },
    selector: '',
    length: 0,
    toArray: function () {
      return core_slice.call(this);
    },
    get: function (num) {
      return num == null ? this.toArray() : num < 0 ? this[this.length + num] : this[num];
    },
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);
      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
      ret.context = this.context;
      // Return the newly-formed element set
      return ret;
    },
    each: function (callback, args) {
      return jQuery.each(this, callback, args);
    },
    ready: function (fn) {
      // Add the callback
      jQuery.ready.promise().done(fn);
      return this;
    },
    slice: function () {
      return this.pushStack(core_slice.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (i) {
      var len = this.length, j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    map: function (callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    end: function () {
      return this.prevObject || this.constructor(null);
    },
    push: core_push,
    sort: [].sort,
    splice: [].splice
  };
  // Give the init function the jQuery prototype for later instantiation
  jQuery.fn.init.prototype = jQuery.fn;
  jQuery.extend = jQuery.fn.extend = function () {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !jQuery.isFunction(target)) {
      target = {};
    }
    // extend jQuery itself if only one argument is passed
    if (length === i) {
      target = this;
      --i;
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];
          // Prevent never-ending loop
          if (target === copy) {
            continue;
          }
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }
            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);  // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }
    // Return the modified object
    return target;
  };
  jQuery.extend({
    expando: 'jQuery' + (core_version + Math.random()).replace(/\D/g, ''),
    noConflict: function (deep) {
      if (window.$ === jQuery) {
        window.$ = _$;
      }
      if (deep && window.jQuery === jQuery) {
        window.jQuery = _jQuery;
      }
      return jQuery;
    },
    isReady: false,
    readyWait: 1,
    holdReady: function (hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }
      // Remember that the DOM is ready
      jQuery.isReady = true;
      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }
      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
      // Trigger any bound ready events
      if (jQuery.fn.trigger) {
        jQuery(document).trigger('ready').off('ready');
      }
    },
    isFunction: function (obj) {
      return jQuery.type(obj) === 'function';
    },
    isArray: Array.isArray,
    isWindow: function (obj) {
      return obj != null && obj === obj.window;
    },
    isNumeric: function (obj) {
      return !isNaN(parseFloat(obj)) && isFinite(obj);
    },
    type: function (obj) {
      if (obj == null) {
        return String(obj);
      }
      // Support: Safari <= 5.1 (functionish RegExp)
      return typeof obj === 'object' || typeof obj === 'function' ? class2type[core_toString.call(obj)] || 'object' : typeof obj;
    },
    isPlainObject: function (obj) {
      // Not plain objects:
      // - Any object or value whose internal [[Class]] property is not "[object Object]"
      // - DOM nodes
      // - window
      if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
        return false;
      }
      // Support: Firefox <20
      // The try/catch suppresses exceptions thrown when attempting to access
      // the "constructor" property of certain host objects, ie. |window.location|
      // https://bugzilla.mozilla.org/show_bug.cgi?id=814622
      try {
        if (obj.constructor && !core_hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
          return false;
        }
      } catch (e) {
        return false;
      }
      // If the function hasn't returned already, we're confident that
      // |obj| is a plain object, created by {} or constructed with new Object
      return true;
    },
    isEmptyObject: function (obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    error: function (msg) {
      throw new Error(msg);
    },
    parseHTML: function (data, context, keepScripts) {
      if (!data || typeof data !== 'string') {
        return null;
      }
      if (typeof context === 'boolean') {
        keepScripts = context;
        context = false;
      }
      context = context || document;
      var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
      // Single tag
      if (parsed) {
        return [context.createElement(parsed[1])];
      }
      parsed = jQuery.buildFragment([data], context, scripts);
      if (scripts) {
        jQuery(scripts).remove();
      }
      return jQuery.merge([], parsed.childNodes);
    },
    parseJSON: JSON.parse,
    parseXML: function (data) {
      var xml, tmp;
      if (!data || typeof data !== 'string') {
        return null;
      }
      // Support: IE9
      try {
        tmp = new DOMParser();
        xml = tmp.parseFromString(data, 'text/xml');
      } catch (e) {
        xml = undefined;
      }
      if (!xml || xml.getElementsByTagName('parsererror').length) {
        jQuery.error('Invalid XML: ' + data);
      }
      return xml;
    },
    noop: function () {
    },
    globalEval: function (code) {
      var script, indirect = eval;
      code = jQuery.trim(code);
      if (code) {
        // If the code includes a valid, prologue position
        // strict mode pragma, execute code by injecting a
        // script tag into the document.
        if (code.indexOf('use strict') === 1) {
          script = document.createElement('script');
          script.text = code;
          document.head.appendChild(script).parentNode.removeChild(script);
        } else {
          // Otherwise, avoid the DOM node creation, insertion
          // and removal by using an indirect global eval
          indirect(code);
        }
      }
    },
    camelCase: function (string) {
      return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
    },
    nodeName: function (elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },
    each: function (obj, callback, args) {
      var value, i = 0, length = obj.length, isArray = isArraylike(obj);
      if (args) {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        }  // A special, fast, case for the most common use of each
      } else {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        }
      }
      return obj;
    },
    trim: function (text) {
      return text == null ? '' : core_trim.call(text);
    },
    makeArray: function (arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArraylike(Object(arr))) {
          jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
        } else {
          core_push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function (elem, arr, i) {
      return arr == null ? -1 : core_indexOf.call(arr, elem, i);
    },
    merge: function (first, second) {
      var l = second.length, i = first.length, j = 0;
      if (typeof l === 'number') {
        for (; j < l; j++) {
          first[i++] = second[j];
        }
      } else {
        while (second[j] !== undefined) {
          first[i++] = second[j++];
        }
      }
      first.length = i;
      return first;
    },
    grep: function (elems, callback, inv) {
      var retVal, ret = [], i = 0, length = elems.length;
      inv = !!inv;
      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        retVal = !!callback(elems[i], i);
        if (inv !== retVal) {
          ret.push(elems[i]);
        }
      }
      return ret;
    },
    map: function (elems, callback, arg) {
      var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
      // Go through the array, translating each of the items to their
      if (isArray) {
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret[ret.length] = value;
          }
        }  // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret[ret.length] = value;
          }
        }
      }
      // Flatten any nested arrays
      return core_concat.apply([], ret);
    },
    guid: 1,
    proxy: function (fn, context) {
      var tmp, args, proxy;
      if (typeof context === 'string') {
        tmp = fn[context];
        context = fn;
        fn = tmp;
      }
      // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.
      if (!jQuery.isFunction(fn)) {
        return undefined;
      }
      // Simulated bind
      args = core_slice.call(arguments, 2);
      proxy = function () {
        return fn.apply(context || this, args.concat(core_slice.call(arguments)));
      };
      // Set the guid of unique handler to the same of original handler, so it can be removed
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
      return proxy;
    },
    access: function (elems, fn, key, value, chainable, emptyGet, raw) {
      var i = 0, length = elems.length, bulk = key == null;
      // Sets many values
      if (jQuery.type(key) === 'object') {
        chainable = true;
        for (i in key) {
          jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
        }  // Sets one value
      } else if (value !== undefined) {
        chainable = true;
        if (!jQuery.isFunction(value)) {
          raw = true;
        }
        if (bulk) {
          // Bulk operations run against the entire set
          if (raw) {
            fn.call(elems, value);
            fn = null;  // ...except when executing function values
          } else {
            bulk = fn;
            fn = function (elem, key, value) {
              return bulk.call(jQuery(elem), value);
            };
          }
        }
        if (fn) {
          for (; i < length; i++) {
            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
          }
        }
      }
      return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    },
    now: Date.now,
    swap: function (elem, options, callback, args) {
      var ret, name, old = {};
      // Remember the old values, and insert the new ones
      for (name in options) {
        old[name] = elem.style[name];
        elem.style[name] = options[name];
      }
      ret = callback.apply(elem, args || []);
      // Revert the old values
      for (name in options) {
        elem.style[name] = old[name];
      }
      return ret;
    }
  });
  jQuery.ready.promise = function (obj) {
    if (!readyList) {
      readyList = jQuery.Deferred();
      // Catch cases where $(document).ready() is called after the browser event has already occurred.
      // we once tried to use readyState "interactive" here, but it caused issues like the one
      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
      if (document.readyState === 'complete') {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        setTimeout(jQuery.ready);
      } else {
        // Use the handy event callback
        document.addEventListener('DOMContentLoaded', completed, false);
        // A fallback to window.onload, that will always work
        window.addEventListener('load', completed, false);
      }
    }
    return readyList.promise(obj);
  };
  // Populate the class2type map
  jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
    class2type['[object ' + name + ']'] = name.toLowerCase();
  });
  function isArraylike(obj) {
    var length = obj.length, type = jQuery.type(obj);
    if (jQuery.isWindow(obj)) {
      return false;
    }
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return type === 'array' || type !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
  }
  // All jQuery objects should point back to these
  rootjQuery = jQuery(document);
  /*!
 * Sizzle CSS Selector Engine v1.9.4-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-06-03
 */
  (function (window, undefined) {
    var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput,
      // Local document vars
      setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
      // Instance-specific data
      expando = 'sizzle' + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), hasDuplicate = false, sortOrder = function (a, b) {
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }
        return 0;
      },
      // General-purpose constants
      strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31,
      // Instance methods
      hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
      // Use a stripped-down indexOf if we can't use a native one
      indexOf = arr.indexOf || function (elem) {
        var i = 0, len = this.length;
        for (; i < len; i++) {
          if (this[i] === elem) {
            return i;
          }
        }
        return -1;
      }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
      // Regular expressions
      // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
      whitespace = '[\\x20\\t\\r\\n\\f]',
      // http://www.w3.org/TR/css3-syntax/#characters
      characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+',
      // Loosely modeled on CSS identifier characters
      // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
      // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
      identifier = characterEncoding.replace('w', 'w#'),
      // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
      attributes = '\\[' + whitespace + '*(' + characterEncoding + ')' + whitespace + '*(?:([*^$|!~]?=)' + whitespace + '*(?:([\'"])((?:\\\\.|[^\\\\])*?)\\3|(' + identifier + ')|)|)' + whitespace + '*\\]',
      // Prefer arguments quoted,
      //   then not containing pseudos/brackets,
      //   then attribute selectors/non-parenthetical expressions,
      //   then anything else
      // These preferences are here to reduce the number of selectors
      //   needing tokenize in the PSEUDO preFilter
      pseudos = ':(' + characterEncoding + ')(?:\\((([\'"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|' + attributes.replace(3, 8) + ')*)|.*)\\)|)',
      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
      rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rsibling = new RegExp(whitespace + '*[+~]'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
        'ID': new RegExp('^#(' + characterEncoding + ')'),
        'CLASS': new RegExp('^\\.(' + characterEncoding + ')'),
        'TAG': new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
        'ATTR': new RegExp('^' + attributes),
        'PSEUDO': new RegExp('^' + pseudos),
        'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
        'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
        'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
      }, rnative = /^[^{]+\{\s*\[native \w/,
      // Easily-parseable/retrievable ID or TAG or CLASS selectors
      rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g,
      // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
      runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
        var high = '0x' + escaped - 65536;
        // NaN means non-codepoint
        // Support: Firefox
        // Workaround erroneous numeric interpretation of +"0x"
        return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
      };
    // Optimize for push.apply( _, NodeList )
    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
      // Support: Android<4.0
      // Detect silently failing push.apply
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? function (target, els) {
          push_native.apply(target, slice.call(els));
        } : function (target, els) {
          var j = target.length, i = 0;
          // Can't trust NodeList.length
          while (target[j++] = els[i++]) {
          }
          target.length = j - 1;
        }
      };
    }
    function Sizzle(selector, context, results, seed) {
      var match, elem, m, nodeType,
        // QSA vars
        i, groups, old, nid, newContext, newSelector;
      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
        setDocument(context);
      }
      context = context || document;
      results = results || [];
      if (!selector || typeof selector !== 'string') {
        return results;
      }
      if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
        return [];
      }
      if (documentIsHTML && !seed) {
        // Shortcuts
        if (match = rquickExpr.exec(selector)) {
          // Speed-up: Sizzle("#ID")
          if (m = match[1]) {
            if (nodeType === 9) {
              elem = context.getElementById(m);
              // Check parentNode to catch when Blackberry 4.6 returns
              // nodes that are no longer in the document #6963
              if (elem && elem.parentNode) {
                // Handle the case where IE, Opera, and Webkit return items
                // by name instead of ID
                if (elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } else {
                return results;
              }
            } else {
              // Context is not a document
              if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                results.push(elem);
                return results;
              }
            }  // Speed-up: Sizzle("TAG")
          } else if (match[2]) {
            push.apply(results, context.getElementsByTagName(selector));
            return results;  // Speed-up: Sizzle(".CLASS")
          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
            push.apply(results, context.getElementsByClassName(m));
            return results;
          }
        }
        // QSA path
        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
          nid = old = expando;
          newContext = context;
          newSelector = nodeType === 9 && selector;
          // qSA works strangely on Element-rooted queries
          // We can work around this by specifying an extra ID on the root
          // and working up from there (Thanks to Andrew Dupont for the technique)
          // IE 8 doesn't work on object elements
          if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
            groups = tokenize(selector);
            if (old = context.getAttribute('id')) {
              nid = old.replace(rescape, '\\$&');
            } else {
              context.setAttribute('id', nid);
            }
            nid = '[id=\'' + nid + '\'] ';
            i = groups.length;
            while (i--) {
              groups[i] = nid + toSelector(groups[i]);
            }
            newContext = rsibling.test(selector) && context.parentNode || context;
            newSelector = groups.join(',');
          }
          if (newSelector) {
            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
            } finally {
              if (!old) {
                context.removeAttribute('id');
              }
            }
          }
        }
      }
      // All others
      return select(selector.replace(rtrim, '$1'), context, results, seed);
    }
    /**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
    function createCache() {
      var keys = [];
      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key += ' ') > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }
        return cache[key] = value;
      }
      return cache;
    }
    /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
    function assert(fn) {
      var div = document.createElement('div');
      try {
        return !!fn(div);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (div.parentNode) {
          div.parentNode.removeChild(div);
        }
        // release memory in IE
        div = null;
      }
    }
    /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
    function addHandle(attrs, handler) {
      var arr = attrs.split('|'), i = attrs.length;
      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
    function siblingCheck(a, b) {
      var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
      // Use IE sourceIndex if available on both nodes
      if (diff) {
        return diff;
      }
      // Check if b follows a
      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }
      return a ? 1 : -1;
    }
    /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === 'input' && elem.type === type;
      };
    }
    /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === 'input' || name === 'button') && elem.type === type;
      };
    }
    /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
          // Match elements found at the specified indexes
          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
    isXML = Sizzle.isXML = function (elem) {
      // documentElement is verified for cases where it doesn't yet exist
      // (such as loading iframes in IE - #4833)
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName !== 'HTML' : false;
    };
    // Expose support vars for convenience
    support = Sizzle.support = {};
    /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
    setDocument = Sizzle.setDocument = function (node) {
      var doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
      // If no document and documentElement is available, return
      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      }
      // Set our document
      document = doc;
      docElem = doc.documentElement;
      // Support tests
      documentIsHTML = !isXML(doc);
      // Support: IE>8
      // If iframe document is assigned to "document" variable and if iframe has been reloaded,
      // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
      // IE6-8 do not support the defaultView property so parent will be undefined
      if (parent && parent.attachEvent && parent !== parent.top) {
        parent.attachEvent('onbeforeunload', function () {
          setDocument();
        });
      }
      /* Attributes
	---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
      support.attributes = assert(function (div) {
        div.className = 'i';
        return !div.getAttribute('className');
      });
      /* getElement(s)By*
	---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements
      support.getElementsByTagName = assert(function (div) {
        div.appendChild(doc.createComment(''));
        return !div.getElementsByTagName('*').length;
      });
      // Check if getElementsByClassName can be trusted
      support.getElementsByClassName = assert(function (div) {
        div.innerHTML = '<div class=\'a\'></div><div class=\'a i\'></div>';
        // Support: Safari<4
        // Catch class over-caching
        div.firstChild.className = 'i';
        // Support: Opera<10
        // Catch gEBCN failure to find non-leading classes
        return div.getElementsByClassName('i').length === 2;
      });
      // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programatically-set names,
      // so use a roundabout getElementsByName test
      support.getById = assert(function (div) {
        docElem.appendChild(div).id = expando;
        return !doc.getElementsByName || !doc.getElementsByName(expando).length;
      });
      // ID find and filter
      if (support.getById) {
        Expr.find['ID'] = function (id, context) {
          if (typeof context.getElementById !== strundefined && documentIsHTML) {
            var m = context.getElementById(id);
            // Check parentNode to catch when Blackberry 4.6 returns
            // nodes that are no longer in the document #6963
            return m && m.parentNode ? [m] : [];
          }
        };
        Expr.filter['ID'] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute('id') === attrId;
          };
        };
      } else {
        // Support: IE6/7
        // getElementById is not reliable as a find shortcut
        delete Expr.find['ID'];
        Expr.filter['ID'] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode('id');
            return node && node.value === attrId;
          };
        };
      }
      // Tag
      Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== strundefined) {
          return context.getElementsByTagName(tag);
        }
      } : function (tag, context) {
        var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
        // Filter out possible comments
        if (tag === '*') {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }
          return tmp;
        }
        return results;
      };
      // Class
      Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
	---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
      rbuggyMatches = [];
      // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See http://bugs.jquery.com/ticket/13378
      rbuggyQSA = [];
      if (support.qsa = rnative.test(doc.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (div) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // http://bugs.jquery.com/ticket/12359
          div.innerHTML = '<select><option selected=\'\'></option></select>';
          // Support: IE8
          // Boolean attributes and "value" are not treated correctly
          if (!div.querySelectorAll('[selected]').length) {
            rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
          }
          // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests
          if (!div.querySelectorAll(':checked').length) {
            rbuggyQSA.push(':checked');
          }
        });
        assert(function (div) {
          // Support: Opera 10-12/IE8
          // ^= $= *= and empty values
          // Should not select anything
          // Support: Windows 8 Native Apps
          // The type attribute is restricted during .innerHTML assignment
          var input = doc.createElement('input');
          input.setAttribute('type', 'hidden');
          div.appendChild(input).setAttribute('t', '');
          if (div.querySelectorAll('[t^=\'\']').length) {
            rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
          }
          // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests
          if (!div.querySelectorAll(':enabled').length) {
            rbuggyQSA.push(':enabled', ':disabled');
          }
          // Opera 10-11 does not throw on post-comma invalid pseudos
          div.querySelectorAll('*,:x');
          rbuggyQSA.push(',.*:');
        });
      }
      if (support.matchesSelector = rnative.test(matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (div) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(div, 'div');
          // This should fail with an exception
          // Gecko does not error, returns false instead
          matches.call(div, '[s!=\'\']:x');
          rbuggyMatches.push('!=', pseudos);
        });
      }
      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
      /* Contains
	---------------------------------------------------------------------- */
      // Element contains another
      // Purposefully does not implement inclusive descendent
      // As in, an element does not contain itself
      contains = rnative.test(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }
        return false;
      };
      /* Sorting
	---------------------------------------------------------------------- */
      // Document order sorting
      sortOrder = docElem.compareDocumentPosition ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }
        var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
        if (compare) {
          // Disconnected nodes
          if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
            // Choose the first element that is related to our preferred document
            if (a === doc || contains(preferredDoc, a)) {
              return -1;
            }
            if (b === doc || contains(preferredDoc, b)) {
              return 1;
            }
            // Maintain original order
            return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
          }
          return compare & 4 ? -1 : 1;
        }
        // Not directly comparable, sort on existence of method
        return a.compareDocumentPosition ? -1 : 1;
      } : function (a, b) {
        var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;  // Parentless nodes are either documents or disconnected
        } else if (!aup || !bup) {
          return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;  // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        }
        // Otherwise we need full lists of their ancestors for comparison
        cur = a;
        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }
        cur = b;
        while (cur = cur.parentNode) {
          bp.unshift(cur);
        }
        // Walk down the tree looking for a discrepancy
        while (ap[i] === bp[i]) {
          i++;
        }
        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };
      return doc;
    };
    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };
    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }
      // Make sure that attribute selectors are quoted
      expr = expr.replace(rattributeQuotes, '=\'$1\']');
      if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr);
          // IE 9's matchesSelector returns false on disconnected nodes
          if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
        }
      }
      return Sizzle(expr, document, null, [elem]).length > 0;
    };
    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }
      return contains(context, elem);
    };
    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }
      var fn = Expr.attrHandle[name.toLowerCase()],
        // Don't get fooled by Object.prototype properties (jQuery #13807)
        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val === undefined ? support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null : val;
    };
    Sizzle.error = function (msg) {
      throw new Error('Syntax error, unrecognized expression: ' + msg);
    };
    /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
    Sizzle.uniqueSort = function (results) {
      var elem, duplicates = [], j = 0, i = 0;
      // Unless we *know* we can detect duplicates, assume their presence
      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);
      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }
        while (j--) {
          results.splice(duplicates[j], 1);
        }
      }
      return results;
    };
    /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
    getText = Sizzle.getText = function (elem) {
      var node, ret = '', i = 0, nodeType = elem.nodeType;
      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        for (; node = elem[i]; i++) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (see #11153)
        if (typeof elem.textContent === 'string') {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      }
      // Do not include comment or processing instruction nodes
      return ret;
    };
    Expr = Sizzle.selectors = {
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        '>': {
          dir: 'parentNode',
          first: true
        },
        ' ': { dir: 'parentNode' },
        '+': {
          dir: 'previousSibling',
          first: true
        },
        '~': { dir: 'previousSibling' }
      },
      preFilter: {
        'ATTR': function (match) {
          match[1] = match[1].replace(runescape, funescape);
          // Move the given value to match[3] whether quoted or unquoted
          match[3] = (match[4] || match[5] || '').replace(runescape, funescape);
          if (match[2] === '~=') {
            match[3] = ' ' + match[3] + ' ';
          }
          return match.slice(0, 4);
        },
        'CHILD': function (match) {
          /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
          match[1] = match[1].toLowerCase();
          if (match[1].slice(0, 3) === 'nth') {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            }
            // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1
            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
            match[5] = +(match[7] + match[8] || match[3] === 'odd');  // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }
          return match;
        },
        'PSEUDO': function (match) {
          var excess, unquoted = !match[5] && match[2];
          if (matchExpr['CHILD'].test(match[0])) {
            return null;
          }
          // Accept quoted arguments as-is
          if (match[3] && match[4] !== undefined) {
            match[2] = match[4];  // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          }
          // Return only captures needed by the pseudo filter method (type and argument)
          return match.slice(0, 3);
        }
      },
      filter: {
        'TAG': function (nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === '*' ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        'CLASS': function (className) {
          var pattern = classCache[className + ' '];
          return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');
          });
        },
        'ATTR': function (name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);
            if (result == null) {
              return operator === '!=';
            }
            if (!operator) {
              return true;
            }
            result += '';
            return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
          };
        },
        'CHILD': function (type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
          return first === 1 && last === 0 ? function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;
                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  }
                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === 'only' && !start && 'nextSibling';
                }
                return true;
              }
              start = [forward ? parent.firstChild : parent.lastChild];
              // non-xml :nth-child(...) stores cache data on `parent`
              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                outerCache = parent[expando] || (parent[expando] = {});
                cache = outerCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = cache[0] === dirruns && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];
                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    outerCache[type] = [
                      dirruns,
                      nodeIndex,
                      diff
                    ];
                    break;
                  }
                }  // Use previously-cached element index if available
              } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                diff = cache[1];  // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
              } else {
                // Use the same loop as above to seek `elem` from the start
                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                    // Cache the index of each encountered element
                    if (useCache) {
                      (node[expando] || (node[expando] = {}))[type] = [
                        dirruns,
                        diff
                      ];
                    }
                    if (node === elem) {
                      break;
                    }
                  }
                }
              }
              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        'PSEUDO': function (pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
          // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does
          if (fn[expando]) {
            return fn(argument);
          }
          // But maintain support for old signatures
          if (fn.length > 1) {
            args = [
              pseudo,
              pseudo,
              '',
              argument
            ];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx, matched = fn(seed, argument), i = matched.length;
              while (i--) {
                idx = indexOf.call(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }
          return fn;
        }
      },
      pseudos: {
        'not': markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
            // Match elements unmatched by `matcher`
            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results);
            return !results.pop();
          };
        }),
        'has': markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        'contains': markFunction(function (text) {
          return function (elem) {
            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
          };
        }),
        'lang': markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || '')) {
            Sizzle.error('unsupported lang: ' + lang);
          }
          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);
            return false;
          };
        }),
        'target': function (elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        'root': function (elem) {
          return elem === docElem;
        },
        'focus': function (elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        'enabled': function (elem) {
          return elem.disabled === false;
        },
        'disabled': function (elem) {
          return elem.disabled === true;
        },
        'checked': function (elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
        },
        'selected': function (elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }
          return elem.selected === true;
        },
        'empty': function (elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
          //   not comment, processing instructions, or others
          // Thanks to Diego Perini for the nodeName shortcut
          //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeName > '@' || elem.nodeType === 3 || elem.nodeType === 4) {
              return false;
            }
          }
          return true;
        },
        'parent': function (elem) {
          return !Expr.pseudos['empty'](elem);
        },
        'header': function (elem) {
          return rheader.test(elem.nodeName);
        },
        'input': function (elem) {
          return rinputs.test(elem.nodeName);
        },
        'button': function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === 'input' && elem.type === 'button' || name === 'button';
        },
        'text': function (elem) {
          var attr;
          // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
          // use getAttribute instead to test this case
          return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === elem.type);
        },
        'first': createPositionalPseudo(function () {
          return [0];
        }),
        'last': createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),
        'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        'even': createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        'odd': createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; --i >= 0;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; ++i < length;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        })
      }
    };
    Expr.pseudos['nth'] = Expr.pseudos['eq'];
    // Add button/input type pseudos
    for (i in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true
      }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }
    for (i in {
        submit: true,
        reset: true
      }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }
    // Easy API for creating new setFilters
    function setFilters() {
    }
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    function tokenize(selector, parseOnly) {
      var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }
      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;
      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }
        matched = false;
        // Combinators
        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            type: match[0].replace(rtrim, ' ')
          });
          soFar = soFar.slice(matched.length);
        }
        // Filters
        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }
        if (!matched) {
          break;
        }
      }
      // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens
      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
    }
    function toSelector(tokens) {
      var i = 0, len = tokens.length, selector = '';
      for (; i < len; i++) {
        selector += tokens[i].value;
      }
      return selector;
    }
    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
      return combinator.first ? function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
      } : function (elem, context, xml) {
        var data, cache, outerCache, dirkey = dirruns + ' ' + doneName;
        // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {});
              if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                if ((data = cache[1]) === true || data === cachedruns) {
                  return data === true;
                }
              } else {
                cache = outerCache[dir] = [dirkey];
                cache[1] = matcher(elem, context, xml) || cachedruns;
                if (cache[1] === true) {
                  return true;
                }
              }
            }
          }
        }
      };
    }
    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;
        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }
    function condense(unmatched, map, filter, context, xml) {
      var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);
            if (mapped) {
              map.push(i);
            }
          }
        }
      }
      return newUnmatched;
    }
    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }
      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }
      return markFunction(function (seed, results, context, xml) {
        var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
          // Get initial elements from seed or context
          elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
          // Prefilter to get matcher input, preserving a map for seed-results synchronization
          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
        // Find primary matches
        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        }
        // Apply postFilter
        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml);
          // Un-match failing elements by moving them back to matcherIn
          i = temp.length;
          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }
        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;
              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }
              postFinder(null, matcherOut = [], temp, xml);
            }
            // Move matched elements from seed to results to keep them synchronized
            i = matcherOut.length;
            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          }  // Add elements to results, through postFinder if defined
        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }
    function matcherFromTokens(tokens) {
      var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator(function (elem) {
          return elem === checkContext;
        }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
          return indexOf.call(checkContext, elem) > -1;
        }, implicitRelative, true), matchers = [function (elem, context, xml) {
            return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
          }];
      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
          // Return special upon seeing a positional matcher
          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;
            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }
            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }
      return elementMatcher(matchers);
    }
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      // A counter to specify which element is currently being matched
      var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, expandContext) {
          var elem, j, matcher, setMatched = [], matchedCount = 0, i = '0', unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext,
            // We must always have either seed elements or context
            elems = seed || byElement && Expr.find['TAG']('*', expandContext && context.parentNode || context),
            // Use integer dirruns iff this is the outermost matcher
            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1;
          if (outermost) {
            outermostContext = context !== document && context;
            cachedruns = matcherCachedRuns;
          }
          // Add elements passing elementMatchers directly to results
          // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
          for (; (elem = elems[i]) != null; i++) {
            if (byElement && elem) {
              j = 0;
              while (matcher = elementMatchers[j++]) {
                if (matcher(elem, context, xml)) {
                  results.push(elem);
                  break;
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
                cachedruns = ++matcherCachedRuns;
              }
            }
            // Track unmatched elements for set filters
            if (bySet) {
              // They will have gone through all possible matchers
              if (elem = !matcher && elem) {
                matchedCount--;
              }
              // Lengthen the array for every element, matched or not
              if (seed) {
                unmatched.push(elem);
              }
            }
          }
          // Apply set filters to unmatched elements
          matchedCount += i;
          if (bySet && i !== matchedCount) {
            j = 0;
            while (matcher = setMatchers[j++]) {
              matcher(unmatched, setMatched, context, xml);
            }
            if (seed) {
              // Reintegrate element matches to eliminate the need for sorting
              if (matchedCount > 0) {
                while (i--) {
                  if (!(unmatched[i] || setMatched[i])) {
                    setMatched[i] = pop.call(results);
                  }
                }
              }
              // Discard index placeholder values to get only actual matches
              setMatched = condense(setMatched);
            }
            // Add matches to results
            push.apply(results, setMatched);
            // Seedless set matches succeeding multiple successful matchers stipulate sorting
            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
              Sizzle.uniqueSort(results);
            }
          }
          // Override manipulation of globals by nested matchers
          if (outermost) {
            dirruns = dirrunsUnique;
            outermostContext = contextBackup;
          }
          return unmatched;
        };
      return bySet ? markFunction(superMatcher) : superMatcher;
    }
    compile = Sizzle.compile = function (selector, group) {
      var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!group) {
          group = tokenize(selector);
        }
        i = group.length;
        while (i--) {
          cached = matcherFromTokens(group[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }
        // Cache the compiled function
        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
      }
      return cached;
    };
    function multipleContexts(selector, contexts, results) {
      var i = 0, len = contexts.length;
      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }
      return results;
    }
    function select(selector, context, results, seed) {
      var i, tokens, token, type, find, match = tokenize(selector);
      if (!seed) {
        // Try to minimize operations if there is only one group
        if (match.length === 1) {
          // Take a shortcut and set the context if the root selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
            context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
            if (!context) {
              return results;
            }
            selector = selector.slice(tokens.shift().value.length);
          }
          // Fetch a seed set for right-to-left matching
          i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];
            // Abort if we hit a combinator
            if (Expr.relative[type = token.type]) {
              break;
            }
            if (find = Expr.find[type]) {
              // Search, expanding context for leading sibling combinators
              if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }
                break;
              }
            }
          }
        }
      }
      // Compile and execute a filtering function
      // Provide `match` to avoid retokenization if we modified the selector above
      compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
      return results;
    }
    // One-time assignments
    // Sort stability
    support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
    // Support: Chrome<14
    // Always assume duplicates if they aren't passed to the comparison function
    support.detectDuplicates = hasDuplicate;
    // Initialize against the default document
    setDocument();
    // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function (div1) {
      // Should return 1, but returns 4 (following)
      return div1.compareDocumentPosition(document.createElement('div')) & 1;
    });
    // Support: IE<8
    // Prevent attribute/property "interpolation"
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!assert(function (div) {
        div.innerHTML = '<a href=\'#\'></a>';
        return div.firstChild.getAttribute('href') === '#';
      })) {
      addHandle('type|href|height|width', function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
        }
      });
    }
    // Support: IE<9
    // Use defaultValue in place of getAttribute("value")
    if (!support.attributes || !assert(function (div) {
        div.innerHTML = '<input/>';
        div.firstChild.setAttribute('value', '');
        return div.firstChild.getAttribute('value') === '';
      })) {
      addHandle('value', function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === 'input') {
          return elem.defaultValue;
        }
      });
    }
    // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies
    if (!assert(function (div) {
        return div.getAttribute('disabled') == null;
      })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;
        if (!isXML) {
          return (val = elem.getAttributeNode(name)) && val.specified ? val.value : elem[name] === true ? name.toLowerCase() : null;
        }
      });
    }
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[':'] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
  }(window));
  // String to Object options format cache
  var optionsCache = {};
  // Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions(options) {
    var object = optionsCache[options] = {};
    jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
    var
      // Last fire value (for non-forgettable lists)
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to know if list is currently firing
      firing,
      // First callback to fire (used internally by add and fireWith)
      firingStart,
      // End of the loop when firing
      firingLength,
      // Index of currently firing callback (modified by remove if needed)
      firingIndex,
      // Actual callback list
      list = [],
      // Stack of fire calls for repeatable lists
      stack = !options.once && [],
      // Fire callbacks
      fire = function (data) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for (; list && firingIndex < firingLength; firingIndex++) {
          if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
            memory = false;
            // To prevent further calls using add
            break;
          }
        }
        firing = false;
        if (list) {
          if (stack) {
            if (stack.length) {
              fire(stack.shift());
            }
          } else if (memory) {
            list = [];
          } else {
            self.disable();
          }
        }
      },
      // Actual Callbacks object
      self = {
        add: function () {
          if (list) {
            // First, we save the current length
            var start = list.length;
            (function add(args) {
              jQuery.each(args, function (_, arg) {
                var type = jQuery.type(arg);
                if (type === 'function') {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && type !== 'string') {
                  // Inspect recursively
                  add(arg);
                }
              });
            }(arguments));
            // Do we need to add the callbacks to the
            // current firing batch?
            if (firing) {
              firingLength = list.length;  // With memory, if we're not firing then
                                           // we should call right away
            } else if (memory) {
              firingStart = start;
              fire(memory);
            }
          }
          return this;
        },
        remove: function () {
          if (list) {
            jQuery.each(arguments, function (_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                // Handle firing indexes
                if (firing) {
                  if (index <= firingLength) {
                    firingLength--;
                  }
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
        },
        empty: function () {
          list = [];
          firingLength = 0;
          return this;
        },
        disable: function () {
          list = stack = memory = undefined;
          return this;
        },
        disabled: function () {
          return !list;
        },
        lock: function () {
          stack = undefined;
          if (!memory) {
            self.disable();
          }
          return this;
        },
        locked: function () {
          return !stack;
        },
        fireWith: function (context, args) {
          if (list && (!fired || stack)) {
            args = args || [];
            args = [
              context,
              args.slice ? args.slice() : args
            ];
            if (firing) {
              stack.push(args);
            } else {
              fire(args);
            }
          }
          return this;
        },
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },
        fired: function () {
          return !!fired;
        }
      };
    return self;
  };
  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          [
            'resolve',
            'done',
            jQuery.Callbacks('once memory'),
            'resolved'
          ],
          [
            'reject',
            'fail',
            jQuery.Callbacks('once memory'),
            'rejected'
          ],
          [
            'notify',
            'progress',
            jQuery.Callbacks('memory')
          ]
        ], state = 'pending', promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          then: function () {
            var fns = arguments;
            return jQuery.Deferred(function (newDefer) {
              jQuery.each(tuples, function (i, tuple) {
                var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && jQuery.isFunction(returned.promise)) {
                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                  } else {
                    newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          }
        }, deferred = {};
      // Keep pipe for back-compat
      promise.pipe = promise.then;
      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2], stateString = tuple[3];
        // promise[ done | fail | progress ] = list.add
        promise[tuple[1]] = list.add;
        // Handle state
        if (stateString) {
          list.add(function () {
            // state = [ resolved | rejected ]
            state = stateString;  // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
        }
        // deferred[ resolve | reject | notify ]
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
          return this;
        };
        deferred[tuple[0] + 'With'] = list.fireWith;
      });
      // Make the deferred a promise
      promise.promise(deferred);
      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }
      // All done!
      return deferred;
    },
    when: function (subordinate) {
      var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length,
        // the count of uncompleted subordinates
        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
        // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
        // Update function for both resolve and progress values
        updateFunc = function (i, contexts, values) {
          return function (value) {
            contexts[i] = this;
            values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
            if (values === progressValues) {
              deferred.notifyWith(contexts, values);
            } else if (!--remaining) {
              deferred.resolveWith(contexts, values);
            }
          };
        }, progressValues, progressContexts, resolveContexts;
      // add listeners to Deferred subordinates; treat others as resolved
      if (length > 1) {
        progressValues = new Array(length);
        progressContexts = new Array(length);
        resolveContexts = new Array(length);
        for (; i < length; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
          } else {
            --remaining;
          }
        }
      }
      // if we're not waiting on anything, resolve the master
      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }
      return deferred.promise();
    }
  });
  jQuery.support = function (support) {
    var input = document.createElement('input'), fragment = document.createDocumentFragment(), div = document.createElement('div'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
    // Finish early in limited environments
    if (!input.type) {
      return support;
    }
    input.type = 'checkbox';
    // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
    // Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
    support.checkOn = input.value !== '';
    // Must access the parent to make an option select properly
    // Support: IE9, IE10
    support.optSelected = opt.selected;
    // Will be defined later
    support.reliableMarginRight = true;
    support.boxSizingReliable = true;
    support.pixelPosition = false;
    // Make sure checked status is properly cloned
    // Support: IE9, IE10
    input.checked = true;
    support.noCloneChecked = input.cloneNode(true).checked;
    // Make sure that the options inside disabled selects aren't marked as disabled
    // (WebKit marks them as disabled)
    select.disabled = true;
    support.optDisabled = !opt.disabled;
    // Check if an input maintains its value after becoming a radio
    // Support: IE9, IE10
    input = document.createElement('input');
    input.value = 't';
    input.type = 'radio';
    support.radioValue = input.value === 't';
    // #11217 - WebKit loses check when the name is after the checked attribute
    input.setAttribute('checked', 't');
    input.setAttribute('name', 't');
    fragment.appendChild(input);
    // Support: Safari 5.1, Android 4.x, Android 2.3
    // old WebKit doesn't clone checked state correctly in fragments
    support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
    // Support: Firefox, Chrome, Safari
    // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
    support.focusinBubbles = 'onfocusin' in window;
    div.style.backgroundClip = 'content-box';
    div.cloneNode(true).style.backgroundClip = '';
    support.clearCloneStyle = div.style.backgroundClip === 'content-box';
    // Run tests that need a body at doc ready
    jQuery(function () {
      var container, marginDiv,
        // Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
        divReset = 'padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box', body = document.getElementsByTagName('body')[0];
      if (!body) {
        // Return for frameset docs that don't have a body
        return;
      }
      container = document.createElement('div');
      container.style.cssText = 'border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px';
      // Check box-sizing and margin behavior.
      body.appendChild(container).appendChild(div);
      div.innerHTML = '';
      // Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
      div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%';
      // Workaround failing boxSizing test due to offsetWidth returning wrong value
      // with some non-1 values of body zoom, ticket #13543
      jQuery.swap(body, body.style.zoom != null ? { zoom: 1 } : {}, function () {
        support.boxSizing = div.offsetWidth === 4;
      });
      // Use window.getComputedStyle because jsdom on node.js will break without it.
      if (window.getComputedStyle) {
        support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== '1%';
        support.boxSizingReliable = (window.getComputedStyle(div, null) || { width: '4px' }).width === '4px';
        // Support: Android 2.3
        // Check if div with explicit width and no margin-right incorrectly
        // gets computed margin-right based on width of container. (#3333)
        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
        marginDiv = div.appendChild(document.createElement('div'));
        marginDiv.style.cssText = div.style.cssText = divReset;
        marginDiv.style.marginRight = marginDiv.style.width = '0';
        div.style.width = '1px';
        support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
      }
      body.removeChild(container);
    });
    return support;
  }({});
  /*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
  var data_user, data_priv, rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;
  function Data() {
    // Support: Android < 4,
    // Old WebKit does not have Object.preventExtensions/freeze method,
    // return new empty object instead with no [[set]] accessor
    Object.defineProperty(this.cache = {}, 0, {
      get: function () {
        return {};
      }
    });
    this.expando = jQuery.expando + Math.random();
  }
  Data.uid = 1;
  Data.accepts = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType ? owner.nodeType === 1 || owner.nodeType === 9 : true;
  };
  Data.prototype = {
    key: function (owner) {
      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return the key for a frozen object.
      if (!Data.accepts(owner)) {
        return 0;
      }
      var descriptor = {},
        // Check if the owner object already has a cache key
        unlock = owner[this.expando];
      // If not, create one
      if (!unlock) {
        unlock = Data.uid++;
        // Secure it in a non-enumerable, non-writable property
        try {
          descriptor[this.expando] = { value: unlock };
          Object.defineProperties(owner, descriptor);  // Support: Android < 4
                                                       // Fallback to a less secure definition
        } catch (e) {
          descriptor[this.expando] = unlock;
          jQuery.extend(owner, descriptor);
        }
      }
      // Ensure the cache object
      if (!this.cache[unlock]) {
        this.cache[unlock] = {};
      }
      return unlock;
    },
    set: function (owner, data, value) {
      var prop,
        // There may be an unlock assigned to this node,
        // if there is no entry for this "owner", create one inline
        // and set the unlock as though an owner entry had always existed
        unlock = this.key(owner), cache = this.cache[unlock];
      // Handle: [ owner, key, value ] args
      if (typeof data === 'string') {
        cache[data] = value;  // Handle: [ owner, { properties } ] args
      } else {
        // Fresh assignments by object are shallow copied
        if (jQuery.isEmptyObject(cache)) {
          jQuery.extend(this.cache[unlock], data);  // Otherwise, copy the properties one-by-one to the cache object
        } else {
          for (prop in data) {
            cache[prop] = data[prop];
          }
        }
      }
      return cache;
    },
    get: function (owner, key) {
      // Either a valid cache is found, or will be created.
      // New caches will be created and the unlock returned,
      // allowing direct access to the newly created
      // empty data object. A valid owner object must be provided.
      var cache = this.cache[this.key(owner)];
      return key === undefined ? cache : cache[key];
    },
    access: function (owner, key, value) {
      var stored;
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === 'string' && value === undefined) {
        stored = this.get(owner, key);
        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
      }
      // [*]When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);
      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
      if (key === undefined) {
        this.cache[unlock] = {};
      } else {
        // Support array or space separated string of keys
        if (jQuery.isArray(key)) {
          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key);
          // Try the string as a key before any manipulation
          if (key in cache) {
            name = [
              key,
              camel
            ];
          } else {
            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ? [name] : name.match(core_rnotwhite) || [];
          }
        }
        i = name.length;
        while (i--) {
          delete cache[name[i]];
        }
      }
    },
    hasData: function (owner) {
      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
    },
    discard: function (owner) {
      if (owner[this.expando]) {
        delete this.cache[owner[this.expando]];
      }
    }
  };
  // These may be used throughout the jQuery core codebase
  data_user = new Data();
  data_priv = new Data();
  jQuery.extend({
    acceptData: Data.accepts,
    hasData: function (elem) {
      return data_user.hasData(elem) || data_priv.hasData(elem);
    },
    data: function (elem, name, data) {
      return data_user.access(elem, name, data);
    },
    removeData: function (elem, name) {
      data_user.remove(elem, name);
    },
    _data: function (elem, name, data) {
      return data_priv.access(elem, name, data);
    },
    _removeData: function (elem, name) {
      data_priv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function (key, value) {
      var attrs, name, elem = this[0], i = 0, data = null;
      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = data_user.get(elem);
          if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
            attrs = elem.attributes;
            for (; i < attrs.length; i++) {
              name = attrs[i].name;
              if (name.indexOf('data-') === 0) {
                name = jQuery.camelCase(name.slice(5));
                dataAttr(elem, name, data[name]);
              }
            }
            data_priv.set(elem, 'hasDataAttrs', true);
          }
        }
        return data;
      }
      // Sets multiple values
      if (typeof key === 'object') {
        return this.each(function () {
          data_user.set(this, key);
        });
      }
      return jQuery.access(this, function (value) {
        var data, camelKey = jQuery.camelCase(key);
        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // with the key as-is
          data = data_user.get(elem, key);
          if (data !== undefined) {
            return data;
          }
          // Attempt to get data from the cache
          // with the key camelized
          data = data_user.get(elem, camelKey);
          if (data !== undefined) {
            return data;
          }
          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, camelKey, undefined);
          if (data !== undefined) {
            return data;
          }
          // We tried really hard, but the data doesn't exist.
          return;
        }
        // Set the data...
        this.each(function () {
          // First, attempt to store a copy or reference of any
          // data that might've been store with a camelCased key.
          var data = data_user.get(this, camelKey);
          // For HTML5 data-* attribute interop, we have to
          // store property names with dashes in a camelCase form.
          // This might not apply to all properties...*
          data_user.set(this, camelKey, value);
          // *... In the case of properties that might _actually_
          // have dashes, we need to also store a copy of that
          // unchanged property.
          if (key.indexOf('-') !== -1 && data !== undefined) {
            data_user.set(this, key, value);
          }
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function (key) {
      return this.each(function () {
        data_user.remove(this, key);
      });
    }
  });
  function dataAttr(elem, key, data) {
    var name;
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === 'string') {
        try {
          data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? JSON.parse(data) : data;
        } catch (e) {
        }
        // Make sure we set the data so it isn't changed later
        data_user.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;
      if (elem) {
        type = (type || 'fx') + 'queue';
        queue = data_priv.get(elem, type);
        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || jQuery.isArray(data)) {
            queue = data_priv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function (elem, type) {
      type = type || 'fx';
      var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
          jQuery.dequeue(elem, type);
        };
      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === 'inprogress') {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === 'fx') {
          queue.unshift('inprogress');
        }
        // clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    _queueHooks: function (elem, type) {
      var key = type + 'queueHooks';
      return data_priv.get(elem, key) || data_priv.access(elem, key, {
        empty: jQuery.Callbacks('once memory').add(function () {
          data_priv.remove(elem, [
            type + 'queue',
            key
          ]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;
      if (typeof type !== 'string') {
        data = type;
        type = 'fx';
        setter--;
      }
      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data);
        // ensure a hooks for this queue
        jQuery._queueHooks(this, type);
        if (type === 'fx' && queue[0] !== 'inprogress') {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    delay: function (time, type) {
      time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
      type = type || 'fx';
      return this.queue(type, function (next, hooks) {
        var timeout = setTimeout(next, time);
        hooks.stop = function () {
          clearTimeout(timeout);
        };
      });
    },
    clearQueue: function (type) {
      return this.queue(type || 'fx', []);
    },
    promise: function (type, obj) {
      var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== 'string') {
        obj = type;
        type = undefined;
      }
      type = type || 'fx';
      while (i--) {
        tmp = data_priv.get(elements[i], type + 'queueHooks');
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var nodeHook, boolHook, rclass = /[\t\r\n\f]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button)$/i;
  jQuery.fn.extend({
    attr: function (name, value) {
      return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    },
    prop: function (name, value) {
      return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    },
    addClass: function (value) {
      var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = typeof value === 'string' && value;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        // The disjunction here is for better compressibility (see removeClass)
        classes = (value || '').match(core_rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              if (cur.indexOf(' ' + clazz + ' ') < 0) {
                cur += clazz + ' ';
              }
            }
            elem.className = jQuery.trim(cur);
          }
        }
      }
      return this;
    },
    removeClass: function (value) {
      var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === 'string' && value;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        classes = (value || '').match(core_rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                cur = cur.replace(' ' + clazz + ' ', ' ');
              }
            }
            elem.className = value ? jQuery.trim(cur) : '';
          }
        }
      }
      return this;
    },
    toggleClass: function (value, stateVal) {
      var type = typeof value;
      if (typeof stateVal === 'boolean' && type === 'string') {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      if (jQuery.isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
        });
      }
      return this.each(function () {
        if (type === 'string') {
          // toggle individual class names
          var className, i = 0, self = jQuery(this), classNames = value.match(core_rnotwhite) || [];
          while (className = classNames[i++]) {
            // check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }  // Toggle whole class name
        } else if (type === core_strundefined || type === 'boolean') {
          if (this.className) {
            // store className if set
            data_priv.set(this, '__className__', this.className);
          }
          // If the element has a class name or if we're passed "false",
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
        }
      });
    },
    hasClass: function (selector) {
      var className = ' ' + selector + ' ', i = 0, l = this.length;
      for (; i < l; i++) {
        if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
          return true;
        }
      }
      return false;
    },
    val: function (value) {
      var hooks, ret, isFunction, elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
            return ret;
          }
          ret = elem.value;
          return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
        }
        return;
      }
      isFunction = jQuery.isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (isFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }
        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = '';
        } else if (typeof val === 'number') {
          val += '';
        } else if (jQuery.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? '' : value + '';
          });
        }
        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
        // If set returns undefined, fall back to normal setting
        if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          // attributes.value is undefined in Blackberry 4.7 but
          // uses .value. See #6932
          var val = elem.attributes.value;
          return !val || val.specified ? elem.value : elem.text;
        }
      },
      select: {
        get: function (elem) {
          var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];
            // IE6-9 doesn't update selected after form reset (#2551)
            if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
              // Get the specific value for the option
              value = jQuery(option).val();
              // We don't need an array for one selects
              if (one) {
                return value;
              }
              // Multi-Selects return an array
              values.push(value);
            }
          }
          return values;
        },
        set: function (elem, value) {
          var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
          while (i--) {
            option = options[i];
            if (option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0) {
              optionSet = true;
            }
          }
          // force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    },
    attr: function (elem, name, value) {
      var hooks, ret, nType = elem.nodeType;
      // don't get/set attributes on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === core_strundefined) {
        return jQuery.prop(elem, name, value);
      }
      // All attributes are lowercase
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
      }
      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
        } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        } else {
          elem.setAttribute(name, value + '');
          return value;
        }
      } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      } else {
        ret = jQuery.find.attr(elem, name);
        // Non-existent attributes return null, we normalize to undefined
        return ret == null ? undefined : ret;
      }
    },
    removeAttr: function (elem, value) {
      var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          propName = jQuery.propFix[name] || name;
          // Boolean attributes get special treatment (#10870)
          if (jQuery.expr.match.bool.test(name)) {
            // Set corresponding property to false
            elem[propName] = false;
          }
          elem.removeAttribute(name);
        }
      }
    },
    attrHooks: {
      type: {
        set: function (elem, value) {
          if (!jQuery.support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
            // Setting the type on a radio button after the value resets the value in IE6-9
            // Reset value to default in case type is set after value during creation
            var val = elem.value;
            elem.setAttribute('type', value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    },
    propFix: {
      'for': 'htmlFor',
      'class': 'className'
    },
    prop: function (elem, name, value) {
      var ret, hooks, notxml, nType = elem.nodeType;
      // don't get/set properties on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
      if (notxml) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }
      if (value !== undefined) {
        return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
      } else {
        return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
      }
    },
    propHooks: {
      tabIndex: {
        get: function (elem) {
          return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
        }
      }
    }
  });
  // Hooks for boolean attributes
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
    jQuery.expr.attrHandle[name] = function (elem, name, isXML) {
      var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;
      // Restore handler
      jQuery.expr.attrHandle[name] = fn;
      return ret;
    };
  });
  // Support: IE9+
  // Selectedness for an option in an optgroup can be inaccurate
  if (!jQuery.support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      }
    };
  }
  jQuery.each([
    'tabIndex',
    'readOnly',
    'maxLength',
    'cellSpacing',
    'cellPadding',
    'rowSpan',
    'colSpan',
    'useMap',
    'frameBorder',
    'contentEditable'
  ], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  // Radios and checkboxes getter/setter
  jQuery.each([
    'radio',
    'checkbox'
  ], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (jQuery.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
        }
      }
    };
    if (!jQuery.support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        // Support: Webkit
        // "" is returned instead of "on" if a value isn't specified
        return elem.getAttribute('value') === null ? 'on' : elem.value;
      };
    }
  });
  var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {
    }
  }
  /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
  jQuery.event = {
    global: {},
    add: function (elem, types, handler, data, selector) {
      var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
      // Don't attach events to noData or text/comment nodes (but allow plain objects)
      if (!elemData) {
        return;
      }
      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }
      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }
      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
        };
        // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
        eventHandle.elem = elem;
      }
      // Handle multiple events separated by a space
      types = (types || '').match(core_rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }
        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};
        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;
        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};
        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join('.')
        }, handleObjIn);
        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;
          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle, false);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }
        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }
        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
      // Nullify elem to prevent memory leaks in IE
      elem = null;
    },
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }
      // Once for each type.namespace in types; type may be omitted
      types = (types || '').match(core_rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }
        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }
      // Remove the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        delete elemData.handle;
        data_priv.remove(elem, 'events');
      }
    },
    trigger: function (event, data, elem, onlyHandlers) {
      var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = core_hasOwn.call(event, 'type') ? event.type : event, namespaces = core_hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
      cur = tmp = elem = elem || document;
      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }
      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }
      if (type.indexOf('.') >= 0) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split('.');
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(':') < 0 && 'on' + type;
      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join('.');
      event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }
      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);
      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }
      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }
        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }
      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        event.type = i > 1 ? bubbleType : special.bindType || type;
        // jQuery handler
        handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
        if (handle) {
          handle.apply(cur, data);
        }
        // Native handler
        handle = ontype && cur[ontype];
        if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
          event.preventDefault();
        }
      }
      event.type = type;
      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
          // Call a native DOM method on the target with the same name name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }
            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            elem[type]();
            jQuery.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    dispatch: function (event) {
      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(event);
      var i, j, ret, matched, handleObj, handlerQueue = [], args = core_slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      event.delegateTarget = this;
      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }
      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);
      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // Triggered event must either 1) have no namespace, or
          // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }
      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function (event, handlers) {
      var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
      // Find delegate handlers
      // Black-hole SVG <use> instance trees (#13180)
      // Avoid non-left-click bubbling in Firefox (#3861)
      if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.disabled !== true || event.type !== 'click') {
            matches = [];
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];
              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + ' ';
              if (matches[sel] === undefined) {
                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matches[sel]) {
                matches.push(handleObj);
              }
            }
            if (matches.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matches
              });
            }
          }
        }
      }
      // Add the remaining (directly-bound) handlers
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: this,
          handlers: handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
    fixHooks: {},
    keyHooks: {
      props: 'char charCode key keyCode'.split(' '),
      filter: function (event, original) {
        // Add which for key events
        if (event.which == null) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }
        return event;
      }
    },
    mouseHooks: {
      props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
      filter: function (event, original) {
        var eventDoc, doc, body, button = original.button;
        // Calculate pageX/Y if missing and clientX/Y available
        if (event.pageX == null && original.clientX != null) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;
          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
        // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it
        if (!event.which && button !== undefined) {
          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }
        return event;
      }
    },
    fix: function (event) {
      if (event[jQuery.expando]) {
        return event;
      }
      // Create a writable copy of the event object and normalize some properties
      var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
      if (!fixHook) {
        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      event = new jQuery.Event(originalEvent);
      i = copy.length;
      while (i--) {
        prop = copy[i];
        event[prop] = originalEvent[prop];
      }
      // Support: Cordova 2.5 (WebKit) (#13255)
      // All events should have a target; Cordova deviceready doesn't
      if (!event.target) {
        event.target = document;
      }
      // Support: Safari 6.0+, Chrome < 28
      // Target should not be a text node (#504, #13143)
      if (event.target.nodeType === 3) {
        event.target = event.target.parentNode;
      }
      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    },
    special: {
      load: { noBubble: true },
      focus: {
        trigger: function () {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: 'focusin'
      },
      blur: {
        trigger: function () {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: 'focusout'
      },
      click: {
        trigger: function () {
          if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
            this.click();
            return false;
          }
        },
        _default: function (event) {
          return jQuery.nodeName(event.target, 'a');
        }
      },
      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    },
    simulate: function (type, elem, event, bubble) {
      // Piggyback on a donor event to simulate a different one.
      // Fake originalEvent to avoid donor's stopPropagation, but if the
      // simulated event prevents default then we do the same on the donor.
      var e = jQuery.extend(new jQuery.Event(), event, {
          type: type,
          isSimulated: true,
          originalEvent: {}
        });
      if (bubble) {
        jQuery.event.trigger(e, null, elem);
      } else {
        jQuery.event.dispatch.call(elem, e);
      }
      if (e.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  jQuery.removeEvent = function (elem, type, handle) {
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle, false);
    }
  };
  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }
    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;
      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;  // Event type
    } else {
      this.type = src;
    }
    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }
    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();
    // Mark it as fixed
    this[jQuery.expando] = true;
  };
  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    preventDefault: function () {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && e.preventDefault) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && e.stopPropagation) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      this.isImmediatePropagationStopped = returnTrue;
      this.stopPropagation();
    }
  };
  // Create mouseenter/leave events using mouseover/out and event-time checks
  // Support: Chrome 15+
  jQuery.each({
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function (event) {
        var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
        // For mousenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  // Create "bubbling" focus and blur events
  // Support: Firefox, Chrome, Safari
  if (!jQuery.support.focusinBubbles) {
    jQuery.each({
      focus: 'focusin',
      blur: 'focusout'
    }, function (orig, fix) {
      // Attach a single capturing handler while someone wants focusin/focusout
      var attaches = 0, handler = function (event) {
          jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
        };
      jQuery.event.special[fix] = {
        setup: function () {
          if (attaches++ === 0) {
            document.addEventListener(orig, handler, true);
          }
        },
        teardown: function () {
          if (--attaches === 0) {
            document.removeEventListener(orig, handler, true);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    on: function (types, selector, data, fn, one) {
      var origFn, type;
      // Types can be a map of types/handlers
      if (typeof types === 'object') {
        // ( types-Object, selector, data )
        if (typeof selector !== 'string') {
          // ( types-Object, data )
          data = data || selector;
          selector = undefined;
        }
        for (type in types) {
          this.on(type, selector, data, types[type], one);
        }
        return this;
      }
      if (data == null && fn == null) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
      } else if (fn == null) {
        if (typeof selector === 'string') {
          // ( types, selector, fn )
          fn = data;
          data = undefined;
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if (fn === false) {
        fn = returnFalse;
      } else if (!fn) {
        return this;
      }
      if (one === 1) {
        origFn = fn;
        fn = function (event) {
          // Can use an empty set, since event contains the info
          jQuery().off(event);
          return origFn.apply(this, arguments);
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
      }
      return this.each(function () {
        jQuery.event.add(this, types, fn, data, selector);
      });
    },
    one: function (types, selector, data, fn) {
      return this.on(types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (typeof types === 'object') {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  var isSimple = /^.[^:#\[\.,]*$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, rneedsContext = jQuery.expr.match.needsContext,
    // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  jQuery.fn.extend({
    find: function (selector) {
      var i, ret = [], self = this, len = self.length;
      if (typeof selector !== 'string') {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }
      // Needed because $( selector, context ) becomes $( context ).find( selector )
      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
      ret.selector = this.selector ? this.selector + ' ' + selector : selector;
      return ret;
    },
    has: function (target) {
      var targets = jQuery(target, this), l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    is: function (selector) {
      return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    },
    closest: function (selectors, context) {
      var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
      for (; i < l; i++) {
        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
          // Always skip document fragments
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
            cur = matched.push(cur);
            break;
          }
        }
      }
      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
    },
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }
      // index in selector
      if (typeof elem === 'string') {
        return core_indexOf.call(jQuery(elem), this[0]);
      }
      // Locate the position of the desired element
      return core_indexOf.call(this, elem.jquery ? elem[0] : elem);
    },
    add: function (selector, context) {
      var set = typeof selector === 'string' ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector), all = jQuery.merge(this.get(), set);
      return this.pushStack(jQuery.unique(all));
    },
    addBack: function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {
    }
    return cur;
  }
  jQuery.each({
    parent: function (elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function (elem) {
      return jQuery.dir(elem, 'parentNode');
    },
    parentsUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'parentNode', until);
    },
    next: function (elem) {
      return sibling(elem, 'nextSibling');
    },
    prev: function (elem) {
      return sibling(elem, 'previousSibling');
    },
    nextAll: function (elem) {
      return jQuery.dir(elem, 'nextSibling');
    },
    prevAll: function (elem) {
      return jQuery.dir(elem, 'previousSibling');
    },
    nextUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'nextSibling', until);
    },
    prevUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'previousSibling', until);
    },
    siblings: function (elem) {
      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    },
    children: function (elem) {
      return jQuery.sibling(elem.firstChild);
    },
    contents: function (elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);
      if (name.slice(-5) !== 'Until') {
        selector = until;
      }
      if (selector && typeof selector === 'string') {
        matched = jQuery.filter(selector, matched);
      }
      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.unique(matched);
        }
        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  jQuery.extend({
    filter: function (expr, elems, not) {
      var elem = elems[0];
      if (not) {
        expr = ':not(' + expr + ')';
      }
      return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
        return elem.nodeType === 1;
      }));
    },
    dir: function (elem, dir, until) {
      var matched = [], truncate = until !== undefined;
      while ((elem = elem[dir]) && elem.nodeType !== 9) {
        if (elem.nodeType === 1) {
          if (truncate && jQuery(elem).is(until)) {
            break;
          }
          matched.push(elem);
        }
      }
      return matched;
    },
    sibling: function (n, elem) {
      var matched = [];
      for (; n; n = n.nextSibling) {
        if (n.nodeType === 1 && n !== elem) {
          matched.push(n);
        }
      }
      return matched;
    }
  });
  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (jQuery.isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        /* jshint -W018 */
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }
    if (typeof qualifier === 'string') {
      if (isSimple.test(qualifier)) {
        return jQuery.filter(qualifier, elements, not);
      }
      qualifier = jQuery.filter(qualifier, elements);
    }
    return jQuery.grep(elements, function (elem) {
      return core_indexOf.call(qualifier, elem) >= 0 !== not;
    });
  }
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    // We have to close these tags to support XHTML (#13200)
    wrapMap = {
      option: [
        1,
        '<select multiple=\'multiple\'>',
        '</select>'
      ],
      thead: [
        1,
        '<table>',
        '</table>'
      ],
      col: [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      tr: [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      td: [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      _default: [
        0,
        '',
        ''
      ]
    };
  // Support: IE 9
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  jQuery.fn.extend({
    text: function (value) {
      return jQuery.access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
      }, null, value, arguments.length);
    },
    append: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    remove: function (selector, keepData) {
      var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
      for (; (elem = elems[i]) != null; i++) {
        if (!keepData && elem.nodeType === 1) {
          jQuery.cleanData(getAll(elem));
        }
        if (elem.parentNode) {
          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
            setGlobalEval(getAll(elem, 'script'));
          }
          elem.parentNode.removeChild(elem);
        }
      }
      return this;
    },
    empty: function () {
      var elem, i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));
          // Remove any remaining nodes
          elem.textContent = '';
        }
      }
      return this;
    },
    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function (value) {
      return jQuery.access(this, function (value) {
        var elem = this[0] || {}, i = 0, l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }
        // See if we can take a shortcut and just use innerHTML
        if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
            '',
            ''
          ])[1].toLowerCase()]) {
          value = value.replace(rxhtmlTag, '<$1></$2>');
          try {
            for (; i < l; i++) {
              elem = this[i] || {};
              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;  // If using innerHTML throws an exception, use the fallback method
          } catch (e) {
          }
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function () {
      var
        // Snapshot the DOM in case .domManip sweeps something relevant into its fragment
        args = jQuery.map(this, function (elem) {
          return [
            elem.nextSibling,
            elem.parentNode
          ];
        }), i = 0;
      // Make the changes, replacing each context element with the new content
      this.domManip(arguments, function (elem) {
        var next = args[i++], parent = args[i++];
        if (parent) {
          // Don't use the snapshot next if it has moved (#13810)
          if (next && next.parentNode !== parent) {
            next = this.nextSibling;
          }
          jQuery(this).remove();
          parent.insertBefore(elem, next);
        }  // Allow new content to include elements from the context set
      }, true);
      // Force removal if there was no new content (e.g., from empty arguments)
      return i ? this : this.remove();
    },
    detach: function (selector) {
      return this.remove(selector, true);
    },
    domManip: function (args, callback, allowIntersection) {
      // Flatten any nested arrays
      args = core_concat.apply([], args);
      var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
      // We can't cloneNode fragments that contain checked, in WebKit
      if (isFunction || !(l <= 1 || typeof value !== 'string' || jQuery.support.checkClone || !rchecked.test(value))) {
        return this.each(function (index) {
          var self = set.eq(index);
          if (isFunction) {
            args[0] = value.call(this, index, self.html());
          }
          self.domManip(args, callback, allowIntersection);
        });
      }
      if (l) {
        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection && this);
        first = fragment.firstChild;
        if (fragment.childNodes.length === 1) {
          fragment = first;
        }
        if (first) {
          scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
          hasScripts = scripts.length;
          // Use the original fragment for the last item instead of the first because it can end up
          // being emptied incorrectly in certain situations (#8070).
          for (; i < l; i++) {
            node = fragment;
            if (i !== iNoClone) {
              node = jQuery.clone(node, true, true);
              // Keep references to cloned scripts for later restoration
              if (hasScripts) {
                // Support: QtWebKit
                // jQuery.merge because core_push.apply(_, arraylike) throws
                jQuery.merge(scripts, getAll(node, 'script'));
              }
            }
            callback.call(this[i], node, i);
          }
          if (hasScripts) {
            doc = scripts[scripts.length - 1].ownerDocument;
            // Reenable scripts
            jQuery.map(scripts, restoreScript);
            // Evaluate executable scripts on first document insertion
            for (i = 0; i < hasScripts; i++) {
              node = scripts[i];
              if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                if (node.src) {
                  // Hope ajax is available...
                  jQuery._evalUrl(node.src);
                } else {
                  jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                }
              }
            }
          }
        }
      }
      return this;
    }
  });
  jQuery.each({
    appendTo: 'append',
    prependTo: 'prepend',
    insertBefore: 'before',
    insertAfter: 'after',
    replaceAll: 'replaceWith'
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems);
        // Support: QtWebKit
        // .get() because core_push.apply(_, arraylike) throws
        core_push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  jQuery.extend({
    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
      // Support: IE >= 9
      // Fix Cloning issues
      if (!jQuery.support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }
      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }
      // Preserve script evaluation history
      destElements = getAll(clone, 'script');
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
      }
      // Return the cloned set
      return clone;
    },
    buildFragment: function (elems, context, scripts, selection) {
      var elem, tmp, tag, wrap, contains, j, i = 0, l = elems.length, fragment = context.createDocumentFragment(), nodes = [];
      for (; i < l; i++) {
        elem = elems[i];
        if (elem || elem === 0) {
          // Add nodes directly
          if (jQuery.type(elem) === 'object') {
            // Support: QtWebKit
            // jQuery.merge because core_push.apply(_, arraylike) throws
            jQuery.merge(nodes, elem.nodeType ? [elem] : elem);  // Convert non-html into a text node
          } else if (!rhtml.test(elem)) {
            nodes.push(context.createTextNode(elem));  // Convert html into DOM nodes
          } else {
            tmp = tmp || fragment.appendChild(context.createElement('div'));
            // Deserialize a standard representation
            tag = (rtagName.exec(elem) || [
              '',
              ''
            ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
            // Descend through wrappers to the right content
            j = wrap[0];
            while (j--) {
              tmp = tmp.lastChild;
            }
            // Support: QtWebKit
            // jQuery.merge because core_push.apply(_, arraylike) throws
            jQuery.merge(nodes, tmp.childNodes);
            // Remember the top-level container
            tmp = fragment.firstChild;
            // Fixes #12346
            // Support: Webkit, IE
            tmp.textContent = '';
          }
        }
      }
      // Remove wrapper from fragment
      fragment.textContent = '';
      i = 0;
      while (elem = nodes[i++]) {
        // #4087 - If origin and destination elements are the same, and this is
        // that element, do not do anything
        if (selection && jQuery.inArray(elem, selection) !== -1) {
          continue;
        }
        contains = jQuery.contains(elem.ownerDocument, elem);
        // Append to fragment
        tmp = getAll(fragment.appendChild(elem), 'script');
        // Preserve script evaluation history
        if (contains) {
          setGlobalEval(tmp);
        }
        // Capture executables
        if (scripts) {
          j = 0;
          while (elem = tmp[j++]) {
            if (rscriptType.test(elem.type || '')) {
              scripts.push(elem);
            }
          }
        }
      }
      return fragment;
    },
    cleanData: function (elems) {
      var data, elem, events, type, key, j, special = jQuery.event.special, i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (Data.accepts(elem)) {
          key = elem[data_priv.expando];
          if (key && (data = data_priv.cache[key])) {
            events = Object.keys(data.events || {});
            if (events.length) {
              for (j = 0; (type = events[j]) !== undefined; j++) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }
            if (data_priv.cache[key]) {
              // Discard any remaining `private` data
              delete data_priv.cache[key];
            }
          }
        }
        // Discard any remaining `user` data
        delete data_user.cache[elem[data_user.expando]];
      }
    },
    _evalUrl: function (url) {
      return jQuery.ajax({
        url: url,
        type: 'GET',
        dataType: 'script',
        async: false,
        global: false,
        'throws': true
      });
    }
  });
  // Support: 1.x compatibility
  // Manipulating tables requires a tbody
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType === 1 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
  }
  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    var match = rscriptTypeMasked.exec(elem.type);
    if (match) {
      elem.type = match[1];
    } else {
      elem.removeAttribute('type');
    }
    return elem;
  }
  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var l = elems.length, i = 0;
    for (; i < l; i++) {
      data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
    }
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }
    // 1. Copy private data: events, handlers, etc.
    if (data_priv.hasData(src)) {
      pdataOld = data_priv.access(src);
      pdataCur = data_priv.set(dest, pdataOld);
      events = pdataOld.events;
      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }
    // 2. Copy user data
    if (data_user.hasData(src)) {
      udataOld = data_user.access(src);
      udataCur = jQuery.extend({}, udataOld);
      data_user.set(dest, udataCur);
    }
  }
  function getAll(context, tag) {
    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  }
  // Support: IE >= 9
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();
    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === 'input' && manipulation_rcheckableType.test(src.type)) {
      dest.checked = src.checked;  // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === 'input' || nodeName === 'textarea') {
      dest.defaultValue = src.defaultValue;
    }
  }
  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapAll(html.call(this, i));
        });
      }
      if (this[0]) {
        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function () {
          var elem = this;
          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner: function (html) {
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }
      return this.each(function () {
        var self = jQuery(this), contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function (html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function () {
      return this.parent().each(function () {
        if (!jQuery.nodeName(this, 'body')) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });
  var curCSS, iframe,
    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp('^(' + core_pnum + ')(.*)$', 'i'), rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i'), rrelNum = new RegExp('^([+-])=(' + core_pnum + ')', 'i'), elemdisplay = { BODY: 'block' }, cssShow = {
      position: 'absolute',
      visibility: 'hidden',
      display: 'block'
    }, cssNormalTransform = {
      letterSpacing: 0,
      fontWeight: 400
    }, cssExpand = [
      'Top',
      'Right',
      'Bottom',
      'Left'
    ], cssPrefixes = [
      'Webkit',
      'O',
      'Moz',
      'ms'
    ];
  // return a css property mapped to a potentially vendor prefixed property
  function vendorPropName(style, name) {
    // shortcut for names that are not vendor prefixed
    if (name in style) {
      return name;
    }
    // check for vendor prefixed names
    var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in style) {
        return name;
      }
    }
    return origName;
  }
  function isHidden(elem, el) {
    // isHidden might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;
    return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
  }
  // NOTE: we've included the "window" in window.getComputedStyle
  // because jsdom on node.js will break without it.
  function getStyles(elem) {
    return window.getComputedStyle(elem, null);
  }
  function showHide(elements, show) {
    var display, elem, hidden, values = [], index = 0, length = elements.length;
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      values[index] = data_priv.get(elem, 'olddisplay');
      display = elem.style.display;
      if (show) {
        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if (!values[index] && display === 'none') {
          elem.style.display = '';
        }
        // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element
        if (elem.style.display === '' && isHidden(elem)) {
          values[index] = data_priv.access(elem, 'olddisplay', css_defaultDisplay(elem.nodeName));
        }
      } else {
        if (!values[index]) {
          hidden = isHidden(elem);
          if (display && display !== 'none' || !hidden) {
            data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
          }
        }
      }
    }
    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for (index = 0; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      if (!show || elem.style.display === 'none' || elem.style.display === '') {
        elem.style.display = show ? values[index] || '' : 'none';
      }
    }
    return elements;
  }
  jQuery.fn.extend({
    css: function (name, value) {
      return jQuery.access(this, function (elem, name, value) {
        var styles, len, map = {}, i = 0;
        if (jQuery.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;
          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }
          return map;
        }
        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    },
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === 'boolean') {
        return state ? this.show() : this.hide();
      }
      return this.each(function () {
        if (isHidden(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  jQuery.extend({
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, 'opacity');
            return ret === '' ? '1' : ret;
          }
        }
      }
    },
    cssNumber: {
      'columnCount': true,
      'fillOpacity': true,
      'fontWeight': true,
      'lineHeight': true,
      'opacity': true,
      'order': true,
      'orphans': true,
      'widows': true,
      'zIndex': true,
      'zoom': true
    },
    cssProps: { 'float': 'cssFloat' },
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }
      // Make sure that we're working with the right name
      var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;
        // convert relative number strings (+= or -=) to relative numbers. #7345
        if (type === 'string' && (ret = rrelNum.exec(value))) {
          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
          // Fixes bug #9237
          type = 'number';
        }
        // Make sure that NaN and null values aren't set. See: #7116
        if (value == null || type === 'number' && isNaN(value)) {
          return;
        }
        // If a number was passed in, add 'px' to the (except for certain CSS properties)
        if (type === 'number' && !jQuery.cssNumber[origName]) {
          value += 'px';
        }
        // Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
        // but it would mean to define eight (for every problematic property) identical functions
        if (!jQuery.support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
          style[name] = 'inherit';
        }
        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          style[name] = value;
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }
        // Otherwise just get the value from the style object
        return style[name];
      }
    },
    css: function (elem, name, extra, styles) {
      var val, num, hooks, origName = jQuery.camelCase(name);
      // Make sure that we're working with the right name
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // If a hook was provided get the computed value from there
      if (hooks && 'get' in hooks) {
        val = hooks.get(elem, true, extra);
      }
      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }
      //convert "normal" to computed value
      if (val === 'normal' && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }
      // Return, converting to number if forced or a qualifier was provided and val looks numeric
      if (extra === '' || extra) {
        num = parseFloat(val);
        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
      }
      return val;
    }
  });
  curCSS = function (elem, name, _computed) {
    var width, minWidth, maxWidth, computed = _computed || getStyles(elem),
      // Support: IE9
      // getPropertyValue is only needed for .css('filter') in IE9, see #12537
      ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
    if (computed) {
      if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
        ret = jQuery.style(elem, name);
      }
      // Support: Safari 5.1
      // A tribute to the "awesome hack by Dean Edwards"
      // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
      // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
      if (rnumnonpx.test(ret) && rmargin.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;
        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;
        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
    return ret;
  };
  function setPositiveNumber(elem, value, subtract) {
    var matches = rnumsplit.exec(value);
    return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
  }
  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
    for (; i < 4; i += 2) {
      // both box models exclude margin, so add it if we want it
      if (extra === 'margin') {
        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
      }
      if (isBorderBox) {
        // border-box includes padding, so remove it if we want content
        if (extra === 'content') {
          val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        }
        // at this point, extra isn't border nor margin, so remove border
        if (extra !== 'margin') {
          val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      } else {
        // at this point, extra isn't content, so add padding
        val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        // at this point, extra isn't content nor padding, so add border
        if (extra !== 'padding') {
          val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      }
    }
    return val;
  }
  function getWidthOrHeight(elem, name, extra) {
    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
    // some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if (val <= 0 || val == null) {
      // Fall back to computed then uncomputed css if necessary
      val = curCSS(elem, name, styles);
      if (val < 0 || val == null) {
        val = elem.style[name];
      }
      // Computed unit is not pixels. Stop here and return.
      if (rnumnonpx.test(val)) {
        return val;
      }
      // we need the check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style
      valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
      // Normalize "", auto, and prepare for extra
      val = parseFloat(val) || 0;
    }
    // use the active box-sizing model to add/subtract irrelevant styles
    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
  }
  // Try to determine the default display value of an element
  function css_defaultDisplay(nodeName) {
    var doc = document, display = elemdisplay[nodeName];
    if (!display) {
      display = actualDisplay(nodeName, doc);
      // If the simple way fails, read from inside an iframe
      if (display === 'none' || !display) {
        // Use the already-created iframe if possible
        iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>').css('cssText', 'display:block !important')).appendTo(doc.documentElement);
        // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
        doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
        doc.write('<!doctype html><html><body>');
        doc.close();
        display = actualDisplay(nodeName, doc);
        iframe.detach();
      }
      // Store the correct default display
      elemdisplay[nodeName] = display;
    }
    return display;
  }
  // Called ONLY from within css_defaultDisplay
  function actualDisplay(name, doc) {
    var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], 'display');
    elem.remove();
    return display;
  }
  jQuery.each([
    'height',
    'width'
  ], function (i, name) {
    jQuery.cssHooks[name] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // certain elements can have dimension info if we invisibly show them
          // however, it must have a current display style that would benefit from this
          return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, 'display')) ? jQuery.swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, name, extra);
          }) : getWidthOrHeight(elem, name, extra);
        }
      },
      set: function (elem, value, extra) {
        var styles = extra && getStyles(elem);
        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
      }
    };
  });
  // These hooks cannot be added until DOM ready because the support test
  // for it is not run until after DOM ready
  jQuery(function () {
    // Support: Android 2.3
    if (!jQuery.support.reliableMarginRight) {
      jQuery.cssHooks.marginRight = {
        get: function (elem, computed) {
          if (computed) {
            // Support: Android 2.3
            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
            // Work around by temporarily setting element display to inline-block
            return jQuery.swap(elem, { 'display': 'inline-block' }, curCSS, [
              elem,
              'marginRight'
            ]);
          }
        }
      };
    }
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // getComputedStyle returns percent when specified for top/left/bottom/right
    // rather than make the css module depend on the offset module, we just check for it here
    if (!jQuery.support.pixelPosition && jQuery.fn.position) {
      jQuery.each([
        'top',
        'left'
      ], function (i, prop) {
        jQuery.cssHooks[prop] = {
          get: function (elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);
              // if curCSS returns percentage, fallback to offset
              return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
            }
          }
        };
      });
    }
  });
  if (jQuery.expr && jQuery.expr.filters) {
    jQuery.expr.filters.hidden = function (elem) {
      // Support: Opera <= 12.12
      // Opera reports offsetWidths and offsetHeights less than zero on some elements
      return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
    };
    jQuery.expr.filters.visible = function (elem) {
      return !jQuery.expr.filters.hidden(elem);
    };
  }
  // These hooks are used by animate to expand properties
  jQuery.each({
    margin: '',
    padding: '',
    border: 'Width'
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function (value) {
        var i = 0, expanded = {},
          // assumes a single number if not a string
          parts = typeof value === 'string' ? value.split(' ') : [value];
        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }
        return expanded;
      }
    };
    if (!rmargin.test(prefix)) {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, 'elements');
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;
        // Use .is(":disabled") so that fieldset[disabled] works
        return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();
        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
          return {
            name: elem.name,
            value: val.replace(rCRLF, '\r\n')
          };
        }) : {
          name: elem.name,
          value: val.replace(rCRLF, '\r\n')
        };
      }).get();
    }
  });
  //Serialize an array of form elements or a set of
  //key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix, s = [], add = function (key, value) {
        // If value is a function, invoke it and return its value
        value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
        s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
      };
    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if (traditional === undefined) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }
    // If an array was passed in, assume that it is an array of form elements.
    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }
    // Return the resulting serialization
    return s.join('&').replace(r20, '+');
  };
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (jQuery.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
        }
      });
    } else if (!traditional && jQuery.type(obj) === 'object') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }
  jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
    }
  });
  var
    // Document location
    ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
    // Keep a copy of the old load method
    _load = jQuery.fn.load,
    /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
    prefilters = {},
    /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
    transports = {},
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = '*/'.concat('*');
  // #8138, IE may throw an exception when accessing
  // a field from window.location if document.domain has been set
  try {
    ajaxLocation = location.href;
  } catch (e) {
    // Use the href attribute of an A element
    // since IE will modify it given document.location
    ajaxLocation = document.createElement('a');
    ajaxLocation.href = '';
    ajaxLocation = ajaxLocation.href;
  }
  // Segment location into parts
  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== 'string') {
        func = dataTypeExpression;
        dataTypeExpression = '*';
      }
      var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
      if (jQuery.isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === '+') {
            dataType = dataType.slice(1) || '*';
            (structure[dataType] = structure[dataType] || []).unshift(func);  // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }
  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {}, seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
  }
  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend(target, src) {
    var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }
    return target;
  }
  jQuery.fn.load = function (url, params, callback) {
    if (typeof url !== 'string' && _load) {
      return _load.apply(this, arguments);
    }
    var selector, type, response, self = this, off = url.indexOf(' ');
    if (off >= 0) {
      selector = url.slice(off);
      url = url.slice(0, off);
    }
    // If it's a function
    if (jQuery.isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;  // Otherwise, build a param string
    } else if (params && typeof params === 'object') {
      type = 'POST';
    }
    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        type: type,
        dataType: 'html',
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
      }).complete(callback && function (jqXHR, status) {
        self.each(callback, response || [
          jqXHR.responseText,
          status,
          jqXHR
        ]);
      });
    }
    return this;
  };
  // Attach a bunch of functions for handling common AJAX events
  jQuery.each([
    'ajaxStart',
    'ajaxStop',
    'ajaxComplete',
    'ajaxError',
    'ajaxSuccess',
    'ajaxSend'
  ], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: ajaxLocation,
      type: 'GET',
      isLocal: rlocalProtocol.test(ajaxLocParts[1]),
      global: true,
      processData: true,
      async: true,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
      accepts: {
        '*': allTypes,
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript'
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: 'responseXML',
        text: 'responseText',
        json: 'responseJSON'
      },
      converters: {
        '* text': String,
        'text html': true,
        'text json': jQuery.parseJSON,
        'text xml': jQuery.parseXML
      },
      flatOptions: {
        url: true,
        context: true
      }
    },
    ajaxSetup: function (target, settings) {
      return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === 'object') {
        options = url;
        url = undefined;
      }
      // Force options to be an object
      options = options || {};
      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString, responseHeaders,
        // timeout handle
        timeoutTimer,
        // Cross-domain detection vars
        parts,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {}, requestHeadersNames = {},
        // The jqXHR state
        state = 0,
        // Default abort message
        strAbort = 'canceled',
        // Fake xhr
        jqXHR = {
          readyState: 0,
          getResponseHeader: function (key) {
            var match;
            if (state === 2) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase()] = match[2];
                }
              }
              match = responseHeaders[key.toLowerCase()];
            }
            return match == null ? null : match;
          },
          getAllResponseHeaders: function () {
            return state === 2 ? responseHeadersString : null;
          },
          setRequestHeader: function (name, value) {
            var lname = name.toLowerCase();
            if (!state) {
              name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          overrideMimeType: function (type) {
            if (!state) {
              s.mimeType = type;
            }
            return this;
          },
          statusCode: function (map) {
            var code;
            if (map) {
              if (state < 2) {
                for (code in map) {
                  // Lazy-add the new callback in a way that preserves old ones
                  statusCode[code] = [
                    statusCode[code],
                    map[code]
                  ];
                }
              } else {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              }
            }
            return this;
          },
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };
      // Attach deferreds
      deferred.promise(jqXHR).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;
      // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;
      // Extract dataTypes list
      s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(core_rnotwhite) || [''];
      // A cross-domain request is in order when we have a protocol:host:port mismatch
      if (s.crossDomain == null) {
        parts = rurl.exec(s.url.toLowerCase());
        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
      }
      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== 'string') {
        s.data = jQuery.param(s.data, s.traditional);
      }
      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
      // If request was aborted inside a prefilter, stop there
      if (state === 2) {
        return jqXHR;
      }
      // We can fire global events as of now if asked to
      fireGlobals = s.global;
      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger('ajaxStart');
      }
      // Uppercase the type
      s.type = s.type.toUpperCase();
      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);
      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      cacheURL = s.url;
      // More options handling for requests with no content
      if (!s.hasContent) {
        // If data is available, append data to url
        if (s.data) {
          cacheURL = s.url += (ajax_rquery.test(cacheURL) ? '&' : '?') + s.data;
          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }
        // Add anti-cache in url if needed
        if (s.cache === false) {
          s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + ajax_nonce++) : cacheURL + (ajax_rquery.test(cacheURL) ? '&' : '?') + '_=' + ajax_nonce++;
        }
      }
      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
        }
      }
      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader('Content-Type', s.contentType);
      }
      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }
      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }
      // aborting is no longer a cancellation
      strAbort = 'abort';
      // Install callbacks on deferreds
      for (i in {
          success: 1,
          error: 1,
          complete: 1
        }) {
        jqXHR[i](s[i]);
      }
      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
      // If no transport, we auto-abort
      if (!transport) {
        done(-1, 'No Transport');
      } else {
        jqXHR.readyState = 1;
        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger('ajaxSend', [
            jqXHR,
            s
          ]);
        }
        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = setTimeout(function () {
            jqXHR.abort('timeout');
          }, s.timeout);
        }
        try {
          state = 1;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Propagate exception as error if not done
          if (state < 2) {
            done(-1, e);  // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      }
      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
        // Called once
        if (state === 2) {
          return;
        }
        // State is "done" now
        state = 2;
        // Clear timeout if it exists
        if (timeoutTimer) {
          clearTimeout(timeoutTimer);
        }
        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;
        // Cache response headers
        responseHeadersString = headers || '';
        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;
        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;
        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }
        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);
        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader('Last-Modified');
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader('etag');
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }
          // if no content
          if (status === 204 || s.type === 'HEAD') {
            statusText = 'nocontent';  // if not modified
          } else if (status === 304) {
            statusText = 'notmodified';  // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // We extract error from statusText
          // then normalize statusText and status for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = 'error';
            if (status < 0) {
              status = 0;
            }
          }
        }
        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + '';
        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [
            success,
            statusText,
            jqXHR
          ]);
        } else {
          deferred.rejectWith(callbackContext, [
            jqXHR,
            statusText,
            error
          ]);
        }
        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
            jqXHR,
            s,
            isSuccess ? success : error
          ]);
        }
        // Complete
        completeDeferred.fireWith(callbackContext, [
          jqXHR,
          statusText
        ]);
        if (fireGlobals) {
          globalEventContext.trigger('ajaxComplete', [
            jqXHR,
            s
          ]);
          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger('ajaxStop');
          }
        }
      }
      return jqXHR;
    },
    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, 'json');
    },
    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, 'script');
    }
  });
  jQuery.each([
    'get',
    'post'
  ], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // shift arguments if data argument was omitted
      if (jQuery.isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }
      return jQuery.ajax({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      });
    };
  });
  /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === '*') {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
      }
    }
    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }
    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }
      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }
    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2, current, conv, tmp, prev, converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();
    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();
    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }
      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === '*') {
          current = prev;  // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== '*' && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + ' ' + current] || converters['* ' + current];
          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(' ');
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];  // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }
          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s['throws']) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: 'parsererror',
                  error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: 'success',
      data: response
    };
  }
  // Install script dataType
  jQuery.ajaxSetup({
    accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
    contents: { script: /(?:java|ecma)script/ },
    converters: {
      'text script': function (text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  });
  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter('script', function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = 'GET';
    }
  });
  // Bind script tag hack transport
  jQuery.ajaxTransport('script', function (s) {
    // This transport only deals with cross domain requests
    if (s.crossDomain) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery('<script>').prop({
            async: true,
            charset: s.scriptCharset,
            src: s.url
          }).on('load error', callback = function (evt) {
            script.remove();
            callback = null;
            if (evt) {
              complete(evt.type === 'error' ? 404 : 200, evt.type);
            }
          });
          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: 'callback',
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + '_' + ajax_nonce++;
      this[callback] = true;
      return callback;
    }
  });
  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
    var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === 'jsonp') {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (ajax_rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
      }
      // Use data converter to retrieve json after script execution
      s.converters['script json'] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + ' was not called');
        }
        return responseContainer[0];
      };
      // force json dataType
      s.dataTypes[0] = 'json';
      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };
      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // Restore preexisting value
        window[callbackName] = overwritten;
        // Save back as free
        if (s[callbackName]) {
          // make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;
          // save the callback name for future use
          oldCallbacks.push(callbackName);
        }
        // Call if it was a function and we have a response
        if (responseContainer && jQuery.isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }
        responseContainer = overwritten = undefined;
      });
      // Delegate to script
      return 'script';
    }
  });
  jQuery.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (e) {
    }
  };
  var xhrSupported = jQuery.ajaxSettings.xhr(), xhrSuccessStatus = {
      0: 200,
      1223: 204
    },
    // Support: IE9
    // We need to keep track of outbound xhr and abort them manually
    // because IE is not smart enough to do it all by itself
    xhrId = 0, xhrCallbacks = {};
  if (window.ActiveXObject) {
    jQuery(window).on('unload', function () {
      for (var key in xhrCallbacks) {
        xhrCallbacks[key]();
      }
      xhrCallbacks = undefined;
    });
  }
  jQuery.support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
  jQuery.support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var callback;
    // Cross domain only allowed if supported through XMLHttpRequest
    if (jQuery.support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function (headers, complete) {
          var i, id, xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password);
          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }
          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }
          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
          }
          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }
          // Callback
          callback = function (type) {
            return function () {
              if (callback) {
                delete xhrCallbacks[id];
                callback = xhr.onload = xhr.onerror = null;
                if (type === 'abort') {
                  xhr.abort();
                } else if (type === 'error') {
                  complete(xhr.status || 404, xhr.statusText);
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                }
              }
            };
          };
          // Listen to events
          xhr.onload = callback();
          xhr.onerror = callback('error');
          // Create the abort callback
          callback = xhrCallbacks[id = xhrId++] = callback('abort');
          // Do send the request
          // This may raise an exception which is actually
          // handled in jQuery.ajax (so no try/catch here)
          xhr.send(options.hasContent && options.data || null);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + core_pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
      '*': [function (prop, value) {
          var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
            // Starting value computation is required for potential unit mismatches
            start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
          if (start && start[3] !== unit) {
            // Trust units reported by jQuery.css
            unit = unit || start[3];
            // Make sure we update the tween properties later on
            parts = parts || [];
            // Iteratively approximate from a nonzero starting point
            start = +target || 1;
            do {
              // If previous iteration zeroed out, double until we get *something*
              // Use a string for doubling factor so we don't accidentally see scale as unchanged below
              scale = scale || '.5';
              // Adjust and apply
              start = start / scale;
              jQuery.style(tween.elem, prop, start + unit);  // Update scale, tolerating zero or NaN from tween.cur()
                                                             // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
          }
          // Update tween properties
          if (parts) {
            start = tween.start = +start || +target || 0;
            tween.unit = unit;
            // If a +=/-= token was provided, we're doing a relative animation
            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
          }
          return tween;
        }]
    };
  // Animations created synchronously will run synchronously
  function createFxNow() {
    setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = jQuery.now();
  }
  function createTween(value, prop, animation) {
    var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // we're done with this property
        return tween;
      }
    }
  }
  function Animation(elem, properties, options) {
    var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
        // don't match elem in the :animated selector
        delete tick.elem;
      }), tick = function () {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
          temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem, [
          animation,
          percent,
          remaining
        ]);
        if (percent < 1 && length) {
          return remaining;
        } else {
          deferred.resolveWith(elem, [animation]);
          return false;
        }
      }, animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(true, { specialEasing: {} }, options),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function (prop, end) {
          var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
          animation.tweens.push(tween);
          return tween;
        },
        stop: function (gotoEnd) {
          var index = 0,
            // if we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }
          // resolve when we played the last frame
          // otherwise, reject
          if (gotoEnd) {
            deferred.resolveWith(elem, [
              animation,
              gotoEnd
            ]);
          } else {
            deferred.rejectWith(elem, [
              animation,
              gotoEnd
            ]);
          }
          return this;
        }
      }), props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; index < length; index++) {
      result = animationPrefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        return result;
      }
    }
    jQuery.map(props, createTween, animation);
    if (jQuery.isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    // attach callbacks from options
    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
  }
  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;
    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = jQuery.camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (jQuery.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }
      if (index !== name) {
        props[name] = value;
        delete props[index];
      }
      hooks = jQuery.cssHooks[name];
      if (hooks && 'expand' in hooks) {
        value = hooks.expand(value);
        delete props[name];
        // not quite $.extend, this wont overwrite keys already present.
        // also - reusing 'index' from above because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }
  jQuery.Animation = jQuery.extend(Animation, {
    tweener: function (props, callback) {
      if (jQuery.isFunction(props)) {
        callback = props;
        props = ['*'];
      } else {
        props = props.split(' ');
      }
      var prop, index = 0, length = props.length;
      for (; index < length; index++) {
        prop = props[index];
        tweeners[prop] = tweeners[prop] || [];
        tweeners[prop].unshift(callback);
      }
    },
    prefilter: function (callback, prepend) {
      if (prepend) {
        animationPrefilters.unshift(callback);
      } else {
        animationPrefilters.push(callback);
      }
    }
  });
  function defaultPrefilter(elem, props, opts) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
    // handle queue: false promises
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, 'fx');
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function () {
        // doing this makes sure that the complete handler will be called
        // before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, 'fx').length) {
            hooks.empty.fire();
          }
        });
      });
    }
    // height/width overflow pass
    if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE9-10 do not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [
        style.overflow,
        style.overflowX,
        style.overflowY
      ];
      // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated
      if (jQuery.css(elem, 'display') === 'inline' && jQuery.css(elem, 'float') === 'none') {
        style.display = 'inline-block';
      }
    }
    if (opts.overflow) {
      style.overflow = 'hidden';
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }
    // show/hide pass
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.exec(value)) {
        delete props[prop];
        toggle = toggle || value === 'toggle';
        if (value === (hidden ? 'hide' : 'show')) {
          // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
          if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
            hidden = true;
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    }
    if (!jQuery.isEmptyObject(orig)) {
      if (dataShow) {
        if ('hidden' in dataShow) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = data_priv.access(elem, 'fxshow', {});
      }
      // store state if its toggle - enables .stop().toggle() to "reverse"
      if (toggle) {
        dataShow.hidden = !hidden;
      }
      if (hidden) {
        jQuery(elem).show();
      } else {
        anim.done(function () {
          jQuery(elem).hide();
        });
      }
      anim.done(function () {
        var prop;
        data_priv.remove(elem, 'fxshow');
        for (prop in orig) {
          jQuery.style(elem, prop, orig[prop]);
        }
      });
      for (prop in orig) {
        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
        if (!(prop in dataShow)) {
          dataShow[prop] = tween.start;
          if (hidden) {
            tween.end = tween.start;
            tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
          }
        }
      }
    }
  }
  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || 'swing';
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased, hooks = Tween.propHooks[this.prop];
      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result;
        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
          return tween.elem[tween.prop];
        }
        // passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails
        // so, simple values such as "10px" are parsed to Float.
        // complex values such as "rotate(1rad)" are returned as is.
        result = jQuery.css(tween.elem, tween.prop, '');
        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === 'auto' ? 0 : result;
      },
      set: function (tween) {
        // use step hook for back compat - use cssHook if its there - use .style if its
        // available and use plain properties where available
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };
  // Support: IE9
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.each([
    'toggle',
    'show',
    'hide'
  ], function (i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });
  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // show any hidden elements after setting opacity to 0
      return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);
          // Empty animations, or finishing resolves immediately
          if (empty || data_priv.get(this, 'finish')) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };
      if (typeof type !== 'string') {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue && type !== false) {
        this.queue(type || 'fx', []);
      }
      return this.each(function () {
        var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }
        // start the next in the queue if the last step wasn't forced
        // timers currently will call their complete callbacks, which will dequeue
        // but only if they were gotoEnd
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || 'fx';
      }
      return this.each(function () {
        var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
        // enable finishing flag on private data
        data.finish = true;
        // empty the queue first
        jQuery.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }
        // look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }
        // look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }
        // turn off finishing flag
        delete data.finish;
      });
    }
  });
  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which, attrs = { height: type }, i = 0;
    // if we include width, step value is 1 to do all cssExpand values,
    // if we don't include width, step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs['margin' + which] = attrs['padding' + which] = type;
    }
    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }
    return attrs;
  }
  // Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx('show'),
    slideUp: genFx('hide'),
    slideToggle: genFx('toggle'),
    fadeIn: { opacity: 'show' },
    fadeOut: { opacity: 'hide' },
    fadeToggle: { opacity: 'toggle' }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
        complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
      };
    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
    // normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = 'fx';
    }
    // Queueing
    opt.old = opt.complete;
    opt.complete = function () {
      if (jQuery.isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };
    return opt;
  };
  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    }
  };
  jQuery.timers = [];
  jQuery.fx = Tween.prototype.init;
  jQuery.fx.tick = function () {
    var timer, timers = jQuery.timers, i = 0;
    fxNow = jQuery.now();
    for (; i < timers.length; i++) {
      timer = timers[i];
      // Checks the timer has not already been removed
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };
  jQuery.fx.timer = function (timer) {
    if (timer() && jQuery.timers.push(timer)) {
      jQuery.fx.start();
    }
  };
  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (!timerId) {
      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
    }
  };
  jQuery.fx.stop = function () {
    clearInterval(timerId);
    timerId = null;
  };
  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    _default: 400
  };
  // Back Compat <1.8 extension point
  jQuery.fx.step = {};
  if (jQuery.expr && jQuery.expr.filters) {
    jQuery.expr.filters.animated = function (elem) {
      return jQuery.grep(jQuery.timers, function (fn) {
        return elem === fn.elem;
      }).length;
    };
  }
  jQuery.fn.offset = function (options) {
    if (arguments.length) {
      return options === undefined ? this : this.each(function (i) {
        jQuery.offset.setOffset(this, options, i);
      });
    }
    var docElem, win, elem = this[0], box = {
        top: 0,
        left: 0
      }, doc = elem && elem.ownerDocument;
    if (!doc) {
      return;
    }
    docElem = doc.documentElement;
    // Make sure it's not a disconnected DOM node
    if (!jQuery.contains(docElem, elem)) {
      return box;
    }
    // If we don't have gBCR, just use 0,0 rather than error
    // BlackBerry 5, iOS 3 (original iPhone)
    if (typeof elem.getBoundingClientRect !== core_strundefined) {
      box = elem.getBoundingClientRect();
    }
    win = getWindow(doc);
    return {
      top: box.top + win.pageYOffset - docElem.clientTop,
      left: box.left + win.pageXOffset - docElem.clientLeft
    };
  };
  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
      // Set position first, in-case top/left are set even on static elem
      if (position === 'static') {
        elem.style.position = 'relative';
      }
      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, 'top');
      curCSSLeft = jQuery.css(elem, 'left');
      calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
      // Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (jQuery.isFunction(options)) {
        options = options.call(elem, i, curOffset);
      }
      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }
      if ('using' in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    position: function () {
      if (!this[0]) {
        return;
      }
      var offsetParent, offset, elem = this[0], parentOffset = {
          top: 0,
          left: 0
        };
      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
      if (jQuery.css(elem, 'position') === 'fixed') {
        // We assume that getBoundingClientRect is available when computed position is fixed
        offset = elem.getBoundingClientRect();
      } else {
        // Get *real* offsetParent
        offsetParent = this.offsetParent();
        // Get correct offsets
        offset = this.offset();
        if (!jQuery.nodeName(offsetParent[0], 'html')) {
          parentOffset = offsetParent.offset();
        }
        // Add offsetParent borders
        parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
        parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
      }
      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
        left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
      };
    },
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent || docElem;
        while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docElem;
      });
    }
  });
  // Create scrollLeft and scrollTop methods
  jQuery.each({
    scrollLeft: 'pageXOffset',
    scrollTop: 'pageYOffset'
  }, function (method, prop) {
    var top = 'pageYOffset' === prop;
    jQuery.fn[method] = function (val) {
      return jQuery.access(this, function (elem, method, val) {
        var win = getWindow(elem);
        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }
        if (win) {
          win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length, null);
    };
  });
  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
  }
  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({
    Height: 'height',
    Width: 'width'
  }, function (name, type) {
    jQuery.each({
      padding: 'inner' + name,
      content: type,
      '': 'outer' + name
    }, function (defaultExtra, funcName) {
      // margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
        return jQuery.access(this, function (elem, type, value) {
          var doc;
          if (jQuery.isWindow(elem)) {
            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement['client' + name];
          }
          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;
            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
          }
          return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable, null);
      };
    });
  });
  // Limit scope pollution from any deprecated API
  // (function() {
  // The number of elements contained in the matched element set
  jQuery.fn.size = function () {
    return this.length;
  };
  jQuery.fn.andSelf = jQuery.fn.addBack;
  // })();
  if (typeof module === 'object' && module && typeof module.exports === 'object') {
    // Expose jQuery as module.exports in loaders that implement the Node
    // module pattern (including browserify). Do not create the global, since
    // the user will be storing it themselves locally, and globals are frowned
    // upon in the Node module world.
    module.exports = jQuery;
  } else {
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    if (typeof define === 'function' && define.amd) {
      define('jquery', [], function () {
        return jQuery;
      });
    }
  }
  // If there is a window object, that at least has a document property,
  // define jQuery and $ identifiers
  if (typeof window === 'object' && typeof window.document === 'object') {
    window.jQuery = window.$ = jQuery;
  }
}(window));
//     Underscore.js 1.5.2
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function () {
  // Baseline setup
  // --------------
  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;
  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;
  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};
  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
  // Create a safe reference to the Underscore object for use below.
  var _ = function (obj) {
    if (obj instanceof _)
      return obj;
    if (!(this instanceof _))
      return new _(obj);
    this._wrapped = obj;
  };
  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }
  // Current version.
  _.VERSION = '1.5.2';
  // Collection Functions
  // --------------------
  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function (obj, iterator, context) {
      if (obj == null)
        return;
      if (nativeForEach && obj.forEach === nativeForEach) {
        obj.forEach(iterator, context);
      } else if (obj.length === +obj.length) {
        for (var i = 0, length = obj.length; i < length; i++) {
          if (iterator.call(context, obj[i], i, obj) === breaker)
            return;
        }
      } else {
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)
            return;
        }
      }
    };
  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function (obj, iterator, context) {
    var results = [];
    if (obj == null)
      return results;
    if (nativeMap && obj.map === nativeMap)
      return obj.map(iterator, context);
    each(obj, function (value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };
  var reduceError = 'Reduce of empty array with no initial value';
  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null)
      obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context)
        iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function (value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial)
      throw new TypeError(reduceError);
    return memo;
  };
  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null)
      obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context)
        iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function (value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial)
      throw new TypeError(reduceError);
    return memo;
  };
  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function (obj, iterator, context) {
    var result;
    any(obj, function (value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };
  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function (obj, iterator, context) {
    var results = [];
    if (obj == null)
      return results;
    if (nativeFilter && obj.filter === nativeFilter)
      return obj.filter(iterator, context);
    each(obj, function (value, index, list) {
      if (iterator.call(context, value, index, list))
        results.push(value);
    });
    return results;
  };
  // Return all the elements for which a truth test fails.
  _.reject = function (obj, iterator, context) {
    return _.filter(obj, function (value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };
  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function (obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null)
      return result;
    if (nativeEvery && obj.every === nativeEvery)
      return obj.every(iterator, context);
    each(obj, function (value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list)))
        return breaker;
    });
    return !!result;
  };
  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function (obj, iterator, context) {
      iterator || (iterator = _.identity);
      var result = false;
      if (obj == null)
        return result;
      if (nativeSome && obj.some === nativeSome)
        return obj.some(iterator, context);
      each(obj, function (value, index, list) {
        if (result || (result = iterator.call(context, value, index, list)))
          return breaker;
      });
      return !!result;
    };
  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function (obj, target) {
    if (obj == null)
      return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf)
      return obj.indexOf(target) != -1;
    return any(obj, function (value) {
      return value === target;
    });
  };
  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function (obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function (value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };
  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function (obj, key) {
    return _.map(obj, function (value) {
      return value[key];
    });
  };
  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function (obj, attrs, first) {
    if (_.isEmpty(attrs))
      return first ? void 0 : [];
    return _[first ? 'find' : 'filter'](obj, function (value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key])
          return false;
      }
      return true;
    });
  };
  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function (obj, attrs) {
    return _.where(obj, attrs, true);
  };
  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function (obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj))
      return -Infinity;
    var result = {
        computed: -Infinity,
        value: -Infinity
      };
    each(obj, function (value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed > result.computed && (result = {
        value: value,
        computed: computed
      });
    });
    return result.value;
  };
  // Return the minimum element (or element-based computation).
  _.min = function (obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj))
      return Infinity;
    var result = {
        computed: Infinity,
        value: Infinity
      };
    each(obj, function (value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {
        value: value,
        computed: computed
      });
    });
    return result.value;
  };
  // Shuffle an array, using the modern version of the 
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function (obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function (value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };
  // Sample **n** random values from an array.
  // If **n** is not specified, returns a single random element from the array.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function (obj, n, guard) {
    if (arguments.length < 2 || guard) {
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };
  // An internal function to generate lookup iterators.
  var lookupIterator = function (value) {
    return _.isFunction(value) ? value : function (obj) {
      return obj[value];
    };
  };
  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function (obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function (value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function (left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0)
          return 1;
        if (a < b || b === void 0)
          return -1;
      }
      return left.index - right.index;
    }), 'value');
  };
  // An internal function used for aggregate "group by" operations.
  var group = function (behavior) {
    return function (obj, value, context) {
      var result = {};
      var iterator = value == null ? _.identity : lookupIterator(value);
      each(obj, function (value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };
  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function (result, key, value) {
    (_.has(result, key) ? result[key] : result[key] = []).push(value);
  });
  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function (result, key, value) {
    result[key] = value;
  });
  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function (result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });
  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function (array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };
  // Safely create a real, live array from anything iterable.
  _.toArray = function (obj) {
    if (!obj)
      return [];
    if (_.isArray(obj))
      return slice.call(obj);
    if (obj.length === +obj.length)
      return _.map(obj, _.identity);
    return _.values(obj);
  };
  // Return the number of elements in an object.
  _.size = function (obj) {
    if (obj == null)
      return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };
  // Array Functions
  // ---------------
  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function (array, n, guard) {
    if (array == null)
      return void 0;
    return n == null || guard ? array[0] : slice.call(array, 0, n);
  };
  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function (array, n, guard) {
    return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
  };
  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function (array, n, guard) {
    if (array == null)
      return void 0;
    if (n == null || guard) {
      return array[array.length - 1];
    } else {
      return slice.call(array, Math.max(array.length - n, 0));
    }
  };
  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function (array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };
  // Trim out all falsy values from an array.
  _.compact = function (array) {
    return _.filter(array, _.identity);
  };
  // Internal implementation of a recursive `flatten` function.
  var flatten = function (input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function (value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };
  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function (array, shallow) {
    return flatten(array, shallow, []);
  };
  // Return a version of the array that does not contain the specified value(s).
  _.without = function (array) {
    return _.difference(array, slice.call(arguments, 1));
  };
  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function (array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function (value, index) {
      if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };
  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function () {
    return _.uniq(_.flatten(arguments, true));
  };
  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function (array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function (item) {
      return _.every(rest, function (other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };
  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function (array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function (value) {
      return !_.contains(rest, value);
    });
  };
  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function () {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };
  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function (list, values) {
    if (list == null)
      return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };
  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function (array, item, isSorted) {
    if (array == null)
      return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf)
      return array.indexOf(item, isSorted);
    for (; i < length; i++)
      if (array[i] === item)
        return i;
    return -1;
  };
  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function (array, item, from) {
    if (array == null)
      return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = hasIndex ? from : array.length;
    while (i--)
      if (array[i] === item)
        return i;
    return -1;
  };
  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function (start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;
    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);
    while (idx < length) {
      range[idx++] = start;
      start += step;
    }
    return range;
  };
  // Function (ahem) Functions
  // ------------------
  // Reusable constructor function for prototype setting.
  var ctor = function () {
  };
  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function (func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind)
      return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func))
      throw new TypeError();
    args = slice.call(arguments, 2);
    return bound = function () {
      if (!(this instanceof bound))
        return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor();
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result)
        return result;
      return self;
    };
  };
  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function (func) {
    var args = slice.call(arguments, 1);
    return function () {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };
  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function (obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0)
      throw new Error('bindAll must be passed function names');
    each(funcs, function (f) {
      obj[f] = _.bind(obj[f], obj);
    });
    return obj;
  };
  // Memoize an expensive function by storing its results.
  _.memoize = function (func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function () {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
    };
  };
  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function (func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function () {
      return func.apply(null, args);
    }, wait);
  };
  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function (func) {
    return _.delay.apply(_, [
      func,
      1
    ].concat(slice.call(arguments, 1)));
  };
  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function (func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function () {
      previous = options.leading === false ? 0 : new Date();
      timeout = null;
      result = func.apply(context, args);
    };
    return function () {
      var now = new Date();
      if (!previous && options.leading === false)
        previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };
  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function (func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    return function () {
      context = this;
      args = arguments;
      timestamp = new Date();
      var later = function () {
        var last = new Date() - timestamp;
        if (last < wait) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate)
            result = func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow)
        result = func.apply(context, args);
      return result;
    };
  };
  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function (func) {
    var ran = false, memo;
    return function () {
      if (ran)
        return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };
  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function (func, wrapper) {
    return function () {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };
  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function () {
    var funcs = arguments;
    return function () {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };
  // Returns a function that will only be executed after being called N times.
  _.after = function (times, func) {
    return function () {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };
  // Object Functions
  // ----------------
  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function (obj) {
    if (obj !== Object(obj))
      throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj)
      if (_.has(obj, key))
        keys.push(key);
    return keys;
  };
  // Retrieve the values of an object's properties.
  _.values = function (obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };
  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function (obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [
        keys[i],
        obj[keys[i]]
      ];
    }
    return pairs;
  };
  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function (obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };
  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function (obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key]))
        names.push(key);
    }
    return names.sort();
  };
  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function (obj) {
    each(slice.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };
  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function (obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function (key) {
      if (key in obj)
        copy[key] = obj[key];
    });
    return copy;
  };
  // Return a copy of the object without the blacklisted properties.
  _.omit = function (obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key))
        copy[key] = obj[key];
    }
    return copy;
  };
  // Fill in a given object with default properties.
  _.defaults = function (obj) {
    each(slice.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0)
            obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };
  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function (obj) {
    if (!_.isObject(obj))
      return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };
  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function (obj, interceptor) {
    interceptor(obj);
    return obj;
  };
  // Internal recursive comparison function for `isEqual`.
  var eq = function (a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b)
      return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null)
      return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _)
      a = a._wrapped;
    if (b instanceof _)
      b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b))
      return false;
    switch (className) {
    // Strings, numbers, dates, and booleans are compared by value.
    case '[object String]':
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return a == String(b);
    case '[object Number]':
      // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
      // other numeric values.
      return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
    case '[object Date]':
    case '[object Boolean]':
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a == +b;
    // RegExps are compared by their source patterns and flags.
    case '[object RegExp]':
      return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object')
      return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a)
        return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack)))
            break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
            break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !size--)
            break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };
  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function (a, b) {
    return eq(a, b, [], []);
  };
  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function (obj) {
    if (obj == null)
      return true;
    if (_.isArray(obj) || _.isString(obj))
      return obj.length === 0;
    for (var key in obj)
      if (_.has(obj, key))
        return false;
    return true;
  };
  // Is a given value a DOM element?
  _.isElement = function (obj) {
    return !!(obj && obj.nodeType === 1);
  };
  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function (obj) {
    return toString.call(obj) == '[object Array]';
  };
  // Is a given variable an object?
  _.isObject = function (obj) {
    return obj === Object(obj);
  };
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each([
    'Arguments',
    'Function',
    'String',
    'Number',
    'Date',
    'RegExp'
  ], function (name) {
    _['is' + name] = function (obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });
  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function (obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }
  // Optimize `isFunction` if appropriate.
  if (typeof /./ !== 'function') {
    _.isFunction = function (obj) {
      return typeof obj === 'function';
    };
  }
  // Is a given object a finite number?
  _.isFinite = function (obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };
  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function (obj) {
    return _.isNumber(obj) && obj != +obj;
  };
  // Is a given value a boolean?
  _.isBoolean = function (obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };
  // Is a given value equal to null?
  _.isNull = function (obj) {
    return obj === null;
  };
  // Is a given variable undefined?
  _.isUndefined = function (obj) {
    return obj === void 0;
  };
  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function (obj, key) {
    return hasOwnProperty.call(obj, key);
  };
  // Utility Functions
  // -----------------
  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function () {
    root._ = previousUnderscore;
    return this;
  };
  // Keep the identity function around for default iterators.
  _.identity = function (value) {
    return value;
  };
  // Run a function **n** times.
  _.times = function (n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++)
      accum[i] = iterator.call(context, i);
    return accum;
  };
  // Return a random integer between min and max (inclusive).
  _.random = function (min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };
  // List of HTML entities for escaping.
  var entityMap = {
      escape: {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#x27;'
      }
    };
  entityMap.unescape = _.invert(entityMap.escape);
  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
      escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
      unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
    };
  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each([
    'escape',
    'unescape'
  ], function (method) {
    _[method] = function (string) {
      if (string == null)
        return '';
      return ('' + string).replace(entityRegexes[method], function (match) {
        return entityMap[method][match];
      });
    };
  });
  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function (object, property) {
    if (object == null)
      return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };
  // Add your own custom functions to the Underscore object.
  _.mixin = function (obj) {
    each(_.functions(obj), function (name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function () {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };
  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function (prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };
  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };
  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;
  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
      '\'': '\'',
      '\\': '\\',
      '\r': 'r',
      '\n': 'n',
      '\t': 't',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function (text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);
    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
        (settings.escape || noMatch).source,
        (settings.interpolate || noMatch).source,
        (settings.evaluate || noMatch).source
      ].join('|') + '|$', 'g');
    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = '__p+=\'';
    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, function (match) {
        return '\\' + escapes[match];
      });
      if (escape) {
        source += '\'+\n((__t=(' + escape + '))==null?\'\':_.escape(__t))+\n\'';
      }
      if (interpolate) {
        source += '\'+\n((__t=(' + interpolate + '))==null?\'\':__t)+\n\'';
      }
      if (evaluate) {
        source += '\';\n' + evaluate + '\n__p+=\'';
      }
      index = offset + match.length;
      return match;
    });
    source += '\';\n';
    // If a variable is not specified, place data values in local scope.
    if (!settings.variable)
      source = 'with(obj||{}){\n' + source + '}\n';
    source = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + source + 'return __p;\n';
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }
    if (data)
      return render(data, _);
    var template = function (data) {
      return render.call(this, data, _);
    };
    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';
    return template;
  };
  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function (obj) {
    return _(obj).chain();
  };
  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.
  // Helper function to continue chaining intermediate results.
  var result = function (obj) {
    return this._chain ? _(obj).chain() : obj;
  };
  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);
  // Add all mutator Array functions to the wrapper.
  each([
    'pop',
    'push',
    'reverse',
    'shift',
    'sort',
    'splice',
    'unshift'
  ], function (name) {
    var method = ArrayProto[name];
    _.prototype[name] = function () {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0)
        delete obj[0];
      return result.call(this, obj);
    };
  });
  // Add all accessor Array functions to the wrapper.
  each([
    'concat',
    'join',
    'slice'
  ], function (name) {
    var method = ArrayProto[name];
    _.prototype[name] = function () {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });
  _.extend(_.prototype, {
    chain: function () {
      this._chain = true;
      return this;
    },
    value: function () {
      return this._wrapped;
    }
  });
}.call(this));
/**
 * @license AngularJS v1.2.28
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, document, undefined) {
  'use strict';
  /**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */
  function minErr(module) {
    return function () {
      var code = arguments[0], prefix = '[' + (module ? module + ':' : '') + code + '] ', template = arguments[1], templateArgs = arguments, stringify = function (obj) {
          if (typeof obj === 'function') {
            return obj.toString().replace(/ \{[\s\S]*$/, '');
          } else if (typeof obj === 'undefined') {
            return 'undefined';
          } else if (typeof obj !== 'string') {
            return JSON.stringify(obj);
          }
          return obj;
        }, message, i;
      message = prefix + template.replace(/\{\d+\}/g, function (match) {
        var index = +match.slice(1, -1), arg;
        if (index + 2 < templateArgs.length) {
          arg = templateArgs[index + 2];
          if (typeof arg === 'function') {
            return arg.toString().replace(/ ?\{[\s\S]*$/, '');
          } else if (typeof arg === 'undefined') {
            return 'undefined';
          } else if (typeof arg !== 'string') {
            return toJson(arg);
          }
          return arg;
        }
        return match;
      });
      message = message + '\nhttp://errors.angularjs.org/1.2.28/' + (module ? module + '/' : '') + code;
      for (i = 2; i < arguments.length; i++) {
        message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' + encodeURIComponent(stringify(arguments[i]));
      }
      return new Error(message);
    };
  }
  /* We need to tell jshint what variables are being exported */
  /* global angular: true,
    msie: true,
    jqLite: true,
 jQuery: true,
 slice: true,
    push: true,
    toString: true,
    ngMinErr: true,
    angularModule: true,
    nodeName_: true,
    uid: true,
    VALIDITY_STATE_PROPERTY: true,

    lowercase: true,
    uppercase: true,
    manualLowercase: true,
    manualUppercase: true,
    nodeName_: true,
    isArrayLike: true,
    forEach: true,
    sortedKeys: true,
    forEachSorted: true,
    reverseParams: true,
    nextUid: true,
    setHashKey: true,
    extend: true,
    int: true,
    inherit: true,
    noop: true,
    identity: true,
    valueFn: true,
    isUndefined: true,
    isDefined: true,
    isObject: true,
    isString: true,
    isNumber: true,
    isDate: true,
    isArray: true,
    isFunction: true,
    isRegExp: true,
    isWindow: true,
    isScope: true,
    isFile: true,
    isBlob: true,
    isBoolean: true,
    isPromiseLike: true,
    trim: true,
    isElement: true,
    makeMap: true,
    map: true,
    size: true,
    includes: true,
    indexOf: true,
    arrayRemove: true,
    isLeafNode: true,
    copy: true,
    shallowCopy: true,
    equals: true,
    csp: true,
    concat: true,
    sliceArgs: true,
    bind: true,
    toJsonReplacer: true,
    toJson: true,
    fromJson: true,
    toBoolean: true,
    startingTag: true,
    tryDecodeURIComponent: true,
    parseKeyValue: true,
    toKeyValue: true,
    encodeUriSegment: true,
    encodeUriQuery: true,
    angularInit: true,
    bootstrap: true,
    snake_case: true,
    bindJQuery: true,
    assertArg: true,
    assertArgFn: true,
    assertNotHasOwnProperty: true,
    getter: true,
    getBlockElements: true,
    hasOwnProperty: true,
*/
  ////////////////////////////////////
  /**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */
  // The name of a form control's ValidityState property.
  // This is used so that it's possible for internal tests to create mock ValidityStates.
  var VALIDITY_STATE_PROPERTY = 'validity';
  /**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
  var lowercase = function (string) {
    return isString(string) ? string.toLowerCase() : string;
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
  var uppercase = function (string) {
    return isString(string) ? string.toUpperCase() : string;
  };
  var manualLowercase = function (s) {
    /* jshint bitwise: false */
    return isString(s) ? s.replace(/[A-Z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) | 32);
    }) : s;
  };
  var manualUppercase = function (s) {
    /* jshint bitwise: false */
    return isString(s) ? s.replace(/[a-z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) & ~32);
    }) : s;
  };
  // String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
  // locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
  // with correct but slower alternatives.
  if ('i' !== 'I'.toLowerCase()) {
    lowercase = manualLowercase;
    uppercase = manualUppercase;
  }
  var msie,
    // holds major version number for IE, or NaN if UA is not IE.
    jqLite,
    // delay binding since jQuery could be loaded after us.
    jQuery,
    // delay binding
    slice = [].slice, push = [].push, toString = Object.prototype.toString, ngMinErr = minErr('ng'),
    /** @name angular */
    angular = window.angular || (window.angular = {}), angularModule, nodeName_, uid = [
      '0',
      '0',
      '0'
    ];
  /**
 * IE 11 changed the format of the UserAgent string.
 * See http://msdn.microsoft.com/en-us/library/ms537503.aspx
 */
  msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  if (isNaN(msie)) {
    msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  }
  /**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
  function isArrayLike(obj) {
    if (obj == null || isWindow(obj)) {
      return false;
    }
    var length = obj.length;
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return isString(obj) || isArray(obj) || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
  }
  /**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`
 * is the value of an object property or an array element and `key` is the object property key or
 * array element index. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */
  function forEach(obj, iterator, context) {
    var key;
    if (obj) {
      if (isFunction(obj)) {
        for (key in obj) {
          // Need to check if hasOwnProperty exists,
          // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
            iterator.call(context, obj[key], key);
          }
        }
      } else if (isArray(obj) || isArrayLike(obj)) {
        for (key = 0; key < obj.length; key++) {
          iterator.call(context, obj[key], key);
        }
      } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context);
      } else {
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            iterator.call(context, obj[key], key);
          }
        }
      }
    }
    return obj;
  }
  function sortedKeys(obj) {
    var keys = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        keys.push(key);
      }
    }
    return keys.sort();
  }
  function forEachSorted(obj, iterator, context) {
    var keys = sortedKeys(obj);
    for (var i = 0; i < keys.length; i++) {
      iterator.call(context, obj[keys[i]], keys[i]);
    }
    return keys;
  }
  /**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
  function reverseParams(iteratorFn) {
    return function (value, key) {
      iteratorFn(key, value);
    };
  }
  /**
 * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
 * characters such as '012ABC'. The reason why we are not using simply a number counter is that
 * the number string gets longer over time, and it can also overflow, where as the nextId
 * will grow much slower, it is a string, and it will never overflow.
 *
 * @returns {string} an unique alpha-numeric string
 */
  function nextUid() {
    var index = uid.length;
    var digit;
    while (index) {
      index--;
      digit = uid[index].charCodeAt(0);
      if (digit == 57) {
        uid[index] = 'A';
        return uid.join('');
      }
      if (digit == 90) {
        uid[index] = '0';
      } else {
        uid[index] = String.fromCharCode(digit + 1);
        return uid.join('');
      }
    }
    uid.unshift('0');
    return uid.join('');
  }
  /**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
  function setHashKey(obj, h) {
    if (h) {
      obj.$$hashKey = h;
    } else {
      delete obj.$$hashKey;
    }
  }
  /**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
  function extend(dst) {
    var h = dst.$$hashKey;
    forEach(arguments, function (obj) {
      if (obj !== dst) {
        forEach(obj, function (value, key) {
          dst[key] = value;
        });
      }
    });
    setHashKey(dst, h);
    return dst;
  }
  function int(str) {
    return parseInt(str, 10);
  }
  function inherit(parent, extra) {
    return extend(new (extend(function () {
    }, { prototype: parent }))(), extra);
  }
  /**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
  function noop() {
  }
  noop.$inject = [];
  /**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
 */
  function identity($) {
    return $;
  }
  identity.$inject = [];
  function valueFn(value) {
    return function () {
      return value;
    };
  }
  /**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
  function isUndefined(value) {
    return typeof value === 'undefined';
  }
  /**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
  function isDefined(value) {
    return typeof value !== 'undefined';
  }
  /**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
  function isObject(value) {
    return value != null && typeof value === 'object';
  }
  /**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
  function isString(value) {
    return typeof value === 'string';
  }
  /**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
  function isNumber(value) {
    return typeof value === 'number';
  }
  /**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
  function isDate(value) {
    return toString.call(value) === '[object Date]';
  }
  /**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
  var isArray = function () {
      if (!isFunction(Array.isArray)) {
        return function (value) {
          return toString.call(value) === '[object Array]';
        };
      }
      return Array.isArray;
    }();
  /**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
  function isFunction(value) {
    return typeof value === 'function';
  }
  /**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
  function isRegExp(value) {
    return toString.call(value) === '[object RegExp]';
  }
  /**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
  function isWindow(obj) {
    return obj && obj.document && obj.location && obj.alert && obj.setInterval;
  }
  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch;
  }
  function isFile(obj) {
    return toString.call(obj) === '[object File]';
  }
  function isBlob(obj) {
    return toString.call(obj) === '[object Blob]';
  }
  function isBoolean(value) {
    return typeof value === 'boolean';
  }
  function isPromiseLike(obj) {
    return obj && isFunction(obj.then);
  }
  var trim = function () {
      // native trim is way faster: http://jsperf.com/angular-trim-test
      // but IE doesn't have it... :-(
      // TODO: we should move this into IE/ES5 polyfill
      if (!String.prototype.trim) {
        return function (value) {
          return isString(value) ? value.replace(/^\s\s*/, '').replace(/\s\s*$/, '') : value;
        };
      }
      return function (value) {
        return isString(value) ? value.trim() : value;
      };
    }();
  /**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
  function isElement(node) {
    return !!(node && (node.nodeName || node.prop && node.attr && node.find));  // we have an on and find method part of jQuery API
  }
  /**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++)
      obj[items[i]] = true;
    return obj;
  }
  if (msie < 9) {
    nodeName_ = function (element) {
      element = element.nodeName ? element : element[0];
      return element.scopeName && element.scopeName != 'HTML' ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
    };
  } else {
    nodeName_ = function (element) {
      return element.nodeName ? element.nodeName : element[0].nodeName;
    };
  }
  function map(obj, iterator, context) {
    var results = [];
    forEach(obj, function (value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  }
  /**
 * @description
 * Determines the number of elements in an array, the number of properties an object has, or
 * the length of a string.
 *
 * Note: This function is used to augment the Object type in Angular expressions. See
 * {@link angular.Object} for more information about Angular arrays.
 *
 * @param {Object|Array|string} obj Object, array, or string to inspect.
 * @param {boolean} [ownPropsOnly=false] Count only "own" properties in an object
 * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.
 */
  function size(obj, ownPropsOnly) {
    var count = 0, key;
    if (isArray(obj) || isString(obj)) {
      return obj.length;
    } else if (isObject(obj)) {
      for (key in obj)
        if (!ownPropsOnly || obj.hasOwnProperty(key))
          count++;
    }
    return count;
  }
  function includes(array, obj) {
    return indexOf(array, obj) != -1;
  }
  function indexOf(array, obj) {
    if (array.indexOf)
      return array.indexOf(obj);
    for (var i = 0; i < array.length; i++) {
      if (obj === array[i])
        return i;
    }
    return -1;
  }
  function arrayRemove(array, value) {
    var index = indexOf(array, value);
    if (index >= 0)
      array.splice(index, 1);
    return value;
  }
  function isLeafNode(node) {
    if (node) {
      switch (node.nodeName) {
      case 'OPTION':
      case 'PRE':
      case 'TITLE':
        return true;
      }
    }
    return false;
  }
  /**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for array) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
  function copy(source, destination, stackSource, stackDest) {
    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws', 'Can\'t copy! Making copies of Window or Scope instances is not supported.');
    }
    if (!destination) {
      destination = source;
      if (source) {
        if (isArray(source)) {
          destination = copy(source, [], stackSource, stackDest);
        } else if (isDate(source)) {
          destination = new Date(source.getTime());
        } else if (isRegExp(source)) {
          destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
          destination.lastIndex = source.lastIndex;
        } else if (isObject(source)) {
          destination = copy(source, {}, stackSource, stackDest);
        }
      }
    } else {
      if (source === destination)
        throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
      stackSource = stackSource || [];
      stackDest = stackDest || [];
      if (isObject(source)) {
        var index = indexOf(stackSource, source);
        if (index !== -1)
          return stackDest[index];
        stackSource.push(source);
        stackDest.push(destination);
      }
      var result;
      if (isArray(source)) {
        destination.length = 0;
        for (var i = 0; i < source.length; i++) {
          result = copy(source[i], null, stackSource, stackDest);
          if (isObject(source[i])) {
            stackSource.push(source[i]);
            stackDest.push(result);
          }
          destination.push(result);
        }
      } else {
        var h = destination.$$hashKey;
        if (isArray(destination)) {
          destination.length = 0;
        } else {
          forEach(destination, function (value, key) {
            delete destination[key];
          });
        }
        for (var key in source) {
          result = copy(source[key], null, stackSource, stackDest);
          if (isObject(source[key])) {
            stackSource.push(source[key]);
            stackDest.push(result);
          }
          destination[key] = result;
        }
        setHashKey(destination, h);
      }
    }
    return destination;
  }
  /**
 * Creates a shallow copy of an object, an array or a primitive
 */
  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || [];
      for (var i = 0; i < src.length; i++) {
        dst[i] = src[i];
      }
    } else if (isObject(src)) {
      dst = dst || {};
      for (var key in src) {
        if (hasOwnProperty.call(src, key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key];
        }
      }
    }
    return dst || src;
  }
  /**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
  function equals(o1, o2) {
    if (o1 === o2)
      return true;
    if (o1 === null || o2 === null)
      return false;
    if (o1 !== o1 && o2 !== o2)
      return true;
    // NaN === NaN
    var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
    if (t1 == t2) {
      if (t1 == 'object') {
        if (isArray(o1)) {
          if (!isArray(o2))
            return false;
          if ((length = o1.length) == o2.length) {
            for (key = 0; key < length; key++) {
              if (!equals(o1[key], o2[key]))
                return false;
            }
            return true;
          }
        } else if (isDate(o1)) {
          if (!isDate(o2))
            return false;
          return isNaN(o1.getTime()) && isNaN(o2.getTime()) || o1.getTime() === o2.getTime();
        } else if (isRegExp(o1) && isRegExp(o2)) {
          return o1.toString() == o2.toString();
        } else {
          if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2))
            return false;
          keySet = {};
          for (key in o1) {
            if (key.charAt(0) === '$' || isFunction(o1[key]))
              continue;
            if (!equals(o1[key], o2[key]))
              return false;
            keySet[key] = true;
          }
          for (key in o2) {
            if (!keySet.hasOwnProperty(key) && key.charAt(0) !== '$' && o2[key] !== undefined && !isFunction(o2[key]))
              return false;
          }
          return true;
        }
      }
    }
    return false;
  }
  var csp = function () {
    if (isDefined(csp.isActive_))
      return csp.isActive_;
    var active = !!(document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]'));
    if (!active) {
      try {
        /* jshint -W031, -W054 */
        new Function('');  /* jshint +W031, +W054 */
      } catch (e) {
        active = true;
      }
    }
    return csp.isActive_ = active;
  };
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  function sliceArgs(args, startIndex) {
    return slice.call(args, startIndex || 0);
  }
  /* jshint -W101 */
  /**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
  /* jshint +W101 */
  function bind(self, fn) {
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
    if (isFunction(fn) && !(fn instanceof RegExp)) {
      return curryArgs.length ? function () {
        return arguments.length ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0))) : fn.apply(self, curryArgs);
      } : function () {
        return arguments.length ? fn.apply(self, arguments) : fn.call(self);
      };
    } else {
      // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
      return fn;
    }
  }
  function toJsonReplacer(key, value) {
    var val = value;
    if (typeof key === 'string' && key.charAt(0) === '$') {
      val = undefined;
    } else if (isWindow(value)) {
      val = '$WINDOW';
    } else if (value && document === value) {
      val = '$DOCUMENT';
    } else if (isScope(value)) {
      val = '$SCOPE';
    }
    return val;
  }
  /**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
  function toJson(obj, pretty) {
    if (typeof obj === 'undefined')
      return undefined;
    return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
  }
  /**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized thingy.
 */
  function fromJson(json) {
    return isString(json) ? JSON.parse(json) : json;
  }
  function toBoolean(value) {
    if (typeof value === 'function') {
      value = true;
    } else if (value && value.length !== 0) {
      var v = lowercase('' + value);
      value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
    } else {
      value = false;
    }
    return value;
  }
  /**
 * @returns {string} Returns the string representation of the element.
 */
  function startingTag(element) {
    element = jqLite(element).clone();
    try {
      // turns out IE does not let you set .html() on elements which
      // are not allowed to have children. So we just ignore it.
      element.empty();
    } catch (e) {
    }
    // As Per DOM Standards
    var TEXT_NODE = 3;
    var elemHtml = jqLite('<div>').append(element).html();
    try {
      return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function (match, nodeName) {
        return '<' + lowercase(nodeName);
      });
    } catch (e) {
      return lowercase(elemHtml);
    }
  }
  /////////////////////////////////////////////////
  /**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
  function tryDecodeURIComponent(value) {
    try {
      return decodeURIComponent(value);
    } catch (e) {
    }
  }
  /**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
  function parseKeyValue(keyValue) {
    var obj = {}, key_value, key;
    forEach((keyValue || '').split('&'), function (keyValue) {
      if (keyValue) {
        key_value = keyValue.replace(/\+/g, '%20').split('=');
        key = tryDecodeURIComponent(key_value[0]);
        if (isDefined(key)) {
          var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
          if (!hasOwnProperty.call(obj, key)) {
            obj[key] = val;
          } else if (isArray(obj[key])) {
            obj[key].push(val);
          } else {
            obj[key] = [
              obj[key],
              val
            ];
          }
        }
      }
    });
    return obj;
  }
  function toKeyValue(obj) {
    var parts = [];
    forEach(obj, function (value, key) {
      if (isArray(value)) {
        forEach(value, function (arrayValue) {
          parts.push(encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
        });
      } else {
        parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));
      }
    });
    return parts.length ? parts.join('&') : '';
  }
  /**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
  function encodeUriSegment(val) {
    return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
  }
  /**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
  function encodeUriQuery(val, pctEncodeSpaces) {
    return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
  }
  /**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped and
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common, way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 */
  function angularInit(element, bootstrap) {
    var elements = [element], appElement, module, names = [
        'ng:app',
        'ng-app',
        'x-ng-app',
        'data-ng-app'
      ], NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;
    function append(element) {
      element && elements.push(element);
    }
    forEach(names, function (name) {
      names[name] = true;
      append(document.getElementById(name));
      name = name.replace(':', '\\:');
      if (element.querySelectorAll) {
        forEach(element.querySelectorAll('.' + name), append);
        forEach(element.querySelectorAll('.' + name + '\\:'), append);
        forEach(element.querySelectorAll('[' + name + ']'), append);
      }
    });
    forEach(elements, function (element) {
      if (!appElement) {
        var className = ' ' + element.className + ' ';
        var match = NG_APP_CLASS_REGEXP.exec(className);
        if (match) {
          appElement = element;
          module = (match[2] || '').replace(/\s+/g, ',');
        } else {
          forEach(element.attributes, function (attr) {
            if (!appElement && names[attr.name]) {
              appElement = element;
              module = attr.value;
            }
          });
        }
      }
    });
    if (appElement) {
      bootstrap(appElement, module ? [module] : []);
    }
  }
  /**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that ngScenario-based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * <example name="multi-bootstrap" module="multi-bootstrap">
 * <file name="index.html">
 * <script src="../../../angular.js"></script>
 * <div ng-controller="BrokenTable">
 *   <table>
 *   <tr>
 *     <th ng-repeat="heading in headings">{{heading}}</th>
 *   </tr>
 *   <tr ng-repeat="filling in fillings">
 *     <td ng-repeat="fill in filling">{{fill}}</td>
 *   </tr>
 * </table>
 * </div>
 * </file>
 * <file name="controller.js">
 * var app = angular.module('multi-bootstrap', [])
 *
 * .controller('BrokenTable', function($scope) {
 *     $scope.headings = ['One', 'Two', 'Three'];
 *     $scope.fillings = [[1, 2, 3], ['A', 'B', 'C'], [7, 8, 9]];
 * });
 * </file>
 * <file name="protractor.js" type="protractor">
 * it('should only insert one table cell for each item in $scope.fillings', function() {
 *  expect(element.all(by.css('td')).count())
 *      .toBe(9);
 * });
 * </file>
 * </example>
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a run block.
 *     See: {@link angular.module modules}
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
  function bootstrap(element, modules) {
    var doBootstrap = function () {
      element = jqLite(element);
      if (element.injector()) {
        var tag = element[0] === document ? 'document' : startingTag(element);
        //Encode angle brackets to prevent input from being sanitized to empty string #8683
        throw ngMinErr('btstrpd', 'App Already Bootstrapped with this Element \'{0}\'', tag.replace(/</, '&lt;').replace(/>/, '&gt;'));
      }
      modules = modules || [];
      modules.unshift([
        '$provide',
        function ($provide) {
          $provide.value('$rootElement', element);
        }
      ]);
      modules.unshift('ng');
      var injector = createInjector(modules);
      injector.invoke([
        '$rootScope',
        '$rootElement',
        '$compile',
        '$injector',
        '$animate',
        function (scope, element, compile, injector, animate) {
          scope.$apply(function () {
            element.data('$injector', injector);
            compile(element)(scope);
          });
        }
      ]);
      return injector;
    };
    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
      return doBootstrap();
    }
    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
    angular.resumeBootstrap = function (extraModules) {
      forEach(extraModules, function (module) {
        modules.push(module);
      });
      doBootstrap();
    };
  }
  var SNAKE_CASE_REGEXP = /[A-Z]/g;
  function snake_case(name, separator) {
    separator = separator || '_';
    return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }
  function bindJQuery() {
    // bind to jQuery if present;
    jQuery = window.jQuery;
    // Use jQuery if it exists with proper functionality, otherwise default to us.
    // Angular 1.2+ requires jQuery 1.7.1+ for on()/off() support.
    if (jQuery && jQuery.fn.on) {
      jqLite = jQuery;
      extend(jQuery.fn, {
        scope: JQLitePrototype.scope,
        isolateScope: JQLitePrototype.isolateScope,
        controller: JQLitePrototype.controller,
        injector: JQLitePrototype.injector,
        inheritedData: JQLitePrototype.inheritedData
      });
      // Method signature:
      //     jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments)
      jqLitePatchJQueryRemove('remove', true, true, false);
      jqLitePatchJQueryRemove('empty', false, false, false);
      jqLitePatchJQueryRemove('html', false, false, true);
    } else {
      jqLite = JQLite;
    }
    angular.element = jqLite;
  }
  /**
 * throw error if the argument is falsy.
 */
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', 'Argument \'{0}\' is {1}', name || '?', reason || 'required');
    }
    return arg;
  }
  function assertArgFn(arg, name, acceptArrayAnnotation) {
    if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
    }
    assertArg(isFunction(arg), name, 'not a function, got ' + (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
    return arg;
  }
  /**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
  function assertNotHasOwnProperty(name, context) {
    if (name === 'hasOwnProperty') {
      throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
    }
  }
  /**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
  //TODO(misko): this function needs to be removed
  function getter(obj, path, bindFnToScope) {
    if (!path)
      return obj;
    var keys = path.split('.');
    var key;
    var lastInstance = obj;
    var len = keys.length;
    for (var i = 0; i < len; i++) {
      key = keys[i];
      if (obj) {
        obj = (lastInstance = obj)[key];
      }
    }
    if (!bindFnToScope && isFunction(obj)) {
      return bind(lastInstance, obj);
    }
    return obj;
  }
  /**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {DOMElement} object containing the elements
 */
  function getBlockElements(nodes) {
    var startNode = nodes[0], endNode = nodes[nodes.length - 1];
    if (startNode === endNode) {
      return jqLite(startNode);
    }
    var element = startNode;
    var elements = [element];
    do {
      element = element.nextSibling;
      if (!element)
        break;
      elements.push(element);
    } while (element !== endNode);
    return jqLite(elements);
  }
  /**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */
  function setupModuleLoader(window) {
    var $injectorMinErr = minErr('$injector');
    var ngMinErr = minErr('ng');
    function ensure(obj, name, factory) {
      return obj[name] || (obj[name] = factory());
    }
    var angular = ensure(window, 'angular', Object);
    // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
    angular.$$minErr = angular.$$minErr || minErr;
    return ensure(angular, 'module', function () {
      /** @type {Object.<string, angular.Module>} */
      var modules = {};
      /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
      return function module(name, requires, configFn) {
        var assertNotHasOwnProperty = function (name, context) {
          if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
          }
        };
        assertNotHasOwnProperty(name, 'module');
        if (requires && modules.hasOwnProperty(name)) {
          modules[name] = null;
        }
        return ensure(modules, name, function () {
          if (!requires) {
            throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' + 'the module name or forgot to load it. If registering a module ensure that you ' + 'specify the dependencies as the second argument.', name);
          }
          /** @type {!Array.<Array.<*>>} */
          var invokeQueue = [];
          /** @type {!Array.<Function>} */
          var runBlocks = [];
          var config = invokeLater('$injector', 'invoke');
          /** @type {angular.Module} */
          var moduleInstance = {
              _invokeQueue: invokeQueue,
              _runBlocks: runBlocks,
              requires: requires,
              name: name,
              provider: invokeLater('$provide', 'provider'),
              factory: invokeLater('$provide', 'factory'),
              service: invokeLater('$provide', 'service'),
              value: invokeLater('$provide', 'value'),
              constant: invokeLater('$provide', 'constant', 'unshift'),
              animation: invokeLater('$animateProvider', 'register'),
              filter: invokeLater('$filterProvider', 'register'),
              controller: invokeLater('$controllerProvider', 'register'),
              directive: invokeLater('$compileProvider', 'directive'),
              config: config,
              run: function (block) {
                runBlocks.push(block);
                return this;
              }
            };
          if (configFn) {
            config(configFn);
          }
          return moduleInstance;
          /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
          function invokeLater(provider, method, insertMethod) {
            return function () {
              invokeQueue[insertMethod || 'push']([
                provider,
                method,
                arguments
              ]);
              return moduleInstance;
            };
          }
        });
      };
    });
  }
  /* global angularModule: true,
  version: true,

  $LocaleProvider,
  $CompileProvider,

    htmlAnchorDirective,
    inputDirective,
    inputDirective,
    formDirective,
    scriptDirective,
    selectDirective,
    styleDirective,
    optionDirective,
    ngBindDirective,
    ngBindHtmlDirective,
    ngBindTemplateDirective,
    ngClassDirective,
    ngClassEvenDirective,
    ngClassOddDirective,
    ngCspDirective,
    ngCloakDirective,
    ngControllerDirective,
    ngFormDirective,
    ngHideDirective,
    ngIfDirective,
    ngIncludeDirective,
    ngIncludeFillContentDirective,
    ngInitDirective,
    ngNonBindableDirective,
    ngPluralizeDirective,
    ngRepeatDirective,
    ngShowDirective,
    ngStyleDirective,
    ngSwitchDirective,
    ngSwitchWhenDirective,
    ngSwitchDefaultDirective,
    ngOptionsDirective,
    ngTranscludeDirective,
    ngModelDirective,
    ngListDirective,
    ngChangeDirective,
    requiredDirective,
    requiredDirective,
    ngValueDirective,
    ngAttributeAliasDirectives,
    ngEventDirectives,

    $AnchorScrollProvider,
    $AnimateProvider,
    $BrowserProvider,
    $CacheFactoryProvider,
    $ControllerProvider,
    $DocumentProvider,
    $ExceptionHandlerProvider,
    $FilterProvider,
    $InterpolateProvider,
    $IntervalProvider,
    $HttpProvider,
    $HttpBackendProvider,
    $LocationProvider,
    $LogProvider,
    $ParseProvider,
    $RootScopeProvider,
    $QProvider,
    $$SanitizeUriProvider,
    $SceProvider,
    $SceDelegateProvider,
    $SnifferProvider,
    $TemplateCacheProvider,
    $TimeoutProvider,
    $$RAFProvider,
    $$AsyncCallbackProvider,
    $WindowProvider
*/
  /**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
  var version = {
      full: '1.2.28',
      major: 1,
      minor: 2,
      dot: 28,
      codeName: 'finnish-disembarkation'
    };
  function publishExternalAPI(angular) {
    extend(angular, {
      'bootstrap': bootstrap,
      'copy': copy,
      'extend': extend,
      'equals': equals,
      'element': jqLite,
      'forEach': forEach,
      'injector': createInjector,
      'noop': noop,
      'bind': bind,
      'toJson': toJson,
      'fromJson': fromJson,
      'identity': identity,
      'isUndefined': isUndefined,
      'isDefined': isDefined,
      'isString': isString,
      'isFunction': isFunction,
      'isObject': isObject,
      'isNumber': isNumber,
      'isElement': isElement,
      'isArray': isArray,
      'version': version,
      'isDate': isDate,
      'lowercase': lowercase,
      'uppercase': uppercase,
      'callbacks': { counter: 0 },
      '$$minErr': minErr,
      '$$csp': csp
    });
    angularModule = setupModuleLoader(window);
    try {
      angularModule('ngLocale');
    } catch (e) {
      angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
    }
    angularModule('ng', ['ngLocale'], [
      '$provide',
      function ngModule($provide) {
        // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
        $provide.provider({ $$sanitizeUri: $$SanitizeUriProvider });
        $provide.provider('$compile', $CompileProvider).directive({
          a: htmlAnchorDirective,
          input: inputDirective,
          textarea: inputDirective,
          form: formDirective,
          script: scriptDirective,
          select: selectDirective,
          style: styleDirective,
          option: optionDirective,
          ngBind: ngBindDirective,
          ngBindHtml: ngBindHtmlDirective,
          ngBindTemplate: ngBindTemplateDirective,
          ngClass: ngClassDirective,
          ngClassEven: ngClassEvenDirective,
          ngClassOdd: ngClassOddDirective,
          ngCloak: ngCloakDirective,
          ngController: ngControllerDirective,
          ngForm: ngFormDirective,
          ngHide: ngHideDirective,
          ngIf: ngIfDirective,
          ngInclude: ngIncludeDirective,
          ngInit: ngInitDirective,
          ngNonBindable: ngNonBindableDirective,
          ngPluralize: ngPluralizeDirective,
          ngRepeat: ngRepeatDirective,
          ngShow: ngShowDirective,
          ngStyle: ngStyleDirective,
          ngSwitch: ngSwitchDirective,
          ngSwitchWhen: ngSwitchWhenDirective,
          ngSwitchDefault: ngSwitchDefaultDirective,
          ngOptions: ngOptionsDirective,
          ngTransclude: ngTranscludeDirective,
          ngModel: ngModelDirective,
          ngList: ngListDirective,
          ngChange: ngChangeDirective,
          required: requiredDirective,
          ngRequired: requiredDirective,
          ngValue: ngValueDirective
        }).directive({ ngInclude: ngIncludeFillContentDirective }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
        $provide.provider({
          $anchorScroll: $AnchorScrollProvider,
          $animate: $AnimateProvider,
          $browser: $BrowserProvider,
          $cacheFactory: $CacheFactoryProvider,
          $controller: $ControllerProvider,
          $document: $DocumentProvider,
          $exceptionHandler: $ExceptionHandlerProvider,
          $filter: $FilterProvider,
          $interpolate: $InterpolateProvider,
          $interval: $IntervalProvider,
          $http: $HttpProvider,
          $httpBackend: $HttpBackendProvider,
          $location: $LocationProvider,
          $log: $LogProvider,
          $parse: $ParseProvider,
          $rootScope: $RootScopeProvider,
          $q: $QProvider,
          $sce: $SceProvider,
          $sceDelegate: $SceDelegateProvider,
          $sniffer: $SnifferProvider,
          $templateCache: $TemplateCacheProvider,
          $timeout: $TimeoutProvider,
          $window: $WindowProvider,
          $$rAF: $$RAFProvider,
          $$asyncCallback: $$AsyncCallbackProvider
        });
      }
    ]);
  }
  /* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true
*/
  //////////////////////////////////
  //JQLite
  //////////////////////////////////
  /**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use jQuery, simply load it before `DOMContentLoaded` event fired.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/)
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyles()`
 * - [`data()`](http://api.jquery.com/data/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */
  JQLite.expando = 'ng339';
  var jqCache = JQLite.cache = {}, jqId = 1, addEventListenerFn = window.document.addEventListener ? function (element, type, fn) {
      element.addEventListener(type, fn, false);
    } : function (element, type, fn) {
      element.attachEvent('on' + type, fn);
    }, removeEventListenerFn = window.document.removeEventListener ? function (element, type, fn) {
      element.removeEventListener(type, fn, false);
    } : function (element, type, fn) {
      element.detachEvent('on' + type, fn);
    };
  /*
 * !!! This is an undocumented "private" function !!!
 */
  var jqData = JQLite._data = function (node) {
      //jQuery always returns an object on cache miss
      return this.cache[node[this.expando]] || {};
    };
  function jqNextId() {
    return ++jqId;
  }
  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var jqLiteMinErr = minErr('jqLite');
  /**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
  function camelCase(name) {
    return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).replace(MOZ_HACK_REGEXP, 'Moz$1');
  }
  /////////////////////////////////////////////
  // jQuery mutation patch
  //
  // In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a
  // $destroy event on all DOM nodes being removed.
  //
  /////////////////////////////////////////////
  function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
    var originalJqFn = jQuery.fn[name];
    originalJqFn = originalJqFn.$original || originalJqFn;
    removePatch.$original = originalJqFn;
    jQuery.fn[name] = removePatch;
    function removePatch(param) {
      // jshint -W040
      var list = filterElems && param ? [this.filter(param)] : [this], fireEvent = dispatchThis, set, setIndex, setLength, element, childIndex, childLength, children;
      if (!getterIfNoArguments || param != null) {
        while (list.length) {
          set = list.shift();
          for (setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
            element = jqLite(set[setIndex]);
            if (fireEvent) {
              element.triggerHandler('$destroy');
            } else {
              fireEvent = !fireEvent;
            }
            for (childIndex = 0, childLength = (children = element.children()).length; childIndex < childLength; childIndex++) {
              list.push(jQuery(children[childIndex]));
            }
          }
        }
      }
      return originalJqFn.apply(this, arguments);
    }
  }
  var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var HTML_REGEXP = /<|&#?\w+;/;
  var TAG_NAME_REGEXP = /<([\w:]+)/;
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
  var wrapMap = {
      'option': [
        1,
        '<select multiple="multiple">',
        '</select>'
      ],
      'thead': [
        1,
        '<table>',
        '</table>'
      ],
      'col': [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      'tr': [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      'td': [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      '_default': [
        0,
        '',
        ''
      ]
    };
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  function jqLiteIsTextNode(html) {
    return !HTML_REGEXP.test(html);
  }
  function jqLiteBuildFragment(html, context) {
    var elem, tmp, tag, wrap, fragment = context.createDocumentFragment(), nodes = [], i, j, jj;
    if (jqLiteIsTextNode(html)) {
      // Convert non-html into a text node
      nodes.push(context.createTextNode(html));
    } else {
      tmp = fragment.appendChild(context.createElement('div'));
      // Convert html into DOM nodes
      tag = (TAG_NAME_REGEXP.exec(html) || [
        '',
        ''
      ])[1].toLowerCase();
      wrap = wrapMap[tag] || wrapMap._default;
      tmp.innerHTML = '<div>&#160;</div>' + wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];
      tmp.removeChild(tmp.firstChild);
      // Descend through wrappers to the right content
      i = wrap[0];
      while (i--) {
        tmp = tmp.lastChild;
      }
      for (j = 0, jj = tmp.childNodes.length; j < jj; ++j)
        nodes.push(tmp.childNodes[j]);
      tmp = fragment.firstChild;
      tmp.textContent = '';
    }
    // Remove wrapper from fragment
    fragment.textContent = '';
    fragment.innerHTML = '';
    // Clear inner HTML
    return nodes;
  }
  function jqLiteParseHTML(html, context) {
    context = context || document;
    var parsed;
    if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
      return [context.createElement(parsed[1])];
    }
    return jqLiteBuildFragment(html, context);
  }
  /////////////////////////////////////////////
  function JQLite(element) {
    if (element instanceof JQLite) {
      return element;
    }
    if (isString(element)) {
      element = trim(element);
    }
    if (!(this instanceof JQLite)) {
      if (isString(element) && element.charAt(0) != '<') {
        throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
      }
      return new JQLite(element);
    }
    if (isString(element)) {
      jqLiteAddNodes(this, jqLiteParseHTML(element));
      var fragment = jqLite(document.createDocumentFragment());
      fragment.append(this);
    } else {
      jqLiteAddNodes(this, element);
    }
  }
  function jqLiteClone(element) {
    return element.cloneNode(true);
  }
  function jqLiteDealoc(element) {
    jqLiteRemoveData(element);
    for (var i = 0, children = element.childNodes || []; i < children.length; i++) {
      jqLiteDealoc(children[i]);
    }
  }
  function jqLiteOff(element, type, fn, unsupported) {
    if (isDefined(unsupported))
      throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
    var events = jqLiteExpandoStore(element, 'events'), handle = jqLiteExpandoStore(element, 'handle');
    if (!handle)
      return;
    //no listeners registered
    if (isUndefined(type)) {
      forEach(events, function (eventHandler, type) {
        removeEventListenerFn(element, type, eventHandler);
        delete events[type];
      });
    } else {
      forEach(type.split(' '), function (type) {
        if (isUndefined(fn)) {
          removeEventListenerFn(element, type, events[type]);
          delete events[type];
        } else {
          arrayRemove(events[type] || [], fn);
        }
      });
    }
  }
  function jqLiteRemoveData(element, name) {
    var expandoId = element.ng339, expandoStore = jqCache[expandoId];
    if (expandoStore) {
      if (name) {
        delete jqCache[expandoId].data[name];
        return;
      }
      if (expandoStore.handle) {
        expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
        jqLiteOff(element);
      }
      delete jqCache[expandoId];
      element.ng339 = undefined;  // don't delete DOM expandos. IE and Chrome don't like it
    }
  }
  function jqLiteExpandoStore(element, key, value) {
    var expandoId = element.ng339, expandoStore = jqCache[expandoId || -1];
    if (isDefined(value)) {
      if (!expandoStore) {
        element.ng339 = expandoId = jqNextId();
        expandoStore = jqCache[expandoId] = {};
      }
      expandoStore[key] = value;
    } else {
      return expandoStore && expandoStore[key];
    }
  }
  function jqLiteData(element, key, value) {
    var data = jqLiteExpandoStore(element, 'data'), isSetter = isDefined(value), keyDefined = !isSetter && isDefined(key), isSimpleGetter = keyDefined && !isObject(key);
    if (!data && !isSimpleGetter) {
      jqLiteExpandoStore(element, 'data', data = {});
    }
    if (isSetter) {
      data[key] = value;
    } else {
      if (keyDefined) {
        if (isSimpleGetter) {
          // don't create data in this case.
          return data && data[key];
        } else {
          extend(data, key);
        }
      } else {
        return data;
      }
    }
  }
  function jqLiteHasClass(element, selector) {
    if (!element.getAttribute)
      return false;
    return (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + selector + ' ') > -1;
  }
  function jqLiteRemoveClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      forEach(cssClasses.split(' '), function (cssClass) {
        element.setAttribute('class', trim((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').replace(' ' + trim(cssClass) + ' ', ' ')));
      });
    }
  }
  function jqLiteAddClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ');
      forEach(cssClasses.split(' '), function (cssClass) {
        cssClass = trim(cssClass);
        if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
          existingClasses += cssClass + ' ';
        }
      });
      element.setAttribute('class', trim(existingClasses));
    }
  }
  function jqLiteAddNodes(root, elements) {
    if (elements) {
      elements = !elements.nodeName && isDefined(elements.length) && !isWindow(elements) ? elements : [elements];
      for (var i = 0; i < elements.length; i++) {
        root.push(elements[i]);
      }
    }
  }
  function jqLiteController(element, name) {
    return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
  }
  function jqLiteInheritedData(element, name, value) {
    // if element is the document object work with the html element instead
    // this makes $(document).scope() possible
    if (element.nodeType == 9) {
      element = element.documentElement;
    }
    var names = isArray(name) ? name : [name];
    while (element) {
      for (var i = 0, ii = names.length; i < ii; i++) {
        if ((value = jqLite.data(element, names[i])) !== undefined)
          return value;
      }
      // If dealing with a document fragment node with a host element, and no parent, use the host
      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
      // to lookup parent controllers.
      element = element.parentNode || element.nodeType === 11 && element.host;
    }
  }
  function jqLiteEmpty(element) {
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      jqLiteDealoc(childNodes[i]);
    }
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }
  //////////////////////////////////////////
  // Functions which are declared directly.
  //////////////////////////////////////////
  var JQLitePrototype = JQLite.prototype = {
      ready: function (fn) {
        var fired = false;
        function trigger() {
          if (fired)
            return;
          fired = true;
          fn();
        }
        // check if document already is loaded
        if (document.readyState === 'complete') {
          setTimeout(trigger);
        } else {
          this.on('DOMContentLoaded', trigger);
          // works for modern browsers and IE9
          // we can not use jqLite since we are not done loading and jQuery could be loaded later.
          // jshint -W064
          JQLite(window).on('load', trigger);  // fallback to window.onload for others
                                               // jshint +W064
        }
      },
      toString: function () {
        var value = [];
        forEach(this, function (e) {
          value.push('' + e);
        });
        return '[' + value.join(', ') + ']';
      },
      eq: function (index) {
        return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
      },
      length: 0,
      push: push,
      sort: [].sort,
      splice: [].splice
    };
  //////////////////////////////////////////
  // Functions iterating getter/setters.
  // these functions return self on setter and
  // value on get.
  //////////////////////////////////////////
  var BOOLEAN_ATTR = {};
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
    BOOLEAN_ATTR[lowercase(value)] = value;
  });
  var BOOLEAN_ELEMENTS = {};
  forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
    BOOLEAN_ELEMENTS[uppercase(value)] = true;
  });
  function getBooleanAttrName(element, name) {
    // check dom last since we will most likely fail on name
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
    // booleanAttr is here twice to minimize DOM access
    return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
  }
  forEach({
    data: jqLiteData,
    removeData: jqLiteRemoveData
  }, function (fn, name) {
    JQLite[name] = fn;
  });
  forEach({
    data: jqLiteData,
    inheritedData: jqLiteInheritedData,
    scope: function (element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, [
        '$isolateScope',
        '$scope'
      ]);
    },
    isolateScope: function (element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
    },
    controller: jqLiteController,
    injector: function (element) {
      return jqLiteInheritedData(element, '$injector');
    },
    removeAttr: function (element, name) {
      element.removeAttribute(name);
    },
    hasClass: jqLiteHasClass,
    css: function (element, name, value) {
      name = camelCase(name);
      if (isDefined(value)) {
        element.style[name] = value;
      } else {
        var val;
        if (msie <= 8) {
          // this is some IE specific weirdness that jQuery 1.6.4 does not sure why
          val = element.currentStyle && element.currentStyle[name];
          if (val === '')
            val = 'auto';
        }
        val = val || element.style[name];
        if (msie <= 8) {
          // jquery weirdness :-/
          val = val === '' ? undefined : val;
        }
        return val;
      }
    },
    attr: function (element, name, value) {
      var lowercasedName = lowercase(name);
      if (BOOLEAN_ATTR[lowercasedName]) {
        if (isDefined(value)) {
          if (!!value) {
            element[name] = true;
            element.setAttribute(name, lowercasedName);
          } else {
            element[name] = false;
            element.removeAttribute(lowercasedName);
          }
        } else {
          return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
        }
      } else if (isDefined(value)) {
        element.setAttribute(name, value);
      } else if (element.getAttribute) {
        // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
        // some elements (e.g. Document) don't have get attribute, so return undefined
        var ret = element.getAttribute(name, 2);
        // normalize non-existing attributes to undefined (as jQuery)
        return ret === null ? undefined : ret;
      }
    },
    prop: function (element, name, value) {
      if (isDefined(value)) {
        element[name] = value;
      } else {
        return element[name];
      }
    },
    text: function () {
      var NODE_TYPE_TEXT_PROPERTY = [];
      if (msie < 9) {
        NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';
        /** Element **/
        NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';  /** Text **/
      } else {
        NODE_TYPE_TEXT_PROPERTY[1] = NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';  /** Text **/
      }
      getText.$dv = '';
      return getText;
      function getText(element, value) {
        var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
        if (isUndefined(value)) {
          return textProp ? element[textProp] : '';
        }
        element[textProp] = value;
      }
    }(),
    val: function (element, value) {
      if (isUndefined(value)) {
        if (nodeName_(element) === 'SELECT' && element.multiple) {
          var result = [];
          forEach(element.options, function (option) {
            if (option.selected) {
              result.push(option.value || option.text);
            }
          });
          return result.length === 0 ? null : result;
        }
        return element.value;
      }
      element.value = value;
    },
    html: function (element, value) {
      if (isUndefined(value)) {
        return element.innerHTML;
      }
      for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
        jqLiteDealoc(childNodes[i]);
      }
      element.innerHTML = value;
    },
    empty: jqLiteEmpty
  }, function (fn, name) {
    /**
   * Properties: writes return selection, reads return first value
   */
    JQLite.prototype[name] = function (arg1, arg2) {
      var i, key;
      var nodeCount = this.length;
      // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
      // in a way that survives minification.
      // jqLiteEmpty takes no arguments but is a setter.
      if (fn !== jqLiteEmpty && (fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController) ? arg1 : arg2) === undefined) {
        if (isObject(arg1)) {
          // we are a write, but the object properties are the key/values
          for (i = 0; i < nodeCount; i++) {
            if (fn === jqLiteData) {
              // data() takes the whole object in jQuery
              fn(this[i], arg1);
            } else {
              for (key in arg1) {
                fn(this[i], key, arg1[key]);
              }
            }
          }
          // return self for chaining
          return this;
        } else {
          // we are a read, so read the first child.
          // TODO: do we still need this?
          var value = fn.$dv;
          // Only if we have $dv do we iterate over all, otherwise it is just the first element.
          var jj = value === undefined ? Math.min(nodeCount, 1) : nodeCount;
          for (var j = 0; j < jj; j++) {
            var nodeValue = fn(this[j], arg1, arg2);
            value = value ? value + nodeValue : nodeValue;
          }
          return value;
        }
      } else {
        // we are a write, so apply to all children
        for (i = 0; i < nodeCount; i++) {
          fn(this[i], arg1, arg2);
        }
        // return self for chaining
        return this;
      }
    };
  });
  function createEventHandler(element, events) {
    var eventHandler = function (event, type) {
      if (!event.preventDefault) {
        event.preventDefault = function () {
          event.returnValue = false;  //ie
        };
      }
      if (!event.stopPropagation) {
        event.stopPropagation = function () {
          event.cancelBubble = true;  //ie
        };
      }
      if (!event.target) {
        event.target = event.srcElement || document;
      }
      if (isUndefined(event.defaultPrevented)) {
        var prevent = event.preventDefault;
        event.preventDefault = function () {
          event.defaultPrevented = true;
          prevent.call(event);
        };
        event.defaultPrevented = false;
      }
      event.isDefaultPrevented = function () {
        return event.defaultPrevented || event.returnValue === false;
      };
      // Copy event handlers in case event handlers array is modified during execution.
      var eventHandlersCopy = shallowCopy(events[type || event.type] || []);
      forEach(eventHandlersCopy, function (fn) {
        fn.call(element, event);
      });
      // Remove monkey-patched methods (IE),
      // as they would cause memory leaks in IE8.
      if (msie <= 8) {
        // IE7/8 does not allow to delete property on native object
        event.preventDefault = null;
        event.stopPropagation = null;
        event.isDefaultPrevented = null;
      } else {
        // It shouldn't affect normal browsers (native methods are defined on prototype).
        delete event.preventDefault;
        delete event.stopPropagation;
        delete event.isDefaultPrevented;
      }
    };
    eventHandler.elem = element;
    return eventHandler;
  }
  //////////////////////////////////////////
  // Functions iterating traversal.
  // These functions chain results into a single
  // selector.
  //////////////////////////////////////////
  forEach({
    removeData: jqLiteRemoveData,
    dealoc: jqLiteDealoc,
    on: function onFn(element, type, fn, unsupported) {
      if (isDefined(unsupported))
        throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
      var events = jqLiteExpandoStore(element, 'events'), handle = jqLiteExpandoStore(element, 'handle');
      if (!events)
        jqLiteExpandoStore(element, 'events', events = {});
      if (!handle)
        jqLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));
      forEach(type.split(' '), function (type) {
        var eventFns = events[type];
        if (!eventFns) {
          if (type == 'mouseenter' || type == 'mouseleave') {
            var contains = document.body.contains || document.body.compareDocumentPosition ? function (a, b) {
                // jshint bitwise: false
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
              } : function (a, b) {
                if (b) {
                  while (b = b.parentNode) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };
            events[type] = [];
            // Refer to jQuery's implementation of mouseenter & mouseleave
            // Read about mouseenter and mouseleave:
            // http://www.quirksmode.org/js/events_mouse.html#link8
            var eventmap = {
                mouseleave: 'mouseout',
                mouseenter: 'mouseover'
              };
            onFn(element, eventmap[type], function (event) {
              var target = this, related = event.relatedTarget;
              // For mousenter/leave call the handler if related is outside the target.
              // NB: No relatedTarget if the mouse left/entered the browser window
              if (!related || related !== target && !contains(target, related)) {
                handle(event, type);
              }
            });
          } else {
            addEventListenerFn(element, type, handle);
            events[type] = [];
          }
          eventFns = events[type];
        }
        eventFns.push(fn);
      });
    },
    off: jqLiteOff,
    one: function (element, type, fn) {
      element = jqLite(element);
      //add the listener twice so that when it is called
      //you can remove the original function and still be
      //able to call element.off(ev, fn) normally
      element.on(type, function onFn() {
        element.off(type, fn);
        element.off(type, onFn);
      });
      element.on(type, fn);
    },
    replaceWith: function (element, replaceNode) {
      var index, parent = element.parentNode;
      jqLiteDealoc(element);
      forEach(new JQLite(replaceNode), function (node) {
        if (index) {
          parent.insertBefore(node, index.nextSibling);
        } else {
          parent.replaceChild(node, element);
        }
        index = node;
      });
    },
    children: function (element) {
      var children = [];
      forEach(element.childNodes, function (element) {
        if (element.nodeType === 1)
          children.push(element);
      });
      return children;
    },
    contents: function (element) {
      return element.contentDocument || element.childNodes || [];
    },
    append: function (element, node) {
      forEach(new JQLite(node), function (child) {
        if (element.nodeType === 1 || element.nodeType === 11) {
          element.appendChild(child);
        }
      });
    },
    prepend: function (element, node) {
      if (element.nodeType === 1) {
        var index = element.firstChild;
        forEach(new JQLite(node), function (child) {
          element.insertBefore(child, index);
        });
      }
    },
    wrap: function (element, wrapNode) {
      wrapNode = jqLite(wrapNode)[0];
      var parent = element.parentNode;
      if (parent) {
        parent.replaceChild(wrapNode, element);
      }
      wrapNode.appendChild(element);
    },
    remove: function (element) {
      jqLiteDealoc(element);
      var parent = element.parentNode;
      if (parent)
        parent.removeChild(element);
    },
    after: function (element, newElement) {
      var index = element, parent = element.parentNode;
      forEach(new JQLite(newElement), function (node) {
        parent.insertBefore(node, index.nextSibling);
        index = node;
      });
    },
    addClass: jqLiteAddClass,
    removeClass: jqLiteRemoveClass,
    toggleClass: function (element, selector, condition) {
      if (selector) {
        forEach(selector.split(' '), function (className) {
          var classCondition = condition;
          if (isUndefined(classCondition)) {
            classCondition = !jqLiteHasClass(element, className);
          }
          (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
        });
      }
    },
    parent: function (element) {
      var parent = element.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    next: function (element) {
      if (element.nextElementSibling) {
        return element.nextElementSibling;
      }
      // IE8 doesn't have nextElementSibling
      var elm = element.nextSibling;
      while (elm != null && elm.nodeType !== 1) {
        elm = elm.nextSibling;
      }
      return elm;
    },
    find: function (element, selector) {
      if (element.getElementsByTagName) {
        return element.getElementsByTagName(selector);
      } else {
        return [];
      }
    },
    clone: jqLiteClone,
    triggerHandler: function (element, event, extraParameters) {
      var dummyEvent, eventFnsCopy, handlerArgs;
      var eventName = event.type || event;
      var eventFns = (jqLiteExpandoStore(element, 'events') || {})[eventName];
      if (eventFns) {
        // Create a dummy event to pass to the handlers
        dummyEvent = {
          preventDefault: function () {
            this.defaultPrevented = true;
          },
          isDefaultPrevented: function () {
            return this.defaultPrevented === true;
          },
          stopPropagation: noop,
          type: eventName,
          target: element
        };
        // If a custom event was provided then extend our dummy event with it
        if (event.type) {
          dummyEvent = extend(dummyEvent, event);
        }
        // Copy event handlers in case event handlers array is modified during execution.
        eventFnsCopy = shallowCopy(eventFns);
        handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
        forEach(eventFnsCopy, function (fn) {
          fn.apply(element, handlerArgs);
        });
      }
    }
  }, function (fn, name) {
    /**
   * chaining functions
   */
    JQLite.prototype[name] = function (arg1, arg2, arg3) {
      var value;
      for (var i = 0; i < this.length; i++) {
        if (isUndefined(value)) {
          value = fn(this[i], arg1, arg2, arg3);
          if (isDefined(value)) {
            // any function which returns a value needs to be wrapped
            value = jqLite(value);
          }
        } else {
          jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
        }
      }
      return isDefined(value) ? value : this;
    };
    // bind legacy bind/unbind to on/off
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
  });
  /**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
  function hashKey(obj, nextUidFn) {
    var objType = typeof obj, key;
    if (objType == 'function' || objType == 'object' && obj !== null) {
      if (typeof (key = obj.$$hashKey) == 'function') {
        // must invoke on object to keep the right this
        key = obj.$$hashKey();
      } else if (key === undefined) {
        key = obj.$$hashKey = (nextUidFn || nextUid)();
      }
    } else {
      key = obj;
    }
    return objType + ':' + key;
  }
  /**
 * HashMap which can use objects as keys
 */
  function HashMap(array, isolatedUid) {
    if (isolatedUid) {
      var uid = 0;
      this.nextUid = function () {
        return ++uid;
      };
    }
    forEach(array, this.put, this);
  }
  HashMap.prototype = {
    put: function (key, value) {
      this[hashKey(key, this.nextUid)] = value;
    },
    get: function (key) {
      return this[hashKey(key, this.nextUid)];
    },
    remove: function (key) {
      var value = this[key = hashKey(key, this.nextUid)];
      delete this[key];
      return value;
    }
  };
  /**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *

 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *        {@link angular.module}. The `ng` module must be explicitly added.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document){
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */
  /**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */
  var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
  var $injectorMinErr = minErr('$injector');
  function annotate(fn) {
    var $inject, fnText, argDecl, last;
    if (typeof fn === 'function') {
      if (!($inject = fn.$inject)) {
        $inject = [];
        if (fn.length) {
          fnText = fn.toString().replace(STRIP_COMMENTS, '');
          argDecl = fnText.match(FN_ARGS);
          forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
            arg.replace(FN_ARG, function (all, underscore, name) {
              $inject.push(name);
            });
          });
        }
        fn.$inject = $inject;
      }
    } else if (isArray(fn)) {
      last = fn.length - 1;
      assertArgFn(fn[last], 'fn');
      $inject = fn.slice(0, last);
    } else {
      assertArgFn(fn, 'fn', true);
    }
    return $inject;
  }
  ///////////////////////////////////////
  /**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector){
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. *NOTE:* This does not work with
 * minification, and obfuscation tools since these tools change the argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */
  /**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @return {*} The instance.
 */
  /**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!Function} fn The function to invoke. Function parameters are injected according to the
 *   {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */
  /**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */
  /**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */
  /**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */
  /**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */
  /**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
 *                            for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */
  function createInjector(modulesToLoad) {
    var INSTANTIATING = {}, providerSuffix = 'Provider', path = [], loadedModules = new HashMap([], true), providerCache = {
        $provide: {
          provider: supportObject(provider),
          factory: supportObject(factory),
          service: supportObject(service),
          value: supportObject(value),
          constant: supportObject(constant),
          decorator: decorator
        }
      }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function () {
        throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
      }), instanceCache = {}, instanceInjector = instanceCache.$injector = createInternalInjector(instanceCache, function (servicename) {
        var provider = providerInjector.get(servicename + providerSuffix);
        return instanceInjector.invoke(provider.$get, provider);
      });
    forEach(loadModules(modulesToLoad), function (fn) {
      instanceInjector.invoke(fn || noop);
    });
    return instanceInjector;
    ////////////////////////////////////
    // $provider
    ////////////////////////////////////
    function supportObject(delegate) {
      return function (key, value) {
        if (isObject(key)) {
          forEach(key, reverseParams(delegate));
        } else {
          return delegate(key, value);
        }
      };
    }
    function provider(name, provider_) {
      assertNotHasOwnProperty(name, 'service');
      if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
      }
      if (!provider_.$get) {
        throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
      }
      return providerCache[name + providerSuffix] = provider_;
    }
    function factory(name, factoryFn) {
      return provider(name, { $get: factoryFn });
    }
    function service(name, constructor) {
      return factory(name, [
        '$injector',
        function ($injector) {
          return $injector.instantiate(constructor);
        }
      ]);
    }
    function value(name, val) {
      return factory(name, valueFn(val));
    }
    function constant(name, value) {
      assertNotHasOwnProperty(name, 'constant');
      providerCache[name] = value;
      instanceCache[name] = value;
    }
    function decorator(serviceName, decorFn) {
      var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
      origProvider.$get = function () {
        var origInstance = instanceInjector.invoke(orig$get, origProvider);
        return instanceInjector.invoke(decorFn, null, { $delegate: origInstance });
      };
    }
    ////////////////////////////////////
    // Module Loading
    ////////////////////////////////////
    function loadModules(modulesToLoad) {
      var runBlocks = [], moduleFn, invokeQueue, i, ii;
      forEach(modulesToLoad, function (module) {
        if (loadedModules.get(module))
          return;
        loadedModules.put(module, true);
        try {
          if (isString(module)) {
            moduleFn = angularModule(module);
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
            for (invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
              var invokeArgs = invokeQueue[i], provider = providerInjector.get(invokeArgs[0]);
              provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
            }
          } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else {
            assertArgFn(module, 'module');
          }
        } catch (e) {
          if (isArray(module)) {
            module = module[module.length - 1];
          }
          if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
            // Safari & FF's stack traces don't contain error.message content
            // unlike those of Chrome and IE
            // So if stack doesn't contain message, we create a new string that contains both.
            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
            /* jshint -W022 */
            e = e.message + '\n' + e.stack;
          }
          throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}', module, e.stack || e.message || e);
        }
      });
      return runBlocks;
    }
    ////////////////////////////////////
    // internal Injector
    ////////////////////////////////////
    function createInternalInjector(cache, factory) {
      function getService(serviceName) {
        if (cache.hasOwnProperty(serviceName)) {
          if (cache[serviceName] === INSTANTIATING) {
            throw $injectorMinErr('cdep', 'Circular dependency found: {0}', serviceName + ' <- ' + path.join(' <- '));
          }
          return cache[serviceName];
        } else {
          try {
            path.unshift(serviceName);
            cache[serviceName] = INSTANTIATING;
            return cache[serviceName] = factory(serviceName);
          } catch (err) {
            if (cache[serviceName] === INSTANTIATING) {
              delete cache[serviceName];
            }
            throw err;
          } finally {
            path.shift();
          }
        }
      }
      function invoke(fn, self, locals) {
        var args = [], $inject = annotate(fn), length, i, key;
        for (i = 0, length = $inject.length; i < length; i++) {
          key = $inject[i];
          if (typeof key !== 'string') {
            throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
          }
          args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key));
        }
        if (isArray(fn)) {
          fn = fn[length];
        }
        // http://jsperf.com/angularjs-invoke-apply-vs-switch
        // #5388
        return fn.apply(self, args);
      }
      function instantiate(Type, locals) {
        var Constructor = function () {
          }, instance, returnedValue;
        // Check if Type is annotated and use just the given function at n-1 as parameter
        // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
        Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
        instance = new Constructor();
        returnedValue = invoke(Type, instance, locals);
        return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
      }
      return {
        invoke: invoke,
        instantiate: instantiate,
        get: getService,
        annotate: annotate,
        has: function (name) {
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
        }
      };
    }
  }
  /**
 * @ngdoc service
 * @name $anchorScroll
 * @kind function
 * @requires $window
 * @requires $location
 * @requires $rootScope
 *
 * @description
 * When called, it checks current value of `$location.hash()` and scrolls to the related element,
 * according to rules specified in
 * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
 *
 * It also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.
 * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.
 *
 * @example
   <example>
     <file name="index.html">
       <div id="scrollArea" ng-controller="ScrollCtrl">
         <a ng-click="gotoBottom()">Go to bottom</a>
         <a id="bottom"></a> You're at the bottom!
       </div>
     </file>
     <file name="script.js">
       function ScrollCtrl($scope, $location, $anchorScroll) {
         $scope.gotoBottom = function (){
           // set the location.hash to the id of
           // the element you wish to scroll to.
           $location.hash('bottom');

           // call $anchorScroll()
           $anchorScroll();
         };
       }
     </file>
     <file name="style.css">
       #scrollArea {
         height: 350px;
         overflow: auto;
       }

       #bottom {
         display: block;
         margin-top: 2000px;
       }
     </file>
   </example>
 */
  function $AnchorScrollProvider() {
    var autoScrollingEnabled = true;
    /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
    this.disableAutoScrolling = function () {
      autoScrollingEnabled = false;
    };
    this.$get = [
      '$window',
      '$location',
      '$rootScope',
      function ($window, $location, $rootScope) {
        var document = $window.document;
        // helper function to get first anchor from a NodeList
        // can't use filter.filter, as it accepts only instances of Array
        // and IE can't convert NodeList to an array using [].slice
        // TODO(vojta): use filter if we change it to accept lists as well
        function getFirstAnchor(list) {
          var result = null;
          forEach(list, function (element) {
            if (!result && lowercase(element.nodeName) === 'a')
              result = element;
          });
          return result;
        }
        function scroll() {
          var hash = $location.hash(), elm;
          // empty hash, scroll to the top of the page
          if (!hash)
            $window.scrollTo(0, 0);  // element with given id
          else if (elm = document.getElementById(hash))
            elm.scrollIntoView();  // first anchor with given name :-D
          else if (elm = getFirstAnchor(document.getElementsByName(hash)))
            elm.scrollIntoView();  // no element and hash == 'top', scroll to the top of the page
          else if (hash === 'top')
            $window.scrollTo(0, 0);
        }
        // does not scroll when user clicks on anchor link that is currently on
        // (no url change, no $location.hash() change), browser native does scroll
        if (autoScrollingEnabled) {
          $rootScope.$watch(function autoScrollWatch() {
            return $location.hash();
          }, function autoScrollWatchAction() {
            $rootScope.$evalAsync(scroll);
          });
        }
        return scroll;
      }
    ];
  }
  var $animateMinErr = minErr('$animate');
  /**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
  var $AnimateProvider = [
      '$provide',
      function ($provide) {
        this.$$selectors = {};
        /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   * ```js
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   * ```
   *
   * @param {string} name The name of the animation.
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
        this.register = function (name, factory) {
          var key = name + '-animation';
          if (name && name.charAt(0) != '.')
            throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
          this.$$selectors[name.substr(1)] = key;
          $provide.factory(key, factory);
        };
        /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
        this.classNameFilter = function (expression) {
          if (arguments.length === 1) {
            this.$$classNameFilter = expression instanceof RegExp ? expression : null;
          }
          return this.$$classNameFilter;
        };
        this.$get = [
          '$timeout',
          '$$asyncCallback',
          function ($timeout, $$asyncCallback) {
            function async(fn) {
              fn && $$asyncCallback(fn);
            }
            /**
     *
     * @ngdoc service
     * @name $animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
            return {
              enter: function (element, parent, after, done) {
                if (after) {
                  after.after(element);
                } else {
                  if (!parent || !parent[0]) {
                    parent = after.parent();
                  }
                  parent.append(element);
                }
                async(done);
              },
              leave: function (element, done) {
                element.remove();
                async(done);
              },
              move: function (element, parent, after, done) {
                // Do not remove element before insert. Removing will cause data associated with the
                // element to be dropped. Insert will implicitly do the remove.
                this.enter(element, parent, after, done);
              },
              addClass: function (element, className, done) {
                className = isString(className) ? className : isArray(className) ? className.join(' ') : '';
                forEach(element, function (element) {
                  jqLiteAddClass(element, className);
                });
                async(done);
              },
              removeClass: function (element, className, done) {
                className = isString(className) ? className : isArray(className) ? className.join(' ') : '';
                forEach(element, function (element) {
                  jqLiteRemoveClass(element, className);
                });
                async(done);
              },
              setClass: function (element, add, remove, done) {
                forEach(element, function (element) {
                  jqLiteAddClass(element, add);
                  jqLiteRemoveClass(element, remove);
                });
                async(done);
              },
              enabled: noop
            };
          }
        ];
      }
    ];
  function $$AsyncCallbackProvider() {
    this.$get = [
      '$$rAF',
      '$timeout',
      function ($$rAF, $timeout) {
        return $$rAF.supported ? function (fn) {
          return $$rAF(fn);
        } : function (fn) {
          return $timeout(fn, 0, false);
        };
      }
    ];
  }
  /* global stripHash: true */
  /**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
  /**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {function()} XHR XMLHttpRequest constructor.
 * @param {object} $log console.log or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
  function Browser(window, document, $log, $sniffer) {
    var self = this, rawDocument = document[0], location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
    self.isMock = false;
    var outstandingRequestCount = 0;
    var outstandingRequestCallbacks = [];
    // TODO(vojta): remove this temporary api
    self.$$completeOutstandingRequest = completeOutstandingRequest;
    self.$$incOutstandingRequestCount = function () {
      outstandingRequestCount++;
    };
    /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
    function completeOutstandingRequest(fn) {
      try {
        fn.apply(null, sliceArgs(arguments, 1));
      } finally {
        outstandingRequestCount--;
        if (outstandingRequestCount === 0) {
          while (outstandingRequestCallbacks.length) {
            try {
              outstandingRequestCallbacks.pop()();
            } catch (e) {
              $log.error(e);
            }
          }
        }
      }
    }
    /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
    self.notifyWhenNoOutstandingRequests = function (callback) {
      // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
      // at some deterministic time in respect to the test runner's actions. Leaving things up to the
      // regular poller would result in flaky tests.
      forEach(pollFns, function (pollFn) {
        pollFn();
      });
      if (outstandingRequestCount === 0) {
        callback();
      } else {
        outstandingRequestCallbacks.push(callback);
      }
    };
    //////////////////////////////////////////////////////////////
    // Poll Watcher API
    //////////////////////////////////////////////////////////////
    var pollFns = [], pollTimeout;
    /**
   * @name $browser#addPollFn
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
    self.addPollFn = function (fn) {
      if (isUndefined(pollTimeout))
        startPoller(100, setTimeout);
      pollFns.push(fn);
      return fn;
    };
    /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
    function startPoller(interval, setTimeout) {
      (function check() {
        forEach(pollFns, function (pollFn) {
          pollFn();
        });
        pollTimeout = setTimeout(check, interval);
      }());
    }
    //////////////////////////////////////////////////////////////
    // URL API
    //////////////////////////////////////////////////////////////
    var lastBrowserUrl = location.href, baseElement = document.find('base'), reloadLocation = null;
    /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record ?
   */
    self.url = function (url, replace) {
      // Android Browser BFCache causes location, history reference to become stale.
      if (location !== window.location)
        location = window.location;
      if (history !== window.history)
        history = window.history;
      // setter
      if (url) {
        if (lastBrowserUrl == url)
          return;
        var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
        lastBrowserUrl = url;
        // Don't use history API if only the hash changed
        // due to a bug in IE10/IE11 which leads
        // to not firing a `hashchange` nor `popstate` event
        // in some cases (see #9143).
        if (!sameBase && $sniffer.history) {
          if (replace)
            history.replaceState(null, '', url);
          else {
            history.pushState(null, '', url);
            // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462
            baseElement.attr('href', baseElement.attr('href'));
          }
        } else {
          if (!sameBase) {
            reloadLocation = url;
          }
          if (replace) {
            location.replace(url);
          } else {
            location.href = url;
          }
        }
        return self;  // getter
      } else {
        // - reloadLocation is needed as browsers don't allow to read out
        //   the new location.href if a reload happened.
        // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
        return reloadLocation || location.href.replace(/%27/g, '\'');
      }
    };
    var urlChangeListeners = [], urlChangeInit = false;
    function fireUrlChange() {
      if (lastBrowserUrl == self.url())
        return;
      lastBrowserUrl = self.url();
      forEach(urlChangeListeners, function (listener) {
        listener(self.url());
      });
    }
    /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
    self.onUrlChange = function (callback) {
      // TODO(vojta): refactor to use node's syntax for events
      if (!urlChangeInit) {
        // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
        // don't fire popstate when user change the address bar and don't fire hashchange when url
        // changed by push/replaceState
        // html5 history api - popstate event
        if ($sniffer.history)
          jqLite(window).on('popstate', fireUrlChange);
        // hashchange event
        if ($sniffer.hashchange)
          jqLite(window).on('hashchange', fireUrlChange);  // polling
        else
          self.addPollFn(fireUrlChange);
        urlChangeInit = true;
      }
      urlChangeListeners.push(callback);
      return callback;
    };
    /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
    self.$$checkUrlChange = fireUrlChange;
    //////////////////////////////////////////////////////////////
    // Misc API
    //////////////////////////////////////////////////////////////
    /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
    self.baseHref = function () {
      var href = baseElement.attr('href');
      return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
    };
    //////////////////////////////////////////////////////////////
    // Cookies API
    //////////////////////////////////////////////////////////////
    var lastCookies = {};
    var lastCookieString = '';
    var cookiePath = self.baseHref();
    /**
   * @name $browser#cookies
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
    self.cookies = function (name, value) {
      /* global escape: false, unescape: false */
      var cookieLength, cookieArray, cookie, i, index;
      if (name) {
        if (value === undefined) {
          rawDocument.cookie = escape(name) + '=;path=' + cookiePath + ';expires=Thu, 01 Jan 1970 00:00:00 GMT';
        } else {
          if (isString(value)) {
            cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) + ';path=' + cookiePath).length + 1;
            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
            // - 300 cookies
            // - 20 cookies per unique domain
            // - 4096 bytes per cookie
            if (cookieLength > 4096) {
              $log.warn('Cookie \'' + name + '\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');
            }
          }
        }
      } else {
        if (rawDocument.cookie !== lastCookieString) {
          lastCookieString = rawDocument.cookie;
          cookieArray = lastCookieString.split('; ');
          lastCookies = {};
          for (i = 0; i < cookieArray.length; i++) {
            cookie = cookieArray[i];
            index = cookie.indexOf('=');
            if (index > 0) {
              //ignore nameless cookies
              name = unescape(cookie.substring(0, index));
              // the first value that is seen for a cookie is the most
              // specific one.  values for the same cookie name that
              // follow are for less specific paths.
              if (lastCookies[name] === undefined) {
                lastCookies[name] = unescape(cookie.substring(index + 1));
              }
            }
          }
        }
        return lastCookies;
      }
    };
    /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
    self.defer = function (fn, delay) {
      var timeoutId;
      outstandingRequestCount++;
      timeoutId = setTimeout(function () {
        delete pendingDeferIds[timeoutId];
        completeOutstandingRequest(fn);
      }, delay || 0);
      pendingDeferIds[timeoutId] = true;
      return timeoutId;
    };
    /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
    self.defer.cancel = function (deferId) {
      if (pendingDeferIds[deferId]) {
        delete pendingDeferIds[deferId];
        clearTimeout(deferId);
        completeOutstandingRequest(noop);
        return true;
      }
      return false;
    };
  }
  function $BrowserProvider() {
    this.$get = [
      '$window',
      '$log',
      '$sniffer',
      '$document',
      function ($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if ($scope.cache.get(key) === undefined) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, value === undefined ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
  function $CacheFactoryProvider() {
    this.$get = function () {
      var caches = {};
      function cacheFactory(cacheId, options) {
        if (cacheId in caches) {
          throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
        }
        var size = 0, stats = extend({}, options, { id: cacheId }), data = {}, capacity = options && options.capacity || Number.MAX_VALUE, lruHash = {}, freshEnd = null, staleEnd = null;
        /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
        return caches[cacheId] = {
          put: function (key, value) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key] || (lruHash[key] = { key: key });
              refresh(lruEntry);
            }
            if (isUndefined(value))
              return;
            if (!(key in data))
              size++;
            data[key] = value;
            if (size > capacity) {
              this.remove(staleEnd.key);
            }
            return value;
          },
          get: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              refresh(lruEntry);
            }
            return data[key];
          },
          remove: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              if (lruEntry == freshEnd)
                freshEnd = lruEntry.p;
              if (lruEntry == staleEnd)
                staleEnd = lruEntry.n;
              link(lruEntry.n, lruEntry.p);
              delete lruHash[key];
            }
            delete data[key];
            size--;
          },
          removeAll: function () {
            data = {};
            size = 0;
            lruHash = {};
            freshEnd = staleEnd = null;
          },
          destroy: function () {
            data = null;
            stats = null;
            lruHash = null;
            delete caches[cacheId];
          },
          info: function () {
            return extend({}, stats, { size: size });
          }
        };
        /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
        function refresh(entry) {
          if (entry != freshEnd) {
            if (!staleEnd) {
              staleEnd = entry;
            } else if (staleEnd == entry) {
              staleEnd = entry.n;
            }
            link(entry.n, entry.p);
            link(entry, freshEnd);
            freshEnd = entry;
            freshEnd.n = null;
          }
        }
        /**
       * bidirectionally links two entries of the LRU linked list
       */
        function link(nextEntry, prevEntry) {
          if (nextEntry != prevEntry) {
            if (nextEntry)
              nextEntry.p = prevEntry;
            //p stands for previous, 'prev' didn't minify
            if (prevEntry)
              prevEntry.n = nextEntry;  //n stands for next, 'next' didn't minify
          }
        }
      }
      /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
      cacheFactory.info = function () {
        var info = {};
        forEach(caches, function (cache, cacheId) {
          info[cacheId] = cache.info();
        });
        return info;
      };
      /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
      cacheFactory.get = function (cacheId) {
        return caches[cacheId];
      };
      return cacheFactory;
    };
  }
  /**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the $templateCache service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
  function $TemplateCacheProvider() {
    this.$get = [
      '$cacheFactory',
      function ($cacheFactory) {
        return $cacheFactory('templates');
      }
    ];
  }
  /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */
  /**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringAlias',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined).
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.
 *    The scope can be overridden by an optional first argument.
 *   `function([scope], cloneLinkingFn)`.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Controller alias at the directive scope. An alias for the controller so it
 * can be referenced at the directive template. The directive needs to define a scope for this
 * configuration to be used. Useful in the case when directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the default (attributes only) is used.
 *
 * * `E` - Element name: `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * Same as `template` but the template is loaded from the specified URL. Because
 * the template loading is asynchronous the compilation/linking is suspended until the template
 * is loaded.
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * api/ng.$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive
 * Directives Guide} for an example.
 *
 * #### `transclude`
 * compile the content of the element and make it available to the directive.
 * Typically used with {@link ng.directive:ngTransclude
 * ngTransclude}. The advantage of transclusion is that the linking function receives a
 * transclusion function which is pre-bound to the correct scope. In a typical setup the widget
 * creates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`
 * scope. This makes it possible for the widget to have private state, and the transclusion to
 * be bound to the parent (pre-`isolate`) scope.
 *
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element or the entire element:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - a controller instance - A controller instance if at least one directive on the
 *     element defines a controller. The controller is shared among all the directives, which allows
 *     the directives to use the controllers as a communication channel.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     The scope can be overridden by an optional first argument. This is the same as the `$transclude`
 *     parameter of directive controllers.
 *     `function([scope], cloneLinkingFn)`.
 *
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked. It is safe to do DOM transformation in the post-linking function.
 *
 * <a name="Attributes"></a>
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives.
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */
  var $compileMinErr = minErr('$compile');
  /**
 * @ngdoc provider
 * @name $compileProvider
 * @kind function
 *
 * @description
 */
  $CompileProvider.$inject = [
    '$provide',
    '$$sanitizeUriProvider'
  ];
  function $CompileProvider($provide, $$sanitizeUriProvider) {
    var hasDirectives = {}, Suffix = 'Directive', COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\d\w_\-]+)(?:\:([^;]+))?;?)/;
    // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
    // The assumption is that future DOM event attribute names will begin with
    // 'on' and be composed of only English letters.
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
    /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
    this.directive = function registerDirective(name, directiveFactory) {
      assertNotHasOwnProperty(name, 'directive');
      if (isString(name)) {
        assertArg(directiveFactory, 'directiveFactory');
        if (!hasDirectives.hasOwnProperty(name)) {
          hasDirectives[name] = [];
          $provide.factory(name + Suffix, [
            '$injector',
            '$exceptionHandler',
            function ($injector, $exceptionHandler) {
              var directives = [];
              forEach(hasDirectives[name], function (directiveFactory, index) {
                try {
                  var directive = $injector.invoke(directiveFactory);
                  if (isFunction(directive)) {
                    directive = { compile: valueFn(directive) };
                  } else if (!directive.compile && directive.link) {
                    directive.compile = valueFn(directive.link);
                  }
                  directive.priority = directive.priority || 0;
                  directive.index = index;
                  directive.name = directive.name || name;
                  directive.require = directive.require || directive.controller && directive.name;
                  directive.restrict = directive.restrict || 'A';
                  directives.push(directive);
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
              return directives;
            }
          ]);
        }
        hasDirectives[name].push(directiveFactory);
      } else {
        forEach(name, reverseParams(registerDirective));
      }
      return this;
    };
    /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
      }
    };
    /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
      }
    };
    this.$get = [
      '$injector',
      '$interpolate',
      '$exceptionHandler',
      '$http',
      '$templateCache',
      '$parse',
      '$controller',
      '$rootScope',
      '$document',
      '$sce',
      '$animate',
      '$$sanitizeUri',
      function ($injector, $interpolate, $exceptionHandler, $http, $templateCache, $parse, $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {
        var Attributes = function (element, attr) {
          this.$$element = element;
          this.$attr = attr || {};
        };
        Attributes.prototype = {
          $normalize: directiveNormalize,
          $addClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.addClass(this.$$element, classVal);
            }
          },
          $removeClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.removeClass(this.$$element, classVal);
            }
          },
          $updateClass: function (newClasses, oldClasses) {
            var toAdd = tokenDifference(newClasses, oldClasses);
            var toRemove = tokenDifference(oldClasses, newClasses);
            if (toAdd.length === 0) {
              $animate.removeClass(this.$$element, toRemove);
            } else if (toRemove.length === 0) {
              $animate.addClass(this.$$element, toAdd);
            } else {
              $animate.setClass(this.$$element, toAdd, toRemove);
            }
          },
          $set: function (key, value, writeAttr, attrName) {
            // TODO: decide whether or not to throw an error if "class"
            //is set through this function since it may cause $updateClass to
            //become unstable.
            var booleanKey = getBooleanAttrName(this.$$element[0], key), normalizedVal, nodeName;
            if (booleanKey) {
              this.$$element.prop(key, value);
              attrName = booleanKey;
            }
            this[key] = value;
            // translate normalized key to actual key
            if (attrName) {
              this.$attr[key] = attrName;
            } else {
              attrName = this.$attr[key];
              if (!attrName) {
                this.$attr[key] = attrName = snake_case(key, '-');
              }
            }
            nodeName = nodeName_(this.$$element);
            // sanitize a[href] and img[src] values
            if (nodeName === 'A' && key === 'href' || nodeName === 'IMG' && key === 'src') {
              this[key] = value = $$sanitizeUri(value, key === 'src');
            }
            if (writeAttr !== false) {
              if (value === null || value === undefined) {
                this.$$element.removeAttr(attrName);
              } else {
                this.$$element.attr(attrName, value);
              }
            }
            // fire observers
            var $$observers = this.$$observers;
            $$observers && forEach($$observers[key], function (fn) {
              try {
                fn(value);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          },
          $observe: function (key, fn) {
            var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = {}), listeners = $$observers[key] || ($$observers[key] = []);
            listeners.push(fn);
            $rootScope.$evalAsync(function () {
              if (!listeners.$$inter) {
                // no one registered attribute interpolation function, so lets call it manually
                fn(attrs[key]);
              }
            });
            return fn;
          }
        };
        var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = startSymbol == '{{' || endSymbol == '}}' ? identity : function denormalizeTemplate(template) {
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
          }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
        return compile;
        //================================
        function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
          if (!($compileNodes instanceof jqLite)) {
            // jquery always rewraps, whereas we need to preserve the original selector so that we can
            // modify it.
            $compileNodes = jqLite($compileNodes);
          }
          // We can not compile top level text elements since text nodes can be merged and we will
          // not be able to attach scope data to them, so we will wrap them in <span>
          forEach($compileNodes, function (node, index) {
            if (node.nodeType == 3 && node.nodeValue.match(/\S+/)) {
              $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
            }
          });
          var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
          safeAddClass($compileNodes, 'ng-scope');
          return function publicLinkFn(scope, cloneConnectFn, transcludeControllers, parentBoundTranscludeFn) {
            assertArg(scope, 'scope');
            // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
            // and sometimes changes the structure of the DOM.
            var $linkNode = cloneConnectFn ? JQLitePrototype.clone.call($compileNodes) : $compileNodes;
            forEach(transcludeControllers, function (instance, name) {
              $linkNode.data('$' + name + 'Controller', instance);
            });
            // Attach scope only to non-text nodes.
            for (var i = 0, ii = $linkNode.length; i < ii; i++) {
              var node = $linkNode[i], nodeType = node.nodeType;
              if (nodeType === 1 || nodeType === 9) {
                $linkNode.eq(i).data('$scope', scope);
              }
            }
            if (cloneConnectFn)
              cloneConnectFn($linkNode, scope);
            if (compositeLinkFn)
              compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
            return $linkNode;
          };
        }
        function safeAddClass($element, className) {
          try {
            $element.addClass(className);
          } catch (e) {
          }
        }
        /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
        function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
          var linkFns = [], attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound;
          for (var i = 0; i < nodeList.length; i++) {
            attrs = new Attributes();
            // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
            directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
            nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
            if (nodeLinkFn && nodeLinkFn.scope) {
              safeAddClass(attrs.$$element, 'ng-scope');
            }
            childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
            linkFns.push(nodeLinkFn, childLinkFn);
            linkFnFound = linkFnFound || nodeLinkFn || childLinkFn;
            //use the previous context only for the first element in the virtual group
            previousCompileContext = null;
          }
          // return a linking function if we have found anything, null otherwise
          return linkFnFound ? compositeLinkFn : null;
          function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
            var nodeLinkFn, childLinkFn, node, childScope, i, ii, n, childBoundTranscludeFn;
            // copy nodeList so that linking doesn't break due to live list updates.
            var nodeListLength = nodeList.length, stableNodeList = new Array(nodeListLength);
            for (i = 0; i < nodeListLength; i++) {
              stableNodeList[i] = nodeList[i];
            }
            for (i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
              node = stableNodeList[n];
              nodeLinkFn = linkFns[i++];
              childLinkFn = linkFns[i++];
              if (nodeLinkFn) {
                if (nodeLinkFn.scope) {
                  childScope = scope.$new();
                  jqLite.data(node, '$scope', childScope);
                } else {
                  childScope = scope;
                }
                if (nodeLinkFn.transcludeOnThisElement) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
                } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                  childBoundTranscludeFn = parentBoundTranscludeFn;
                } else if (!parentBoundTranscludeFn && transcludeFn) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                } else {
                  childBoundTranscludeFn = null;
                }
                nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
              } else if (childLinkFn) {
                childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
              }
            }
          }
        }
        function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
          var boundTranscludeFn = function (transcludedScope, cloneFn, controllers) {
            var scopeCreated = false;
            if (!transcludedScope) {
              transcludedScope = scope.$new();
              transcludedScope.$$transcluded = true;
              scopeCreated = true;
            }
            var clone = transcludeFn(transcludedScope, cloneFn, controllers, previousBoundTranscludeFn);
            if (scopeCreated) {
              clone.on('$destroy', function () {
                transcludedScope.$destroy();
              });
            }
            return clone;
          };
          return boundTranscludeFn;
        }
        /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          var nodeType = node.nodeType, attrsMap = attrs.$attr, match, className;
          switch (nodeType) {
          case 1:
            /* Element */
            // use the node name: <directive>
            addDirective(directives, directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);
            // iterate over the attributes
            for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
              var attrStartName = false;
              var attrEndName = false;
              attr = nAttrs[j];
              if (!msie || msie >= 8 || attr.specified) {
                name = attr.name;
                value = trim(attr.value);
                // support ngAttr attribute binding
                ngAttrName = directiveNormalize(name);
                if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
                  name = snake_case(ngAttrName.substr(6), '-');
                }
                var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
                if (ngAttrName === directiveNName + 'Start') {
                  attrStartName = name;
                  attrEndName = name.substr(0, name.length - 5) + 'end';
                  name = name.substr(0, name.length - 6);
                }
                nName = directiveNormalize(name.toLowerCase());
                attrsMap[nName] = name;
                if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                  attrs[nName] = value;
                  if (getBooleanAttrName(node, nName)) {
                    attrs[nName] = true;  // presence means true
                  }
                }
                addAttrInterpolateDirective(node, directives, value, nName);
                addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
              }
            }
            // use class as directive
            className = node.className;
            if (isString(className) && className !== '') {
              while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                nName = directiveNormalize(match[2]);
                if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[3]);
                }
                className = className.substr(match.index + match[0].length);
              }
            }
            break;
          case 3:
            /* Text Node */
            addTextInterpolateDirective(directives, node.nodeValue);
            break;
          case 8:
            /* Comment */
            try {
              match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
              if (match) {
                nName = directiveNormalize(match[1]);
                if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[2]);
                }
              }
            } catch (e) {
            }
            break;
          }
          directives.sort(byPriority);
          return directives;
        }
        /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
        function groupScan(node, attrStart, attrEnd) {
          var nodes = [];
          var depth = 0;
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
            var startNode = node;
            do {
              if (!node) {
                throw $compileMinErr('uterdir', 'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.', attrStart, attrEnd);
              }
              if (node.nodeType == 1) {
                if (node.hasAttribute(attrStart))
                  depth++;
                if (node.hasAttribute(attrEnd))
                  depth--;
              }
              nodes.push(node);
              node = node.nextSibling;
            } while (depth > 0);
          } else {
            nodes.push(node);
          }
          return jqLite(nodes);
        }
        /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
          return function (scope, element, attrs, controllers, transcludeFn) {
            element = groupScan(element[0], attrStart, attrEnd);
            return linkFn(scope, element, attrs, controllers, transcludeFn);
          };
        }
        /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
        function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
          previousCompileContext = previousCompileContext || {};
          var terminalPriority = -Number.MAX_VALUE, newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasTemplate = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, directiveValue;
          // executes all directives on the current element
          for (var i = 0, ii = directives.length; i < ii; i++) {
            directive = directives[i];
            var attrStart = directive.$$start;
            var attrEnd = directive.$$end;
            // collect multiblock sections
            if (attrStart) {
              $compileNode = groupScan(compileNode, attrStart, attrEnd);
            }
            $template = undefined;
            if (terminalPriority > directive.priority) {
              break;  // prevent further processing of directives
            }
            if (directiveValue = directive.scope) {
              newScopeDirective = newScopeDirective || directive;
              // skip the check for directives with async templates, we'll check the derived sync
              // directive when the template arrives
              if (!directive.templateUrl) {
                assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive, $compileNode);
                if (isObject(directiveValue)) {
                  newIsolateScopeDirective = directive;
                }
              }
            }
            directiveName = directive.name;
            if (!directive.templateUrl && directive.controller) {
              directiveValue = directive.controller;
              controllerDirectives = controllerDirectives || {};
              assertNoDuplicate('\'' + directiveName + '\' controller', controllerDirectives[directiveName], directive, $compileNode);
              controllerDirectives[directiveName] = directive;
            }
            if (directiveValue = directive.transclude) {
              hasTranscludeDirective = true;
              // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
              // This option should only be used by directives that know how to safely handle element transclusion,
              // where the transcluded nodes are added or replaced after linking.
              if (!directive.$$tlb) {
                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                nonTlbTranscludeDirective = directive;
              }
              if (directiveValue == 'element') {
                hasElementTranscludeDirective = true;
                terminalPriority = directive.priority;
                $template = $compileNode;
                $compileNode = templateAttrs.$$element = jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));
                compileNode = $compileNode[0];
                replaceWith(jqCollection, sliceArgs($template), compileNode);
                childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, { nonTlbTranscludeDirective: nonTlbTranscludeDirective });
              } else {
                $template = jqLite(jqLiteClone(compileNode)).contents();
                $compileNode.empty();
                // clear contents
                childTranscludeFn = compile($template, transcludeFn);
              }
            }
            if (directive.template) {
              hasTemplate = true;
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
              directiveValue = denormalizeTemplate(directiveValue);
              if (directive.replace) {
                replaceDirective = directive;
                if (jqLiteIsTextNode(directiveValue)) {
                  $template = [];
                } else {
                  $template = jqLite(trim(directiveValue));
                }
                compileNode = $template[0];
                if ($template.length != 1 || compileNode.nodeType !== 1) {
                  throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', directiveName, '');
                }
                replaceWith(jqCollection, $compileNode, compileNode);
                var newTemplateAttrs = { $attr: {} };
                // combine directives from the original node and from the template:
                // - take the array of directives for this element
                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                // - collect directives from the template and sort them by priority
                // - combine directives as: processed + template + unprocessed
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                if (newIsolateScopeDirective) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                ii = directives.length;
              } else {
                $compileNode.html(directiveValue);
              }
            }
            if (directive.templateUrl) {
              hasTemplate = true;
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              if (directive.replace) {
                replaceDirective = directive;
              }
              nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
              ii = directives.length;
            } else if (directive.compile) {
              try {
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                if (isFunction(linkFn)) {
                  addLinkFns(null, linkFn, attrStart, attrEnd);
                } else if (linkFn) {
                  addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                }
              } catch (e) {
                $exceptionHandler(e, startingTag($compileNode));
              }
            }
            if (directive.terminal) {
              nodeLinkFn.terminal = true;
              terminalPriority = Math.max(terminalPriority, directive.priority);
            }
          }
          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
          nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
          nodeLinkFn.templateOnThisElement = hasTemplate;
          nodeLinkFn.transclude = childTranscludeFn;
          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
          // might be normal or delayed nodeLinkFn depending on if templateUrl is present
          return nodeLinkFn;
          ////////////////////
          function addLinkFns(pre, post, attrStart, attrEnd) {
            if (pre) {
              if (attrStart)
                pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
              pre.require = directive.require;
              pre.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                pre = cloneAndAnnotateFn(pre, { isolateScope: true });
              }
              preLinkFns.push(pre);
            }
            if (post) {
              if (attrStart)
                post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
              post.require = directive.require;
              post.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                post = cloneAndAnnotateFn(post, { isolateScope: true });
              }
              postLinkFns.push(post);
            }
          }
          function getControllers(directiveName, require, $element, elementControllers) {
            var value, retrievalMethod = 'data', optional = false;
            if (isString(require)) {
              while ((value = require.charAt(0)) == '^' || value == '?') {
                require = require.substr(1);
                if (value == '^') {
                  retrievalMethod = 'inheritedData';
                }
                optional = optional || value == '?';
              }
              value = null;
              if (elementControllers && retrievalMethod === 'data') {
                value = elementControllers[require];
              }
              value = value || $element[retrievalMethod]('$' + require + 'Controller');
              if (!value && !optional) {
                throw $compileMinErr('ctreq', 'Controller \'{0}\', required by directive \'{1}\', can\'t be found!', require, directiveName);
              }
              return value;
            } else if (isArray(require)) {
              value = [];
              forEach(require, function (require) {
                value.push(getControllers(directiveName, require, $element, elementControllers));
              });
            }
            return value;
          }
          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
            var attrs, $element, i, ii, linkFn, controller, isolateScope, elementControllers = {}, transcludeFn;
            attrs = compileNode === linkNode ? templateAttrs : shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
            $element = attrs.$$element;
            if (newIsolateScopeDirective) {
              var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
              isolateScope = scope.$new(true);
              if (templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)) {
                $element.data('$isolateScope', isolateScope);
              } else {
                $element.data('$isolateScopeNoTemplate', isolateScope);
              }
              safeAddClass($element, 'ng-isolate-scope');
              forEach(newIsolateScopeDirective.scope, function (definition, scopeName) {
                var match = definition.match(LOCAL_REGEXP) || [], attrName = match[3] || scopeName, optional = match[2] == '?', mode = match[1],
                  // @, =, or &
                  lastValue, parentGet, parentSet, compare;
                isolateScope.$$isolateBindings[scopeName] = mode + attrName;
                switch (mode) {
                case '@':
                  attrs.$observe(attrName, function (value) {
                    isolateScope[scopeName] = value;
                  });
                  attrs.$$observers[attrName].$$scope = scope;
                  if (attrs[attrName]) {
                    // If the attribute has been provided then we trigger an interpolation to ensure
                    // the value is there for use in the link fn
                    isolateScope[scopeName] = $interpolate(attrs[attrName])(scope);
                  }
                  break;
                case '=':
                  if (optional && !attrs[attrName]) {
                    return;
                  }
                  parentGet = $parse(attrs[attrName]);
                  if (parentGet.literal) {
                    compare = equals;
                  } else {
                    compare = function (a, b) {
                      return a === b || a !== a && b !== b;
                    };
                  }
                  parentSet = parentGet.assign || function () {
                    // reset the change, or we will throw this exception on every $digest
                    lastValue = isolateScope[scopeName] = parentGet(scope);
                    throw $compileMinErr('nonassign', 'Expression \'{0}\' used with directive \'{1}\' is non-assignable!', attrs[attrName], newIsolateScopeDirective.name);
                  };
                  lastValue = isolateScope[scopeName] = parentGet(scope);
                  isolateScope.$watch(function parentValueWatch() {
                    var parentValue = parentGet(scope);
                    if (!compare(parentValue, isolateScope[scopeName])) {
                      // we are out of sync and need to copy
                      if (!compare(parentValue, lastValue)) {
                        // parent changed and it has precedence
                        isolateScope[scopeName] = parentValue;
                      } else {
                        // if the parent can be assigned then do so
                        parentSet(scope, parentValue = isolateScope[scopeName]);
                      }
                    }
                    return lastValue = parentValue;
                  }, null, parentGet.literal);
                  break;
                case '&':
                  parentGet = $parse(attrs[attrName]);
                  isolateScope[scopeName] = function (locals) {
                    return parentGet(scope, locals);
                  };
                  break;
                default:
                  throw $compileMinErr('iscp', 'Invalid isolate scope definition for directive \'{0}\'.' + ' Definition: {... {1}: \'{2}\' ...}', newIsolateScopeDirective.name, scopeName, definition);
                }
              });
            }
            transcludeFn = boundTranscludeFn && controllersBoundTransclude;
            if (controllerDirectives) {
              forEach(controllerDirectives, function (directive) {
                var locals = {
                    $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                    $element: $element,
                    $attrs: attrs,
                    $transclude: transcludeFn
                  }, controllerInstance;
                controller = directive.controller;
                if (controller == '@') {
                  controller = attrs[directive.name];
                }
                controllerInstance = $controller(controller, locals);
                // For directives with element transclusion the element is a comment,
                // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
                // clean up (http://bugs.jquery.com/ticket/8335).
                // Instead, we save the controllers for the element in a local hash and attach to .data
                // later, once we have the actual element.
                elementControllers[directive.name] = controllerInstance;
                if (!hasElementTranscludeDirective) {
                  $element.data('$' + directive.name + 'Controller', controllerInstance);
                }
                if (directive.controllerAs) {
                  locals.$scope[directive.controllerAs] = controllerInstance;
                }
              });
            }
            // PRELINKING
            for (i = 0, ii = preLinkFns.length; i < ii; i++) {
              try {
                linkFn = preLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }
            // RECURSION
            // We only pass the isolate scope, if the isolate directive has a template,
            // otherwise the child elements do not belong to the isolate directive.
            var scopeToChild = scope;
            if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
              scopeToChild = isolateScope;
            }
            childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
            // POSTLINKING
            for (i = postLinkFns.length - 1; i >= 0; i--) {
              try {
                linkFn = postLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }
            // This is the function that is injected as `$transclude`.
            function controllersBoundTransclude(scope, cloneAttachFn) {
              var transcludeControllers;
              // no scope passed
              if (arguments.length < 2) {
                cloneAttachFn = scope;
                scope = undefined;
              }
              if (hasElementTranscludeDirective) {
                transcludeControllers = elementControllers;
              }
              return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
            }
          }
        }
        function markDirectivesAsIsolate(directives) {
          // mark all directives as needing isolate scope.
          for (var j = 0, jj = directives.length; j < jj; j++) {
            directives[j] = inherit(directives[j], { $$isolateScope: true });
          }
        }
        /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
        function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
          if (name === ignoreDirective)
            return null;
          var match = null;
          if (hasDirectives.hasOwnProperty(name)) {
            for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
              try {
                directive = directives[i];
                if ((maxPriority === undefined || maxPriority > directive.priority) && directive.restrict.indexOf(location) != -1) {
                  if (startAttrName) {
                    directive = inherit(directive, {
                      $$start: startAttrName,
                      $$end: endAttrName
                    });
                  }
                  tDirectives.push(directive);
                  match = directive;
                }
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          }
          return match;
        }
        /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
        function mergeTemplateAttributes(dst, src) {
          var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
          // reapply the old attributes to the new element
          forEach(dst, function (value, key) {
            if (key.charAt(0) != '$') {
              if (src[key] && src[key] !== value) {
                value += (key === 'style' ? ';' : ' ') + src[key];
              }
              dst.$set(key, value, true, srcAttr[key]);
            }
          });
          // copy the new attributes on the old attrs object
          forEach(src, function (value, key) {
            if (key == 'class') {
              safeAddClass($element, value);
              dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
            } else if (key == 'style') {
              $element.attr('style', $element.attr('style') + ';' + value);
              dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;  // `dst` will never contain hasOwnProperty as DOM parser won't let it.
                                                                                // You will get an "InvalidCharacterError: DOM Exception 5" error if you
                                                                                // have an attribute like "has-own-property" or "data-has-own-property", etc.
            } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
              dst[key] = value;
              dstAttr[key] = srcAttr[key];
            }
          });
        }
        function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
          var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(),
            // The fact that we have to copy and patch the directive seems wrong!
            derivedSyncDirective = extend({}, origAsyncDirective, {
              templateUrl: null,
              transclude: null,
              replace: null,
              $$originalDirective: origAsyncDirective
            }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl;
          $compileNode.empty();
          $http.get($sce.getTrustedResourceUrl(templateUrl), { cache: $templateCache }).success(function (content) {
            var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
            content = denormalizeTemplate(content);
            if (origAsyncDirective.replace) {
              if (jqLiteIsTextNode(content)) {
                $template = [];
              } else {
                $template = jqLite(trim(content));
              }
              compileNode = $template[0];
              if ($template.length != 1 || compileNode.nodeType !== 1) {
                throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', origAsyncDirective.name, templateUrl);
              }
              tempTemplateAttrs = { $attr: {} };
              replaceWith($rootElement, $compileNode, compileNode);
              var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
              if (isObject(origAsyncDirective.scope)) {
                markDirectivesAsIsolate(templateDirectives);
              }
              directives = templateDirectives.concat(directives);
              mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
            } else {
              compileNode = beforeTemplateCompileNode;
              $compileNode.html(content);
            }
            directives.unshift(derivedSyncDirective);
            afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
            forEach($rootElement, function (node, i) {
              if (node == compileNode) {
                $rootElement[i] = $compileNode[0];
              }
            });
            afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
            while (linkQueue.length) {
              var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
              if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                var oldClasses = beforeTemplateLinkNode.className;
                if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                  // it was cloned therefore we have to clone as well.
                  linkNode = jqLiteClone(compileNode);
                }
                replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                // Copy in CSS classes from original node
                safeAddClass(jqLite(linkNode), oldClasses);
              }
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
              } else {
                childBoundTranscludeFn = boundTranscludeFn;
              }
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
            }
            linkQueue = null;
          }).error(function (response, code, headers, config) {
            throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
          });
          return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
            var childBoundTranscludeFn = boundTranscludeFn;
            if (linkQueue) {
              linkQueue.push(scope);
              linkQueue.push(node);
              linkQueue.push(rootElement);
              linkQueue.push(childBoundTranscludeFn);
            } else {
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
              }
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
            }
          };
        }
        /**
     * Sorting function for bound directives.
     */
        function byPriority(a, b) {
          var diff = b.priority - a.priority;
          if (diff !== 0)
            return diff;
          if (a.name !== b.name)
            return a.name < b.name ? -1 : 1;
          return a.index - b.index;
        }
        function assertNoDuplicate(what, previousDirective, directive, element) {
          if (previousDirective) {
            throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}', previousDirective.name, directive.name, what, startingTag(element));
          }
        }
        function addTextInterpolateDirective(directives, text) {
          var interpolateFn = $interpolate(text, true);
          if (interpolateFn) {
            directives.push({
              priority: 0,
              compile: function textInterpolateCompileFn(templateNode) {
                // when transcluding a template that has bindings in the root
                // then we don't have a parent and should do this in the linkFn
                var parent = templateNode.parent(), hasCompileParent = parent.length;
                if (hasCompileParent)
                  safeAddClass(templateNode.parent(), 'ng-binding');
                return function textInterpolateLinkFn(scope, node) {
                  var parent = node.parent(), bindings = parent.data('$binding') || [];
                  bindings.push(interpolateFn);
                  parent.data('$binding', bindings);
                  if (!hasCompileParent)
                    safeAddClass(parent, 'ng-binding');
                  scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                    node[0].nodeValue = value;
                  });
                };
              }
            });
          }
        }
        function getTrustedContext(node, attrNormalizedName) {
          if (attrNormalizedName == 'srcdoc') {
            return $sce.HTML;
          }
          var tag = nodeName_(node);
          // maction[xlink:href] can source SVG.  It's not limited to <maction>.
          if (attrNormalizedName == 'xlinkHref' || tag == 'FORM' && attrNormalizedName == 'action' || tag != 'IMG' && (attrNormalizedName == 'src' || attrNormalizedName == 'ngSrc')) {
            return $sce.RESOURCE_URL;
          }
        }
        function addAttrInterpolateDirective(node, directives, value, name) {
          var interpolateFn = $interpolate(value, true);
          // no interpolation found -> ignore
          if (!interpolateFn)
            return;
          if (name === 'multiple' && nodeName_(node) === 'SELECT') {
            throw $compileMinErr('selmulti', 'Binding to the \'multiple\' attribute is not supported. Element: {0}', startingTag(node));
          }
          directives.push({
            priority: 100,
            compile: function () {
              return {
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                  var $$observers = attr.$$observers || (attr.$$observers = {});
                  if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr('nodomevents', 'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' + 'ng- versions (such as ng-click instead of onclick) instead.');
                  }
                  // we need to interpolate again, in case the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));
                  // if attribute was updated so that there is no interpolation going on we don't want to
                  // register any observers
                  if (!interpolateFn)
                    return;
                  // TODO(i): this should likely be attr.$set(name, iterpolateFn(scope) so that we reset the
                  // actual attr value
                  attr[name] = interpolateFn(scope);
                  ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                  (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
                }
              };
            }
          });
        }
        /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
        function replaceWith($rootElement, elementsToRemove, newNode) {
          var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
          if ($rootElement) {
            for (i = 0, ii = $rootElement.length; i < ii; i++) {
              if ($rootElement[i] == firstElementToRemove) {
                $rootElement[i++] = newNode;
                for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, j2++) {
                  if (j2 < jj) {
                    $rootElement[j] = $rootElement[j2];
                  } else {
                    delete $rootElement[j];
                  }
                }
                $rootElement.length -= removeCount - 1;
                break;
              }
            }
          }
          if (parent) {
            parent.replaceChild(newNode, firstElementToRemove);
          }
          var fragment = document.createDocumentFragment();
          fragment.appendChild(firstElementToRemove);
          newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
          for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
            var element = elementsToRemove[k];
            jqLite(element).remove();
            // must do this way to clean up expando
            fragment.appendChild(element);
            delete elementsToRemove[k];
          }
          elementsToRemove[0] = newNode;
          elementsToRemove.length = 1;
        }
        function cloneAndAnnotateFn(fn, annotation) {
          return extend(function () {
            return fn.apply(null, arguments);
          }, fn, annotation);
        }
      }
    ];
  }
  var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
  /**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
  function directiveNormalize(name) {
    return camelCase(name.replace(PREFIX_REGEXP, ''));
  }
  /**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */
  /**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */
  /**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */
  /**
 * Closure compiler type information
 */
  function nodesetLinkingFn(scope, nodeList, rootElement, boundTranscludeFn) {
  }
  function directiveLinkingFn(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn) {
  }
  function tokenDifference(str1, str2) {
    var values = '', tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
    outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j])
            continue outer;
        }
        values += (values.length > 0 ? ' ' : '') + token;
      }
    return values;
  }
  /**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
  function $ControllerProvider() {
    var controllers = {}, CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
    /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
    this.register = function (name, constructor) {
      assertNotHasOwnProperty(name, 'controller');
      if (isObject(name)) {
        extend(controllers, name);
      } else {
        controllers[name] = constructor;
      }
    };
    this.$get = [
      '$injector',
      '$window',
      function ($injector, $window) {
        /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * check `window[constructor]` on the global `window` object
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
        return function (expression, locals) {
          var instance, match, constructor, identifier;
          if (isString(expression)) {
            match = expression.match(CNTRL_REG), constructor = match[1], identifier = match[3];
            expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true) || getter($window, constructor, true);
            assertArgFn(expression, constructor, true);
          }
          instance = $injector.instantiate(expression, locals);
          if (identifier) {
            if (!(locals && typeof locals.$scope === 'object')) {
              throw minErr('$controller')('noscp', 'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.', constructor || expression.name, identifier);
            }
            locals.$scope[identifier] = instance;
          }
          return instance;
        };
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
  function $DocumentProvider() {
    this.$get = [
      '$window',
      function (window) {
        return jqLite(window.document);
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {
 *     return function (exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
  function $ExceptionHandlerProvider() {
    this.$get = [
      '$log',
      function ($log) {
        return function (exception, cause) {
          $log.error.apply($log, arguments);
        };
      }
    ];
  }
  /**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
  function parseHeaders(headers) {
    var parsed = {}, key, val, i;
    if (!headers)
      return parsed;
    forEach(headers.split('\n'), function (line) {
      i = line.indexOf(':');
      key = lowercase(trim(line.substr(0, i)));
      val = trim(line.substr(i + 1));
      if (key) {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });
    return parsed;
  }
  /**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
  function headersGetter(headers) {
    var headersObj = isObject(headers) ? headers : undefined;
    return function (name) {
      if (!headersObj)
        headersObj = parseHeaders(headers);
      if (name) {
        return headersObj[lowercase(name)] || null;
      }
      return headersObj;
    };
  }
  /**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers Http headers getter fn.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
  function transformData(data, headers, fns) {
    if (isFunction(fns))
      return fns(data, headers);
    forEach(fns, function (fn) {
      data = fn(data, headers);
    });
    return data;
  }
  function isSuccess(status) {
    return 200 <= status && status < 300;
  }
  /**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
  function $HttpProvider() {
    var JSON_START = /^\s*(\[|\{[^\{])/, JSON_END = /[\}\]]\s*$/, PROTECTION_PREFIX = /^\)\]\}',?\n/, CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': 'application/json;charset=utf-8' };
    /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   **/
    var defaults = this.defaults = {
        transformResponse: [function (data) {
            if (isString(data)) {
              // strip json vulnerability protection prefix
              data = data.replace(PROTECTION_PREFIX, '');
              if (JSON_START.test(data) && JSON_END.test(data))
                data = fromJson(data);
            }
            return data;
          }],
        transformRequest: [function (d) {
            return isObject(d) && !isFile(d) && !isBlob(d) ? toJson(d) : d;
          }],
        headers: {
          common: { 'Accept': 'application/json, text/plain, */*' },
          post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
          put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
          patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
        },
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN'
      };
    /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
    var interceptorFactories = this.interceptors = [];
    /**
   * For historical reasons, response interceptors are ordered by the order in which
   * they are applied to the response. (This is the opposite of interceptorFactories)
   */
    var responseInterceptorFactories = this.responseInterceptors = [];
    this.$get = [
      '$httpBackend',
      '$browser',
      '$cacheFactory',
      '$rootScope',
      '$q',
      '$injector',
      function ($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {
        var defaultCache = $cacheFactory('$http');
        /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
        var reversedInterceptors = [];
        forEach(interceptorFactories, function (interceptorFactory) {
          reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
        });
        forEach(responseInterceptorFactories, function (interceptorFactory, index) {
          var responseFn = isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory);
          /**
       * Response interceptors go before "around" interceptors (no real reason, just
       * had to pick one.) But they are already reversed, so we can't use unshift, hence
       * the splice.
       */
          reversedInterceptors.splice(index, 0, {
            response: function (response) {
              return responseFn($q.when(response));
            },
            responseError: function (response) {
              return responseFn($q.reject(response));
            }
          });
        });
        /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * # General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * ```js
     *   $http({method: 'GET', url: '/someUrl'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * # Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * # Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests.
     *
     * ```js
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * # Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' },
     * }
     *
     * $http(req).success(function(){...}).error(function(){...});
     * ```
     *
     * # Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transform functions. By default, Angular
     * applies these transformations:
     *
     * Request transformations:
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations:
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     * To globally augment or override the default transforms, modify the
     * `$httpProvider.defaults.transformRequest` and `$httpProvider.defaults.transformResponse`
     * properties. These properties are by default an array of transform functions, which allows you
     * to `push` or `unshift` a new transformation function into the transformation chain. You can
     * also decide to completely override any default transformations by assigning your
     * transformation functions to these properties directly without the array wrapper.  These defaults
     * are again available on the $http factory at run-time, which may be useful if you have run-time
     * services you wish to be involved in your transformations.
     *
     * Similarly, to locally override the request/response transforms, augment the
     * `transformRequest` and/or `transformResponse` properties of the configuration object passed
     * into `$http`.
     *
     *
     * # Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#properties_defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * # Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http `config` object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * # Response interceptors (DEPRECATED)
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication or any kind of synchronous or
     * asynchronous preprocessing of received responses, it is desirable to be able to intercept
     * responses for http requests before they are handed over to the application code that
     * initiated these requests. The response interceptors leverage the {@link ng.$q
     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.
     *
     * The interceptors are service factories that are registered with the $httpProvider by
     * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor  — a function that
     * takes a {@link ng.$q promise} and returns the original or a new promise.
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       return promise.then(function(response) {
     *         // do something on success
     *         return response;
     *       }, function(response) {
     *         // do something on error
     *         if (canRecover(response)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(response);
     *       });
     *     }
     *   });
     *
     *   $httpProvider.responseInterceptors.push('myHttpInterceptor');
     *
     *
     *   // register the interceptor via an anonymous factory
     *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       // same as above
     *     }
     *   });
     * ```
     *
     *
     * # Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ## JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ## Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *    - **transformResponse** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body and headers and returns its transformed (typically deserialized) version.
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            success(function(data, status) {
              $scope.status = status;
              $scope.data = data;
            }).
            error(function(data, status) {
              $scope.data = data || "Request failed";
              $scope.status = status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
        function $http(requestConfig) {
          var config = {
              method: 'get',
              transformRequest: defaults.transformRequest,
              transformResponse: defaults.transformResponse
            };
          var headers = mergeHeaders(requestConfig);
          extend(config, requestConfig);
          config.headers = headers;
          config.method = uppercase(config.method);
          var serverRequest = function (config) {
            headers = config.headers;
            var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);
            // strip content-type if data is undefined
            if (isUndefined(reqData)) {
              forEach(headers, function (value, header) {
                if (lowercase(header) === 'content-type') {
                  delete headers[header];
                }
              });
            }
            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
              config.withCredentials = defaults.withCredentials;
            }
            // send request
            return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
          };
          var chain = [
              serverRequest,
              undefined
            ];
          var promise = $q.when(config);
          // apply interceptors
          forEach(reversedInterceptors, function (interceptor) {
            if (interceptor.request || interceptor.requestError) {
              chain.unshift(interceptor.request, interceptor.requestError);
            }
            if (interceptor.response || interceptor.responseError) {
              chain.push(interceptor.response, interceptor.responseError);
            }
          });
          while (chain.length) {
            var thenFn = chain.shift();
            var rejectFn = chain.shift();
            promise = promise.then(thenFn, rejectFn);
          }
          promise.success = function (fn) {
            promise.then(function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          promise.error = function (fn) {
            promise.then(null, function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          return promise;
          function transformResponse(response) {
            // make a copy since the response must be cacheable
            var resp = extend({}, response, { data: transformData(response.data, response.headers, config.transformResponse) });
            return isSuccess(response.status) ? resp : $q.reject(resp);
          }
          function mergeHeaders(config) {
            var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
            // using for-in instead of forEach to avoid unecessary iteration after header has been found
            defaultHeadersIteration:
              for (defHeaderName in defHeaders) {
                lowercaseDefHeaderName = lowercase(defHeaderName);
                for (reqHeaderName in reqHeaders) {
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                    continue defaultHeadersIteration;
                  }
                }
                reqHeaders[defHeaderName] = defHeaders[defHeaderName];
              }
            // execute if header value is a function for merged headers
            execHeaders(reqHeaders);
            return reqHeaders;
            function execHeaders(headers) {
              var headerContent;
              forEach(headers, function (headerFn, header) {
                if (isFunction(headerFn)) {
                  headerContent = headerFn();
                  if (headerContent != null) {
                    headers[header] = headerContent;
                  } else {
                    delete headers[header];
                  }
                }
              });
            }
          }
        }
        $http.pendingRequests = [];
        /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        createShortMethods('get', 'delete', 'head', 'jsonp');
        /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#patch
     *
     * @description
     * Shortcut method to perform `PATCH` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        createShortMethodsWithData('post', 'put', 'patch');
        /**
     * @ngdoc property
     * @name $http#defaults
     *
     * @description
     * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
     * default headers, withCredentials as well as request and response transformations.
     *
     * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
     */
        $http.defaults = defaults;
        return $http;
        function createShortMethods(names) {
          forEach(arguments, function (name) {
            $http[name] = function (url, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url
              }));
            };
          });
        }
        function createShortMethodsWithData(name) {
          forEach(arguments, function (name) {
            $http[name] = function (url, data, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url,
                data: data
              }));
            };
          });
        }
        /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
        function sendReq(config, reqData, reqHeaders) {
          var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, url = buildUrl(config.url, config.params);
          $http.pendingRequests.push(config);
          promise.then(removePendingReq, removePendingReq);
          if ((config.cache || defaults.cache) && config.cache !== false && (config.method === 'GET' || config.method === 'JSONP')) {
            cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
          }
          if (cache) {
            cachedResp = cache.get(url);
            if (isDefined(cachedResp)) {
              if (isPromiseLike(cachedResp)) {
                // cached request has already been sent, but there is no response yet
                cachedResp.then(removePendingReq, removePendingReq);
                return cachedResp;
              } else {
                // serving from cache
                if (isArray(cachedResp)) {
                  resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                } else {
                  resolvePromise(cachedResp, 200, {}, 'OK');
                }
              }
            } else {
              // put the promise for the non-transformed response into cache as a placeholder
              cache.put(url, promise);
            }
          }
          // if we won't have the response in cache, set the xsrf headers and
          // send the request to the backend
          if (isUndefined(cachedResp)) {
            var xsrfValue = urlIsSameOrigin(config.url) ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
            if (xsrfValue) {
              reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
            }
            $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType);
          }
          return promise;
          /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
          function done(status, response, headersString, statusText) {
            if (cache) {
              if (isSuccess(status)) {
                cache.put(url, [
                  status,
                  response,
                  parseHeaders(headersString),
                  statusText
                ]);
              } else {
                // remove promise from the cache
                cache.remove(url);
              }
            }
            resolvePromise(response, status, headersString, statusText);
            if (!$rootScope.$$phase)
              $rootScope.$apply();
          }
          /**
       * Resolves the raw $http promise.
       */
          function resolvePromise(response, status, headers, statusText) {
            // normalize internal statuses to 0
            status = Math.max(status, 0);
            (isSuccess(status) ? deferred.resolve : deferred.reject)({
              data: response,
              status: status,
              headers: headersGetter(headers),
              config: config,
              statusText: statusText
            });
          }
          function removePendingReq() {
            var idx = indexOf($http.pendingRequests, config);
            if (idx !== -1)
              $http.pendingRequests.splice(idx, 1);
          }
        }
        function buildUrl(url, params) {
          if (!params)
            return url;
          var parts = [];
          forEachSorted(params, function (value, key) {
            if (value === null || isUndefined(value))
              return;
            if (!isArray(value))
              value = [value];
            forEach(value, function (v) {
              if (isObject(v)) {
                if (isDate(v)) {
                  v = v.toISOString();
                } else {
                  v = toJson(v);
                }
              }
              parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));
            });
          });
          if (parts.length > 0) {
            url += (url.indexOf('?') == -1 ? '?' : '&') + parts.join('&');
          }
          return url;
        }
      }
    ];
  }
  function createXhr(method) {
    //if IE and the method is not RFC2616 compliant, or if XMLHttpRequest
    //is not available, try getting an ActiveXObject. Otherwise, use XMLHttpRequest
    //if it is available
    if (msie <= 8 && (!method.match(/^(get|post|head|put|delete|options)$/i) || !window.XMLHttpRequest)) {
      return new window.ActiveXObject('Microsoft.XMLHTTP');
    } else if (window.XMLHttpRequest) {
      return new window.XMLHttpRequest();
    }
    throw minErr('$httpBackend')('noxhr', 'This browser does not support XMLHttpRequest.');
  }
  /**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
  function $HttpBackendProvider() {
    this.$get = [
      '$browser',
      '$window',
      '$document',
      function ($browser, $window, $document) {
        return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
      }
    ];
  }
  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
    var ABORTED = -1;
    // TODO(vojta): fix the signature
    return function (method, url, post, callback, headers, timeout, withCredentials, responseType) {
      var status;
      $browser.$$incOutstandingRequestCount();
      url = url || $browser.url();
      if (lowercase(method) == 'jsonp') {
        var callbackId = '_' + (callbacks.counter++).toString(36);
        callbacks[callbackId] = function (data) {
          callbacks[callbackId].data = data;
          callbacks[callbackId].called = true;
        };
        var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId), callbackId, function (status, text) {
            completeRequest(callback, status, callbacks[callbackId].data, '', text);
            callbacks[callbackId] = noop;
          });
      } else {
        var xhr = createXhr(method);
        xhr.open(method, url, true);
        forEach(headers, function (value, key) {
          if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
          }
        });
        // In IE6 and 7, this might be called synchronously when xhr.send below is called and the
        // response is in the cache. the promise api will ensure that to the app code the api is
        // always async
        xhr.onreadystatechange = function () {
          // onreadystatechange might get called multiple times with readyState === 4 on mobile webkit caused by
          // xhrs that are resolved while the app is in the background (see #5426).
          // since calling completeRequest sets the `xhr` variable to null, we just check if it's not null before
          // continuing
          //
          // we can't set xhr.onreadystatechange to undefined or delete it because that breaks IE8 (method=PATCH) and
          // Safari respectively.
          if (xhr && xhr.readyState == 4) {
            var responseHeaders = null, response = null, statusText = '';
            if (status !== ABORTED) {
              responseHeaders = xhr.getAllResponseHeaders();
              // responseText is the old-school way of retrieving response (supported by IE8 & 9)
              // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
              response = 'response' in xhr ? xhr.response : xhr.responseText;
            }
            // Accessing statusText on an aborted xhr object will
            // throw an 'c00c023f error' in IE9 and lower, don't touch it.
            if (!(status === ABORTED && msie < 10)) {
              statusText = xhr.statusText;
            }
            completeRequest(callback, status || xhr.status, response, responseHeaders, statusText);
          }
        };
        if (withCredentials) {
          xhr.withCredentials = true;
        }
        if (responseType) {
          try {
            xhr.responseType = responseType;
          } catch (e) {
            // WebKit added support for the json responseType value on 09/03/2013
            // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
            // known to throw when setting the value "json" as the response type. Other older
            // browsers implementing the responseType
            //
            // The json response type can be ignored if not supported, because JSON payloads are
            // parsed on the client-side regardless.
            if (responseType !== 'json') {
              throw e;
            }
          }
        }
        xhr.send(post || null);
      }
      if (timeout > 0) {
        var timeoutId = $browserDefer(timeoutRequest, timeout);
      } else if (isPromiseLike(timeout)) {
        timeout.then(timeoutRequest);
      }
      function timeoutRequest() {
        status = ABORTED;
        jsonpDone && jsonpDone();
        xhr && xhr.abort();
      }
      function completeRequest(callback, status, response, headersString, statusText) {
        // cancel timeout and subsequent timeout promise resolution
        timeoutId && $browserDefer.cancel(timeoutId);
        jsonpDone = xhr = null;
        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }
        // normalize IE bug (http://bugs.jquery.com/ticket/1450)
        status = status === 1223 ? 204 : status;
        statusText = statusText || '';
        callback(status, response, headersString, statusText);
        $browser.$$completeOutstandingRequest(noop);
      }
    };
    function jsonpReq(url, callbackId, done) {
      // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
      // - fetches local scripts via XHR and evals them
      // - adds and immediately removes script elements from the document
      var script = rawDocument.createElement('script'), callback = null;
      script.type = 'text/javascript';
      script.src = url;
      script.async = true;
      callback = function (event) {
        removeEventListenerFn(script, 'load', callback);
        removeEventListenerFn(script, 'error', callback);
        rawDocument.body.removeChild(script);
        script = null;
        var status = -1;
        var text = 'unknown';
        if (event) {
          if (event.type === 'load' && !callbacks[callbackId].called) {
            event = { type: 'error' };
          }
          text = event.type;
          status = event.type === 'error' ? 404 : 200;
        }
        if (done) {
          done(status, text);
        }
      };
      addEventListenerFn(script, 'load', callback);
      addEventListenerFn(script, 'error', callback);
      if (msie <= 8) {
        script.onreadystatechange = function () {
          if (isString(script.readyState) && /loaded|complete/.test(script.readyState)) {
            script.onreadystatechange = null;
            callback({ type: 'load' });
          }
        };
      }
      rawDocument.body.appendChild(script);
      return callback;
    }
  }
  var $interpolateMinErr = minErr('$interpolate');
  /**
 * @ngdoc provider
 * @name $interpolateProvider
 * @kind function
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
  function $InterpolateProvider() {
    var startSymbol = '{{';
    var endSymbol = '}}';
    /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
    this.startSymbol = function (value) {
      if (value) {
        startSymbol = value;
        return this;
      } else {
        return startSymbol;
      }
    };
    /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
    this.endSymbol = function (value) {
      if (value) {
        endSymbol = value;
        return this;
      } else {
        return endSymbol;
      }
    };
    this.$get = [
      '$parse',
      '$exceptionHandler',
      '$sce',
      function ($parse, $exceptionHandler, $sce) {
        var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length;
        /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
     * ```
     *
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     *    * `context`: an object against which any expressions embedded in the strings are evaluated
     *      against.
     *
     */
        function $interpolate(text, mustHaveExpression, trustedContext) {
          var startIndex, endIndex, index = 0, parts = [], length = text.length, hasInterpolation = false, fn, exp, concat = [];
          while (index < length) {
            if ((startIndex = text.indexOf(startSymbol, index)) != -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) {
              index != startIndex && parts.push(text.substring(index, startIndex));
              parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
              fn.exp = exp;
              index = endIndex + endSymbolLength;
              hasInterpolation = true;
            } else {
              // we did not find anything, so we have to add the remainder to the parts array
              index != length && parts.push(text.substring(index));
              index = length;
            }
          }
          if (!(length = parts.length)) {
            // we added, nothing, must have been an empty string.
            parts.push('');
            length = 1;
          }
          // Concatenating expressions makes it hard to reason about whether some combination of
          // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
          // single expression be used for iframe[src], object[src], etc., we ensure that the value
          // that's used is assigned or constructed by some JS code somewhere that is more testable or
          // make it obvious that you bound the value to some user controlled value.  This helps reduce
          // the load when auditing for XSS issues.
          if (trustedContext && parts.length > 1) {
            throw $interpolateMinErr('noconcat', 'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' + 'interpolations that concatenate multiple expressions when a trusted value is ' + 'required.  See http://docs.angularjs.org/api/ng.$sce', text);
          }
          if (!mustHaveExpression || hasInterpolation) {
            concat.length = length;
            fn = function (context) {
              try {
                for (var i = 0, ii = length, part; i < ii; i++) {
                  if (typeof (part = parts[i]) == 'function') {
                    part = part(context);
                    if (trustedContext) {
                      part = $sce.getTrusted(trustedContext, part);
                    } else {
                      part = $sce.valueOf(part);
                    }
                    if (part == null) {
                      // null || undefined
                      part = '';
                    } else {
                      switch (typeof part) {
                      case 'string': {
                          break;
                        }
                      case 'number': {
                          part = '' + part;
                          break;
                        }
                      default: {
                          part = toJson(part);
                        }
                      }
                    }
                  }
                  concat[i] = part;
                }
                return concat.join('');
              } catch (err) {
                var newErr = $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
                $exceptionHandler(newErr);
              }
            };
            fn.exp = text;
            fn.parts = parts;
            return fn;
          }
        }
        /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
        $interpolate.startSymbol = function () {
          return startSymbol;
        };
        /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
        $interpolate.endSymbol = function () {
          return endSymbol;
        };
        return $interpolate;
      }
    ];
  }
  function $IntervalProvider() {
    this.$get = [
      '$rootScope',
      '$window',
      '$q',
      function ($rootScope, $window, $q) {
        var intervals = {};
        /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.bind('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       Date format: <input ng-model="format"> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
        function interval(fn, delay, count, invokeApply) {
          var setInterval = $window.setInterval, clearInterval = $window.clearInterval, deferred = $q.defer(), promise = deferred.promise, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply;
          count = isDefined(count) ? count : 0;
          promise.then(null, null, fn);
          promise.$$intervalId = setInterval(function tick() {
            deferred.notify(iteration++);
            if (count > 0 && iteration >= count) {
              deferred.resolve(iteration);
              clearInterval(promise.$$intervalId);
              delete intervals[promise.$$intervalId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          intervals[promise.$$intervalId] = deferred;
          return promise;
        }
        /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {promise} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
        interval.cancel = function (promise) {
          if (promise && promise.$$intervalId in intervals) {
            intervals[promise.$$intervalId].reject('canceled');
            $window.clearInterval(promise.$$intervalId);
            delete intervals[promise.$$intervalId];
            return true;
          }
          return false;
        };
        return interval;
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
  function $LocaleProvider() {
    this.$get = function () {
      return {
        id: 'en-us',
        NUMBER_FORMATS: {
          DECIMAL_SEP: '.',
          GROUP_SEP: ',',
          PATTERNS: [
            {
              minInt: 1,
              minFrac: 0,
              maxFrac: 3,
              posPre: '',
              posSuf: '',
              negPre: '-',
              negSuf: '',
              gSize: 3,
              lgSize: 3
            },
            {
              minInt: 1,
              minFrac: 2,
              maxFrac: 2,
              posPre: '\xa4',
              posSuf: '',
              negPre: '(\xa4',
              negSuf: ')',
              gSize: 3,
              lgSize: 3
            }
          ],
          CURRENCY_SYM: '$'
        },
        DATETIME_FORMATS: {
          MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(','),
          SHORTMONTH: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
          DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
          SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
          AMPMS: [
            'AM',
            'PM'
          ],
          medium: 'MMM d, y h:mm:ss a',
          short: 'M/d/yy h:mm a',
          fullDate: 'EEEE, MMMM d, y',
          longDate: 'MMMM d, y',
          mediumDate: 'MMM d, y',
          shortDate: 'M/d/yy',
          mediumTime: 'h:mm:ss a',
          shortTime: 'h:mm a'
        },
        pluralCat: function (num) {
          if (num === 1) {
            return 'one';
          }
          return 'other';
        }
      };
    };
  }
  var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
      'http': 80,
      'https': 443,
      'ftp': 21
    };
  var $locationMinErr = minErr('$location');
  /**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
  function encodePath(path) {
    var segments = path.split('/'), i = segments.length;
    while (i--) {
      segments[i] = encodeUriSegment(segments[i]);
    }
    return segments.join('/');
  }
  function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
    var parsedUrl = urlResolve(absoluteUrl, appBase);
    locationObj.$$protocol = parsedUrl.protocol;
    locationObj.$$host = parsedUrl.hostname;
    locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
  }
  function parseAppUrl(relativeUrl, locationObj, appBase) {
    var prefixed = relativeUrl.charAt(0) !== '/';
    if (prefixed) {
      relativeUrl = '/' + relativeUrl;
    }
    var match = urlResolve(relativeUrl, appBase);
    locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname);
    locationObj.$$search = parseKeyValue(match.search);
    locationObj.$$hash = decodeURIComponent(match.hash);
    // make sure path starts with '/';
    if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
      locationObj.$$path = '/' + locationObj.$$path;
    }
  }
  /**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
  function beginsWith(begin, whole) {
    if (whole.indexOf(begin) === 0) {
      return whole.substr(begin.length);
    }
  }
  function stripHash(url) {
    var index = url.indexOf('#');
    return index == -1 ? url : url.substr(0, index);
  }
  function stripFile(url) {
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
  }
  /* return the server only (scheme://host:port) */
  function serverBase(url) {
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
  }
  /**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
  function LocationHtml5Url(appBase, basePrefix) {
    this.$$html5 = true;
    basePrefix = basePrefix || '';
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);
    /**
   * Parse given html5 (regular) url string into properties
   * @param {string} newAbsoluteUrl HTML5 url
   * @private
   */
    this.$$parse = function (url) {
      var pathUrl = beginsWith(appBaseNoFile, url);
      if (!isString(pathUrl)) {
        throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
      }
      parseAppUrl(pathUrl, this, appBase);
      if (!this.$$path) {
        this.$$path = '/';
      }
      this.$$compose();
    };
    /**
   * Compose url and update `absUrl` property
   * @private
   */
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBaseNoFile + this.$$url.substr(1);  // first char is always '/'
    };
    this.$$parseLinkUrl = function (url, relHref) {
      var appUrl, prevAppUrl;
      var rewrittenUrl;
      if ((appUrl = beginsWith(appBase, url)) !== undefined) {
        prevAppUrl = appUrl;
        if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
          rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
        } else {
          rewrittenUrl = appBase + prevAppUrl;
        }
      } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
        rewrittenUrl = appBaseNoFile + appUrl;
      } else if (appBaseNoFile == url + '/') {
        rewrittenUrl = appBaseNoFile;
      }
      if (rewrittenUrl) {
        this.$$parse(rewrittenUrl);
      }
      return !!rewrittenUrl;
    };
  }
  /**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
  function LocationHashbangUrl(appBase, hashPrefix) {
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);
    /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
    this.$$parse = function (url) {
      var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
      var withoutHashUrl = withoutBaseUrl.charAt(0) == '#' ? beginsWith(hashPrefix, withoutBaseUrl) : this.$$html5 ? withoutBaseUrl : '';
      if (!isString(withoutHashUrl)) {
        throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url, hashPrefix);
      }
      parseAppUrl(withoutHashUrl, this, appBase);
      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
      this.$$compose();
      /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
      function removeWindowsDriveName(path, url, base) {
        /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
        var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
        var firstPathSegmentMatch;
        //Get the relative path from the input URL.
        if (url.indexOf(base) === 0) {
          url = url.replace(base, '');
        }
        // The input URL intentionally contains a first path segment that ends with a colon.
        if (windowsFilePathExp.exec(url)) {
          return path;
        }
        firstPathSegmentMatch = windowsFilePathExp.exec(path);
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
      }
    };
    /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
    };
    this.$$parseLinkUrl = function (url, relHref) {
      if (stripHash(appBase) == stripHash(url)) {
        this.$$parse(url);
        return true;
      }
      return false;
    };
  }
  /**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
  function LocationHashbangInHtml5Url(appBase, hashPrefix) {
    this.$$html5 = true;
    LocationHashbangUrl.apply(this, arguments);
    var appBaseNoFile = stripFile(appBase);
    this.$$parseLinkUrl = function (url, relHref) {
      var rewrittenUrl;
      var appUrl;
      if (appBase == stripHash(url)) {
        rewrittenUrl = url;
      } else if (appUrl = beginsWith(appBaseNoFile, url)) {
        rewrittenUrl = appBase + hashPrefix + appUrl;
      } else if (appBaseNoFile === url + '/') {
        rewrittenUrl = appBaseNoFile;
      }
      if (rewrittenUrl) {
        this.$$parse(rewrittenUrl);
      }
      return !!rewrittenUrl;
    };
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
      this.$$absUrl = appBase + hashPrefix + this.$$url;
    };
  }
  LocationHashbangInHtml5Url.prototype = LocationHashbangUrl.prototype = LocationHtml5Url.prototype = {
    $$html5: false,
    $$replace: false,
    absUrl: locationGetter('$$absUrl'),
    url: function (url) {
      if (isUndefined(url))
        return this.$$url;
      var match = PATH_MATCH.exec(url);
      if (match[1])
        this.path(decodeURIComponent(match[1]));
      if (match[2] || match[1])
        this.search(match[3] || '');
      this.hash(match[5] || '');
      return this;
    },
    protocol: locationGetter('$$protocol'),
    host: locationGetter('$$host'),
    port: locationGetter('$$port'),
    path: locationGetterSetter('$$path', function (path) {
      path = path !== null ? path.toString() : '';
      return path.charAt(0) == '/' ? path : '/' + path;
    }),
    search: function (search, paramValue) {
      switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          // remove object undefined or null properties
          forEach(search, function (value, key) {
            if (value == null)
              delete search[key];
          });
          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
      }
      this.$$compose();
      return this;
    },
    hash: locationGetterSetter('$$hash', function (hash) {
      return hash !== null ? hash.toString() : '';
    }),
    replace: function () {
      this.$$replace = true;
      return this;
    }
  };
  function locationGetter(property) {
    return function () {
      return this[property];
    };
  }
  function locationGetterSetter(property, preprocess) {
    return function (value) {
      if (isUndefined(value))
        return this[property];
      this[property] = preprocess(value);
      this.$$compose();
      return this;
    };
  }
  /**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */
  /**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
  function $LocationProvider() {
    var hashPrefix = '', html5Mode = false;
    /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.hashPrefix = function (prefix) {
      if (isDefined(prefix)) {
        hashPrefix = prefix;
        return this;
      } else {
        return hashPrefix;
      }
    };
    /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {boolean=} mode Use HTML5 strategy if available.
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.html5Mode = function (mode) {
      if (isDefined(mode)) {
        html5Mode = mode;
        return this;
      } else {
        return html5Mode;
      }
    };
    /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change. This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#events_$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */
    /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */
    this.$get = [
      '$rootScope',
      '$browser',
      '$sniffer',
      '$rootElement',
      function ($rootScope, $browser, $sniffer, $rootElement) {
        var $location, LocationMode, baseHref = $browser.baseHref(),
          // if base[href] is undefined, it defaults to ''
          initialUrl = $browser.url(), appBase;
        if (html5Mode) {
          appBase = serverBase(initialUrl) + (baseHref || '/');
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
        } else {
          appBase = stripHash(initialUrl);
          LocationMode = LocationHashbangUrl;
        }
        $location = new LocationMode(appBase, '#' + hashPrefix);
        $location.$$parseLinkUrl(initialUrl, initialUrl);
        var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
        $rootElement.on('click', function (event) {
          // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
          // currently we open nice url link and redirect then
          if (event.ctrlKey || event.metaKey || event.which == 2)
            return;
          var elm = jqLite(event.target);
          // traverse the DOM up to find first A tag
          while (lowercase(elm[0].nodeName) !== 'a') {
            // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0])
              return;
          }
          var absHref = elm.prop('href');
          // get the actual href attribute - see
          // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
          var relHref = elm.attr('href') || elm.attr('xlink:href');
          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
            // an animation.
            absHref = urlResolve(absHref.animVal).href;
          }
          // Ignore when url is started with javascript: or mailto:
          if (IGNORE_URI_REGEXP.test(absHref))
            return;
          if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
            if ($location.$$parseLinkUrl(absHref, relHref)) {
              // We do a preventDefault for all urls that are part of the angular application,
              // in html5mode and also without, so that we are able to abort navigation without
              // getting double entries in the location history.
              event.preventDefault();
              // update location manually
              if ($location.absUrl() != $browser.url()) {
                $rootScope.$apply();
                // hack to work around FF6 bug 684208 when scenario runner clicks on links
                window.angular['ff-684208-preventDefault'] = true;
              }
            }
          }
        });
        // rewrite hashbang url <> html5 url
        if ($location.absUrl() != initialUrl) {
          $browser.url($location.absUrl(), true);
        }
        // update $location when $browser url changes
        $browser.onUrlChange(function (newUrl) {
          if ($location.absUrl() != newUrl) {
            $rootScope.$evalAsync(function () {
              var oldUrl = $location.absUrl();
              $location.$$parse(newUrl);
              if ($rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
                $browser.url(oldUrl);
              } else {
                afterLocationChange(oldUrl);
              }
            });
            if (!$rootScope.$$phase)
              $rootScope.$digest();
          }
        });
        // update browser
        var changeCounter = 0;
        $rootScope.$watch(function $locationWatch() {
          var oldUrl = $browser.url();
          var currentReplace = $location.$$replace;
          if (!changeCounter || oldUrl != $location.absUrl()) {
            changeCounter++;
            $rootScope.$evalAsync(function () {
              if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
              } else {
                $browser.url($location.absUrl(), currentReplace);
                afterLocationChange(oldUrl);
              }
            });
          }
          $location.$$replace = false;
          return changeCounter;
        });
        return $location;
        function afterLocationChange(oldUrl) {
          $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
        }
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
       </div>
     </file>
   </example>
 */
  /**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
  function $LogProvider() {
    var debug = true, self = this;
    /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.debugEnabled = function (flag) {
      if (isDefined(flag)) {
        debug = flag;
        return this;
      } else {
        return debug;
      }
    };
    this.$get = [
      '$window',
      function ($window) {
        return {
          log: consoleLog('log'),
          info: consoleLog('info'),
          warn: consoleLog('warn'),
          error: consoleLog('error'),
          debug: function () {
            var fn = consoleLog('debug');
            return function () {
              if (debug) {
                fn.apply(self, arguments);
              }
            };
          }()
        };
        function formatError(arg) {
          if (arg instanceof Error) {
            if (arg.stack) {
              arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? 'Error: ' + arg.message + '\n' + arg.stack : arg.stack;
            } else if (arg.sourceURL) {
              arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
            }
          }
          return arg;
        }
        function consoleLog(type) {
          var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = false;
          // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
          // The reason behind this is that console.log has type "object" in IE8...
          try {
            hasApply = !!logFn.apply;
          } catch (e) {
          }
          if (hasApply) {
            return function () {
              var args = [];
              forEach(arguments, function (arg) {
                args.push(formatError(arg));
              });
              return logFn.apply(console, args);
            };
          }
          // we are IE which either doesn't have window.console => this is noop and we do nothing,
          // or we are IE where console.log doesn't have apply so we log at least first 2 args
          return function (arg1, arg2) {
            logFn(arg1, arg2 == null ? '' : arg2);
          };
        }
      }
    ];
  }
  var $parseMinErr = minErr('$parse');
  var promiseWarningCache = {};
  var promiseWarning;
  // Sandboxing Angular Expressions
  // ------------------------------
  // Angular expressions are generally considered safe because these expressions only have direct
  // access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
  // obtaining a reference to native JS functions such as the Function constructor.
  //
  // As an example, consider the following Angular expression:
  //
  //   {}.toString.constructor('alert("evil JS code")')
  //
  // This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
  // against the expression language, but not to prevent exploits that were enabled by exposing
  // sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
  // practice and therefore we are not even trying to protect against interaction with an object
  // explicitly exposed in this way.
  //
  // In general, it is not possible to access a Window object from an angular expression unless a
  // window or some DOM object that has a reference to window is published onto a Scope.
  // Similarly we prevent invocations of function known to be dangerous, as well as assignments to
  // native objects.
  //
  // See https://docs.angularjs.org/guide/security
  function ensureSafeMemberName(name, fullExpression) {
    if (name === '__defineGetter__' || name === '__defineSetter__' || name === '__lookupGetter__' || name === '__lookupSetter__' || name === '__proto__') {
      throw $parseMinErr('isecfld', 'Attempting to access a disallowed field in Angular expressions! ' + 'Expression: {0}', fullExpression);
    }
    return name;
  }
  function ensureSafeObject(obj, fullExpression) {
    // nifty check if obj is Function that is fast and works across iframes and other contexts
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.document && obj.location && obj.alert && obj.setInterval) {
        throw $parseMinErr('isecwindow', 'Referencing the Window in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) {
        throw $parseMinErr('isecdom', 'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj === Object) {
        throw $parseMinErr('isecobj', 'Referencing Object in Angular expressions is disallowed! Expression: {0}', fullExpression);
      }
    }
    return obj;
  }
  var CALL = Function.prototype.call;
  var APPLY = Function.prototype.apply;
  var BIND = Function.prototype.bind;
  function ensureSafeFunction(obj, fullExpression) {
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj === CALL || obj === APPLY || BIND && obj === BIND) {
        throw $parseMinErr('isecff', 'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}', fullExpression);
      }
    }
  }
  var OPERATORS = {
      'null': function () {
        return null;
      },
      'true': function () {
        return true;
      },
      'false': function () {
        return false;
      },
      undefined: noop,
      '+': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        if (isDefined(a)) {
          if (isDefined(b)) {
            return a + b;
          }
          return a;
        }
        return isDefined(b) ? b : undefined;
      },
      '-': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
      },
      '*': function (self, locals, a, b) {
        return a(self, locals) * b(self, locals);
      },
      '/': function (self, locals, a, b) {
        return a(self, locals) / b(self, locals);
      },
      '%': function (self, locals, a, b) {
        return a(self, locals) % b(self, locals);
      },
      '^': function (self, locals, a, b) {
        return a(self, locals) ^ b(self, locals);
      },
      '=': noop,
      '===': function (self, locals, a, b) {
        return a(self, locals) === b(self, locals);
      },
      '!==': function (self, locals, a, b) {
        return a(self, locals) !== b(self, locals);
      },
      '==': function (self, locals, a, b) {
        return a(self, locals) == b(self, locals);
      },
      '!=': function (self, locals, a, b) {
        return a(self, locals) != b(self, locals);
      },
      '<': function (self, locals, a, b) {
        return a(self, locals) < b(self, locals);
      },
      '>': function (self, locals, a, b) {
        return a(self, locals) > b(self, locals);
      },
      '<=': function (self, locals, a, b) {
        return a(self, locals) <= b(self, locals);
      },
      '>=': function (self, locals, a, b) {
        return a(self, locals) >= b(self, locals);
      },
      '&&': function (self, locals, a, b) {
        return a(self, locals) && b(self, locals);
      },
      '||': function (self, locals, a, b) {
        return a(self, locals) || b(self, locals);
      },
      '&': function (self, locals, a, b) {
        return a(self, locals) & b(self, locals);
      },
      '|': function (self, locals, a, b) {
        return b(self, locals)(self, locals, a(self, locals));
      },
      '!': function (self, locals, a) {
        return !a(self, locals);
      }
    };
  /* jshint bitwise: true */
  var ESCAPE = {
      'n': '\n',
      'f': '\f',
      'r': '\r',
      't': '\t',
      'v': '\x0B',
      '\'': '\'',
      '"': '"'
    };
  /////////////////////////////////////////
  /**
 * @constructor
 */
  var Lexer = function (options) {
    this.options = options;
  };
  Lexer.prototype = {
    constructor: Lexer,
    lex: function (text) {
      this.text = text;
      this.index = 0;
      this.ch = undefined;
      this.lastCh = ':';
      // can start regexp
      this.tokens = [];
      while (this.index < this.text.length) {
        this.ch = this.text.charAt(this.index);
        if (this.is('"\'')) {
          this.readString(this.ch);
        } else if (this.isNumber(this.ch) || this.is('.') && this.isNumber(this.peek())) {
          this.readNumber();
        } else if (this.isIdent(this.ch)) {
          this.readIdent();
        } else if (this.is('(){}[].,;:?')) {
          this.tokens.push({
            index: this.index,
            text: this.ch
          });
          this.index++;
        } else if (this.isWhitespace(this.ch)) {
          this.index++;
          continue;
        } else {
          var ch2 = this.ch + this.peek();
          var ch3 = ch2 + this.peek(2);
          var fn = OPERATORS[this.ch];
          var fn2 = OPERATORS[ch2];
          var fn3 = OPERATORS[ch3];
          if (fn3) {
            this.tokens.push({
              index: this.index,
              text: ch3,
              fn: fn3
            });
            this.index += 3;
          } else if (fn2) {
            this.tokens.push({
              index: this.index,
              text: ch2,
              fn: fn2
            });
            this.index += 2;
          } else if (fn) {
            this.tokens.push({
              index: this.index,
              text: this.ch,
              fn: fn
            });
            this.index += 1;
          } else {
            this.throwError('Unexpected next character ', this.index, this.index + 1);
          }
        }
        this.lastCh = this.ch;
      }
      return this.tokens;
    },
    is: function (chars) {
      return chars.indexOf(this.ch) !== -1;
    },
    was: function (chars) {
      return chars.indexOf(this.lastCh) !== -1;
    },
    peek: function (i) {
      var num = i || 1;
      return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
    },
    isNumber: function (ch) {
      return '0' <= ch && ch <= '9';
    },
    isWhitespace: function (ch) {
      // IE treats non-breaking space as \u00A0
      return ch === ' ' || ch === '\r' || ch === '\t' || ch === '\n' || ch === '\x0B' || ch === '\xa0';
    },
    isIdent: function (ch) {
      return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || '_' === ch || ch === '$';
    },
    isExpOperator: function (ch) {
      return ch === '-' || ch === '+' || this.isNumber(ch);
    },
    throwError: function (error, start, end) {
      end = end || this.index;
      var colStr = isDefined(start) ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']' : ' ' + end;
      throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].', error, colStr, this.text);
    },
    readNumber: function () {
      var number = '';
      var start = this.index;
      while (this.index < this.text.length) {
        var ch = lowercase(this.text.charAt(this.index));
        if (ch == '.' || this.isNumber(ch)) {
          number += ch;
        } else {
          var peekCh = this.peek();
          if (ch == 'e' && this.isExpOperator(peekCh)) {
            number += ch;
          } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) == 'e') {
            number += ch;
          } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) == 'e') {
            this.throwError('Invalid exponent');
          } else {
            break;
          }
        }
        this.index++;
      }
      number = 1 * number;
      this.tokens.push({
        index: start,
        text: number,
        literal: true,
        constant: true,
        fn: function () {
          return number;
        }
      });
    },
    readIdent: function () {
      var parser = this;
      var ident = '';
      var start = this.index;
      var lastDot, peekIndex, methodName, ch;
      while (this.index < this.text.length) {
        ch = this.text.charAt(this.index);
        if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
          if (ch === '.')
            lastDot = this.index;
          ident += ch;
        } else {
          break;
        }
        this.index++;
      }
      //check if this is not a method invocation and if it is back out to last dot
      if (lastDot) {
        peekIndex = this.index;
        while (peekIndex < this.text.length) {
          ch = this.text.charAt(peekIndex);
          if (ch === '(') {
            methodName = ident.substr(lastDot - start + 1);
            ident = ident.substr(0, lastDot - start);
            this.index = peekIndex;
            break;
          }
          if (this.isWhitespace(ch)) {
            peekIndex++;
          } else {
            break;
          }
        }
      }
      var token = {
          index: start,
          text: ident
        };
      // OPERATORS is our own object so we don't need to use special hasOwnPropertyFn
      if (OPERATORS.hasOwnProperty(ident)) {
        token.fn = OPERATORS[ident];
        token.literal = true;
        token.constant = true;
      } else {
        var getter = getterFn(ident, this.options, this.text);
        token.fn = extend(function (self, locals) {
          return getter(self, locals);
        }, {
          assign: function (self, value) {
            return setter(self, ident, value, parser.text, parser.options);
          }
        });
      }
      this.tokens.push(token);
      if (methodName) {
        this.tokens.push({
          index: lastDot,
          text: '.'
        });
        this.tokens.push({
          index: lastDot + 1,
          text: methodName
        });
      }
    },
    readString: function (quote) {
      var start = this.index;
      this.index++;
      var string = '';
      var rawString = quote;
      var escape = false;
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        rawString += ch;
        if (escape) {
          if (ch === 'u') {
            var hex = this.text.substring(this.index + 1, this.index + 5);
            if (!hex.match(/[\da-f]{4}/i))
              this.throwError('Invalid unicode escape [\\u' + hex + ']');
            this.index += 4;
            string += String.fromCharCode(parseInt(hex, 16));
          } else {
            var rep = ESCAPE[ch];
            string = string + (rep || ch);
          }
          escape = false;
        } else if (ch === '\\') {
          escape = true;
        } else if (ch === quote) {
          this.index++;
          this.tokens.push({
            index: start,
            text: rawString,
            string: string,
            literal: true,
            constant: true,
            fn: function () {
              return string;
            }
          });
          return;
        } else {
          string += ch;
        }
        this.index++;
      }
      this.throwError('Unterminated quote', start);
    }
  };
  /**
 * @constructor
 */
  var Parser = function (lexer, $filter, options) {
    this.lexer = lexer;
    this.$filter = $filter;
    this.options = options;
  };
  Parser.ZERO = extend(function () {
    return 0;
  }, { constant: true });
  Parser.prototype = {
    constructor: Parser,
    parse: function (text) {
      this.text = text;
      this.tokens = this.lexer.lex(text);
      var value = this.statements();
      if (this.tokens.length !== 0) {
        this.throwError('is an unexpected token', this.tokens[0]);
      }
      value.literal = !!value.literal;
      value.constant = !!value.constant;
      return value;
    },
    primary: function () {
      var primary;
      if (this.expect('(')) {
        primary = this.filterChain();
        this.consume(')');
      } else if (this.expect('[')) {
        primary = this.arrayDeclaration();
      } else if (this.expect('{')) {
        primary = this.object();
      } else {
        var token = this.expect();
        primary = token.fn;
        if (!primary) {
          this.throwError('not a primary expression', token);
        }
        primary.literal = !!token.literal;
        primary.constant = !!token.constant;
      }
      var next, context;
      while (next = this.expect('(', '[', '.')) {
        if (next.text === '(') {
          primary = this.functionCall(primary, context);
          context = null;
        } else if (next.text === '[') {
          context = primary;
          primary = this.objectIndex(primary);
        } else if (next.text === '.') {
          context = primary;
          primary = this.fieldAccess(primary);
        } else {
          this.throwError('IMPOSSIBLE');
        }
      }
      return primary;
    },
    throwError: function (msg, token) {
      throw $parseMinErr('syntax', 'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].', token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
    },
    peekToken: function () {
      if (this.tokens.length === 0)
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
      return this.tokens[0];
    },
    peek: function (e1, e2, e3, e4) {
      if (this.tokens.length > 0) {
        var token = this.tokens[0];
        var t = token.text;
        if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
          return token;
        }
      }
      return false;
    },
    expect: function (e1, e2, e3, e4) {
      var token = this.peek(e1, e2, e3, e4);
      if (token) {
        this.tokens.shift();
        return token;
      }
      return false;
    },
    consume: function (e1) {
      if (!this.expect(e1)) {
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
      }
    },
    unaryFn: function (fn, right) {
      return extend(function (self, locals) {
        return fn(self, locals, right);
      }, { constant: right.constant });
    },
    ternaryFn: function (left, middle, right) {
      return extend(function (self, locals) {
        return left(self, locals) ? middle(self, locals) : right(self, locals);
      }, { constant: left.constant && middle.constant && right.constant });
    },
    binaryFn: function (left, fn, right) {
      return extend(function (self, locals) {
        return fn(self, locals, left, right);
      }, { constant: left.constant && right.constant });
    },
    statements: function () {
      var statements = [];
      while (true) {
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
          statements.push(this.filterChain());
        if (!this.expect(';')) {
          // optimize for the common case where there is only one statement.
          // TODO(size): maybe we should not support multiple statements?
          return statements.length === 1 ? statements[0] : function (self, locals) {
            var value;
            for (var i = 0; i < statements.length; i++) {
              var statement = statements[i];
              if (statement) {
                value = statement(self, locals);
              }
            }
            return value;
          };
        }
      }
    },
    filterChain: function () {
      var left = this.expression();
      var token;
      while (true) {
        if (token = this.expect('|')) {
          left = this.binaryFn(left, token.fn, this.filter());
        } else {
          return left;
        }
      }
    },
    filter: function () {
      var token = this.expect();
      var fn = this.$filter(token.text);
      var argsFn = [];
      while (true) {
        if (token = this.expect(':')) {
          argsFn.push(this.expression());
        } else {
          var fnInvoke = function (self, locals, input) {
            var args = [input];
            for (var i = 0; i < argsFn.length; i++) {
              args.push(argsFn[i](self, locals));
            }
            return fn.apply(self, args);
          };
          return function () {
            return fnInvoke;
          };
        }
      }
    },
    expression: function () {
      return this.assignment();
    },
    assignment: function () {
      var left = this.ternary();
      var right;
      var token;
      if (token = this.expect('=')) {
        if (!left.assign) {
          this.throwError('implies assignment but [' + this.text.substring(0, token.index) + '] can not be assigned to', token);
        }
        right = this.ternary();
        return function (scope, locals) {
          return left.assign(scope, right(scope, locals), locals);
        };
      }
      return left;
    },
    ternary: function () {
      var left = this.logicalOR();
      var middle;
      var token;
      if (token = this.expect('?')) {
        middle = this.assignment();
        if (token = this.expect(':')) {
          return this.ternaryFn(left, middle, this.assignment());
        } else {
          this.throwError('expected :', token);
        }
      } else {
        return left;
      }
    },
    logicalOR: function () {
      var left = this.logicalAND();
      var token;
      while (true) {
        if (token = this.expect('||')) {
          left = this.binaryFn(left, token.fn, this.logicalAND());
        } else {
          return left;
        }
      }
    },
    logicalAND: function () {
      var left = this.equality();
      var token;
      if (token = this.expect('&&')) {
        left = this.binaryFn(left, token.fn, this.logicalAND());
      }
      return left;
    },
    equality: function () {
      var left = this.relational();
      var token;
      if (token = this.expect('==', '!=', '===', '!==')) {
        left = this.binaryFn(left, token.fn, this.equality());
      }
      return left;
    },
    relational: function () {
      var left = this.additive();
      var token;
      if (token = this.expect('<', '>', '<=', '>=')) {
        left = this.binaryFn(left, token.fn, this.relational());
      }
      return left;
    },
    additive: function () {
      var left = this.multiplicative();
      var token;
      while (token = this.expect('+', '-')) {
        left = this.binaryFn(left, token.fn, this.multiplicative());
      }
      return left;
    },
    multiplicative: function () {
      var left = this.unary();
      var token;
      while (token = this.expect('*', '/', '%')) {
        left = this.binaryFn(left, token.fn, this.unary());
      }
      return left;
    },
    unary: function () {
      var token;
      if (this.expect('+')) {
        return this.primary();
      } else if (token = this.expect('-')) {
        return this.binaryFn(Parser.ZERO, token.fn, this.unary());
      } else if (token = this.expect('!')) {
        return this.unaryFn(token.fn, this.unary());
      } else {
        return this.primary();
      }
    },
    fieldAccess: function (object) {
      var parser = this;
      var field = this.expect().text;
      var getter = getterFn(field, this.options, this.text);
      return extend(function (scope, locals, self) {
        return getter(self || object(scope, locals));
      }, {
        assign: function (scope, value, locals) {
          var o = object(scope, locals);
          if (!o)
            object.assign(scope, o = {});
          return setter(o, field, value, parser.text, parser.options);
        }
      });
    },
    objectIndex: function (obj) {
      var parser = this;
      var indexFn = this.expression();
      this.consume(']');
      return extend(function (self, locals) {
        var o = obj(self, locals), i = indexFn(self, locals), v, p;
        ensureSafeMemberName(i, parser.text);
        if (!o)
          return undefined;
        v = ensureSafeObject(o[i], parser.text);
        if (v && v.then && parser.options.unwrapPromises) {
          p = v;
          if (!('$$v' in v)) {
            p.$$v = undefined;
            p.then(function (val) {
              p.$$v = val;
            });
          }
          v = v.$$v;
        }
        return v;
      }, {
        assign: function (self, value, locals) {
          var key = ensureSafeMemberName(indexFn(self, locals), parser.text);
          // prevent overwriting of Function.constructor which would break ensureSafeObject check
          var o = ensureSafeObject(obj(self, locals), parser.text);
          if (!o)
            obj.assign(self, o = {});
          return o[key] = value;
        }
      });
    },
    functionCall: function (fn, contextGetter) {
      var argsFn = [];
      if (this.peekToken().text !== ')') {
        do {
          argsFn.push(this.expression());
        } while (this.expect(','));
      }
      this.consume(')');
      var parser = this;
      return function (scope, locals) {
        var args = [];
        var context = contextGetter ? contextGetter(scope, locals) : scope;
        for (var i = 0; i < argsFn.length; i++) {
          args.push(ensureSafeObject(argsFn[i](scope, locals), parser.text));
        }
        var fnPtr = fn(scope, locals, context) || noop;
        ensureSafeObject(context, parser.text);
        ensureSafeFunction(fnPtr, parser.text);
        // IE doesn't have apply for some native functions
        var v = fnPtr.apply ? fnPtr.apply(context, args) : fnPtr(args[0], args[1], args[2], args[3], args[4]);
        return ensureSafeObject(v, parser.text);
      };
    },
    arrayDeclaration: function () {
      var elementFns = [];
      var allConstant = true;
      if (this.peekToken().text !== ']') {
        do {
          if (this.peek(']')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var elementFn = this.expression();
          elementFns.push(elementFn);
          if (!elementFn.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume(']');
      return extend(function (self, locals) {
        var array = [];
        for (var i = 0; i < elementFns.length; i++) {
          array.push(elementFns[i](self, locals));
        }
        return array;
      }, {
        literal: true,
        constant: allConstant
      });
    },
    object: function () {
      var keyValues = [];
      var allConstant = true;
      if (this.peekToken().text !== '}') {
        do {
          if (this.peek('}')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var token = this.expect(), key = token.string || token.text;
          this.consume(':');
          var value = this.expression();
          keyValues.push({
            key: key,
            value: value
          });
          if (!value.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume('}');
      return extend(function (self, locals) {
        var object = {};
        for (var i = 0; i < keyValues.length; i++) {
          var keyValue = keyValues[i];
          object[keyValue.key] = keyValue.value(self, locals);
        }
        return object;
      }, {
        literal: true,
        constant: allConstant
      });
    }
  };
  //////////////////////////////////////////////////
  // Parser helper functions
  //////////////////////////////////////////////////
  function setter(obj, path, setValue, fullExp, options) {
    ensureSafeObject(obj, fullExp);
    //needed?
    options = options || {};
    var element = path.split('.'), key;
    for (var i = 0; element.length > 1; i++) {
      key = ensureSafeMemberName(element.shift(), fullExp);
      var propertyObj = ensureSafeObject(obj[key], fullExp);
      if (!propertyObj) {
        propertyObj = {};
        obj[key] = propertyObj;
      }
      obj = propertyObj;
      if (obj.then && options.unwrapPromises) {
        promiseWarning(fullExp);
        if (!('$$v' in obj)) {
          (function (promise) {
            promise.then(function (val) {
              promise.$$v = val;
            });
          }(obj));
        }
        if (obj.$$v === undefined) {
          obj.$$v = {};
        }
        obj = obj.$$v;
      }
    }
    key = ensureSafeMemberName(element.shift(), fullExp);
    ensureSafeObject(obj[key], fullExp);
    obj[key] = setValue;
    return setValue;
  }
  var getterFnCacheDefault = {};
  var getterFnCacheExpensive = {};
  function isPossiblyDangerousMemberName(name) {
    return name == 'constructor';
  }
  /**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
  function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);
    ensureSafeMemberName(key2, fullExp);
    ensureSafeMemberName(key3, fullExp);
    ensureSafeMemberName(key4, fullExp);
    var eso = function (o) {
      return ensureSafeObject(o, fullExp);
    };
    var expensiveChecks = options.expensiveChecks;
    var eso0 = expensiveChecks || isPossiblyDangerousMemberName(key0) ? eso : identity;
    var eso1 = expensiveChecks || isPossiblyDangerousMemberName(key1) ? eso : identity;
    var eso2 = expensiveChecks || isPossiblyDangerousMemberName(key2) ? eso : identity;
    var eso3 = expensiveChecks || isPossiblyDangerousMemberName(key3) ? eso : identity;
    var eso4 = expensiveChecks || isPossiblyDangerousMemberName(key4) ? eso : identity;
    return !options.unwrapPromises ? function cspSafeGetter(scope, locals) {
      var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope;
      if (pathVal == null)
        return pathVal;
      pathVal = eso0(pathVal[key0]);
      if (!key1)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso1(pathVal[key1]);
      if (!key2)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso2(pathVal[key2]);
      if (!key3)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso3(pathVal[key3]);
      if (!key4)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso4(pathVal[key4]);
      return pathVal;
    } : function cspSafePromiseEnabledGetter(scope, locals) {
      var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope, promise;
      if (pathVal == null)
        return pathVal;
      pathVal = eso0(pathVal[key0]);
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = eso0(val);
          });
        }
        pathVal = eso0(pathVal.$$v);
      }
      if (!key1)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso1(pathVal[key1]);
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = eso1(val);
          });
        }
        pathVal = eso1(pathVal.$$v);
      }
      if (!key2)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso2(pathVal[key2]);
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = eso2(val);
          });
        }
        pathVal = eso2(pathVal.$$v);
      }
      if (!key3)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso3(pathVal[key3]);
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = eso3(val);
          });
        }
        pathVal = eso3(pathVal.$$v);
      }
      if (!key4)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso4(pathVal[key4]);
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = eso4(val);
          });
        }
        pathVal = eso4(pathVal.$$v);
      }
      return pathVal;
    };
  }
  function getterFnWithExtraArgs(fn, fullExpression) {
    return function (s, l) {
      return fn(s, l, promiseWarning, ensureSafeObject, fullExpression);
    };
  }
  function getterFn(path, options, fullExp) {
    var expensiveChecks = options.expensiveChecks;
    var getterFnCache = expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault;
    // Check whether the cache has this getter already.
    // We can use hasOwnProperty directly on the cache because we ensure,
    // see below, that the cache never stores a path called 'hasOwnProperty'
    if (getterFnCache.hasOwnProperty(path)) {
      return getterFnCache[path];
    }
    var pathKeys = path.split('.'), pathKeysLength = pathKeys.length, fn;
    // http://jsperf.com/angularjs-parse-getter/6
    if (options.csp) {
      if (pathKeysLength < 6) {
        fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, options);
      } else {
        fn = function (scope, locals) {
          var i = 0, val;
          do {
            val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], fullExp, options)(scope, locals);
            locals = undefined;
            // clear after first iteration
            scope = val;
          } while (i < pathKeysLength);
          return val;
        };
      }
    } else {
      var code = 'var p;\n';
      if (expensiveChecks) {
        code += 's = eso(s, fe);\nl = eso(l, fe);\n';
      }
      var needsEnsureSafeObject = expensiveChecks;
      forEach(pathKeys, function (key, index) {
        ensureSafeMemberName(key, fullExp);
        var lookupJs = (index ? 's' : '((l&&l.hasOwnProperty("' + key + '"))?l:s)') + '["' + key + '"]';
        var wrapWithEso = expensiveChecks || isPossiblyDangerousMemberName(key);
        if (wrapWithEso) {
          lookupJs = 'eso(' + lookupJs + ', fe)';
          needsEnsureSafeObject = true;
        }
        code += 'if(s == null) return undefined;\n' + 's=' + lookupJs + ';\n';
        if (options.unwrapPromises) {
          code += 'if (s && s.then) {\n' + ' pw("' + fullExp.replace(/(["\r\n])/g, '\\$1') + '");\n' + ' if (!("$$v" in s)) {\n' + ' p=s;\n' + ' p.$$v = undefined;\n' + ' p.then(function(v) {p.$$v=' + (wrapWithEso ? 'eso(v)' : 'v') + ';});\n' + '}\n' + ' s=' + (wrapWithEso ? 'eso(s.$$v)' : 's.$$v') + '\n' + '}\n';
        }
      });
      code += 'return s;';
      /* jshint -W054 */
      // s=scope, l=locals, pw=promiseWarning, eso=ensureSafeObject, fe=fullExpression
      var evaledFnGetter = new Function('s', 'l', 'pw', 'eso', 'fe', code);
      /* jshint +W054 */
      evaledFnGetter.toString = valueFn(code);
      if (needsEnsureSafeObject || options.unwrapPromises) {
        evaledFnGetter = getterFnWithExtraArgs(evaledFnGetter, fullExp);
      }
      fn = evaledFnGetter;
    }
    // Only cache the value if it's not going to mess up the cache object
    // This is more performant that using Object.prototype.hasOwnProperty.call
    if (path !== 'hasOwnProperty') {
      getterFnCache[path] = fn;
    }
    return fn;
  }
  ///////////////////////////////////
  /**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */
  /**
 * @ngdoc provider
 * @name $parseProvider
 * @kind function
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
  function $ParseProvider() {
    var cacheDefault = {};
    var cacheExpensive = {};
    var $parseOptions = {
        csp: false,
        unwrapPromises: false,
        logPromiseWarnings: true,
        expensiveChecks: false
      };
    /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name $parseProvider#unwrapPromises
   * @description
   *
   * **This feature is deprecated, see deprecation notes below for more info**
   *
   * If set to true (default is false), $parse will unwrap promises automatically when a promise is
   * found at any part of the expression. In other words, if set to true, the expression will always
   * result in a non-promise value.
   *
   * While the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,
   * the fulfillment value is used in place of the promise while evaluating the expression.
   *
   * **Deprecation notice**
   *
   * This is a feature that didn't prove to be wildly useful or popular, primarily because of the
   * dichotomy between data access in templates (accessed as raw values) and controller code
   * (accessed as promises).
   *
   * In most code we ended up resolving promises manually in controllers anyway and thus unifying
   * the model access there.
   *
   * Other downsides of automatic promise unwrapping:
   *
   * - when building components it's often desirable to receive the raw promises
   * - adds complexity and slows down expression evaluation
   * - makes expression code pre-generation unattractive due to the amount of code that needs to be
   *   generated
   * - makes IDE auto-completion and tool support hard
   *
   * **Warning Logs**
   *
   * If the unwrapping is enabled, Angular will log a warning about each expression that unwraps a
   * promise (to reduce the noise, each expression is logged only once). To disable this logging use
   * `$parseProvider.logPromiseWarnings(false)` api.
   *
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
    this.unwrapPromises = function (value) {
      if (isDefined(value)) {
        $parseOptions.unwrapPromises = !!value;
        return this;
      } else {
        return $parseOptions.unwrapPromises;
      }
    };
    /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name $parseProvider#logPromiseWarnings
   * @description
   *
   * Controls whether Angular should log a warning on any encounter of a promise in an expression.
   *
   * The default is set to `true`.
   *
   * This setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
    this.logPromiseWarnings = function (value) {
      if (isDefined(value)) {
        $parseOptions.logPromiseWarnings = value;
        return this;
      } else {
        return $parseOptions.logPromiseWarnings;
      }
    };
    this.$get = [
      '$filter',
      '$sniffer',
      '$log',
      function ($filter, $sniffer, $log) {
        $parseOptions.csp = $sniffer.csp;
        var $parseOptionsExpensive = {
            csp: $parseOptions.csp,
            unwrapPromises: $parseOptions.unwrapPromises,
            logPromiseWarnings: $parseOptions.logPromiseWarnings,
            expensiveChecks: true
          };
        promiseWarning = function promiseWarningFn(fullExp) {
          if (!$parseOptions.logPromiseWarnings || promiseWarningCache.hasOwnProperty(fullExp))
            return;
          promiseWarningCache[fullExp] = true;
          $log.warn('[$parse] Promise found in the expression `' + fullExp + '`. ' + 'Automatic unwrapping of promises in Angular expressions is deprecated.');
        };
        return function (exp, expensiveChecks) {
          var parsedExpression;
          switch (typeof exp) {
          case 'string':
            var cache = expensiveChecks ? cacheExpensive : cacheDefault;
            if (cache.hasOwnProperty(exp)) {
              return cache[exp];
            }
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
            var lexer = new Lexer(parseOptions);
            var parser = new Parser(lexer, $filter, parseOptions);
            parsedExpression = parser.parse(exp);
            if (exp !== 'hasOwnProperty') {
              // Only cache the value if it's not going to mess up the cache object
              // This is more performant that using Object.prototype.hasOwnProperty.call
              cache[exp] = parsedExpression;
            }
            return parsedExpression;
          case 'function':
            return exp;
          default:
            return noop;
          }
        };
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is an implementation of promises/deferred objects inspired by
 * [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q`, `scope` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 *   Because `catch` is a reserved word in JavaScript and reserved keywords are not supported as
 *   property names by ES3, you'll need to invoke the method like `promise['catch'](callback)` or
 *  `promise.then(null, errorCallback)` to make your code IE8 and Android 2.x compatible.
 *
 * - `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 *   Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as
 *   property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to
 *   make your code IE8 and Android 2.x compatible.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 */
  function $QProvider() {
    this.$get = [
      '$rootScope',
      '$exceptionHandler',
      function ($rootScope, $exceptionHandler) {
        return qFactory(function (callback) {
          $rootScope.$evalAsync(callback);
        }, $exceptionHandler);
      }
    ];
  }
  /**
 * Constructs a promise manager.
 *
 * @param {function(Function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
  function qFactory(nextTick, exceptionHandler) {
    /**
   * @ngdoc method
   * @name $q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
    var defer = function () {
      var pending = [], value, deferred;
      deferred = {
        resolve: function (val) {
          if (pending) {
            var callbacks = pending;
            pending = undefined;
            value = ref(val);
            if (callbacks.length) {
              nextTick(function () {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  value.then(callback[0], callback[1], callback[2]);
                }
              });
            }
          }
        },
        reject: function (reason) {
          deferred.resolve(createInternalRejectedPromise(reason));
        },
        notify: function (progress) {
          if (pending) {
            var callbacks = pending;
            if (pending.length) {
              nextTick(function () {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  callback[2](progress);
                }
              });
            }
          }
        },
        promise: {
          then: function (callback, errback, progressback) {
            var result = defer();
            var wrappedCallback = function (value) {
              try {
                result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
              } catch (e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };
            var wrappedErrback = function (reason) {
              try {
                result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
              } catch (e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };
            var wrappedProgressback = function (progress) {
              try {
                result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
              } catch (e) {
                exceptionHandler(e);
              }
            };
            if (pending) {
              pending.push([
                wrappedCallback,
                wrappedErrback,
                wrappedProgressback
              ]);
            } else {
              value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
            }
            return result.promise;
          },
          'catch': function (callback) {
            return this.then(null, callback);
          },
          'finally': function (callback) {
            function makePromise(value, resolved) {
              var result = defer();
              if (resolved) {
                result.resolve(value);
              } else {
                result.reject(value);
              }
              return result.promise;
            }
            function handleCallback(value, isResolved) {
              var callbackOutput = null;
              try {
                callbackOutput = (callback || defaultCallback)();
              } catch (e) {
                return makePromise(e, false);
              }
              if (isPromiseLike(callbackOutput)) {
                return callbackOutput.then(function () {
                  return makePromise(value, isResolved);
                }, function (error) {
                  return makePromise(error, false);
                });
              } else {
                return makePromise(value, isResolved);
              }
            }
            return this.then(function (value) {
              return handleCallback(value, true);
            }, function (error) {
              return handleCallback(error, false);
            });
          }
        }
      };
      return deferred;
    };
    var ref = function (value) {
      if (isPromiseLike(value))
        return value;
      return {
        then: function (callback) {
          var result = defer();
          nextTick(function () {
            result.resolve(callback(value));
          });
          return result.promise;
        }
      };
    };
    /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
    var reject = function (reason) {
      var result = defer();
      result.reject(reason);
      return result.promise;
    };
    var createInternalRejectedPromise = function (reason) {
      return {
        then: function (callback, errback) {
          var result = defer();
          nextTick(function () {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch (e) {
              result.reject(e);
              exceptionHandler(e);
            }
          });
          return result.promise;
        }
      };
    };
    /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */
    var when = function (value, callback, errback, progressback) {
      var result = defer(), done;
      var wrappedCallback = function (value) {
        try {
          return (isFunction(callback) ? callback : defaultCallback)(value);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };
      var wrappedErrback = function (reason) {
        try {
          return (isFunction(errback) ? errback : defaultErrback)(reason);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };
      var wrappedProgressback = function (progress) {
        try {
          return (isFunction(progressback) ? progressback : defaultCallback)(progress);
        } catch (e) {
          exceptionHandler(e);
        }
      };
      nextTick(function () {
        ref(value).then(function (value) {
          if (done)
            return;
          done = true;
          result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
        }, function (reason) {
          if (done)
            return;
          done = true;
          result.resolve(wrappedErrback(reason));
        }, function (progress) {
          if (done)
            return;
          result.notify(wrappedProgressback(progress));
        });
      });
      return result.promise;
    };
    function defaultCallback(value) {
      return value;
    }
    function defaultErrback(reason) {
      return reject(reason);
    }
    /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */
    function all(promises) {
      var deferred = defer(), counter = 0, results = isArray(promises) ? [] : {};
      forEach(promises, function (promise, key) {
        counter++;
        ref(promise).then(function (value) {
          if (results.hasOwnProperty(key))
            return;
          results[key] = value;
          if (!--counter)
            deferred.resolve(results);
        }, function (reason) {
          if (results.hasOwnProperty(key))
            return;
          deferred.reject(reason);
        });
      });
      if (counter === 0) {
        deferred.resolve(results);
      }
      return deferred.promise;
    }
    return {
      defer: defer,
      reject: reject,
      when: when,
      all: all
    };
  }
  function $$RAFProvider() {
    //rAF
    this.$get = [
      '$window',
      '$timeout',
      function ($window, $timeout) {
        var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
        var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.mozCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
        var rafSupported = !!requestAnimationFrame;
        var raf = rafSupported ? function (fn) {
            var id = requestAnimationFrame(fn);
            return function () {
              cancelAnimationFrame(id);
            };
          } : function (fn) {
            var timer = $timeout(fn, 16.66, false);
            // 1000 / 60 = 16.666
            return function () {
              $timeout.cancel(timer);
            };
          };
        raf.supported = rafSupported;
        return raf;
      }
    ];
  }
  /**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */
  /**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */
  /**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */
  /**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
  function $RootScopeProvider() {
    var TTL = 10;
    var $rootScopeMinErr = minErr('$rootScope');
    var lastDirtyWatch = null;
    this.digestTtl = function (value) {
      if (arguments.length) {
        TTL = value;
      }
      return TTL;
    };
    this.$get = [
      '$injector',
      '$exceptionHandler',
      '$parse',
      '$browser',
      function ($injector, $exceptionHandler, $parse, $browser) {
        /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * ```html
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * ```
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         child.name = "World";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
        function Scope() {
          this.$id = nextUid();
          this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
          this['this'] = this.$root = this;
          this.$$destroyed = false;
          this.$$asyncQueue = [];
          this.$$postDigestQueue = [];
          this.$$listeners = {};
          this.$$listenerCount = {};
          this.$$isolateBindings = {};
        }
        /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */
        /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */
        /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */
        Scope.prototype = {
          constructor: Scope,
          $new: function (isolate) {
            var ChildScope, child;
            if (isolate) {
              child = new Scope();
              child.$root = this.$root;
              // ensure that there is just one async queue per $rootScope and its children
              child.$$asyncQueue = this.$$asyncQueue;
              child.$$postDigestQueue = this.$$postDigestQueue;
            } else {
              // Only create a child scope class if somebody asks for one,
              // but cache it to allow the VM to optimize lookups.
              if (!this.$$childScopeClass) {
                this.$$childScopeClass = function () {
                  this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                  this.$$listeners = {};
                  this.$$listenerCount = {};
                  this.$id = nextUid();
                  this.$$childScopeClass = null;
                };
                this.$$childScopeClass.prototype = this;
              }
              child = new this.$$childScopeClass();
            }
            child['this'] = child;
            child.$parent = this;
            child.$$prevSibling = this.$$childTail;
            if (this.$$childHead) {
              this.$$childTail.$$nextSibling = child;
              this.$$childTail = child;
            } else {
              this.$$childHead = this.$$childTail = child;
            }
            return child;
          },
          $watch: function (watchExp, listener, objectEquality) {
            var scope = this, get = compileToFn(watchExp, 'watch'), array = scope.$$watchers, watcher = {
                fn: listener,
                last: initWatchVal,
                get: get,
                exp: watchExp,
                eq: !!objectEquality
              };
            lastDirtyWatch = null;
            // in the case user pass string, we need to compile it, do we really need this ?
            if (!isFunction(listener)) {
              var listenFn = compileToFn(listener || noop, 'listener');
              watcher.fn = function (newVal, oldVal, scope) {
                listenFn(scope);
              };
            }
            if (typeof watchExp == 'string' && get.constant) {
              var originalFn = watcher.fn;
              watcher.fn = function (newVal, oldVal, scope) {
                originalFn.call(this, newVal, oldVal, scope);
                arrayRemove(array, watcher);
              };
            }
            if (!array) {
              array = scope.$$watchers = [];
            }
            // we use unshift since we use a while loop in $digest for speed.
            // the while loop reads in reverse order.
            array.unshift(watcher);
            return function deregisterWatch() {
              arrayRemove(array, watcher);
              lastDirtyWatch = null;
            };
          },
          $watchCollection: function (obj, listener) {
            var self = this;
            // the current value, updated on each dirty-check run
            var newValue;
            // a shallow copy of the newValue from the last dirty-check run,
            // updated to match newValue during dirty-check run
            var oldValue;
            // a shallow copy of the newValue from when the last change happened
            var veryOldValue;
            // only track veryOldValue if the listener is asking for it
            var trackVeryOldValue = listener.length > 1;
            var changeDetected = 0;
            var objGetter = $parse(obj);
            var internalArray = [];
            var internalObject = {};
            var initRun = true;
            var oldLength = 0;
            function $watchCollectionWatch() {
              newValue = objGetter(self);
              var newLength, key, bothNaN;
              if (!isObject(newValue)) {
                // if primitive
                if (oldValue !== newValue) {
                  oldValue = newValue;
                  changeDetected++;
                }
              } else if (isArrayLike(newValue)) {
                if (oldValue !== internalArray) {
                  // we are transitioning from something which was not an array into array.
                  oldValue = internalArray;
                  oldLength = oldValue.length = 0;
                  changeDetected++;
                }
                newLength = newValue.length;
                if (oldLength !== newLength) {
                  // if lengths do not match we need to trigger change notification
                  changeDetected++;
                  oldValue.length = oldLength = newLength;
                }
                // copy the items to oldValue and look for changes.
                for (var i = 0; i < newLength; i++) {
                  bothNaN = oldValue[i] !== oldValue[i] && newValue[i] !== newValue[i];
                  if (!bothNaN && oldValue[i] !== newValue[i]) {
                    changeDetected++;
                    oldValue[i] = newValue[i];
                  }
                }
              } else {
                if (oldValue !== internalObject) {
                  // we are transitioning from something which was not an object into object.
                  oldValue = internalObject = {};
                  oldLength = 0;
                  changeDetected++;
                }
                // copy the items to oldValue and look for changes.
                newLength = 0;
                for (key in newValue) {
                  if (newValue.hasOwnProperty(key)) {
                    newLength++;
                    if (oldValue.hasOwnProperty(key)) {
                      bothNaN = oldValue[key] !== oldValue[key] && newValue[key] !== newValue[key];
                      if (!bothNaN && oldValue[key] !== newValue[key]) {
                        changeDetected++;
                        oldValue[key] = newValue[key];
                      }
                    } else {
                      oldLength++;
                      oldValue[key] = newValue[key];
                      changeDetected++;
                    }
                  }
                }
                if (oldLength > newLength) {
                  // we used to have more keys, need to find them and destroy them.
                  changeDetected++;
                  for (key in oldValue) {
                    if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                      oldLength--;
                      delete oldValue[key];
                    }
                  }
                }
              }
              return changeDetected;
            }
            function $watchCollectionAction() {
              if (initRun) {
                initRun = false;
                listener(newValue, newValue, self);
              } else {
                listener(newValue, veryOldValue, self);
              }
              // make a copy for the next time a collection is changed
              if (trackVeryOldValue) {
                if (!isObject(newValue)) {
                  //primitive
                  veryOldValue = newValue;
                } else if (isArrayLike(newValue)) {
                  veryOldValue = new Array(newValue.length);
                  for (var i = 0; i < newValue.length; i++) {
                    veryOldValue[i] = newValue[i];
                  }
                } else {
                  // if object
                  veryOldValue = {};
                  for (var key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      veryOldValue[key] = newValue[key];
                    }
                  }
                }
              }
            }
            return this.$watch($watchCollectionWatch, $watchCollectionAction);
          },
          $digest: function () {
            var watch, value, last, watchers, asyncQueue = this.$$asyncQueue, postDigestQueue = this.$$postDigestQueue, length, dirty, ttl = TTL, next, current, target = this, watchLog = [], logIdx, logMsg, asyncTask;
            beginPhase('$digest');
            // Check for changes to browser url that happened in sync before the call to $digest
            $browser.$$checkUrlChange();
            lastDirtyWatch = null;
            do {
              // "while dirty" loop
              dirty = false;
              current = target;
              while (asyncQueue.length) {
                try {
                  asyncTask = asyncQueue.shift();
                  asyncTask.scope.$eval(asyncTask.expression);
                } catch (e) {
                  clearPhase();
                  $exceptionHandler(e);
                }
                lastDirtyWatch = null;
              }
              traverseScopesLoop:
                do {
                  // "traverse the scopes" loop
                  if (watchers = current.$$watchers) {
                    // process our watches
                    length = watchers.length;
                    while (length--) {
                      try {
                        watch = watchers[length];
                        // Most common watches are on primitives, in which case we can short
                        // circuit it with === operator, only when === fails do we use .equals
                        if (watch) {
                          if ((value = watch.get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : typeof value === 'number' && typeof last === 'number' && isNaN(value) && isNaN(last))) {
                            dirty = true;
                            lastDirtyWatch = watch;
                            watch.last = watch.eq ? copy(value, null) : value;
                            watch.fn(value, last === initWatchVal ? value : last, current);
                            if (ttl < 5) {
                              logIdx = 4 - ttl;
                              if (!watchLog[logIdx])
                                watchLog[logIdx] = [];
                              logMsg = isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp;
                              logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                              watchLog[logIdx].push(logMsg);
                            }
                          } else if (watch === lastDirtyWatch) {
                            // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                            // have already been tested.
                            dirty = false;
                            break traverseScopesLoop;
                          }
                        }
                      } catch (e) {
                        clearPhase();
                        $exceptionHandler(e);
                      }
                    }
                  }
                  // Insanity Warning: scope depth-first traversal
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!
                  // this piece should be kept in sync with the traversal in $broadcast
                  if (!(next = current.$$childHead || current !== target && current.$$nextSibling)) {
                    while (current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                } while (current = next);
              // `break traverseScopesLoop;` takes us to here
              if ((dirty || asyncQueue.length) && !ttl--) {
                clearPhase();
                throw $rootScopeMinErr('infdig', '{0} $digest() iterations reached. Aborting!\n' + 'Watchers fired in the last 5 iterations: {1}', TTL, toJson(watchLog));
              }
            } while (dirty || asyncQueue.length);
            clearPhase();
            while (postDigestQueue.length) {
              try {
                postDigestQueue.shift()();
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          },
          $destroy: function () {
            // we can't destroy the root scope or a scope that has been already destroyed
            if (this.$$destroyed)
              return;
            var parent = this.$parent;
            this.$broadcast('$destroy');
            this.$$destroyed = true;
            if (this === $rootScope)
              return;
            forEach(this.$$listenerCount, bind(null, decrementListenerCount, this));
            // sever all the references to parent scopes (after this cleanup, the current scope should
            // not be retained by any of our references and should be eligible for garbage collection)
            if (parent.$$childHead == this)
              parent.$$childHead = this.$$nextSibling;
            if (parent.$$childTail == this)
              parent.$$childTail = this.$$prevSibling;
            if (this.$$prevSibling)
              this.$$prevSibling.$$nextSibling = this.$$nextSibling;
            if (this.$$nextSibling)
              this.$$nextSibling.$$prevSibling = this.$$prevSibling;
            // All of the code below is bogus code that works around V8's memory leak via optimized code
            // and inline caches.
            //
            // see:
            // - https://code.google.com/p/v8/issues/detail?id=2073#c26
            // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
            // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = null;
            // don't reset these to null in case some async task tries to register a listener/watch/task
            this.$$listeners = {};
            this.$$watchers = this.$$asyncQueue = this.$$postDigestQueue = [];
            // prevent NPEs since these methods have references to properties we nulled out
            this.$destroy = this.$digest = this.$apply = noop;
            this.$on = this.$watch = function () {
              return noop;
            };
          },
          $eval: function (expr, locals) {
            return $parse(expr)(this, locals);
          },
          $evalAsync: function (expr) {
            // if we are outside of an $digest loop and this is the first time we are scheduling async
            // task also schedule async auto-flush
            if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
              $browser.defer(function () {
                if ($rootScope.$$asyncQueue.length) {
                  $rootScope.$digest();
                }
              });
            }
            this.$$asyncQueue.push({
              scope: this,
              expression: expr
            });
          },
          $$postDigest: function (fn) {
            this.$$postDigestQueue.push(fn);
          },
          $apply: function (expr) {
            try {
              beginPhase('$apply');
              return this.$eval(expr);
            } catch (e) {
              $exceptionHandler(e);
            } finally {
              clearPhase();
              try {
                $rootScope.$digest();
              } catch (e) {
                $exceptionHandler(e);
                throw e;
              }
            }
          },
          $on: function (name, listener) {
            var namedListeners = this.$$listeners[name];
            if (!namedListeners) {
              this.$$listeners[name] = namedListeners = [];
            }
            namedListeners.push(listener);
            var current = this;
            do {
              if (!current.$$listenerCount[name]) {
                current.$$listenerCount[name] = 0;
              }
              current.$$listenerCount[name]++;
            } while (current = current.$parent);
            var self = this;
            return function () {
              var indexOfListener = indexOf(namedListeners, listener);
              if (indexOfListener !== -1) {
                namedListeners[indexOfListener] = null;
                decrementListenerCount(self, 1, name);
              }
            };
          },
          $emit: function (name, args) {
            var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                name: name,
                targetScope: scope,
                stopPropagation: function () {
                  stopPropagation = true;
                },
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              }, listenerArgs = concat([event], arguments, 1), i, length;
            do {
              namedListeners = scope.$$listeners[name] || empty;
              event.currentScope = scope;
              for (i = 0, length = namedListeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!namedListeners[i]) {
                  namedListeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  //allow all listeners attached to the current scope to run
                  namedListeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              //if any listener on the current scope stops propagation, prevent bubbling
              if (stopPropagation)
                return event;
              //traverse upwards
              scope = scope.$parent;
            } while (scope);
            return event;
          },
          $broadcast: function (name, args) {
            var target = this, current = target, next = target, event = {
                name: name,
                targetScope: target,
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              }, listenerArgs = concat([event], arguments, 1), listeners, i, length;
            //down while you can, then up and next sibling or up and next sibling until back at root
            while (current = next) {
              event.currentScope = current;
              listeners = current.$$listeners[name] || [];
              for (i = 0, length = listeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!listeners[i]) {
                  listeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  listeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              // Insanity Warning: scope depth-first traversal
              // yes, this code is a bit crazy, but it works and we have tests to prove it!
              // this piece should be kept in sync with the traversal in $digest
              // (though it differs due to having the extra check for $$listenerCount)
              if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                while (current !== target && !(next = current.$$nextSibling)) {
                  current = current.$parent;
                }
              }
            }
            return event;
          }
        };
        var $rootScope = new Scope();
        return $rootScope;
        function beginPhase(phase) {
          if ($rootScope.$$phase) {
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
          }
          $rootScope.$$phase = phase;
        }
        function clearPhase() {
          $rootScope.$$phase = null;
        }
        function compileToFn(exp, name) {
          var fn = $parse(exp);
          assertArgFn(fn, name);
          return fn;
        }
        function decrementListenerCount(current, count, name) {
          do {
            current.$$listenerCount[name] -= count;
            if (current.$$listenerCount[name] === 0) {
              delete current.$$listenerCount[name];
            }
          } while (current = current.$parent);
        }
        /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
        function initWatchVal() {
        }
      }
    ];
  }
  /**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
  function $$SanitizeUriProvider() {
    var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file):|data:image\/)/;
    /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        aHrefSanitizationWhitelist = regexp;
        return this;
      }
      return aHrefSanitizationWhitelist;
    };
    /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        imgSrcSanitizationWhitelist = regexp;
        return this;
      }
      return imgSrcSanitizationWhitelist;
    };
    this.$get = function () {
      return function sanitizeUri(uri, isImage) {
        var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
        var normalizedVal;
        // NOTE: urlResolve() doesn't support IE < 8 so we don't sanitize for that case.
        if (!msie || msie >= 8) {
          normalizedVal = urlResolve(uri).href;
          if (normalizedVal !== '' && !normalizedVal.match(regex)) {
            return 'unsafe:' + normalizedVal;
          }
        }
        return uri;
      };
    };
  }
  var $sceMinErr = minErr('$sce');
  var SCE_CONTEXTS = {
      HTML: 'html',
      CSS: 'css',
      URL: 'url',
      RESOURCE_URL: 'resourceUrl',
      JS: 'js'
    };
  // Helper functions follow.
  // Copied from:
  // http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962
  // Prereq: s is a string.
  function escapeForRegexp(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
  }
  function adjustMatcher(matcher) {
    if (matcher === 'self') {
      return matcher;
    } else if (isString(matcher)) {
      // Strings match exactly except for 2 wildcards - '*' and '**'.
      // '*' matches any character except those from the set ':/.?&'.
      // '**' matches any character (like .* in a RegExp).
      // More than 2 *'s raises an error as it's ill defined.
      if (matcher.indexOf('***') > -1) {
        throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher);
      }
      matcher = escapeForRegexp(matcher).replace('\\*\\*', '.*').replace('\\*', '[^:/.?&;]*');
      return new RegExp('^' + matcher + '$');
    } else if (isRegExp(matcher)) {
      // The only other type of matcher allowed is a Regexp.
      // Match entire URL / disallow partial matches.
      // Flags are reset (i.e. no global, ignoreCase or multiline)
      return new RegExp('^' + matcher.source + '$');
    } else {
      throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects');
    }
  }
  function adjustMatchers(matchers) {
    var adjustedMatchers = [];
    if (isDefined(matchers)) {
      forEach(matchers, function (matcher) {
        adjustedMatchers.push(adjustMatcher(matcher));
      });
    }
    return adjustedMatchers;
  }
  /**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */
  /**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */
  function $SceDelegateProvider() {
    this.SCE_CONTEXTS = SCE_CONTEXTS;
    // Resource URLs can also be trusted by policy.
    var resourceUrlWhitelist = ['self'], resourceUrlBlacklist = [];
    /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
    this.resourceUrlWhitelist = function (value) {
      if (arguments.length) {
        resourceUrlWhitelist = adjustMatchers(value);
      }
      return resourceUrlWhitelist;
    };
    /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */
    this.resourceUrlBlacklist = function (value) {
      if (arguments.length) {
        resourceUrlBlacklist = adjustMatchers(value);
      }
      return resourceUrlBlacklist;
    };
    this.$get = [
      '$injector',
      function ($injector) {
        var htmlSanitizer = function htmlSanitizer(html) {
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        };
        if ($injector.has('$sanitize')) {
          htmlSanitizer = $injector.get('$sanitize');
        }
        function matchUrl(matcher, parsedUrl) {
          if (matcher === 'self') {
            return urlIsSameOrigin(parsedUrl);
          } else {
            // definitely a regex.  See adjustMatchers()
            return !!matcher.exec(parsedUrl.href);
          }
        }
        function isResourceUrlAllowedByPolicy(url) {
          var parsedUrl = urlResolve(url.toString());
          var i, n, allowed = false;
          // Ensure that at least one item from the whitelist allows this url.
          for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
            if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
              allowed = true;
              break;
            }
          }
          if (allowed) {
            // Ensure that no item from the blacklist blocked this url.
            for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
              if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                allowed = false;
                break;
              }
            }
          }
          return allowed;
        }
        function generateHolderType(Base) {
          var holderType = function TrustedValueHolderType(trustedValue) {
            this.$$unwrapTrustedValue = function () {
              return trustedValue;
            };
          };
          if (Base) {
            holderType.prototype = new Base();
          }
          holderType.prototype.valueOf = function sceValueOf() {
            return this.$$unwrapTrustedValue();
          };
          holderType.prototype.toString = function sceToString() {
            return this.$$unwrapTrustedValue().toString();
          };
          return holderType;
        }
        var trustedValueHolderBase = generateHolderType(), byType = {};
        byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
        /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
        function trustAs(type, trustedValue) {
          var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (!Constructor) {
            throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}', type, trustedValue);
          }
          if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
            return trustedValue;
          }
          // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
          // mutable objects, we ensure here that the value passed in is actually a string.
          if (typeof trustedValue !== 'string') {
            throw $sceMinErr('itype', 'Attempted to trust a non-string value in a content requiring a string: Context: {0}', type);
          }
          return new Constructor(trustedValue);
        }
        /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
        function valueOf(maybeTrusted) {
          if (maybeTrusted instanceof trustedValueHolderBase) {
            return maybeTrusted.$$unwrapTrustedValue();
          } else {
            return maybeTrusted;
          }
        }
        /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
        function getTrusted(type, maybeTrusted) {
          if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
            return maybeTrusted;
          }
          var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (constructor && maybeTrusted instanceof constructor) {
            return maybeTrusted.$$unwrapTrustedValue();
          }
          // If we get here, then we may only take one of two actions.
          // 1. sanitize the value for the requested type, or
          // 2. throw an exception.
          if (type === SCE_CONTEXTS.RESOURCE_URL) {
            if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
              return maybeTrusted;
            } else {
              throw $sceMinErr('insecurl', 'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
            }
          } else if (type === SCE_CONTEXTS.HTML) {
            return htmlSanitizer(maybeTrusted);
          }
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        }
        return {
          trustAs: trustAs,
          getTrusted: getTrusted,
          valueOf: valueOf
        };
      }
    ];
  }
  /**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */
  /* jshint maxlen: false*/
  /**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead for the developer?
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="myAppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   var mySceApp = angular.module('mySceApp', ['ngSanitize']);
 *
 *   mySceApp.controller("myAppController", function myAppController($http, $templateCache, $sce) {
 *     var self = this;
 *     $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *       self.userComments = userComments;
 *     });
 *     self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *         '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *         'sanitization.&quot;">Hover over this text.</span>');
 *   });
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
  /* jshint maxlen: 100 */
  function $SceProvider() {
    var enabled = true;
    /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
    this.enabled = function (value) {
      if (arguments.length) {
        enabled = !!value;
      }
      return enabled;
    };
    /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */
    this.$get = [
      '$parse',
      '$sniffer',
      '$sceDelegate',
      function ($parse, $sniffer, $sceDelegate) {
        // Prereq: Ensure that we're not running in IE8 quirks mode.  In that mode, IE allows
        // the "expression(javascript expression)" syntax which is insecure.
        if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) {
          throw $sceMinErr('iequirks', 'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' + 'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' + 'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
        }
        var sce = shallowCopy(SCE_CONTEXTS);
        /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
        sce.isEnabled = function () {
          return enabled;
        };
        sce.trustAs = $sceDelegate.trustAs;
        sce.getTrusted = $sceDelegate.getTrusted;
        sce.valueOf = $sceDelegate.valueOf;
        if (!enabled) {
          sce.trustAs = sce.getTrusted = function (type, value) {
            return value;
          };
          sce.valueOf = identity;
        }
        /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        sce.parseAs = function sceParseAs(type, expr) {
          var parsed = $parse(expr);
          if (parsed.literal && parsed.constant) {
            return parsed;
          } else {
            return function sceParseAsTrusted(self, locals) {
              return sce.getTrusted(type, parsed(self, locals));
            };
          }
        };
        /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        // Shorthand delegations.
        var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
        forEach(SCE_CONTEXTS, function (enumValue, name) {
          var lName = lowercase(name);
          sce[camelCase('parse_as_' + lName)] = function (expr) {
            return parse(enumValue, expr);
          };
          sce[camelCase('get_trusted_' + lName)] = function (value) {
            return getTrusted(enumValue, value);
          };
          sce[camelCase('trust_as_' + lName)] = function (value) {
            return trustAs(enumValue, value);
          };
        });
        return sce;
      }
    ];
  }
  /**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} hashchange Does the browser support hashchange event ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
  function $SnifferProvider() {
    this.$get = [
      '$window',
      '$document',
      function ($window, $document) {
        var eventSupport = {}, android = int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, documentMode = document.documentMode, vendorPrefix, vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = false, animations = false, match;
        if (bodyStyle) {
          for (var prop in bodyStyle) {
            if (match = vendorRegex.exec(prop)) {
              vendorPrefix = match[0];
              vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
              break;
            }
          }
          if (!vendorPrefix) {
            vendorPrefix = 'WebkitOpacity' in bodyStyle && 'webkit';
          }
          transitions = !!('transition' in bodyStyle || vendorPrefix + 'Transition' in bodyStyle);
          animations = !!('animation' in bodyStyle || vendorPrefix + 'Animation' in bodyStyle);
          if (android && (!transitions || !animations)) {
            transitions = isString(document.body.style.webkitTransition);
            animations = isString(document.body.style.webkitAnimation);
          }
        }
        return {
          history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
          hashchange: 'onhashchange' in $window && (!documentMode || documentMode > 7),
          hasEvent: function (event) {
            // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
            // it. In particular the event is not fired when backspace or delete key are pressed or
            // when cut operation is performed.
            if (event == 'input' && msie == 9)
              return false;
            if (isUndefined(eventSupport[event])) {
              var divElm = document.createElement('div');
              eventSupport[event] = 'on' + event in divElm;
            }
            return eventSupport[event];
          },
          csp: csp(),
          vendorPrefix: vendorPrefix,
          transitions: transitions,
          animations: animations,
          android: android,
          msie: msie,
          msieDocumentMode: documentMode
        };
      }
    ];
  }
  function $TimeoutProvider() {
    this.$get = [
      '$rootScope',
      '$browser',
      '$q',
      '$exceptionHandler',
      function ($rootScope, $browser, $q, $exceptionHandler) {
        var deferreds = {};
        /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
        function timeout(fn, delay, invokeApply) {
          var deferred = $q.defer(), promise = deferred.promise, skipApply = isDefined(invokeApply) && !invokeApply, timeoutId;
          timeoutId = $browser.defer(function () {
            try {
              deferred.resolve(fn());
            } catch (e) {
              deferred.reject(e);
              $exceptionHandler(e);
            } finally {
              delete deferreds[promise.$$timeoutId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          promise.$$timeoutId = timeoutId;
          deferreds[timeoutId] = deferred;
          return promise;
        }
        /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
        timeout.cancel = function (promise) {
          if (promise && promise.$$timeoutId in deferreds) {
            deferreds[promise.$$timeoutId].reject('canceled');
            delete deferreds[promise.$$timeoutId];
            return $browser.defer.cancel(promise.$$timeoutId);
          }
          return false;
        };
        return timeout;
      }
    ];
  }
  // NOTE:  The usage of window and document instead of $window and $document here is
  // deliberate.  This service depends on the specific behavior of anchor nodes created by the
  // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
  // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
  // doesn't know about mocked locations and resolves URLs to the real document - which is
  // exactly the behavior needed here.  There is little value is mocking these out for this
  // service.
  var urlParsingNode = document.createElement('a');
  var originUrl = urlResolve(window.location.href, true);
  /**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
  function urlResolve(url, base) {
    var href = url;
    if (msie) {
      // Normalize before parse.  Refer Implementation Notes on why this is
      // done in two steps on IE.
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute('href', href);
    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }
  /**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
  function urlIsSameOrigin(requestUrl) {
    var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
    return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
  }
  /**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function ($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
  function $WindowProvider() {
    this.$get = valueFn(window);
  }
  /* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */
  /**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */
  /**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
  $FilterProvider.$inject = ['$provide'];
  function $FilterProvider($provide) {
    var suffix = 'Filter';
    /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
    function register(name, factory) {
      if (isObject(name)) {
        var filters = {};
        forEach(name, function (filter, key) {
          filters[key] = register(key, filter);
        });
        return filters;
      } else {
        return $provide.factory(name + suffix, factory);
      }
    }
    this.register = register;
    this.$get = [
      '$injector',
      function ($injector) {
        return function (name) {
          return $injector.get(name + suffix);
        };
      }
    ];
    ////////////////////////////////////////
    /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */
    register('currency', currencyFilter);
    register('date', dateFilter);
    register('filter', filterFilter);
    register('json', jsonFilter);
    register('limitTo', limitToFilter);
    register('lowercase', lowercaseFilter);
    register('number', numberFilter);
    register('orderBy', orderByFilter);
    register('uppercase', uppercaseFilter);
  }
  /**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is evaluated as an expression and the resulting value is used for substring match against
 *     the contents of the `array`. All strings or objects with string properties in `array` that contain this string
 *     will be returned. The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object. That's equivalent to the simple substring match with a `string`
 *     as described above. The predicate can be negated by prefixing the string with `!`.
 *     For Example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *   - `function(value)`: A predicate function can be used to write arbitrary filters. The function is
 *     called for each element of `array`. The final result is an array of those elements that
 *     the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if the item should be included in filtered result.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.
 *     this is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
  function filterFilter() {
    return function (array, expression, comparator) {
      if (!isArray(array))
        return array;
      var comparatorType = typeof comparator, predicates = [];
      predicates.check = function (value) {
        for (var j = 0; j < predicates.length; j++) {
          if (!predicates[j](value)) {
            return false;
          }
        }
        return true;
      };
      if (comparatorType !== 'function') {
        if (comparatorType === 'boolean' && comparator) {
          comparator = function (obj, text) {
            return angular.equals(obj, text);
          };
        } else {
          comparator = function (obj, text) {
            if (obj && text && typeof obj === 'object' && typeof text === 'object') {
              for (var objKey in obj) {
                if (objKey.charAt(0) !== '$' && hasOwnProperty.call(obj, objKey) && comparator(obj[objKey], text[objKey])) {
                  return true;
                }
              }
              return false;
            }
            text = ('' + text).toLowerCase();
            return ('' + obj).toLowerCase().indexOf(text) > -1;
          };
        }
      }
      var search = function (obj, text) {
        if (typeof text === 'string' && text.charAt(0) === '!') {
          return !search(obj, text.substr(1));
        }
        switch (typeof obj) {
        case 'boolean':
        case 'number':
        case 'string':
          return comparator(obj, text);
        case 'object':
          switch (typeof text) {
          case 'object':
            return comparator(obj, text);
          default:
            for (var objKey in obj) {
              if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                return true;
              }
            }
            break;
          }
          return false;
        case 'array':
          for (var i = 0; i < obj.length; i++) {
            if (search(obj[i], text)) {
              return true;
            }
          }
          return false;
        default:
          return false;
        }
      };
      switch (typeof expression) {
      case 'boolean':
      case 'number':
      case 'string':
        // Set up expression object and fall through
        expression = { $: expression };
      // jshint -W086
      case 'object':
        // jshint +W086
        for (var key in expression) {
          (function (path) {
            if (typeof expression[path] === 'undefined')
              return;
            predicates.push(function (value) {
              return search(path == '$' ? value : value && value[path], expression[path]);
            });
          }(key));
        }
        break;
      case 'function':
        predicates.push(expression);
        break;
      default:
        return array;
      }
      var filtered = [];
      for (var j = 0; j < array.length; j++) {
        var value = array[j];
        if (predicates.check(value)) {
          filtered.push(value);
        }
      }
      return filtered;
    };
  }
  /**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span>{{amount | currency:"USD$"}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('USD$1,234.56');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('(USD$1,234.00)');
       });
     </file>
   </example>
 */
  currencyFilter.$inject = ['$locale'];
  function currencyFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (amount, currencySymbol) {
      if (isUndefined(currencySymbol))
        currencySymbol = formats.CURRENCY_SYM;
      return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).replace(/\u00A4/g, currencySymbol);
    };
  }
  /**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter number: <input ng-model='val'><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */
  numberFilter.$inject = ['$locale'];
  function numberFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (number, fractionSize) {
      return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
    };
  }
  var DECIMAL_SEP = '.';
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
    if (number == null || !isFinite(number) || isObject(number))
      return '';
    var isNegative = number < 0;
    number = Math.abs(number);
    var numStr = number + '', formatedText = '', parts = [];
    var hasExponent = false;
    if (numStr.indexOf('e') !== -1) {
      var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
      if (match && match[2] == '-' && match[3] > fractionSize + 1) {
        numStr = '0';
        number = 0;
      } else {
        formatedText = numStr;
        hasExponent = true;
      }
    }
    if (!hasExponent) {
      var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;
      // determine fractionSize if it is not specified
      if (isUndefined(fractionSize)) {
        fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
      }
      // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
      // inspired by:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
      number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);
      if (number === 0) {
        isNegative = false;
      }
      var fraction = ('' + number).split(DECIMAL_SEP);
      var whole = fraction[0];
      fraction = fraction[1] || '';
      var i, pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
      if (whole.length >= lgroup + group) {
        pos = whole.length - lgroup;
        for (i = 0; i < pos; i++) {
          if ((pos - i) % group === 0 && i !== 0) {
            formatedText += groupSep;
          }
          formatedText += whole.charAt(i);
        }
      }
      for (i = pos; i < whole.length; i++) {
        if ((whole.length - i) % lgroup === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
      // format fraction part.
      while (fraction.length < fractionSize) {
        fraction += '0';
      }
      if (fractionSize && fractionSize !== '0')
        formatedText += decimalSep + fraction.substr(0, fractionSize);
    } else {
      if (fractionSize > 0 && number > -1 && number < 1) {
        formatedText = number.toFixed(fractionSize);
      }
    }
    parts.push(isNegative ? pattern.negPre : pattern.posPre);
    parts.push(formatedText);
    parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
    return parts.join('');
  }
  function padNumber(num, digits, trim) {
    var neg = '';
    if (num < 0) {
      neg = '-';
      num = -num;
    }
    num = '' + num;
    while (num.length < digits)
      num = '0' + num;
    if (trim)
      num = num.substr(num.length - digits);
    return neg + num;
  }
  function dateGetter(name, size, offset, trim) {
    offset = offset || 0;
    return function (date) {
      var value = date['get' + name]();
      if (offset > 0 || value > -offset)
        value += offset;
      if (value === 0 && offset == -12)
        value = 12;
      return padNumber(value, size, trim);
    };
  }
  function dateStrGetter(name, shortForm) {
    return function (date, formats) {
      var value = date['get' + name]();
      var get = uppercase(shortForm ? 'SHORT' + name : name);
      return formats[get][value];
    };
  }
  function timeZoneGetter(date) {
    var zone = -1 * date.getTimezoneOffset();
    var paddedZone = zone >= 0 ? '+' : '';
    paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
    return paddedZone;
  }
  function ampmGetter(date, formats) {
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
  }
  var DATE_FORMATS = {
      yyyy: dateGetter('FullYear', 4),
      yy: dateGetter('FullYear', 2, 0, true),
      y: dateGetter('FullYear', 1),
      MMMM: dateStrGetter('Month'),
      MMM: dateStrGetter('Month', true),
      MM: dateGetter('Month', 2, 1),
      M: dateGetter('Month', 1, 1),
      dd: dateGetter('Date', 2),
      d: dateGetter('Date', 1),
      HH: dateGetter('Hours', 2),
      H: dateGetter('Hours', 1),
      hh: dateGetter('Hours', 2, -12),
      h: dateGetter('Hours', 1, -12),
      mm: dateGetter('Minutes', 2),
      m: dateGetter('Minutes', 1),
      ss: dateGetter('Seconds', 2),
      s: dateGetter('Seconds', 1),
      sss: dateGetter('Milliseconds', 3),
      EEEE: dateStrGetter('Day'),
      EEE: dateStrGetter('Day', true),
      a: ampmGetter,
      Z: timeZoneGetter
    };
  var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/, NUMBER_STRING = /^\-?\d+$/;
  /**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in am/pm, padded (01-12)
 *   * `'h'`: Hour in am/pm, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: am/pm marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 pm)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
  dateFilter.$inject = ['$locale'];
  function dateFilter($locale) {
    var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    // 1        2       3         4          5          6          7          8  9     10      11
    function jsonStringToDate(string) {
      var match;
      if (match = string.match(R_ISO8601_STR)) {
        var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
        if (match[9]) {
          tzHour = int(match[9] + match[10]);
          tzMin = int(match[9] + match[11]);
        }
        dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
        var h = int(match[4] || 0) - tzHour;
        var m = int(match[5] || 0) - tzMin;
        var s = int(match[6] || 0);
        var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }
      return string;
    }
    return function (date, format) {
      var text = '', parts = [], fn, match;
      format = format || 'mediumDate';
      format = $locale.DATETIME_FORMATS[format] || format;
      if (isString(date)) {
        date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);
      }
      if (isNumber(date)) {
        date = new Date(date);
      }
      if (!isDate(date)) {
        return date;
      }
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      forEach(parts, function (value) {
        fn = DATE_FORMATS[value];
        text += fn ? fn(date, $locale.DATETIME_FORMATS) : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
      });
      return text;
    };
  }
  /**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre>{{ {'name':'value'} | json }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.binding("{'name':'value'}")).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
  function jsonFilter() {
    return function (object) {
      return toJson(object, true);
    };
  }
  /**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
  var lowercaseFilter = valueFn(lowercase);
  /**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
  var uppercaseFilter = valueFn(uppercase);
  /**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array or string, as specified by
 * the value and sign (positive or negative) of `limit`.
 *
 * @param {Array|string} input Source array or string to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
       });
     </file>
   </example>
 */
  function limitToFilter() {
    return function (input, limit) {
      if (!isArray(input) && !isString(input))
        return input;
      if (Math.abs(Number(limit)) === Infinity) {
        limit = Number(limit);
      } else {
        limit = int(limit);
      }
      if (isString(input)) {
        //NaN check on limit
        if (limit) {
          return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
        } else {
          return '';
        }
      }
      var out = [], i, n;
      // if abs(limit) exceeds maximum length, trim it
      if (limit > input.length)
        limit = input.length;
      else if (limit < -input.length)
        limit = -input.length;
      if (limit > 0) {
        i = 0;
        n = limit;
      } else {
        i = input.length + limit;
        n = input.length;
      }
      for (; i < n; i++) {
        out.push(input[i]);
      }
      return out;
    };
  }
  /**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * correctly, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
 *      element itself is used to compare where sorting.
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 *    If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = '-age';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
  orderByFilter.$inject = ['$parse'];
  function orderByFilter($parse) {
    return function (array, sortPredicate, reverseOrder) {
      if (!isArrayLike(array))
        return array;
      sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
      if (sortPredicate.length === 0) {
        sortPredicate = ['+'];
      }
      sortPredicate = map(sortPredicate, function (predicate) {
        var descending = false, get = predicate || identity;
        if (isString(predicate)) {
          if (predicate.charAt(0) == '+' || predicate.charAt(0) == '-') {
            descending = predicate.charAt(0) == '-';
            predicate = predicate.substring(1);
          }
          if (predicate === '') {
            // Effectively no predicate was passed so we compare identity
            return reverseComparator(function (a, b) {
              return compare(a, b);
            }, descending);
          }
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            return reverseComparator(function (a, b) {
              return compare(a[key], b[key]);
            }, descending);
          }
        }
        return reverseComparator(function (a, b) {
          return compare(get(a), get(b));
        }, descending);
      });
      return slice.call(array).sort(reverseComparator(comparator, reverseOrder));
      function comparator(o1, o2) {
        for (var i = 0; i < sortPredicate.length; i++) {
          var comp = sortPredicate[i](o1, o2);
          if (comp !== 0)
            return comp;
        }
        return 0;
      }
      function reverseComparator(comp, descending) {
        return toBoolean(descending) ? function (a, b) {
          return comp(b, a);
        } : comp;
      }
      function compare(v1, v2) {
        var t1 = typeof v1;
        var t2 = typeof v2;
        if (t1 == t2) {
          if (isDate(v1) && isDate(v2)) {
            v1 = v1.valueOf();
            v2 = v2.valueOf();
          }
          if (t1 == 'string') {
            v1 = v1.toLowerCase();
            v2 = v2.toLowerCase();
          }
          if (v1 === v2)
            return 0;
          return v1 < v2 ? -1 : 1;
        } else {
          return t1 < t2 ? -1 : 1;
        }
      }
    };
  }
  function ngDirective(directive) {
    if (isFunction(directive)) {
      directive = { link: directive };
    }
    directive.restrict = directive.restrict || 'AC';
    return valueFn(directive);
  }
  /**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
  var htmlAnchorDirective = valueFn({
      restrict: 'E',
      compile: function (element, attr) {
        if (msie <= 8) {
          // turn <a href ng-click="..">link</a> into a stylable link in IE
          // but only if it doesn't have name attribute, in which case it's an anchor
          if (!attr.href && !attr.name) {
            attr.$set('href', '');
          }
          // add a comment node to anchors to workaround IE bug that causes element content to be reset
          // to new attribute content if attribute is updated with value containing @ and element also
          // contains value with @
          // see issue #1949
          element.append(document.createComment('IE fix'));
        }
        if (!attr.href && !attr.xlinkHref && !attr.name) {
          return function (scope, element) {
            // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
            var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ? 'xlink:href' : 'href';
            element.on('click', function (event) {
              // if we have no href url, then don't navigate anywhere.
              if (!element.attr(href)) {
                event.preventDefault();
              }
            });
          };
        }
      }
    });
  /**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */
  /**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */
  /**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */
  /**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * We shouldn't do this, because it will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
 * ```html
 * <div ng-init="scope = { isDisabled: false }">
 *  <button disabled="{{scope.isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as disabled. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngDisabled` directive solves this problem for the `disabled` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then special attribute "disabled" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then special attribute "checked" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */
  var ngAttributeAliasDirectives = {};
  // boolean attrs are evaluated
  forEach(BOOLEAN_ATTR, function (propName, attrName) {
    // binding to multiple is not supported
    if (propName == 'multiple')
      return;
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        priority: 100,
        link: function (scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }
      };
    };
  });
  // ng-src, ng-srcset, ng-href are interpolated
  forEach([
    'src',
    'srcset',
    'href'
  ], function (attrName) {
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        priority: 99,
        link: function (scope, element, attr) {
          var propName = attrName, name = attrName;
          if (attrName === 'href' && toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
            name = 'xlinkHref';
            attr.$attr[name] = 'xlink:href';
            propName = null;
          }
          attr.$observe(normalized, function (value) {
            if (!value) {
              if (attrName === 'href') {
                attr.$set(name, null);
              }
              return;
            }
            attr.$set(name, value);
            // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
            // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
            // to set the property as well to achieve the desired effect.
            // we use attr[attrName] value since $set can sanitize the url.
            if (msie && propName)
              element.prop(propName, attr[name]);
          });
        }
      };
    };
  });
  /* global -nullFormCtrl */
  var nullFormCtrl = {
      $addControl: noop,
      $removeControl: noop,
      $setValidity: noop,
      $setDirty: noop,
      $setPristine: noop
    };
  /**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 *
 * @property {Object} $error Is an object hash, containing references to all invalid controls or
 *  forms, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that are invalid for given error name.
 *
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
  //asks for $scope to fool the BC controller module
  FormController.$inject = [
    '$element',
    '$attrs',
    '$scope',
    '$animate'
  ];
  function FormController(element, attrs, $scope, $animate) {
    var form = this, parentForm = element.parent().controller('form') || nullFormCtrl, invalidCount = 0,
      // used to easily determine if we are valid
      errors = form.$error = {}, controls = [];
    // init state
    form.$name = attrs.name || attrs.ngForm;
    form.$dirty = false;
    form.$pristine = true;
    form.$valid = true;
    form.$invalid = false;
    parentForm.$addControl(form);
    // Setup initial state of the control
    element.addClass(PRISTINE_CLASS);
    toggleValidCss(true);
    // convenience method for easy toggling of classes
    function toggleValidCss(isValid, validationErrorKey) {
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
      $animate.setClass(element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
    }
    /**
   * @ngdoc method
   * @name form.FormController#$addControl
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
    form.$addControl = function (control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);
      if (control.$name) {
        form[control.$name] = control;
      }
    };
    /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
    form.$removeControl = function (control) {
      if (control.$name && form[control.$name] === control) {
        delete form[control.$name];
      }
      forEach(errors, function (queue, validationToken) {
        form.$setValidity(validationToken, true, control);
      });
      arrayRemove(controls, control);
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
    form.$setValidity = function (validationToken, isValid, control) {
      var queue = errors[validationToken];
      if (isValid) {
        if (queue) {
          arrayRemove(queue, control);
          if (!queue.length) {
            invalidCount--;
            if (!invalidCount) {
              toggleValidCss(isValid);
              form.$valid = true;
              form.$invalid = false;
            }
            errors[validationToken] = false;
            toggleValidCss(true, validationToken);
            parentForm.$setValidity(validationToken, true, form);
          }
        }
      } else {
        if (!invalidCount) {
          toggleValidCss(isValid);
        }
        if (queue) {
          if (includes(queue, control))
            return;
        } else {
          errors[validationToken] = queue = [];
          invalidCount++;
          toggleValidCss(false, validationToken);
          parentForm.$setValidity(validationToken, false, form);
        }
        queue.push(control);
        form.$valid = false;
        form.$invalid = true;
      }
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
    form.$setDirty = function () {
      $animate.removeClass(element, PRISTINE_CLASS);
      $animate.addClass(element, DIRTY_CLASS);
      form.$dirty = true;
      form.$pristine = false;
      parentForm.$setDirty();
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
    form.$setPristine = function () {
      $animate.removeClass(element, DIRTY_CLASS);
      $animate.addClass(element, PRISTINE_CLASS);
      form.$dirty = false;
      form.$pristine = true;
      forEach(controls, function (control) {
        control.$setPristine();
      });
    };
  }
  /**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */
  /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
  var formDirectiveFactory = function (isNgForm) {
    return [
      '$timeout',
      function ($timeout) {
        var formDirective = {
            name: 'form',
            restrict: isNgForm ? 'EAC' : 'E',
            controller: FormController,
            compile: function () {
              return {
                pre: function (scope, formElement, attr, controller) {
                  if (!attr.action) {
                    // we can't use jq events because if a form is destroyed during submission the default
                    // action is not prevented. see #1238
                    //
                    // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                    // page reload if the form was destroyed by submission of the form via a click handler
                    // on a button in the form. Looks like an IE9 specific bug.
                    var preventDefaultListener = function (event) {
                      event.preventDefault ? event.preventDefault() : event.returnValue = false;  // IE
                    };
                    addEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                    // unregister the preventDefault listener so that we don't not leak memory but in a
                    // way that will achieve the prevention of the default action.
                    formElement.on('$destroy', function () {
                      $timeout(function () {
                        removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                      }, 0, false);
                    });
                  }
                  var parentFormCtrl = formElement.parent().controller('form'), alias = attr.name || attr.ngForm;
                  if (alias) {
                    setter(scope, alias, controller, alias);
                  }
                  if (parentFormCtrl) {
                    formElement.on('$destroy', function () {
                      parentFormCtrl.$removeControl(controller);
                      if (alias) {
                        setter(scope, alias, undefined, alias);
                      }
                      extend(controller, nullFormCtrl);  //stop propagating child destruction handlers upwards
                    });
                  }
                }
              };
            }
          };
        return formDirective;
      }
    ];
  };
  var formDirective = formDirectiveFactory();
  var ngFormDirective = formDirectiveFactory(true);
  /* global VALID_CLASS: true,
    INVALID_CLASS: true,
    PRISTINE_CLASS: true,
    DIRTY_CLASS: true
*/
  var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
  var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
  var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
  var inputType = {
      'text': textInputType,
      'number': numberInputType,
      'url': urlInputType,
      'email': emailInputType,
      'radio': radioInputType,
      'checkbox': checkboxInputType,
      'hidden': noop,
      'button': noop,
      'submit': noop,
      'reset': noop,
      'file': noop
    };
  // A helper function to call $setValidity and return the value / undefined,
  // a pattern that is repeated a lot in the input validation logic.
  function validate(ctrl, validatorName, validity, value) {
    ctrl.$setValidity(validatorName, validity);
    return validity ? value : undefined;
  }
  function testFlags(validity, flags) {
    var i, flag;
    if (flags) {
      for (i = 0; i < flags.length; ++i) {
        flag = flags[i];
        if (validity[flag]) {
          return true;
        }
      }
    }
    return false;
  }
  // Pass validity so that behaviour can be mocked easier.
  function addNativeHtml5Validators(ctrl, validatorName, badFlags, ignoreFlags, validity) {
    if (isObject(validity)) {
      ctrl.$$hasNativeValidators = true;
      var validator = function (value) {
        // Don't overwrite previous validation, don't consider valueMissing to apply (ng-required can
        // perform the required validation)
        if (!ctrl.$error[validatorName] && !testFlags(validity, ignoreFlags) && testFlags(validity, badFlags)) {
          ctrl.$setValidity(validatorName, false);
          return;
        }
        return value;
      };
      ctrl.$parsers.push(validator);
    }
  }
  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    var validity = element.prop(VALIDITY_STATE_PROPERTY);
    var placeholder = element[0].placeholder, noevent = {};
    var type = lowercase(element[0].type);
    ctrl.$$validityState = validity;
    // In composition mode, users are still inputing intermediate text buffer,
    // hold the listener until composition is done.
    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
    if (!$sniffer.android) {
      var composing = false;
      element.on('compositionstart', function (data) {
        composing = true;
      });
      element.on('compositionend', function () {
        composing = false;
        listener();
      });
    }
    var listener = function (ev) {
      if (composing)
        return;
      var value = element.val();
      // IE (11 and under) seem to emit an 'input' event if the placeholder value changes.
      // We don't want to dirty the value when this happens, so we abort here. Unfortunately,
      // IE also sends input events for other non-input-related things, (such as focusing on a
      // form control), so this change is not entirely enough to solve this.
      if (msie && (ev || noevent).type === 'input' && element[0].placeholder !== placeholder) {
        placeholder = element[0].placeholder;
        return;
      }
      // By default we will trim the value
      // If the attribute ng-trim exists we will avoid trimming
      // If input type is 'password', the value is never trimmed
      if (type !== 'password' && toBoolean(attr.ngTrim || 'T')) {
        value = trim(value);
      }
      // If a control is suffering from bad input, browsers discard its value, so it may be
      // necessary to revalidate even if the control's value is the same empty value twice in
      // a row.
      var revalidate = validity && ctrl.$$hasNativeValidators;
      if (ctrl.$viewValue !== value || value === '' && revalidate) {
        if (scope.$root.$$phase) {
          ctrl.$setViewValue(value);
        } else {
          scope.$apply(function () {
            ctrl.$setViewValue(value);
          });
        }
      }
    };
    // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
    // input event on backspace, delete or cut
    if ($sniffer.hasEvent('input')) {
      element.on('input', listener);
    } else {
      var timeout;
      var deferListener = function () {
        if (!timeout) {
          timeout = $browser.defer(function () {
            listener();
            timeout = null;
          });
        }
      };
      element.on('keydown', function (event) {
        var key = event.keyCode;
        // ignore
        //    command            modifiers                   arrows
        if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40)
          return;
        deferListener();
      });
      // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
      if ($sniffer.hasEvent('paste')) {
        element.on('paste cut', deferListener);
      }
    }
    // if user paste into input using mouse on older browser
    // or form autocomplete on newer browser, we need "change" event to catch it
    element.on('change', listener);
    ctrl.$render = function () {
      element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
    };
    // pattern validator
    var pattern = attr.ngPattern, patternValidator, match;
    if (pattern) {
      var validateRegex = function (regexp, value) {
        return validate(ctrl, 'pattern', ctrl.$isEmpty(value) || regexp.test(value), value);
      };
      match = pattern.match(/^\/(.*)\/([gim]*)$/);
      if (match) {
        pattern = new RegExp(match[1], match[2]);
        patternValidator = function (value) {
          return validateRegex(pattern, value);
        };
      } else {
        patternValidator = function (value) {
          var patternObj = scope.$eval(pattern);
          if (!patternObj || !patternObj.test) {
            throw minErr('ngPattern')('noregexp', 'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern, patternObj, startingTag(element));
          }
          return validateRegex(patternObj, value);
        };
      }
      ctrl.$formatters.push(patternValidator);
      ctrl.$parsers.push(patternValidator);
    }
    // min length validator
    if (attr.ngMinlength) {
      var minlength = int(attr.ngMinlength);
      var minLengthValidator = function (value) {
        return validate(ctrl, 'minlength', ctrl.$isEmpty(value) || value.length >= minlength, value);
      };
      ctrl.$parsers.push(minLengthValidator);
      ctrl.$formatters.push(minLengthValidator);
    }
    // max length validator
    if (attr.ngMaxlength) {
      var maxlength = int(attr.ngMaxlength);
      var maxLengthValidator = function (value) {
        return validate(ctrl, 'maxlength', ctrl.$isEmpty(value) || value.length <= maxlength, value);
      };
      ctrl.$parsers.push(maxLengthValidator);
      ctrl.$formatters.push(maxLengthValidator);
    }
  }
  var numberBadFlags = ['badInput'];
  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    ctrl.$parsers.push(function (value) {
      var empty = ctrl.$isEmpty(value);
      if (empty || NUMBER_REGEXP.test(value)) {
        ctrl.$setValidity('number', true);
        return value === '' ? null : empty ? value : parseFloat(value);
      } else {
        ctrl.$setValidity('number', false);
        return undefined;
      }
    });
    addNativeHtml5Validators(ctrl, 'number', numberBadFlags, null, ctrl.$$validityState);
    ctrl.$formatters.push(function (value) {
      return ctrl.$isEmpty(value) ? '' : '' + value;
    });
    if (attr.min) {
      var minValidator = function (value) {
        var min = parseFloat(attr.min);
        return validate(ctrl, 'min', ctrl.$isEmpty(value) || value >= min, value);
      };
      ctrl.$parsers.push(minValidator);
      ctrl.$formatters.push(minValidator);
    }
    if (attr.max) {
      var maxValidator = function (value) {
        var max = parseFloat(attr.max);
        return validate(ctrl, 'max', ctrl.$isEmpty(value) || value <= max, value);
      };
      ctrl.$parsers.push(maxValidator);
      ctrl.$formatters.push(maxValidator);
    }
    ctrl.$formatters.push(function (value) {
      return validate(ctrl, 'number', ctrl.$isEmpty(value) || isNumber(value), value);
    });
  }
  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var urlValidator = function (value) {
      return validate(ctrl, 'url', ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
    };
    ctrl.$formatters.push(urlValidator);
    ctrl.$parsers.push(urlValidator);
  }
  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var emailValidator = function (value) {
      return validate(ctrl, 'email', ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
    };
    ctrl.$formatters.push(emailValidator);
    ctrl.$parsers.push(emailValidator);
  }
  function radioInputType(scope, element, attr, ctrl) {
    // make the name unique, if not defined
    if (isUndefined(attr.name)) {
      element.attr('name', nextUid());
    }
    element.on('click', function () {
      if (element[0].checked) {
        scope.$apply(function () {
          ctrl.$setViewValue(attr.value);
        });
      }
    });
    ctrl.$render = function () {
      var value = attr.value;
      element[0].checked = value == ctrl.$viewValue;
    };
    attr.$observe('value', ctrl.$render);
  }
  function checkboxInputType(scope, element, attr, ctrl) {
    var trueValue = attr.ngTrueValue, falseValue = attr.ngFalseValue;
    if (!isString(trueValue))
      trueValue = true;
    if (!isString(falseValue))
      falseValue = false;
    element.on('click', function () {
      scope.$apply(function () {
        ctrl.$setViewValue(element[0].checked);
      });
    });
    ctrl.$render = function () {
      element[0].checked = ctrl.$viewValue;
    };
    // Override the standard `$isEmpty` because a value of `false` means empty in a checkbox.
    ctrl.$isEmpty = function (value) {
      return value !== trueValue;
    };
    ctrl.$formatters.push(function (value) {
      return value === trueValue;
    });
    ctrl.$parsers.push(function (value) {
      return value ? trueValue : falseValue;
    });
  }
  /**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */
  /**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control with angular data-binding. Input control follows HTML5 input types
 * and polyfills the HTML5 validation behavior for older browsers.
 *
 * *NOTE* Not every feature offered is available for all input types.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.binding('{{user}}'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
  var inputDirective = [
      '$browser',
      '$sniffer',
      function ($browser, $sniffer) {
        return {
          restrict: 'E',
          require: '?ngModel',
          link: function (scope, element, attr, ctrl) {
            if (ctrl) {
              (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer, $browser);
            }
          }
        };
      }
    ];
  var VALID_CLASS = 'ng-valid', INVALID_CLASS = 'ng-invalid', PRISTINE_CLASS = 'ng-pristine', DIRTY_CLASS = 'ng-dirty';
  /**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model, that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM.  Each function is called, in turn, passing the value
       through to the next. The last return value is used to populate the model.
       Used to sanitize / convert the value as well as validation. For validation,
       the parsers should update the validity state using
       {@link ngModel.NgModelController#$setValidity $setValidity()},
       and return `undefined` for invalid values.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. Each function is called, in turn, passing the value through to the
       next. Used to format / convert values for display in the control and validation.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all errors as keys.
 *
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 *
 * @description
 *
 * `NgModelController` provides API for the `ng-model` directive. The controller contains
 * services for data-binding, validation, CSS updates, and value formatting and parsing. It
 * purposefully does not contain any logic which deals with DOM rendering or listening to
 * DOM events. Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding.
 *
 * ## Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.  This will not work on older browsers.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if(!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
  var NgModelController = [
      '$scope',
      '$exceptionHandler',
      '$attrs',
      '$element',
      '$parse',
      '$animate',
      function ($scope, $exceptionHandler, $attr, $element, $parse, $animate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$pristine = true;
        this.$dirty = false;
        this.$valid = true;
        this.$invalid = false;
        this.$name = $attr.name;
        var ngModelGet = $parse($attr.ngModel), ngModelSet = ngModelGet.assign;
        if (!ngModelSet) {
          throw minErr('ngModel')('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}', $attr.ngModel, startingTag($element));
        }
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   */
        this.$render = noop;
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of the input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different to the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is empty.
   */
        this.$isEmpty = function (value) {
          return isUndefined(value) || value === '' || value === null || value !== value;
        };
        var parentForm = $element.inheritedData('$formController') || nullFormCtrl, invalidCount = 0,
          // used to easily determine if we are valid
          $error = this.$error = {};
        // keep invalid keys here
        // Setup initial state of the control
        $element.addClass(PRISTINE_CLASS);
        toggleValidCss(true);
        // convenience method for easy toggling of classes
        function toggleValidCss(isValid, validationErrorKey) {
          validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
          $animate.removeClass($element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
          $animate.addClass($element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
        }
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notifies the form when the control changes validity. (i.e. it
   * does not notify form if given validator is already marked as invalid).
   *
   * This method should be called by validators - i.e. the parser or formatter functions.
   *
   * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign
   *        to `$error[validationErrorKey]=!isValid` so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).
   */
        this.$setValidity = function (validationErrorKey, isValid) {
          // Purposeful use of ! here to cast isValid to boolean in case it is undefined
          // jshint -W018
          if ($error[validationErrorKey] === !isValid)
            return;
          // jshint +W018
          if (isValid) {
            if ($error[validationErrorKey])
              invalidCount--;
            if (!invalidCount) {
              toggleValidCss(true);
              this.$valid = true;
              this.$invalid = false;
            }
          } else {
            toggleValidCss(false);
            this.$invalid = true;
            this.$valid = false;
            invalidCount++;
          }
          $error[validationErrorKey] = !isValid;
          toggleValidCss(isValid, validationErrorKey);
          parentForm.$setValidity(validationErrorKey, isValid, this);
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the control to its pristine
   * state (ng-pristine class).
   */
        this.$setPristine = function () {
          this.$dirty = false;
          this.$pristine = true;
          $animate.removeClass($element, DIRTY_CLASS);
          $animate.addClass($element, PRISTINE_CLASS);
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when the view value changes, typically from within a DOM event handler.
   * For example {@link ng.directive:input input} and
   * {@link ng.directive:select select} directives call it.
   *
   * It will update the $viewValue, then pass this value through each of the functions in `$parsers`,
   * which includes any validators. The value that comes out of this `$parsers` pipeline, be applied to
   * `$modelValue` and the **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   */
        this.$setViewValue = function (value) {
          this.$viewValue = value;
          // change to dirty
          if (this.$pristine) {
            this.$dirty = true;
            this.$pristine = false;
            $animate.removeClass($element, PRISTINE_CLASS);
            $animate.addClass($element, DIRTY_CLASS);
            parentForm.$setDirty();
          }
          forEach(this.$parsers, function (fn) {
            value = fn(value);
          });
          if (this.$modelValue !== value) {
            this.$modelValue = value;
            ngModelSet($scope, value);
            forEach(this.$viewChangeListeners, function (listener) {
              try {
                listener();
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          }
        };
        // model -> value
        var ctrl = this;
        $scope.$watch(function ngModelWatch() {
          var value = ngModelGet($scope);
          // if scope model value and ngModel value are out of sync
          if (ctrl.$modelValue !== value) {
            var formatters = ctrl.$formatters, idx = formatters.length;
            ctrl.$modelValue = value;
            while (idx--) {
              value = formatters[idx](value);
            }
            if (ctrl.$viewValue !== value) {
              ctrl.$viewValue = value;
              ctrl.$render();
            }
          }
          return value;
        });
      }
    ];
  /**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid` is set if the model is valid.
 *  - `ng-invalid` is set if the model is invalid.
 *  - `ng-pristine` is set if the model is pristine.
 *  - `ng-dirty` is set if the model is dirty.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       Update input to see transitions when valid/invalid.
       Integer is a valid value.
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
       </form>
     </file>
 * </example>
 */
  var ngModelDirective = function () {
    return {
      require: [
        'ngModel',
        '^?form'
      ],
      controller: NgModelController,
      link: function (scope, element, attr, ctrls) {
        // notify others, especially parent forms
        var modelCtrl = ctrls[0], formCtrl = ctrls[1] || nullFormCtrl;
        formCtrl.$addControl(modelCtrl);
        scope.$on('$destroy', function () {
          formCtrl.$removeControl(modelCtrl);
        });
      }
    };
  };
  /**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 * The expression is not evaluated when the value change is coming from the model.
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
  var ngChangeDirective = valueFn({
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        ctrl.$viewChangeListeners.push(function () {
          scope.$eval(attr.ngChange);
        });
      }
    });
  var requiredDirective = function () {
    return {
      require: '?ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!ctrl)
          return;
        attr.required = true;
        // force truthy in case we are on non input element
        var validator = function (value) {
          if (attr.required && ctrl.$isEmpty(value)) {
            ctrl.$setValidity('required', false);
          } else {
            ctrl.$setValidity('required', true);
            return value;
          }
        };
        ctrl.$formatters.push(validator);
        ctrl.$parsers.unshift(validator);
        attr.$observe('required', function () {
          validator(ctrl.$viewValue);
        });
      }
    };
  };
  /**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The delimiter
 * can be a fixed string (by default a comma) or a regular expression.
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value. If
 *   specified in form `/something/` then the value will be converted into a regular expression.
 *
 * @example
    <example name="ngList-directive" module="listExample">
      <file name="index.html">
       <script>
         angular.module('listExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.names = ['igor', 'misko', 'vojta'];
           }]);
       </script>
       <form name="myForm" ng-controller="ExampleController">
         List: <input name="namesInput" ng-model="names" ng-list required>
         <span class="error" ng-show="myForm.namesInput.$error.required">
           Required!</span>
         <br>
         <tt>names = {{names}}</tt><br/>
         <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
         <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var listInput = element(by.model('names'));
        var names = element(by.binding('{{names}}'));
        var valid = element(by.binding('myForm.namesInput.$valid'));
        var error = element(by.css('span.error'));

        it('should initialize to model', function() {
          expect(names.getText()).toContain('["igor","misko","vojta"]');
          expect(valid.getText()).toContain('true');
          expect(error.getCssValue('display')).toBe('none');
        });

        it('should be invalid if empty', function() {
          listInput.clear();
          listInput.sendKeys('');

          expect(names.getText()).toContain('');
          expect(valid.getText()).toContain('false');
          expect(error.getCssValue('display')).not.toBe('none');        });
      </file>
    </example>
 */
  var ngListDirective = function () {
    return {
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        var match = /\/(.*)\//.exec(attr.ngList), separator = match && new RegExp(match[1]) || attr.ngList || ',';
        var parse = function (viewValue) {
          // If the viewValue is invalid (say required but empty) it will be `undefined`
          if (isUndefined(viewValue))
            return;
          var list = [];
          if (viewValue) {
            forEach(viewValue.split(separator), function (value) {
              if (value)
                list.push(trim(value));
            });
          }
          return list;
        };
        ctrl.$parsers.push(parse);
        ctrl.$formatters.push(function (value) {
          if (isArray(value)) {
            return value.join(', ');
          }
          return undefined;
        });
        // Override the standard $isEmpty because an empty array means the input is empty.
        ctrl.$isEmpty = function (value) {
          return !value || !value.length;
        };
      }
    };
  };
  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
  /**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `input[select]` or `input[radio]`, so
 * that when the element is selected, the `ngModel` of that element is set to the
 * bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as
 * shown below.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
  var ngValueDirective = function () {
    return {
      priority: 100,
      compile: function (tpl, tplAttr) {
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
          return function ngValueConstantLink(scope, elm, attr) {
            attr.$set('value', scope.$eval(attr.ngValue));
          };
        } else {
          return function ngValueLink(scope, elm, attr) {
            scope.$watch(attr.ngValue, function valueWatchAction(value) {
              attr.$set('value', value);
            });
          };
        }
      }
    };
  };
  /**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
  var ngBindDirective = ngDirective({
      compile: function (templateElement) {
        templateElement.addClass('ng-binding');
        return function (scope, element, attr) {
          element.data('$binding', attr.ngBind);
          scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
            // We are purposefully using == here rather than === because we want to
            // catch when value is "null or undefined"
            // jshint -W041
            element.text(value == undefined ? '' : value);
          });
        };
      }
    });
  /**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function ($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
  var ngBindTemplateDirective = [
      '$interpolate',
      function ($interpolate) {
        return function (scope, element, attr) {
          // TODO: move this to scenario runner
          var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
          element.addClass('ng-binding').data('$binding', interpolateFn);
          attr.$observe('ngBindTemplate', function (value) {
            element.text(value);
          });
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Creates a binding that will innerHTML the result of evaluating the `expression` into the current
 * element in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link
 * ngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`
 * is available, for example, by including {@link ngSanitize} in your module's dependencies (not in
 * core Angular). In order to use {@link ngSanitize} in your module's dependencies, you need to
 * include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
  var ngBindHtmlDirective = [
      '$sce',
      '$parse',
      function ($sce, $parse) {
        return {
          compile: function (tElement) {
            tElement.addClass('ng-binding');
            return function (scope, element, attr) {
              element.data('$binding', attr.ngBindHtml);
              var parsed = $parse(attr.ngBindHtml);
              function getStringValue() {
                return (parsed(scope) || '').toString();
              }
              scope.$watch(getStringValue, function ngBindHtmlWatchAction(value) {
                element.html($sce.getTrustedHtml(parsed(scope)) || '');
              });
            };
          }
        };
      }
    ];
  function classDirective(name, selector) {
    name = 'ngClass' + name;
    return [
      '$animate',
      function ($animate) {
        return {
          restrict: 'AC',
          link: function (scope, element, attr) {
            var oldVal;
            scope.$watch(attr[name], ngClassWatchAction, true);
            attr.$observe('class', function (value) {
              ngClassWatchAction(scope.$eval(attr[name]));
            });
            if (name !== 'ngClass') {
              scope.$watch('$index', function ($index, old$index) {
                // jshint bitwise: false
                var mod = $index & 1;
                if (mod !== (old$index & 1)) {
                  var classes = arrayClasses(scope.$eval(attr[name]));
                  mod === selector ? addClasses(classes) : removeClasses(classes);
                }
              });
            }
            function addClasses(classes) {
              var newClasses = digestClassCounts(classes, 1);
              attr.$addClass(newClasses);
            }
            function removeClasses(classes) {
              var newClasses = digestClassCounts(classes, -1);
              attr.$removeClass(newClasses);
            }
            function digestClassCounts(classes, count) {
              var classCounts = element.data('$classCounts') || {};
              var classesToUpdate = [];
              forEach(classes, function (className) {
                if (count > 0 || classCounts[className]) {
                  classCounts[className] = (classCounts[className] || 0) + count;
                  if (classCounts[className] === +(count > 0)) {
                    classesToUpdate.push(className);
                  }
                }
              });
              element.data('$classCounts', classCounts);
              return classesToUpdate.join(' ');
            }
            function updateClasses(oldClasses, newClasses) {
              var toAdd = arrayDifference(newClasses, oldClasses);
              var toRemove = arrayDifference(oldClasses, newClasses);
              toRemove = digestClassCounts(toRemove, -1);
              toAdd = digestClassCounts(toAdd, 1);
              if (toAdd.length === 0) {
                $animate.removeClass(element, toRemove);
              } else if (toRemove.length === 0) {
                $animate.addClass(element, toAdd);
              } else {
                $animate.setClass(element, toAdd, toRemove);
              }
            }
            function ngClassWatchAction(newVal) {
              if (selector === true || scope.$index % 2 === selector) {
                var newClasses = arrayClasses(newVal || []);
                if (!oldVal) {
                  addClasses(newClasses);
                } else if (!equals(newVal, oldVal)) {
                  var oldClasses = arrayClasses(oldVal);
                  updateClasses(oldClasses, newClasses);
                }
              }
              oldVal = shallowCopy(newVal);
            }
          }
        };
        function arrayDifference(tokens1, tokens2) {
          var values = [];
          outer:
            for (var i = 0; i < tokens1.length; i++) {
              var token = tokens1[i];
              for (var j = 0; j < tokens2.length; j++) {
                if (token == tokens2[j])
                  continue outer;
              }
              values.push(token);
            }
          return values;
        }
        function arrayClasses(classVal) {
          if (isArray(classVal)) {
            return classVal;
          } else if (isString(classVal)) {
            return classVal.split(' ');
          } else if (isObject(classVal)) {
            var classes = [], i = 0;
            forEach(classVal, function (v, k) {
              if (v) {
                classes = classes.concat(k.split(' '));
              }
            });
            return classes;
          }
          return classVal;
        }
      }
    ];
  }
  /**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an array, each element of the array should be a string that is
 * one or more space-delimited class names.
 *
 * 3. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * add - happens just before the class is applied to the element
 * remove - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ngAnimate.$animate#addclass $animate.addClass} and
   {@link ngAnimate.$animate#removeclass $animate.removeClass}.
 */
  var ngClassDirective = classDirective('', true);
  /**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
  var ngClassOddDirective = classDirective('Odd', 0);
  /**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
  var ngClassEvenDirective = classDirective('Even', 1);
  /**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
  var ngCloakDirective = ngDirective({
      compile: function (element, attr) {
        attr.$set('ngCloak', undefined);
        element.removeClass('ng-cloak');
      }
    });
  /**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a globally accessible constructor function or an
 *     {@link guide/expression expression} that on the current scope evaluates to a
 *     constructor function. The controller instance can be published into a scope property
 *     by specifying `as propertyName`.
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      Name: <input type="text" ng-model="settings.name"/>
 *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value"/>
 *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
 *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
 *        </li>
 *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.linkText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.linkText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     Name: <input type="text" ng-model="name"/>
 *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value"/>
 *         [ <a href="" ng-click="clearContact(contact)">clear</a>
 *         | <a href="" ng-click="removeContact(contact)">X</a> ]
 *       </li>
 *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.linkText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.linkText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
  var ngControllerDirective = [function () {
        return {
          scope: true,
          controller: '@',
          priority: 500
        };
      }];
  /**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For Angular to be CSP compatible there are only two things that we need to do differently:
 *
 * - don't use `Function` constructor to generate optimized value getters
 * - don't inject custom stylesheet into the document
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
 * autodetection however triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on the root element of the application or on the `angular.js` script tag, whichever
 * appears first in the html document.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
 */
  // ngCsp is not implemented as a proper directive any more, because we need it be processed while we
  // bootstrap the system (before $parse is instantiated), for this reason we just have
  // the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc
  /**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      <span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
  /*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
  var ngEventDirectives = {};
  // For events that might fire synchronously during DOM manipulation
  // we need to execute their event handlers asynchronously using $evalAsync,
  // so that they are not executed in an inconsistent state.
  var forceAsyncEvents = {
      'blur': true,
      'focus': true
    };
  forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = [
      '$parse',
      '$rootScope',
      function ($parse, $rootScope) {
        return {
          compile: function ($element, attr) {
            // We expose the powerful $event object on the scope that provides access to the Window,
            // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
            // checks at the cost of speed since event handler expressions are not executed as
            // frequently as regular change detection.
            var fn = $parse(attr[directiveName], true);
            return function ngEventHandler(scope, element) {
              element.on(eventName, function (event) {
                var callback = function () {
                  fn(scope, { $event: event });
                };
                if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                  scope.$evalAsync(callback);
                } else {
                  scope.$apply(callback);
                }
              });
            };
          }
        };
      }
    ];
  });
  /**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */
  /**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */
  /**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        I'm removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
  var ngIfDirective = [
      '$animate',
      function ($animate) {
        return {
          transclude: 'element',
          priority: 600,
          terminal: true,
          restrict: 'A',
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var block, childScope, previousElements;
            $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
              if (toBoolean(value)) {
                if (!childScope) {
                  childScope = $scope.$new();
                  $transclude(childScope, function (clone) {
                    clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                    // Note: We only need the first/last node of the cloned nodes.
                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                    // by a directive with templateUrl when its template arrives.
                    block = { clone: clone };
                    $animate.enter(clone, $element.parent(), $element);
                  });
                }
              } else {
                if (previousElements) {
                  previousElements.remove();
                  previousElements = null;
                }
                if (childScope) {
                  childScope.$destroy();
                  childScope = null;
                }
                if (block) {
                  previousElements = getBlockElements(block.clone);
                  $animate.leave(previousElements, function () {
                    previousElements = null;
                  });
                  block = null;
                }
              }
            });
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * [wrap them](ng.$sce#trustAsResourceUrl) as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <tt>{{template.url}}</tt>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */
  /**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 */
  /**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 */
  var ngIncludeDirective = [
      '$http',
      '$templateCache',
      '$anchorScroll',
      '$animate',
      '$sce',
      function ($http, $templateCache, $anchorScroll, $animate, $sce) {
        return {
          restrict: 'ECA',
          priority: 400,
          terminal: true,
          transclude: 'element',
          controller: angular.noop,
          compile: function (element, attr) {
            var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
            return function (scope, $element, $attr, ctrl, $transclude) {
              var changeCounter = 0, currentScope, previousElement, currentElement;
              var cleanupLastIncludeContent = function () {
                if (previousElement) {
                  previousElement.remove();
                  previousElement = null;
                }
                if (currentScope) {
                  currentScope.$destroy();
                  currentScope = null;
                }
                if (currentElement) {
                  $animate.leave(currentElement, function () {
                    previousElement = null;
                  });
                  previousElement = currentElement;
                  currentElement = null;
                }
              };
              scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
                var afterAnimation = function () {
                  if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                    $anchorScroll();
                  }
                };
                var thisChangeId = ++changeCounter;
                if (src) {
                  $http.get(src, { cache: $templateCache }).success(function (response) {
                    if (thisChangeId !== changeCounter)
                      return;
                    var newScope = scope.$new();
                    ctrl.template = response;
                    // Note: This will also link all children of ng-include that were contained in the original
                    // html. If that content contains controllers, ... they could pollute/change the scope.
                    // However, using ng-include on an element with additional content does not make sense...
                    // Note: We can't remove them in the cloneAttchFn of $transclude as that
                    // function is called before linking the content, which would apply child
                    // directives to non existing elements.
                    var clone = $transclude(newScope, function (clone) {
                        cleanupLastIncludeContent();
                        $animate.enter(clone, null, $element, afterAnimation);
                      });
                    currentScope = newScope;
                    currentElement = clone;
                    currentScope.$emit('$includeContentLoaded');
                    scope.$eval(onloadExp);
                  }).error(function () {
                    if (thisChangeId === changeCounter)
                      cleanupLastIncludeContent();
                  });
                  scope.$emit('$includeContentRequested');
                } else {
                  cleanupLastIncludeContent();
                  ctrl.template = null;
                }
              });
            };
          }
        };
      }
    ];
  // This directive is called during the $transclude call of the first `ngInclude` directive.
  // It will replace and compile the content of the element with the loaded template.
  // We need this directive so that the element content is already filled when
  // the link function of another directive on the same element as ngInclude
  // is called.
  var ngIncludeFillContentDirective = [
      '$compile',
      function ($compile) {
        return {
          restrict: 'ECA',
          priority: -400,
          require: 'ngInclude',
          link: function (scope, $element, $attr, ctrl) {
            $element.html(ctrl.template);
            $compile($element.contents())(scope);
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
 * sure you have parenthesis for correct precedence:
 * <pre class="prettyprint">
 *   <div ng-init="test1 = (data | orderBy:'name')"></div>
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
  var ngInitDirective = ngDirective({
      priority: 450,
      compile: function () {
        return {
          pre: function (scope, element, attrs) {
            scope.$eval(attrs.ngInit);
          }
        };
      }
    });
  /**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
  var ngNonBindableDirective = ngDirective({
      terminal: true,
      priority: 1000
    });
  /**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
  var ngPluralizeDirective = [
      '$locale',
      '$interpolate',
      function ($locale, $interpolate) {
        var BRACE = /{}/g;
        return {
          restrict: 'EA',
          link: function (scope, element, attr) {
            var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when),
              // we have {{}} in attrs
              offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), isWhen = /^when(Minus)?(.+)$/;
            forEach(attr, function (expression, attributeName) {
              if (isWhen.test(attributeName)) {
                whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] = element.attr(attr.$attr[attributeName]);
              }
            });
            forEach(whens, function (expression, key) {
              whensExpFns[key] = $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' + offset + endSymbol));
            });
            scope.$watch(function ngPluralizeWatch() {
              var value = parseFloat(scope.$eval(numberExp));
              if (!isNaN(value)) {
                //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,
                //check it against pluralization rules in $locale service
                if (!(value in whens))
                  value = $locale.pluralCat(value - offset);
                return whensExpFns[value](scope, element, true);
              } else {
                return '';
              }
            }, function ngPluralizeWatchAction(newVal) {
              element.text(newVal);
            });
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
 *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
 *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
 *     before specifying a tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
  var ngRepeatDirective = [
      '$parse',
      '$animate',
      function ($parse, $animate) {
        var NG_REMOVED = '$$NG_REMOVED';
        var ngRepeatMinErr = minErr('ngRepeat');
        return {
          transclude: 'element',
          priority: 1000,
          terminal: true,
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var expression = $attr.ngRepeat;
            var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/), trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn, lhs, rhs, valueIdentifier, keyIdentifier, hashFnLocals = { $id: hashKey };
            if (!match) {
              throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.', expression);
            }
            lhs = match[1];
            rhs = match[2];
            trackByExp = match[3];
            if (trackByExp) {
              trackByExpGetter = $parse(trackByExp);
              trackByIdExpFn = function (key, value, index) {
                // assign key, value, and $index to the locals so that they can be used in hash functions
                if (keyIdentifier)
                  hashFnLocals[keyIdentifier] = key;
                hashFnLocals[valueIdentifier] = value;
                hashFnLocals.$index = index;
                return trackByExpGetter($scope, hashFnLocals);
              };
            } else {
              trackByIdArrayFn = function (key, value) {
                return hashKey(value);
              };
              trackByIdObjFn = function (key) {
                return key;
              };
            }
            match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
            if (!match) {
              throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.', lhs);
            }
            valueIdentifier = match[3] || match[1];
            keyIdentifier = match[2];
            // Store a list of elements from previous run. This is a hash where key is the item from the
            // iterator, and the value is objects with following properties.
            //   - scope: bound scope
            //   - element: previous element.
            //   - index: position
            var lastBlockMap = {};
            //watch props
            $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
              var index, length, previousNode = $element[0],
                // current position of the node
                nextNode,
                // Same as lastBlockMap but it has the current state. It will become the
                // lastBlockMap on the next iteration.
                nextBlockMap = {}, arrayLength, childScope, key, value,
                // key/value of iteration
                trackById, trackByIdFn, collectionKeys, block,
                // last object information {scope, element, id}
                nextBlockOrder = [], elementsToRemove;
              if (isArrayLike(collection)) {
                collectionKeys = collection;
                trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
              } else {
                trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                // if object, extract keys, sort them and use to determine order of iteration over obj props
                collectionKeys = [];
                for (key in collection) {
                  if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                    collectionKeys.push(key);
                  }
                }
                collectionKeys.sort();
              }
              arrayLength = collectionKeys.length;
              // locate existing items
              length = nextBlockOrder.length = collectionKeys.length;
              for (index = 0; index < length; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index];
                value = collection[key];
                trackById = trackByIdFn(key, value, index);
                assertNotHasOwnProperty(trackById, '`track by` id');
                if (lastBlockMap.hasOwnProperty(trackById)) {
                  block = lastBlockMap[trackById];
                  delete lastBlockMap[trackById];
                  nextBlockMap[trackById] = block;
                  nextBlockOrder[index] = block;
                } else if (nextBlockMap.hasOwnProperty(trackById)) {
                  // restore lastBlockMap
                  forEach(nextBlockOrder, function (block) {
                    if (block && block.scope)
                      lastBlockMap[block.id] = block;
                  });
                  // This is a duplicate and we need to throw an error
                  throw ngRepeatMinErr('dupes', 'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}', expression, trackById, toJson(value));
                } else {
                  // new never before seen block
                  nextBlockOrder[index] = { id: trackById };
                  nextBlockMap[trackById] = false;
                }
              }
              // remove existing items
              for (key in lastBlockMap) {
                // lastBlockMap is our own object so we don't need to use special hasOwnPropertyFn
                if (lastBlockMap.hasOwnProperty(key)) {
                  block = lastBlockMap[key];
                  elementsToRemove = getBlockElements(block.clone);
                  $animate.leave(elementsToRemove);
                  forEach(elementsToRemove, function (element) {
                    element[NG_REMOVED] = true;
                  });
                  block.scope.$destroy();
                }
              }
              // we are not using forEach for perf reasons (trying to avoid #call)
              for (index = 0, length = collectionKeys.length; index < length; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index];
                value = collection[key];
                block = nextBlockOrder[index];
                if (nextBlockOrder[index - 1])
                  previousNode = getBlockEnd(nextBlockOrder[index - 1]);
                if (block.scope) {
                  // if we have already seen this object, then we need to reuse the
                  // associated scope/element
                  childScope = block.scope;
                  nextNode = previousNode;
                  do {
                    nextNode = nextNode.nextSibling;
                  } while (nextNode && nextNode[NG_REMOVED]);
                  if (getBlockStart(block) != nextNode) {
                    // existing item which got moved
                    $animate.move(getBlockElements(block.clone), null, jqLite(previousNode));
                  }
                  previousNode = getBlockEnd(block);
                } else {
                  // new item which we don't know about
                  childScope = $scope.$new();
                }
                childScope[valueIdentifier] = value;
                if (keyIdentifier)
                  childScope[keyIdentifier] = key;
                childScope.$index = index;
                childScope.$first = index === 0;
                childScope.$last = index === arrayLength - 1;
                childScope.$middle = !(childScope.$first || childScope.$last);
                // jshint bitwise: false
                childScope.$odd = !(childScope.$even = (index & 1) === 0);
                // jshint bitwise: true
                if (!block.scope) {
                  $transclude(childScope, function (clone) {
                    clone[clone.length++] = document.createComment(' end ngRepeat: ' + expression + ' ');
                    $animate.enter(clone, null, jqLite(previousNode));
                    previousNode = clone;
                    block.scope = childScope;
                    // Note: We only need the first/last node of the cloned nodes.
                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                    // by a directive with templateUrl when its template arrives.
                    block.clone = clone;
                    nextBlockMap[block.id] = block;
                  });
                }
              }
              lastBlockMap = nextBlockMap;
            });
          }
        };
        function getBlockStart(block) {
          return block.clone[0];
        }
        function getBlockEnd(block) {
          return block.clone[block.clone.length - 1];
        }
      }
    ];
  /**
 * @ngdoc directive
 * @name ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to false then the `.ng-hide` CSS class is added to the class attribute
 * on the element causing it to become hidden. When true, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * <div class="alert alert-warning">
 * **Note:** Here is a list of values that ngShow will consider as a falsy value (case insensitive):<br />
 * "f" / "0" / "false" / "no" / "n" / "[]"
 * </div>
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
    </file>
    <file name="animations.css">
      .animate-show {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-show.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
  var ngShowDirective = [
      '$animate',
      function ($animate) {
        return function (scope, element, attr) {
          scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
            $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
          });
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `.ngHide` expression evaluates to true then the `.ng-hide` CSS class is added to the class attribute
 * on the element causing it to become hidden. When false, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * <div class="alert alert-warning">
 * **Note:** Here is a list of values that ngHide will consider as a falsy value (case insensitive):<br />
 * "f" / "0" / "false" / "no" / "n" / "[]"
 * </div>
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-hide.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
  var ngHideDirective = [
      '$animate',
      function ($animate) {
        return function (scope, element, attr) {
          scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
            $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
          });
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
  var ngStyleDirective = ngDirective(function (scope, element, attr) {
      scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
        if (oldStyles && newStyles !== oldStyles) {
          forEach(oldStyles, function (val, style) {
            element.css(style, '');
          });
        }
        if (newStyles)
          element.css(newStyles);
      }, true);
    });
  /**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 800
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
  var ngSwitchDirective = [
      '$animate',
      function ($animate) {
        return {
          restrict: 'EA',
          require: 'ngSwitch',
          controller: [
            '$scope',
            function ngSwitchController() {
              this.cases = {};
            }
          ],
          link: function (scope, element, attr, ngSwitchController) {
            var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousElements = [], selectedScopes = [];
            scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
              var i, ii;
              for (i = 0, ii = previousElements.length; i < ii; ++i) {
                previousElements[i].remove();
              }
              previousElements.length = 0;
              for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                var selected = selectedElements[i];
                selectedScopes[i].$destroy();
                previousElements[i] = selected;
                $animate.leave(selected, function () {
                  previousElements.splice(i, 1);
                });
              }
              selectedElements.length = 0;
              selectedScopes.length = 0;
              if (selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?']) {
                scope.$eval(attr.change);
                forEach(selectedTranscludes, function (selectedTransclude) {
                  var selectedScope = scope.$new();
                  selectedScopes.push(selectedScope);
                  selectedTransclude.transclude(selectedScope, function (caseElement) {
                    var anchor = selectedTransclude.element;
                    selectedElements.push(caseElement);
                    $animate.enter(caseElement, anchor.parent(), anchor);
                  });
                });
              }
            });
          }
        };
      }
    ];
  var ngSwitchWhenDirective = ngDirective({
      transclude: 'element',
      priority: 800,
      require: '^ngSwitch',
      link: function (scope, element, attrs, ctrl, $transclude) {
        ctrl.cases['!' + attrs.ngSwitchWhen] = ctrl.cases['!' + attrs.ngSwitchWhen] || [];
        ctrl.cases['!' + attrs.ngSwitchWhen].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  var ngSwitchDefaultDirective = ngDirective({
      transclude: 'element',
      priority: 800,
      require: '^ngSwitch',
      link: function (scope, element, attr, ctrl, $transclude) {
        ctrl.cases['?'] = ctrl.cases['?'] || [];
        ctrl.cases['?'].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  /**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict AC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<div ng-transclude></div>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title"><br>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
  var ngTranscludeDirective = ngDirective({
      link: function ($scope, $element, $attrs, controller, $transclude) {
        if (!$transclude) {
          throw minErr('ngTransclude')('orphan', 'Illegal use of ngTransclude directive in the template! ' + 'No parent directive that requires a transclusion found. ' + 'Element: {0}', startingTag($element));
        }
        $transclude(function (clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    });
  /**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
  var scriptDirective = [
      '$templateCache',
      function ($templateCache) {
        return {
          restrict: 'E',
          terminal: true,
          compile: function (element, attr) {
            if (attr.type == 'text/ng-template') {
              var templateUrl = attr.id, text = element[0].text;
              $templateCache.put(templateUrl, text);
            }
          }
        };
      }
    ];
  var ngOptionsMinErr = minErr('ngOptions');
  /**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension_expression.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngOptions` provides an iterator facility for the `<option>` element which should be used instead
 * of {@link ng.directive:ngRepeat ngRepeat} when you want the
 * `select` model to be bound to a non-string value. This is because an option element can only
 * be bound to string values at present.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light'},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark'},
              {name:'yellow', shade:'light'}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
          </select><br/>


          Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:myColor}  }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */
  var ngOptionsDirective = valueFn({ terminal: true });
  // jshint maxlen: false
  var selectDirective = [
      '$compile',
      '$parse',
      function ($compile, $parse) {
        //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
        var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, nullModelCtrl = { $setViewValue: noop };
        // jshint maxlen: 100
        return {
          restrict: 'E',
          require: [
            'select',
            '?ngModel'
          ],
          controller: [
            '$element',
            '$scope',
            '$attrs',
            function ($element, $scope, $attrs) {
              var self = this, optionsMap = {}, ngModelCtrl = nullModelCtrl, nullOption, unknownOption;
              self.databound = $attrs.ngModel;
              self.init = function (ngModelCtrl_, nullOption_, unknownOption_) {
                ngModelCtrl = ngModelCtrl_;
                nullOption = nullOption_;
                unknownOption = unknownOption_;
              };
              self.addOption = function (value) {
                assertNotHasOwnProperty(value, '"option value"');
                optionsMap[value] = true;
                if (ngModelCtrl.$viewValue == value) {
                  $element.val(value);
                  if (unknownOption.parent())
                    unknownOption.remove();
                }
              };
              self.removeOption = function (value) {
                if (this.hasOption(value)) {
                  delete optionsMap[value];
                  if (ngModelCtrl.$viewValue == value) {
                    this.renderUnknownOption(value);
                  }
                }
              };
              self.renderUnknownOption = function (val) {
                var unknownVal = '? ' + hashKey(val) + ' ?';
                unknownOption.val(unknownVal);
                $element.prepend(unknownOption);
                $element.val(unknownVal);
                unknownOption.prop('selected', true);  // needed for IE
              };
              self.hasOption = function (value) {
                return optionsMap.hasOwnProperty(value);
              };
              $scope.$on('$destroy', function () {
                // disable unknown option so that we don't do work when the whole select is being destroyed
                self.renderUnknownOption = noop;
              });
            }
          ],
          link: function (scope, element, attr, ctrls) {
            // if ngModel is not defined, we don't need to do anything
            if (!ctrls[1])
              return;
            var selectCtrl = ctrls[0], ngModelCtrl = ctrls[1], multiple = attr.multiple, optionsExp = attr.ngOptions, nullOption = false,
              // if false, user will not be able to select it (used by ngOptions)
              emptyOption,
              // we can't just jqLite('<option>') since jqLite is not smart enough
              // to create it in <select> and IE barfs otherwise.
              optionTemplate = jqLite(document.createElement('option')), optGroupTemplate = jqLite(document.createElement('optgroup')), unknownOption = optionTemplate.clone();
            // find "null" option
            for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
              if (children[i].value === '') {
                emptyOption = nullOption = children.eq(i);
                break;
              }
            }
            selectCtrl.init(ngModelCtrl, nullOption, unknownOption);
            // required validator
            if (multiple) {
              ngModelCtrl.$isEmpty = function (value) {
                return !value || value.length === 0;
              };
            }
            if (optionsExp)
              setupAsOptions(scope, element, ngModelCtrl);
            else if (multiple)
              setupAsMultiple(scope, element, ngModelCtrl);
            else
              setupAsSingle(scope, element, ngModelCtrl, selectCtrl);
            ////////////////////////////
            function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
              ngModelCtrl.$render = function () {
                var viewValue = ngModelCtrl.$viewValue;
                if (selectCtrl.hasOption(viewValue)) {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  selectElement.val(viewValue);
                  if (viewValue === '')
                    emptyOption.prop('selected', true);  // to make IE9 happy
                } else {
                  if (isUndefined(viewValue) && emptyOption) {
                    selectElement.val('');
                  } else {
                    selectCtrl.renderUnknownOption(viewValue);
                  }
                }
              };
              selectElement.on('change', function () {
                scope.$apply(function () {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  ngModelCtrl.$setViewValue(selectElement.val());
                });
              });
            }
            function setupAsMultiple(scope, selectElement, ctrl) {
              var lastView;
              ctrl.$render = function () {
                var items = new HashMap(ctrl.$viewValue);
                forEach(selectElement.find('option'), function (option) {
                  option.selected = isDefined(items.get(option.value));
                });
              };
              // we have to do it on each watch since ngModel watches reference, but
              // we need to work of an array, so we need to see if anything was inserted/removed
              scope.$watch(function selectMultipleWatch() {
                if (!equals(lastView, ctrl.$viewValue)) {
                  lastView = shallowCopy(ctrl.$viewValue);
                  ctrl.$render();
                }
              });
              selectElement.on('change', function () {
                scope.$apply(function () {
                  var array = [];
                  forEach(selectElement.find('option'), function (option) {
                    if (option.selected) {
                      array.push(option.value);
                    }
                  });
                  ctrl.$setViewValue(array);
                });
              });
            }
            function setupAsOptions(scope, selectElement, ctrl) {
              var match;
              if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
                throw ngOptionsMinErr('iexp', 'Expected expression in form of ' + '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' + ' but got \'{0}\'. Element: {1}', optionsExp, startingTag(selectElement));
              }
              var displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], keyName = match[5], groupByFn = $parse(match[3] || ''), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]), track = match[8], trackFn = track ? $parse(match[8]) : null,
                // This is an array of array of existing option groups in DOM.
                // We try to reuse these if possible
                // - optionGroupsCache[0] is the options with no option group
                // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
                optionGroupsCache = [[{
                      element: selectElement,
                      label: ''
                    }]];
              if (nullOption) {
                // compile the element since there might be bindings in it
                $compile(nullOption)(scope);
                // remove the class, which is added automatically because we recompile the element and it
                // becomes the compilation root
                nullOption.removeClass('ng-scope');
                // we need to remove it before calling selectElement.empty() because otherwise IE will
                // remove the label from the element. wtf?
                nullOption.remove();
              }
              // clear contents, we'll add what's needed based on the model
              selectElement.empty();
              selectElement.on('change', function () {
                scope.$apply(function () {
                  var optionGroup, collection = valuesFn(scope) || [], locals = {}, key, value, optionElement, index, groupIndex, length, groupLength, trackIndex;
                  if (multiple) {
                    value = [];
                    for (groupIndex = 0, groupLength = optionGroupsCache.length; groupIndex < groupLength; groupIndex++) {
                      // list of options for that group. (first item has the parent)
                      optionGroup = optionGroupsCache[groupIndex];
                      for (index = 1, length = optionGroup.length; index < length; index++) {
                        if ((optionElement = optionGroup[index].element)[0].selected) {
                          key = optionElement.val();
                          if (keyName)
                            locals[keyName] = key;
                          if (trackFn) {
                            for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                              locals[valueName] = collection[trackIndex];
                              if (trackFn(scope, locals) == key)
                                break;
                            }
                          } else {
                            locals[valueName] = collection[key];
                          }
                          value.push(valueFn(scope, locals));
                        }
                      }
                    }
                  } else {
                    key = selectElement.val();
                    if (key == '?') {
                      value = undefined;
                    } else if (key === '') {
                      value = null;
                    } else {
                      if (trackFn) {
                        for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                          locals[valueName] = collection[trackIndex];
                          if (trackFn(scope, locals) == key) {
                            value = valueFn(scope, locals);
                            break;
                          }
                        }
                      } else {
                        locals[valueName] = collection[key];
                        if (keyName)
                          locals[keyName] = key;
                        value = valueFn(scope, locals);
                      }
                    }
                  }
                  ctrl.$setViewValue(value);
                  render();
                });
              });
              ctrl.$render = render;
              scope.$watchCollection(valuesFn, render);
              scope.$watchCollection(function () {
                var locals = {}, values = valuesFn(scope);
                if (values) {
                  var toDisplay = new Array(values.length);
                  for (var i = 0, ii = values.length; i < ii; i++) {
                    locals[valueName] = values[i];
                    toDisplay[i] = displayFn(scope, locals);
                  }
                  return toDisplay;
                }
              }, render);
              if (multiple) {
                scope.$watchCollection(function () {
                  return ctrl.$modelValue;
                }, render);
              }
              function getSelectedSet() {
                var selectedSet = false;
                if (multiple) {
                  var modelValue = ctrl.$modelValue;
                  if (trackFn && isArray(modelValue)) {
                    selectedSet = new HashMap([]);
                    var locals = {};
                    for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                      locals[valueName] = modelValue[trackIndex];
                      selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
                    }
                  } else {
                    selectedSet = new HashMap(modelValue);
                  }
                }
                return selectedSet;
              }
              function render() {
                // Temporary location for the option groups before we render them
                var optionGroups = { '': [] }, optionGroupNames = [''], optionGroupName, optionGroup, option, existingParent, existingOptions, existingOption, modelValue = ctrl.$modelValue, values = valuesFn(scope) || [], keys = keyName ? sortedKeys(values) : values, key, groupLength, length, groupIndex, index, locals = {}, selected, selectedSet = getSelectedSet(), lastElement, element, label;
                // We now build up the list of options we need (we merge later)
                for (index = 0; length = keys.length, index < length; index++) {
                  key = index;
                  if (keyName) {
                    key = keys[index];
                    if (key.charAt(0) === '$')
                      continue;
                    locals[keyName] = key;
                  }
                  locals[valueName] = values[key];
                  optionGroupName = groupByFn(scope, locals) || '';
                  if (!(optionGroup = optionGroups[optionGroupName])) {
                    optionGroup = optionGroups[optionGroupName] = [];
                    optionGroupNames.push(optionGroupName);
                  }
                  if (multiple) {
                    selected = isDefined(selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals)));
                  } else {
                    if (trackFn) {
                      var modelCast = {};
                      modelCast[valueName] = modelValue;
                      selected = trackFn(scope, modelCast) === trackFn(scope, locals);
                    } else {
                      selected = modelValue === valueFn(scope, locals);
                    }
                    selectedSet = selectedSet || selected;  // see if at least one item is selected
                  }
                  label = displayFn(scope, locals);
                  // what will be seen by the user
                  // doing displayFn(scope, locals) || '' overwrites zero values
                  label = isDefined(label) ? label : '';
                  optionGroup.push({
                    id: trackFn ? trackFn(scope, locals) : keyName ? keys[index] : index,
                    label: label,
                    selected: selected
                  });
                }
                if (!multiple) {
                  if (nullOption || modelValue === null) {
                    // insert null option if we have a placeholder, or the model is null
                    optionGroups[''].unshift({
                      id: '',
                      label: '',
                      selected: !selectedSet
                    });
                  } else if (!selectedSet) {
                    // option could not be found, we have to insert the undefined item
                    optionGroups[''].unshift({
                      id: '?',
                      label: '',
                      selected: true
                    });
                  }
                }
                // Now we need to update the list of DOM nodes to match the optionGroups we computed above
                for (groupIndex = 0, groupLength = optionGroupNames.length; groupIndex < groupLength; groupIndex++) {
                  // current option group name or '' if no group
                  optionGroupName = optionGroupNames[groupIndex];
                  // list of options for that group. (first item has the parent)
                  optionGroup = optionGroups[optionGroupName];
                  if (optionGroupsCache.length <= groupIndex) {
                    // we need to grow the optionGroups
                    existingParent = {
                      element: optGroupTemplate.clone().attr('label', optionGroupName),
                      label: optionGroup.label
                    };
                    existingOptions = [existingParent];
                    optionGroupsCache.push(existingOptions);
                    selectElement.append(existingParent.element);
                  } else {
                    existingOptions = optionGroupsCache[groupIndex];
                    existingParent = existingOptions[0];
                    // either SELECT (no group) or OPTGROUP element
                    // update the OPTGROUP label if not the same.
                    if (existingParent.label != optionGroupName) {
                      existingParent.element.attr('label', existingParent.label = optionGroupName);
                    }
                  }
                  lastElement = null;
                  // start at the beginning
                  for (index = 0, length = optionGroup.length; index < length; index++) {
                    option = optionGroup[index];
                    if (existingOption = existingOptions[index + 1]) {
                      // reuse elements
                      lastElement = existingOption.element;
                      if (existingOption.label !== option.label) {
                        lastElement.text(existingOption.label = option.label);
                        lastElement.prop('label', existingOption.label);
                      }
                      if (existingOption.id !== option.id) {
                        lastElement.val(existingOption.id = option.id);
                      }
                      // lastElement.prop('selected') provided by jQuery has side-effects
                      if (lastElement[0].selected !== option.selected) {
                        lastElement.prop('selected', existingOption.selected = option.selected);
                        if (msie) {
                          // See #7692
                          // The selected item wouldn't visually update on IE without this.
                          // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well
                          lastElement.prop('selected', existingOption.selected);
                        }
                      }
                    } else {
                      // grow elements
                      // if it's a null option
                      if (option.id === '' && nullOption) {
                        // put back the pre-compiled element
                        element = nullOption;
                      } else {
                        // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                        // in this version of jQuery on some browser the .text() returns a string
                        // rather then the element.
                        (element = optionTemplate.clone()).val(option.id).prop('selected', option.selected).attr('selected', option.selected).prop('label', option.label).text(option.label);
                      }
                      existingOptions.push(existingOption = {
                        element: element,
                        label: option.label,
                        id: option.id,
                        selected: option.selected
                      });
                      selectCtrl.addOption(option.label, element);
                      if (lastElement) {
                        lastElement.after(element);
                      } else {
                        existingParent.element.append(element);
                      }
                      lastElement = element;
                    }
                  }
                  // remove any excessive OPTIONs in a group
                  index++;
                  // increment since the existingOptions[0] is parent element not OPTION
                  while (existingOptions.length > index) {
                    option = existingOptions.pop();
                    selectCtrl.removeOption(option.label);
                    option.element.remove();
                  }
                }
                // remove any excessive OPTGROUPs from select
                while (optionGroupsCache.length > groupIndex) {
                  optionGroupsCache.pop()[0].element.remove();
                }
              }
            }
          }
        };
      }
    ];
  var optionDirective = [
      '$interpolate',
      function ($interpolate) {
        var nullSelectCtrl = {
            addOption: noop,
            removeOption: noop
          };
        return {
          restrict: 'E',
          priority: 100,
          compile: function (element, attr) {
            if (isUndefined(attr.value)) {
              var interpolateFn = $interpolate(element.text(), true);
              if (!interpolateFn) {
                attr.$set('value', element.text());
              }
            }
            return function (scope, element, attr) {
              var selectCtrlName = '$selectController', parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
              // in case we are in optgroup
              if (selectCtrl && selectCtrl.databound) {
                // For some reason Opera defaults to true and if not overridden this messes up the repeater.
                // We don't want the view to drive the initialization of the model anyway.
                element.prop('selected', false);
              } else {
                selectCtrl = nullSelectCtrl;
              }
              if (interpolateFn) {
                scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
                  attr.$set('value', newVal);
                  if (newVal !== oldVal)
                    selectCtrl.removeOption(oldVal);
                  selectCtrl.addOption(newVal);
                });
              } else {
                selectCtrl.addOption(attr.value);
              }
              element.on('$destroy', function () {
                selectCtrl.removeOption(attr.value);
              });
            };
          }
        };
      }
    ];
  var styleDirective = valueFn({
      restrict: 'E',
      terminal: true
    });
  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }
  //try to bind to jquery now so that one can write angular.element().read()
  //but we will rebind on bootstrap again.
  bindJQuery();
  publishExternalAPI(angular);
  jqLite(document).ready(function () {
    angularInit(document, bootstrap);
  });
}(window, document));
!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>');
/**
 * State-based routing for AngularJS
 * @version v0.2.14
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
/* commonjs package manager support (eg componentjs) */
if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  module.exports = 'ui.router';
}
(function (window, angular, undefined) {
  /*jshint globalstrict:true*/
  /*global angular:false*/
  'use strict';
  var isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy;
  function inherit(parent, extra) {
    return extend(new (extend(function () {
    }, { prototype: parent }))(), extra);
  }
  function merge(dst) {
    forEach(arguments, function (obj) {
      if (obj !== dst) {
        forEach(obj, function (value, key) {
          if (!dst.hasOwnProperty(key))
            dst[key] = value;
        });
      }
    });
    return dst;
  }
  /**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
  function ancestors(first, second) {
    var path = [];
    for (var n in first.path) {
      if (first.path[n] !== second.path[n])
        break;
      path.push(first.path[n]);
    }
    return path;
  }
  /**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
  function objectKeys(object) {
    if (Object.keys) {
      return Object.keys(object);
    }
    var result = [];
    forEach(object, function (val, key) {
      result.push(key);
    });
    return result;
  }
  /**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
  function indexOf(array, value) {
    if (Array.prototype.indexOf) {
      return array.indexOf(value, Number(arguments[2]) || 0);
    }
    var len = array.length >>> 0, from = Number(arguments[2]) || 0;
    from = from < 0 ? Math.ceil(from) : Math.floor(from);
    if (from < 0)
      from += len;
    for (; from < len; from++) {
      if (from in array && array[from] === value)
        return from;
    }
    return -1;
  }
  /**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
  function inheritParams(currentParams, newParams, $current, $to) {
    var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
    for (var i in parents) {
      if (!parents[i].params)
        continue;
      parentParams = objectKeys(parents[i].params);
      if (!parentParams.length)
        continue;
      for (var j in parentParams) {
        if (indexOf(inheritList, parentParams[j]) >= 0)
          continue;
        inheritList.push(parentParams[j]);
        inherited[parentParams[j]] = currentParams[parentParams[j]];
      }
    }
    return extend({}, inherited, newParams);
  }
  /**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
  function equalForKeys(a, b, keys) {
    if (!keys) {
      keys = [];
      for (var n in a)
        keys.push(n);  // Used instead of Object.keys() for IE8 compatibility
    }
    for (var i = 0; i < keys.length; i++) {
      var k = keys[i];
      if (a[k] != b[k])
        return false;  // Not '===', values aren't necessarily normalized
    }
    return true;
  }
  /**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
  function filterByKeys(keys, values) {
    var filtered = {};
    forEach(keys, function (name) {
      filtered[name] = values[name];
    });
    return filtered;
  }
  // like _.indexBy
  // when you know that your index values will be unique, or you want last-one-in to win
  function indexBy(array, propName) {
    var result = {};
    forEach(array, function (item) {
      result[item[propName]] = item;
    });
    return result;
  }
  // extracted from underscore.js
  // Return a copy of the object only containing the whitelisted properties.
  function pick(obj) {
    var copy = {};
    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
    forEach(keys, function (key) {
      if (key in obj)
        copy[key] = obj[key];
    });
    return copy;
  }
  // extracted from underscore.js
  // Return a copy of the object omitting the blacklisted properties.
  function omit(obj) {
    var copy = {};
    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
    for (var key in obj) {
      if (indexOf(keys, key) == -1)
        copy[key] = obj[key];
    }
    return copy;
  }
  function pluck(collection, key) {
    var result = isArray(collection) ? [] : {};
    forEach(collection, function (val, i) {
      result[i] = isFunction(key) ? key(val) : val[key];
    });
    return result;
  }
  function filter(collection, callback) {
    var array = isArray(collection);
    var result = array ? [] : {};
    forEach(collection, function (val, i) {
      if (callback(val, i)) {
        result[array ? result.length : i] = val;
      }
    });
    return result;
  }
  function map(collection, callback) {
    var result = isArray(collection) ? [] : {};
    forEach(collection, function (val, i) {
      result[i] = callback(val, i);
    });
    return result;
  }
  /**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
  angular.module('ui.router.util', ['ng']);
  /**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
  angular.module('ui.router.router', ['ui.router.util']);
  /**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
  angular.module('ui.router.state', [
    'ui.router.router',
    'ui.router.util'
  ]);
  /**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
  angular.module('ui.router', ['ui.router.state']);
  angular.module('ui.router.compat', ['ui.router']);
  /**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
  $Resolve.$inject = [
    '$q',
    '$injector'
  ];
  function $Resolve($q, $injector) {
    var VISIT_IN_PROGRESS = 1, VISIT_DONE = 2, NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
        $$promises: NOTHING,
        $$values: NOTHING
      });
    /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
    this.study = function (invocables) {
      if (!isObject(invocables))
        throw new Error('\'invocables\' must be an object');
      var invocableKeys = objectKeys(invocables || {});
      // Perform a topological sort of invocables to build an ordered plan
      var plan = [], cycle = [], visited = {};
      function visit(value, key) {
        if (visited[key] === VISIT_DONE)
          return;
        cycle.push(key);
        if (visited[key] === VISIT_IN_PROGRESS) {
          cycle.splice(0, indexOf(cycle, key));
          throw new Error('Cyclic dependency: ' + cycle.join(' -> '));
        }
        visited[key] = VISIT_IN_PROGRESS;
        if (isString(value)) {
          plan.push(key, [function () {
              return $injector.get(value);
            }], NO_DEPENDENCIES);
        } else {
          var params = $injector.annotate(value);
          forEach(params, function (param) {
            if (param !== key && invocables.hasOwnProperty(param))
              visit(invocables[param], param);
          });
          plan.push(key, value, params);
        }
        cycle.pop();
        visited[key] = VISIT_DONE;
      }
      forEach(invocables, visit);
      invocables = cycle = visited = null;
      // plan is all that's required
      function isResolve(value) {
        return isObject(value) && value.then && value.$$promises;
      }
      return function (locals, parent, self) {
        if (isResolve(locals) && self === undefined) {
          self = parent;
          parent = locals;
          locals = null;
        }
        if (!locals)
          locals = NO_LOCALS;
        else if (!isObject(locals)) {
          throw new Error('\'locals\' must be an object');
        }
        if (!parent)
          parent = NO_PARENT;
        else if (!isResolve(parent)) {
          throw new Error('\'parent\' must be a promise returned by $resolve.resolve()');
        }
        // To complete the overall resolution, we have to wait for the parent
        // promise and for the promise for each invokable in our plan.
        var resolution = $q.defer(), result = resolution.promise, promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = false;
        function done() {
          // Merge parent values we haven't got yet and publish our own $$values
          if (!--wait) {
            if (!merged)
              merge(values, parent.$$values);
            result.$$values = values;
            result.$$promises = result.$$promises || true;
            // keep for isResolve()
            delete result.$$inheritedValues;
            resolution.resolve(values);
          }
        }
        function fail(reason) {
          result.$$failure = reason;
          resolution.reject(reason);
        }
        // Short-circuit if parent has already failed
        if (isDefined(parent.$$failure)) {
          fail(parent.$$failure);
          return result;
        }
        if (parent.$$inheritedValues) {
          merge(values, omit(parent.$$inheritedValues, invocableKeys));
        }
        // Merge parent values if the parent has already resolved, or merge
        // parent promises and wait if the parent resolve is still in progress.
        extend(promises, parent.$$promises);
        if (parent.$$values) {
          merged = merge(values, omit(parent.$$values, invocableKeys));
          result.$$inheritedValues = omit(parent.$$values, invocableKeys);
          done();
        } else {
          if (parent.$$inheritedValues) {
            result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
          }
          parent.then(done, fail);
        }
        // Process each invocable in the plan, but ignore any where a local of the same name exists.
        for (var i = 0, ii = plan.length; i < ii; i += 3) {
          if (locals.hasOwnProperty(plan[i]))
            done();
          else
            invoke(plan[i], plan[i + 1], plan[i + 2]);
        }
        function invoke(key, invocable, params) {
          // Create a deferred for this invocation. Failures will propagate to the resolution as well.
          var invocation = $q.defer(), waitParams = 0;
          function onfailure(reason) {
            invocation.reject(reason);
            fail(reason);
          }
          // Wait for any parameter that we have a promise for (either from parent or from this
          // resolve; in that case study() will have made sure it's ordered before us in the plan).
          forEach(params, function (dep) {
            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
              waitParams++;
              promises[dep].then(function (result) {
                values[dep] = result;
                if (!--waitParams)
                  proceed();
              }, onfailure);
            }
          });
          if (!waitParams)
            proceed();
          function proceed() {
            if (isDefined(result.$$failure))
              return;
            try {
              invocation.resolve($injector.invoke(invocable, self, values));
              invocation.promise.then(function (result) {
                values[key] = result;
                done();
              }, onfailure);
            } catch (e) {
              onfailure(e);
            }
          }
          // Publish promise synchronously; invocations further down in the plan may depend on it.
          promises[key] = invocation.promise;
        }
        return result;
      };
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
    this.resolve = function (invocables, locals, parent, self) {
      return this.study(invocables)(locals, parent, self);
    };
  }
  angular.module('ui.router.util').service('$resolve', $Resolve);
  /**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
  $TemplateFactory.$inject = [
    '$http',
    '$templateCache',
    '$injector'
  ];
  function $TemplateFactory($http, $templateCache, $injector) {
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
    this.fromConfig = function (config, params, locals) {
      return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
    this.fromString = function (template, params) {
      return isFunction(template) ? template(params) : template;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
    this.fromUrl = function (url, params) {
      if (isFunction(url))
        url = url(params);
      if (url == null)
        return null;
      else
        return $http.get(url, {
          cache: $templateCache,
          headers: { Accept: 'text/html' }
        }).then(function (response) {
          return response.data;
        });
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
    this.fromProvider = function (provider, params, locals) {
      return $injector.invoke(provider, null, locals || { params: params });
    };
  }
  angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);
  var $$UMFP;
  // reference to $UrlMatcherFactoryProvider
  /**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 *
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 *
 * Examples:
 *
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
  function UrlMatcher(pattern, config, parentMatcher) {
    config = extend({ params: {} }, isObject(config) ? config : {});
    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
    //   '*' name
    //   ':' name
    //   '{' name '}'
    //   '{' name ':' regexp '}'
    // The regular expression is somewhat complicated due to the need to allow curly braces
    // inside the regular expression. The placeholder regexp breaks down as follows:
    //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
    //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
    //    [^{}\\]+                       - anything other than curly braces or backslash
    //    \\.                            - a backslash escape
    //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
    var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, compiled = '^', last = 0, m, segments = this.segments = [], parentParams = parentMatcher ? parentMatcher.params : {}, params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(), paramNames = [];
    function addParameter(id, type, config, location) {
      paramNames.push(id);
      if (parentParams[id])
        return parentParams[id];
      if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id))
        throw new Error('Invalid parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
      if (params[id])
        throw new Error('Duplicate parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
      params[id] = new $$UMFP.Param(id, type, config, location);
      return params[id];
    }
    function quoteRegExp(string, pattern, squash, optional) {
      var surroundPattern = [
          '',
          ''
        ], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, '\\$&');
      if (!pattern)
        return result;
      switch (squash) {
      case false:
        surroundPattern = [
          '(',
          ')' + (optional ? '?' : '')
        ];
        break;
      case true:
        surroundPattern = [
          '?(',
          ')?'
        ];
        break;
      default:
        surroundPattern = [
          '(' + squash + '|',
          ')?'
        ];
        break;
      }
      return result + surroundPattern[0] + pattern + surroundPattern[1];
    }
    this.source = pattern;
    // Split into static segments separated by path parameter placeholders.
    // The number of segments is always 1 more than the number of parameters.
    function matchDetails(m, isSearch) {
      var id, regexp, segment, type, cfg, arrayMode;
      id = m[2] || m[3];
      // IE[78] returns '' for unmatched groups instead of null
      cfg = config.params[id];
      segment = pattern.substring(last, m.index);
      regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
      type = $$UMFP.type(regexp || 'string') || inherit($$UMFP.type('string'), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
      return {
        id: id,
        regexp: regexp,
        segment: segment,
        type: type,
        cfg: cfg
      };
    }
    var p, param, segment;
    while (m = placeholder.exec(pattern)) {
      p = matchDetails(m, false);
      if (p.segment.indexOf('?') >= 0)
        break;
      // we're into the search part
      param = addParameter(p.id, p.type, p.cfg, 'path');
      compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
      segments.push(p.segment);
      last = placeholder.lastIndex;
    }
    segment = pattern.substring(last);
    // Find any search parameter names and remove them from the last segment
    var i = segment.indexOf('?');
    if (i >= 0) {
      var search = this.sourceSearch = segment.substring(i);
      segment = segment.substring(0, i);
      this.sourcePath = pattern.substring(0, last + i);
      if (search.length > 0) {
        last = 0;
        while (m = searchPlaceholder.exec(search)) {
          p = matchDetails(m, true);
          param = addParameter(p.id, p.type, p.cfg, 'search');
          last = placeholder.lastIndex;  // check if ?&
        }
      }
    } else {
      this.sourcePath = pattern;
      this.sourceSearch = '';
    }
    compiled += quoteRegExp(segment) + (config.strict === false ? '/?' : '') + '$';
    segments.push(segment);
    this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
    this.prefix = segments[0];
    this.$$paramNames = paramNames;
  }
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
  UrlMatcher.prototype.concat = function (pattern, config) {
    // Because order of search parameters is irrelevant, we can add our own search
    // parameters to the end of the new pattern. Parse the new pattern by itself
    // and then join the bits together, but it's much easier to do this on a string level.
    var defaultConfig = {
        caseInsensitive: $$UMFP.caseInsensitive(),
        strict: $$UMFP.strictMode(),
        squash: $$UMFP.defaultSquashPolicy()
      };
    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
  };
  UrlMatcher.prototype.toString = function () {
    return this.source;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
  UrlMatcher.prototype.exec = function (path, searchParams) {
    var m = this.regexp.exec(path);
    if (!m)
      return null;
    searchParams = searchParams || {};
    var paramNames = this.parameters(), nTotal = paramNames.length, nPath = this.segments.length - 1, values = {}, i, j, cfg, paramName;
    if (nPath !== m.length - 1)
      throw new Error('Unbalanced capture group in route \'' + this.source + '\'');
    function decodePathArray(string) {
      function reverseString(str) {
        return str.split('').reverse().join('');
      }
      function unquoteDashes(str) {
        return str.replace(/\\-/g, '-');
      }
      var split = reverseString(string).split(/-(?!\\)/);
      var allReversed = map(split, reverseString);
      return map(allReversed, unquoteDashes).reverse();
    }
    for (i = 0; i < nPath; i++) {
      paramName = paramNames[i];
      var param = this.params[paramName];
      var paramVal = m[i + 1];
      // if the param value matches a pre-replace pair, replace the value before decoding.
      for (j = 0; j < param.replace; j++) {
        if (param.replace[j].from === paramVal)
          paramVal = param.replace[j].to;
      }
      if (paramVal && param.array === true)
        paramVal = decodePathArray(paramVal);
      values[paramName] = param.value(paramVal);
    }
    for (; i < nTotal; i++) {
      paramName = paramNames[i];
      values[paramName] = this.params[paramName].value(searchParams[paramName]);
    }
    return values;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 *
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
  UrlMatcher.prototype.parameters = function (param) {
    if (!isDefined(param))
      return this.$$paramNames;
    return this.params[param] || null;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validate
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
  UrlMatcher.prototype.validates = function (params) {
    return this.params.$$validates(params);
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
  UrlMatcher.prototype.format = function (values) {
    values = values || {};
    var segments = this.segments, params = this.parameters(), paramset = this.params;
    if (!this.validates(values))
      return null;
    var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];
    function encodeDashes(str) {
      // Replace dashes with encoded "\-"
      return encodeURIComponent(str).replace(/-/g, function (c) {
        return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    for (i = 0; i < nTotal; i++) {
      var isPathParam = i < nPath;
      var name = params[i], param = paramset[name], value = param.value(values[name]);
      var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
      var squash = isDefaultValue ? param.squash : false;
      var encoded = param.type.encode(value);
      if (isPathParam) {
        var nextSegment = segments[i + 1];
        if (squash === false) {
          if (encoded != null) {
            if (isArray(encoded)) {
              result += map(encoded, encodeDashes).join('-');
            } else {
              result += encodeURIComponent(encoded);
            }
          }
          result += nextSegment;
        } else if (squash === true) {
          var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
          result += nextSegment.match(capture)[1];
        } else if (isString(squash)) {
          result += squash + nextSegment;
        }
      } else {
        if (encoded == null || isDefaultValue && squash !== false)
          continue;
        if (!isArray(encoded))
          encoded = [encoded];
        encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
        result += (search ? '&' : '?') + (name + '=' + encoded);
        search = true;
      }
    }
    return result;
  };
  /**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
  function Type(config) {
    extend(this, config);
  }
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
  Type.prototype.is = function (val, key) {
    return true;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
  Type.prototype.encode = function (val, key) {
    return val;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
  Type.prototype.decode = function (val, key) {
    return val;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
  Type.prototype.equals = function (a, b) {
    return a == b;
  };
  Type.prototype.$subPattern = function () {
    var sub = this.pattern.toString();
    return sub.substr(1, sub.length - 2);
  };
  Type.prototype.pattern = /.*/;
  Type.prototype.toString = function () {
    return '{Type:' + this.name + '}';
  };
  /** Given an encoded string, or a decoded object, returns a decoded object */
  Type.prototype.$normalize = function (val) {
    return this.is(val) ? val : this.decode(val);
  };
  /*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
  Type.prototype.$asArray = function (mode, isSearch) {
    if (!mode)
      return this;
    if (mode === 'auto' && !isSearch)
      throw new Error('\'auto\' array mode is for query parameters only');
    function ArrayType(type, mode) {
      function bindTo(type, callbackName) {
        return function () {
          return type[callbackName].apply(type, arguments);
        };
      }
      // Wrap non-array value as array
      function arrayWrap(val) {
        return isArray(val) ? val : isDefined(val) ? [val] : [];
      }
      // Unwrap array value for "auto" mode. Return undefined for empty array.
      function arrayUnwrap(val) {
        switch (val.length) {
        case 0:
          return undefined;
        case 1:
          return mode === 'auto' ? val[0] : val;
        default:
          return val;
        }
      }
      function falsey(val) {
        return !val;
      }
      // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
      function arrayHandler(callback, allTruthyMode) {
        return function handleArray(val) {
          val = arrayWrap(val);
          var result = map(val, callback);
          if (allTruthyMode === true)
            return filter(result, falsey).length === 0;
          return arrayUnwrap(result);
        };
      }
      // Wraps type (.equals) functions to operate on each value of an array
      function arrayEqualsHandler(callback) {
        return function handleArray(val1, val2) {
          var left = arrayWrap(val1), right = arrayWrap(val2);
          if (left.length !== right.length)
            return false;
          for (var i = 0; i < left.length; i++) {
            if (!callback(left[i], right[i]))
              return false;
          }
          return true;
        };
      }
      this.encode = arrayHandler(bindTo(type, 'encode'));
      this.decode = arrayHandler(bindTo(type, 'decode'));
      this.is = arrayHandler(bindTo(type, 'is'), true);
      this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
      this.pattern = type.pattern;
      this.$normalize = arrayHandler(bindTo(type, '$normalize'));
      this.name = type.name;
      this.$arrayMode = mode;
    }
    return new ArrayType(this, mode);
  };
  /**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
  function $UrlMatcherFactory() {
    $$UMFP = this;
    var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;
    function valToString(val) {
      return val != null ? val.toString().replace(/\//g, '%2F') : val;
    }
    function valFromString(val) {
      return val != null ? val.toString().replace(/%2F/g, '/') : val;
    }
    //  TODO: in 1.0, make string .is() return false if value is undefined by default.
    //  function regexpMatches(val) { /*jshint validthis:true */ return isDefined(val) && this.pattern.test(val); }
    function regexpMatches(val) {
      /*jshint validthis:true */
      return this.pattern.test(val);
    }
    var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
        string: {
          encode: valToString,
          decode: valFromString,
          is: function (val) {
            return typeof val === 'string';
          },
          pattern: /[^\/]*/
        },
        int: {
          encode: valToString,
          decode: function (val) {
            return parseInt(val, 10);
          },
          is: function (val) {
            return isDefined(val) && this.decode(val.toString()) === val;
          },
          pattern: /\d+/
        },
        bool: {
          encode: function (val) {
            return val ? 1 : 0;
          },
          decode: function (val) {
            return parseInt(val, 10) !== 0;
          },
          is: function (val) {
            return val === true || val === false;
          },
          pattern: /0|1/
        },
        date: {
          encode: function (val) {
            if (!this.is(val))
              return undefined;
            return [
              val.getFullYear(),
              ('0' + (val.getMonth() + 1)).slice(-2),
              ('0' + val.getDate()).slice(-2)
            ].join('-');
          },
          decode: function (val) {
            if (this.is(val))
              return val;
            var match = this.capture.exec(val);
            return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
          },
          is: function (val) {
            return val instanceof Date && !isNaN(val.valueOf());
          },
          equals: function (a, b) {
            return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
          },
          pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
          capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
        },
        json: {
          encode: angular.toJson,
          decode: angular.fromJson,
          is: angular.isObject,
          equals: angular.equals,
          pattern: /[^\/]*/
        },
        any: {
          encode: angular.identity,
          decode: angular.identity,
          is: angular.identity,
          equals: angular.equals,
          pattern: /.*/
        }
      };
    function getDefaultConfig() {
      return {
        strict: isStrictMode,
        caseInsensitive: isCaseInsensitive
      };
    }
    function isInjectable(value) {
      return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
    }
    /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
    $UrlMatcherFactory.$$getDefaultValue = function (config) {
      if (!isInjectable(config.value))
        return config.value;
      if (!injector)
        throw new Error('Injectable functions cannot be called at configuration time');
      return injector.invoke(config.value);
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
    this.caseInsensitive = function (value) {
      if (isDefined(value))
        isCaseInsensitive = value;
      return isCaseInsensitive;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
    this.strictMode = function (value) {
      if (isDefined(value))
        isStrictMode = value;
      return isStrictMode;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
    this.defaultSquashPolicy = function (value) {
      if (!isDefined(value))
        return defaultSquashPolicy;
      if (value !== true && value !== false && !isString(value))
        throw new Error('Invalid squash policy: ' + value + '. Valid policies: false, true, arbitrary-string');
      defaultSquashPolicy = value;
      return value;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
    this.compile = function (pattern, config) {
      return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
    this.isMatcher = function (o) {
      if (!isObject(o))
        return false;
      var result = true;
      forEach(UrlMatcher.prototype, function (val, name) {
        if (isFunction(val)) {
          result = result && (isDefined(o[name]) && isFunction(o[name]));
        }
      });
      return result;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
    this.type = function (name, definition, definitionFn) {
      if (!isDefined(definition))
        return $types[name];
      if ($types.hasOwnProperty(name))
        throw new Error('A type named \'' + name + '\' has already been defined.');
      $types[name] = new Type(extend({ name: name }, definition));
      if (definitionFn) {
        typeQueue.push({
          name: name,
          def: definitionFn
        });
        if (!enqueue)
          flushTypeQueue();
      }
      return this;
    };
    // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
    function flushTypeQueue() {
      while (typeQueue.length) {
        var type = typeQueue.shift();
        if (type.pattern)
          throw new Error('You cannot override a type\'s .pattern at runtime.');
        angular.extend($types[type.name], injector.invoke(type.def));
      }
    }
    // Register default types. Store them in the prototype of $types.
    forEach(defaultTypes, function (type, name) {
      $types[name] = new Type(extend({ name: name }, type));
    });
    $types = inherit($types, {});
    /* No need to document $get, since it returns this */
    this.$get = [
      '$injector',
      function ($injector) {
        injector = $injector;
        enqueue = false;
        flushTypeQueue();
        forEach(defaultTypes, function (type, name) {
          if (!$types[name])
            $types[name] = new Type(type);
        });
        return this;
      }
    ];
    this.Param = function Param(id, type, config, location) {
      var self = this;
      config = unwrapShorthand(config);
      type = getType(config, type, location);
      var arrayMode = getArrayMode();
      type = arrayMode ? type.$asArray(arrayMode, location === 'search') : type;
      if (type.name === 'string' && !arrayMode && location === 'path' && config.value === undefined)
        config.value = '';
      // for 0.2.x; in 0.3.0+ do not automatically default to ""
      var isOptional = config.value !== undefined;
      var squash = getSquashPolicy(config, isOptional);
      var replace = getReplace(config, arrayMode, isOptional, squash);
      function unwrapShorthand(config) {
        var keys = isObject(config) ? objectKeys(config) : [];
        var isShorthand = indexOf(keys, 'value') === -1 && indexOf(keys, 'type') === -1 && indexOf(keys, 'squash') === -1 && indexOf(keys, 'array') === -1;
        if (isShorthand)
          config = { value: config };
        config.$$fn = isInjectable(config.value) ? config.value : function () {
          return config.value;
        };
        return config;
      }
      function getType(config, urlType, location) {
        if (config.type && urlType)
          throw new Error('Param \'' + id + '\' has two type configurations.');
        if (urlType)
          return urlType;
        if (!config.type)
          return location === 'config' ? $types.any : $types.string;
        return config.type instanceof Type ? config.type : new Type(config.type);
      }
      // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
      function getArrayMode() {
        var arrayDefaults = { array: location === 'search' ? 'auto' : false };
        var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
        return extend(arrayDefaults, arrayParamNomenclature, config).array;
      }
      /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
      function getSquashPolicy(config, isOptional) {
        var squash = config.squash;
        if (!isOptional || squash === false)
          return false;
        if (!isDefined(squash) || squash == null)
          return defaultSquashPolicy;
        if (squash === true || isString(squash))
          return squash;
        throw new Error('Invalid squash policy: \'' + squash + '\'. Valid policies: false, true, or arbitrary string');
      }
      function getReplace(config, arrayMode, isOptional, squash) {
        var replace, configuredKeys, defaultPolicy = [
            {
              from: '',
              to: isOptional || arrayMode ? undefined : ''
            },
            {
              from: null,
              to: isOptional || arrayMode ? undefined : ''
            }
          ];
        replace = isArray(config.replace) ? config.replace : [];
        if (isString(squash))
          replace.push({
            from: squash,
            to: undefined
          });
        configuredKeys = map(replace, function (item) {
          return item.from;
        });
        return filter(defaultPolicy, function (item) {
          return indexOf(configuredKeys, item.from) === -1;
        }).concat(replace);
      }
      /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
      function $$getDefaultValue() {
        if (!injector)
          throw new Error('Injectable functions cannot be called at configuration time');
        var defaultValue = injector.invoke(config.$$fn);
        if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
          throw new Error('Default value (' + defaultValue + ') for parameter \'' + self.id + '\' is not an instance of Type (' + self.type.name + ')');
        return defaultValue;
      }
      /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
      function $value(value) {
        function hasReplaceVal(val) {
          return function (obj) {
            return obj.from === val;
          };
        }
        function $replace(value) {
          var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) {
              return obj.to;
            });
          return replacement.length ? replacement[0] : value;
        }
        value = $replace(value);
        return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
      }
      function toString() {
        return '{Param:' + id + ' ' + type + ' squash: \'' + squash + '\' optional: ' + isOptional + '}';
      }
      extend(this, {
        id: id,
        type: type,
        location: location,
        array: arrayMode,
        squash: squash,
        replace: replace,
        isOptional: isOptional,
        value: $value,
        dynamic: undefined,
        config: config,
        toString: toString
      });
    };
    function ParamSet(params) {
      extend(this, params || {});
    }
    ParamSet.prototype = {
      $$new: function () {
        return inherit(this, extend(new ParamSet(), { $$parent: this }));
      },
      $$keys: function () {
        var keys = [], chain = [], parent = this, ignore = objectKeys(ParamSet.prototype);
        while (parent) {
          chain.push(parent);
          parent = parent.$$parent;
        }
        chain.reverse();
        forEach(chain, function (paramset) {
          forEach(objectKeys(paramset), function (key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1)
              keys.push(key);
          });
        });
        return keys;
      },
      $$values: function (paramValues) {
        var values = {}, self = this;
        forEach(self.$$keys(), function (key) {
          values[key] = self[key].value(paramValues && paramValues[key]);
        });
        return values;
      },
      $$equals: function (paramValues1, paramValues2) {
        var equal = true, self = this;
        forEach(self.$$keys(), function (key) {
          var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
          if (!self[key].type.equals(left, right))
            equal = false;
        });
        return equal;
      },
      $$validates: function $$validate(paramValues) {
        var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
        for (i = 0; i < keys.length; i++) {
          param = this[keys[i]];
          rawVal = paramValues[keys[i]];
          if ((rawVal === undefined || rawVal === null) && param.isOptional)
            break;
          // There was no parameter value, but the param is optional
          normalized = param.type.$normalize(rawVal);
          if (!param.type.is(normalized))
            return false;
          // The value was not of the correct Type, and could not be decoded to the correct Type
          encoded = param.type.encode(normalized);
          if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
            return false;  // The value was of the correct type, but when encoded, did not match the Type's regexp
        }
        return true;
      },
      $$parent: undefined
    };
    this.ParamSet = ParamSet;
  }
  // Register as a provider so it's available to other providers
  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
  angular.module('ui.router.util').run([
    '$urlMatcherFactory',
    function ($urlMatcherFactory) {
    }
  ]);
  /**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
  $UrlRouterProvider.$inject = [
    '$locationProvider',
    '$urlMatcherFactoryProvider'
  ];
  function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
    var rules = [], otherwise = null, interceptDeferred = false, listener;
    // Returns a string that is a prefix of all strings matching the RegExp
    function regExpPrefix(re) {
      var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
      return prefix != null ? prefix[1].replace(/\\(.)/g, '$1') : '';
    }
    // Interpolates matched values into a String.replace()-style pattern
    function interpolate(pattern, match) {
      return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
        return match[what === '$' ? 0 : Number(what)];
      });
    }
    /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
    this.rule = function (rule) {
      if (!isFunction(rule))
        throw new Error('\'rule\' must be a function');
      rules.push(rule);
      return this;
    };
    /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
    this.otherwise = function (rule) {
      if (isString(rule)) {
        var redirect = rule;
        rule = function () {
          return redirect;
        };
      } else if (!isFunction(rule))
        throw new Error('\'rule\' must be a function');
      otherwise = rule;
      return this;
    };
    function handleIfMatch($injector, handler, match) {
      if (!match)
        return false;
      var result = $injector.invoke(handler, handler, { $match: match });
      return isDefined(result) ? result : true;
    }
    /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
    this.when = function (what, handler) {
      var redirect, handlerIsString = isString(handler);
      if (isString(what))
        what = $urlMatcherFactory.compile(what);
      if (!handlerIsString && !isFunction(handler) && !isArray(handler))
        throw new Error('invalid \'handler\' in when()');
      var strategies = {
          matcher: function (what, handler) {
            if (handlerIsString) {
              redirect = $urlMatcherFactory.compile(handler);
              handler = [
                '$match',
                function ($match) {
                  return redirect.format($match);
                }
              ];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
            }, { prefix: isString(what.prefix) ? what.prefix : '' });
          },
          regex: function (what, handler) {
            if (what.global || what.sticky)
              throw new Error('when() RegExp must not be global or sticky');
            if (handlerIsString) {
              redirect = handler;
              handler = [
                '$match',
                function ($match) {
                  return interpolate(redirect, $match);
                }
              ];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path()));
            }, { prefix: regExpPrefix(what) });
          }
        };
      var check = {
          matcher: $urlMatcherFactory.isMatcher(what),
          regex: what instanceof RegExp
        };
      for (var n in check) {
        if (check[n])
          return this.rule(strategies[n](what, handler));
      }
      throw new Error('invalid \'what\' in when()');
    };
    /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
    this.deferIntercept = function (defer) {
      if (defer === undefined)
        defer = true;
      interceptDeferred = defer;
    };
    /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
    this.$get = $get;
    $get.$inject = [
      '$location',
      '$rootScope',
      '$injector',
      '$browser'
    ];
    function $get($location, $rootScope, $injector, $browser) {
      var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;
      function appendBasePath(url, isHtml5, absolute) {
        if (baseHref === '/')
          return url;
        if (isHtml5)
          return baseHref.slice(0, -1) + url;
        if (absolute)
          return baseHref.slice(1) + url;
        return url;
      }
      // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
      function update(evt) {
        if (evt && evt.defaultPrevented)
          return;
        var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
        lastPushedUrl = undefined;
        if (ignoreUpdate)
          return true;
        function check(rule) {
          var handled = rule($injector, $location);
          if (!handled)
            return false;
          if (isString(handled))
            $location.replace().url(handled);
          return true;
        }
        var n = rules.length, i;
        for (i = 0; i < n; i++) {
          if (check(rules[i]))
            return;
        }
        // always check otherwise last to allow dynamic updates to the set of rules
        if (otherwise)
          check(otherwise);
      }
      function listen() {
        listener = listener || $rootScope.$on('$locationChangeSuccess', update);
        return listener;
      }
      if (!interceptDeferred)
        listen();
      return {
        sync: function () {
          update();
        },
        listen: function () {
          return listen();
        },
        update: function (read) {
          if (read) {
            location = $location.url();
            return;
          }
          if ($location.url() === location)
            return;
          $location.url(location);
          $location.replace();
        },
        push: function (urlMatcher, params, options) {
          var url = urlMatcher.format(params || {});
          // Handle the special hash param, if needed
          if (url !== null && params && params['#']) {
            url += '#' + params['#'];
          }
          $location.url(url);
          lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
          if (options && options.replace)
            $location.replace();
        },
        href: function (urlMatcher, params, options) {
          if (!urlMatcher.validates(params))
            return null;
          var isHtml5 = $locationProvider.html5Mode();
          if (angular.isObject(isHtml5)) {
            isHtml5 = isHtml5.enabled;
          }
          var url = urlMatcher.format(params);
          options = options || {};
          if (!isHtml5 && url !== null) {
            url = '#' + $locationProvider.hashPrefix() + url;
          }
          // Handle special hash param, if needed
          if (url !== null && params && params['#']) {
            url += '#' + params['#'];
          }
          url = appendBasePath(url, isHtml5, options.absolute);
          if (!options.absolute || !url) {
            return url;
          }
          var slash = !isHtml5 && url ? '/' : '', port = $location.port();
          port = port === 80 || port === 443 ? '' : ':' + port;
          return [
            $location.protocol(),
            '://',
            $location.host(),
            port,
            slash,
            url
          ].join('');
        }
      };
    }
  }
  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);
  /**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
  $StateProvider.$inject = [
    '$urlRouterProvider',
    '$urlMatcherFactoryProvider'
  ];
  function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
    var root, states = {}, $state, queue = {}, abstractKey = 'abstract';
    // Builds state properties from definition passed to registerState()
    var stateBuilder = {
        parent: function (state) {
          if (isDefined(state.parent) && state.parent)
            return findState(state.parent);
          // regex matches any valid composite state name
          // would match "contact.list" but not "contacts"
          var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
          return compositeName ? findState(compositeName[1]) : root;
        },
        data: function (state) {
          if (state.parent && state.parent.data) {
            state.data = state.self.data = extend({}, state.parent.data, state.data);
          }
          return state.data;
        },
        url: function (state) {
          var url = state.url, config = { params: state.params || {} };
          if (isString(url)) {
            if (url.charAt(0) == '^')
              return $urlMatcherFactory.compile(url.substring(1), config);
            return (state.parent.navigable || root).url.concat(url, config);
          }
          if (!url || $urlMatcherFactory.isMatcher(url))
            return url;
          throw new Error('Invalid url \'' + url + '\' in state \'' + state + '\'');
        },
        navigable: function (state) {
          return state.url ? state : state.parent ? state.parent.navigable : null;
        },
        ownParams: function (state) {
          var params = state.url && state.url.params || new $$UMFP.ParamSet();
          forEach(state.params || {}, function (config, id) {
            if (!params[id])
              params[id] = new $$UMFP.Param(id, null, config, 'config');
          });
          return params;
        },
        params: function (state) {
          return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
        },
        views: function (state) {
          var views = {};
          forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
            if (name.indexOf('@') < 0)
              name += '@' + state.parent.name;
            views[name] = view;
          });
          return views;
        },
        path: function (state) {
          return state.parent ? state.parent.path.concat(state) : [];  // exclude root from path
        },
        includes: function (state) {
          var includes = state.parent ? extend({}, state.parent.includes) : {};
          includes[state.name] = true;
          return includes;
        },
        $delegates: {}
      };
    function isRelative(stateName) {
      return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;
    }
    function findState(stateOrName, base) {
      if (!stateOrName)
        return undefined;
      var isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name, path = isRelative(name);
      if (path) {
        if (!base)
          throw new Error('No reference point given for path \'' + name + '\'');
        base = findState(base);
        var rel = name.split('.'), i = 0, pathLength = rel.length, current = base;
        for (; i < pathLength; i++) {
          if (rel[i] === '' && i === 0) {
            current = base;
            continue;
          }
          if (rel[i] === '^') {
            if (!current.parent)
              throw new Error('Path \'' + name + '\' not valid for state \'' + base.name + '\'');
            current = current.parent;
            continue;
          }
          break;
        }
        rel = rel.slice(i).join('.');
        name = current.name + (current.name && rel ? '.' : '') + rel;
      }
      var state = states[name];
      if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
        return state;
      }
      return undefined;
    }
    function queueState(parentName, state) {
      if (!queue[parentName]) {
        queue[parentName] = [];
      }
      queue[parentName].push(state);
    }
    function flushQueuedChildren(parentName) {
      var queued = queue[parentName] || [];
      while (queued.length) {
        registerState(queued.shift());
      }
    }
    function registerState(state) {
      // Wrap a new object around the state so we can store our private details easily.
      state = inherit(state, {
        self: state,
        resolve: state.resolve || {},
        toString: function () {
          return this.name;
        }
      });
      var name = state.name;
      if (!isString(name) || name.indexOf('@') >= 0)
        throw new Error('State must have a valid name');
      if (states.hasOwnProperty(name))
        throw new Error('State \'' + name + '\'\' is already defined');
      // Get parent name
      var parentName = name.indexOf('.') !== -1 ? name.substring(0, name.lastIndexOf('.')) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : '';
      // If parent is not registered yet, add state to queue and register later
      if (parentName && !states[parentName]) {
        return queueState(parentName, state.self);
      }
      for (var key in stateBuilder) {
        if (isFunction(stateBuilder[key]))
          state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
      }
      states[name] = state;
      // Register the state in the global state list and with $urlRouter if necessary.
      if (!state[abstractKey] && state.url) {
        $urlRouterProvider.when(state.url, [
          '$match',
          '$stateParams',
          function ($match, $stateParams) {
            if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
              $state.transitionTo(state, $match, {
                inherit: true,
                location: false
              });
            }
          }
        ]);
      }
      // Register any queued children
      flushQueuedChildren(name);
      return state;
    }
    // Checks text to see if it looks like a glob.
    function isGlob(text) {
      return text.indexOf('*') > -1;
    }
    // Returns true if glob matches current $state name.
    function doesStateMatchGlob(glob) {
      var globSegments = glob.split('.'), segments = $state.$current.name.split('.');
      //match single stars
      for (var i = 0, l = globSegments.length; i < l; i++) {
        if (globSegments[i] === '*') {
          segments[i] = '*';
        }
      }
      //match greedy starts
      if (globSegments[0] === '**') {
        segments = segments.slice(indexOf(segments, globSegments[1]));
        segments.unshift('**');
      }
      //match greedy ends
      if (globSegments[globSegments.length - 1] === '**') {
        segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
        segments.push('**');
      }
      if (globSegments.length != segments.length) {
        return false;
      }
      return segments.join('') === globSegments.join('');
    }
    // Implicit root state that is always active
    root = registerState({
      name: '',
      url: '^',
      views: null,
      'abstract': true
    });
    root.navigable = null;
    /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
    this.decorator = decorator;
    function decorator(name, func) {
      /*jshint validthis: true */
      if (isString(name) && !isDefined(func)) {
        return stateBuilder[name];
      }
      if (!isFunction(func) || !isString(name)) {
        return this;
      }
      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
        stateBuilder.$delegates[name] = stateBuilder[name];
      }
      stateBuilder[name] = func;
      return this;
    }
    /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {string|object=} stateConfig.parent
   * <a id='parent'></a>
   * Optionally specifies the parent state of this state.
   *
   * <pre>parent: 'parentState'</pre>
   * <pre>parent: parentState // JS variable</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
   *   more details on acceptable patterns )
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   * </pre>
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
    this.state = state;
    function state(name, definition) {
      /*jshint validthis: true */
      if (isObject(name))
        definition = name;
      else
        definition.name = name;
      registerState(definition);
      return this;
    }
    /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
    this.$get = $get;
    $get.$inject = [
      '$rootScope',
      '$q',
      '$view',
      '$injector',
      '$resolve',
      '$stateParams',
      '$urlRouter',
      '$location',
      '$urlMatcherFactory'
    ];
    function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
      var TransitionSuperseded = $q.reject(new Error('transition superseded'));
      var TransitionPrevented = $q.reject(new Error('transition prevented'));
      var TransitionAborted = $q.reject(new Error('transition aborted'));
      var TransitionFailed = $q.reject(new Error('transition failed'));
      // Handles the case where a state which is the target of a transition is not found, and the user
      // can optionally retry or defer the transition
      function handleRedirect(redirect, state, params, options) {
        /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
        var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);
        if (evt.defaultPrevented) {
          $urlRouter.update();
          return TransitionAborted;
        }
        if (!evt.retry) {
          return null;
        }
        // Allow the handler to return a promise to defer state lookup retry
        if (options.$retry) {
          $urlRouter.update();
          return TransitionFailed;
        }
        var retryTransition = $state.transition = $q.when(evt.retry);
        retryTransition.then(function () {
          if (retryTransition !== $state.transition)
            return TransitionSuperseded;
          redirect.options.$retry = true;
          return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
        }, function () {
          return TransitionAborted;
        });
        $urlRouter.update();
        return retryTransition;
      }
      root.locals = {
        resolve: null,
        globals: { $stateParams: {} }
      };
      $state = {
        params: {},
        current: root.self,
        $current: root,
        transition: null
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved,
     * controllers reinstantiated, and events re-fired.
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
     * @example
     * <pre>
     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
     * //and current state is 'contacts.detail.item'
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     //will reload 'contact.detail' and 'contact.detail.item' states
     *     $state.reload('contact.detail');
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>

     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
      $state.reload = function reload(state) {
        return $state.transitionTo($state.current, $stateParams, {
          reload: state || true,
          inherit: false,
          notify: true
        });
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
      $state.go = function go(to, params, options) {
        return $state.transitionTo(to, params, extend({
          inherit: true,
          relative: $state.$current
        }, options));
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *    if String, then will reload the state with the name given in reload, and any children.
     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any chhildren.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
      $state.transitionTo = function transitionTo(to, toParams, options) {
        toParams = toParams || {};
        options = extend({
          location: true,
          inherit: false,
          relative: null,
          notify: true,
          reload: false,
          $retry: false
        }, options || {});
        var from = $state.$current, fromParams = $state.params, fromPath = from.path;
        var evt, toState = findState(to, options.relative);
        // Store the hash param for later (since it will be stripped out by various methods)
        var hash = toParams['#'];
        if (!isDefined(toState)) {
          var redirect = {
              to: to,
              toParams: toParams,
              options: options
            };
          var redirectResult = handleRedirect(redirect, from.self, fromParams, options);
          if (redirectResult) {
            return redirectResult;
          }
          // Always retry once if the $stateNotFound was not prevented
          // (handles either redirect changed or state lazy-definition)
          to = redirect.to;
          toParams = redirect.toParams;
          options = redirect.options;
          toState = findState(to, options.relative);
          if (!isDefined(toState)) {
            if (!options.relative)
              throw new Error('No such state \'' + to + '\'');
            throw new Error('Could not resolve \'' + to + '\' from state \'' + options.relative + '\'');
          }
        }
        if (toState[abstractKey])
          throw new Error('Cannot transition to abstract state \'' + to + '\'');
        if (options.inherit)
          toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
        if (!toState.params.$$validates(toParams))
          return TransitionFailed;
        toParams = toState.params.$$values(toParams);
        to = toState;
        var toPath = to.path;
        // Starting from the root of the path, keep all levels that haven't changed
        var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];
        var skipTriggerReloadCheck = false;
        if (!options.reload) {
          while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
            locals = toLocals[keep] = state.locals;
            keep++;
            state = toPath[keep];
          }
        } else if (isString(options.reload) || isObject(options.reload)) {
          if (isObject(options.reload) && !options.reload.name) {
            throw new Error('Invalid reload state object');
          }
          var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
          if (options.reload && !reloadState) {
            throw new Error('No such reload state \'' + (isString(options.reload) ? options.reload : options.reload.name) + '\'');
          }
          skipTriggerReloadCheck = true;
          while (state && state === fromPath[keep] && state !== reloadState) {
            locals = toLocals[keep] = state.locals;
            keep++;
            state = toPath[keep];
          }
        }
        // If we're going to the same state and all locals are kept, we've got nothing to do.
        // But clear 'transition', as we still want to cancel any other pending transitions.
        // TODO: We may not want to bump 'transition' if we're called from a location change
        // that we've initiated ourselves, because we might accidentally abort a legitimate
        // transition initiated from code?
        if (!skipTriggerReloadCheck && shouldTriggerReload(to, from, locals, options)) {
          if (to.self.reloadOnSearch !== false)
            $urlRouter.update();
          $state.transition = null;
          return $q.when($state.current);
        }
        // Filter parameters before we pass them to event handlers etc.
        toParams = filterByKeys(to.params.$$keys(), toParams || {});
        // Broadcast start event and cancel the transition if requested
        if (options.notify) {
          /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
          if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
            $urlRouter.update();
            return TransitionPrevented;
          }
        }
        // Resolve locals for the remaining states, but don't update any global state just
        // yet -- if anything fails to resolve the current state needs to remain untouched.
        // We also set up an inheritance chain for the locals here. This allows the view directive
        // to quickly look up the correct definition for each view in the current state. Even
        // though we create the locals object itself outside resolveState(), it is initially
        // empty and gets filled asynchronously. We need to keep track of the promise for the
        // (fully resolved) current locals, and pass this down the chain.
        var resolved = $q.when(locals);
        for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
          locals = toLocals[l] = inherit(locals);
          resolved = resolveState(state, toParams, state === to, resolved, locals, options);
        }
        // Once everything is resolved, we are ready to perform the actual transition
        // and return a promise for the new state. We also keep track of what the
        // current promise is, so that we can detect overlapping transitions and
        // keep only the outcome of the last transition.
        var transition = $state.transition = resolved.then(function () {
            var l, entering, exiting;
            if ($state.transition !== transition)
              return TransitionSuperseded;
            // Exit 'from' states not kept
            for (l = fromPath.length - 1; l >= keep; l--) {
              exiting = fromPath[l];
              if (exiting.self.onExit) {
                $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
              }
              exiting.locals = null;
            }
            // Enter 'to' states not kept
            for (l = keep; l < toPath.length; l++) {
              entering = toPath[l];
              entering.locals = toLocals[l];
              if (entering.self.onEnter) {
                $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
              }
            }
            // Re-add the saved hash before we start returning things
            if (hash)
              toParams['#'] = hash;
            // Run it again, to catch any transitions in callbacks
            if ($state.transition !== transition)
              return TransitionSuperseded;
            // Update globals in $state
            $state.$current = to;
            $state.current = to.self;
            $state.params = toParams;
            copy($state.params, $stateParams);
            $state.transition = null;
            if (options.location && to.navigable) {
              $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                $$avoidResync: true,
                replace: options.location === 'replace'
              });
            }
            if (options.notify) {
              /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
              $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
            }
            $urlRouter.update(true);
            return $state.current;
          }, function (error) {
            if ($state.transition !== transition)
              return TransitionSuperseded;
            $state.transition = null;
            /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
            evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
            if (!evt.defaultPrevented) {
              $urlRouter.update();
            }
            return $q.reject(error);
          });
        return transition;
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
      $state.is = function is(stateOrName, params, options) {
        options = extend({ relative: $state.$current }, options || {});
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state)) {
          return undefined;
        }
        if ($state.$current !== state) {
          return false;
        }
        return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
      $state.includes = function includes(stateOrName, params, options) {
        options = extend({ relative: $state.$current }, options || {});
        if (isString(stateOrName) && isGlob(stateOrName)) {
          if (!doesStateMatchGlob(stateOrName)) {
            return false;
          }
          stateOrName = $state.$current.name;
        }
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state)) {
          return undefined;
        }
        if (!isDefined($state.$current.includes[state.name])) {
          return false;
        }
        return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
      $state.href = function href(stateOrName, params, options) {
        options = extend({
          lossy: true,
          inherit: true,
          absolute: false,
          relative: $state.$current
        }, options || {});
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state))
          return null;
        if (options.inherit)
          params = inheritParams($stateParams, params || {}, $state.$current, state);
        var nav = state && options.lossy ? state.navigable : state;
        if (!nav || nav.url === undefined || nav.url === null) {
          return null;
        }
        return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), { absolute: options.absolute });
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
      $state.get = function (stateOrName, context) {
        if (arguments.length === 0)
          return map(objectKeys(states), function (name) {
            return states[name].self;
          });
        var state = findState(stateOrName, context || $state.$current);
        return state && state.self ? state.self : null;
      };
      function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
        // Make a restricted $stateParams with only the parameters that apply to this state if
        // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
        // we also need $stateParams to be available for any $injector calls we make during the
        // dependency resolution process.
        var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params);
        var locals = { $stateParams: $stateParams };
        // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
        // We're also including $stateParams in this; that way the parameters are restricted
        // to the set that should be visible to the state, and are independent of when we update
        // the global $state and $stateParams values.
        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
        var promises = [dst.resolve.then(function (globals) {
              dst.globals = globals;
            })];
        if (inherited)
          promises.push(inherited);
        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
          injectables.$template = [function () {
              return $view.load(name, {
                view: view,
                locals: locals,
                params: $stateParams,
                notify: options.notify
              }) || '';
            }];
          promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, locals, result);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            dst[name] = result;
          }));
        });
        // Wait for all the promises and then return the activation object
        return $q.all(promises).then(function (values) {
          return dst;
        });
      }
      return $state;
    }
    function shouldTriggerReload(to, from, locals, options) {
      if (to === from && (locals === from.locals && !options.reload || to.self.reloadOnSearch === false)) {
        return true;
      }
    }
  }
  angular.module('ui.router.state').value('$stateParams', {}).provider('$state', $StateProvider);
  $ViewProvider.$inject = [];
  function $ViewProvider() {
    this.$get = $get;
    /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
    $get.$inject = [
      '$rootScope',
      '$templateFactory'
    ];
    function $get($rootScope, $templateFactory) {
      return {
        load: function load(name, options) {
          var result, defaults = {
              template: null,
              controller: null,
              view: null,
              locals: null,
              notify: true,
              async: true,
              params: {}
            };
          options = extend(defaults, options);
          if (options.view) {
            result = $templateFactory.fromConfig(options.view, options.params, options.locals);
          }
          if (result && options.notify) {
            /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
            $rootScope.$broadcast('$viewContentLoading', options);
          }
          return result;
        }
      };
    }
  }
  angular.module('ui.router.state').provider('$view', $ViewProvider);
  /**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
  function $ViewScrollProvider() {
    var useAnchorScroll = false;
    /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
    this.useAnchorScroll = function () {
      useAnchorScroll = true;
    };
    /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
    this.$get = [
      '$anchorScroll',
      '$timeout',
      function ($anchorScroll, $timeout) {
        if (useAnchorScroll) {
          return $anchorScroll;
        }
        return function ($element) {
          return $timeout(function () {
            $element[0].scrollIntoView();
          }, 0, false);
        };
      }
    ];
  }
  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
  $ViewDirective.$inject = [
    '$state',
    '$injector',
    '$uiViewScroll',
    '$interpolate'
  ];
  function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {
    function getService() {
      return $injector.has ? function (service) {
        return $injector.has(service) ? $injector.get(service) : null;
      } : function (service) {
        try {
          return $injector.get(service);
        } catch (e) {
          return null;
        }
      };
    }
    var service = getService(), $animator = service('$animator'), $animate = service('$animate');
    // Returns a set of DOM manipulation functions based on which Angular version
    // it should use
    function getRenderer(attrs, scope) {
      var statics = function () {
        return {
          enter: function (element, target, cb) {
            target.after(element);
            cb();
          },
          leave: function (element, cb) {
            element.remove();
            cb();
          }
        };
      };
      if ($animate) {
        return {
          enter: function (element, target, cb) {
            var promise = $animate.enter(element, null, target, cb);
            if (promise && promise.then)
              promise.then(cb);
          },
          leave: function (element, cb) {
            var promise = $animate.leave(element, cb);
            if (promise && promise.then)
              promise.then(cb);
          }
        };
      }
      if ($animator) {
        var animate = $animator && $animator(scope, attrs);
        return {
          enter: function (element, target, cb) {
            animate.enter(element, null, target);
            cb();
          },
          leave: function (element, cb) {
            animate.leave(element);
            cb();
          }
        };
      }
      return statics();
    }
    var directive = {
        restrict: 'ECA',
        terminal: true,
        priority: 400,
        transclude: 'element',
        compile: function (tElement, tAttrs, $transclude) {
          return function (scope, $element, attrs) {
            var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || '', autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope);
            scope.$on('$stateChangeSuccess', function () {
              updateView(false);
            });
            scope.$on('$viewContentLoading', function () {
              updateView(false);
            });
            updateView(true);
            function cleanupLastView() {
              if (previousEl) {
                previousEl.remove();
                previousEl = null;
              }
              if (currentScope) {
                currentScope.$destroy();
                currentScope = null;
              }
              if (currentEl) {
                renderer.leave(currentEl, function () {
                  previousEl = null;
                });
                previousEl = currentEl;
                currentEl = null;
              }
            }
            function updateView(firstTime) {
              var newScope, name = getUiViewName(scope, attrs, $element, $interpolate), previousLocals = name && $state.$current && $state.$current.locals[name];
              if (!firstTime && previousLocals === latestLocals)
                return;
              // nothing to do
              newScope = scope.$new();
              latestLocals = $state.$current.locals[name];
              var clone = $transclude(newScope, function (clone) {
                  renderer.enter(clone, $element, function onUiViewEnter() {
                    if (currentScope) {
                      currentScope.$emit('$viewContentAnimationEnded');
                    }
                    if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                      $uiViewScroll(clone);
                    }
                  });
                  cleanupLastView();
                });
              currentEl = clone;
              currentScope = newScope;
              /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
              currentScope.$emit('$viewContentLoaded');
              currentScope.$eval(onloadExp);
            }
          };
        }
      };
    return directive;
  }
  $ViewDirectiveFill.$inject = [
    '$compile',
    '$controller',
    '$state',
    '$interpolate'
  ];
  function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
    return {
      restrict: 'ECA',
      priority: -400,
      compile: function (tElement) {
        var initial = tElement.html();
        return function (scope, $element, attrs) {
          var current = $state.$current, name = getUiViewName(scope, attrs, $element, $interpolate), locals = current && current.locals[name];
          if (!locals) {
            return;
          }
          $element.data('$uiView', {
            name: name,
            state: locals.$$state
          });
          $element.html(locals.$template ? locals.$template : initial);
          var link = $compile($element.contents());
          if (locals.$$controller) {
            locals.$scope = scope;
            locals.$element = $element;
            var controller = $controller(locals.$$controller, locals);
            if (locals.$$controllerAs) {
              scope[locals.$$controllerAs] = controller;
            }
            $element.data('$ngControllerController', controller);
            $element.children().data('$ngControllerController', controller);
          }
          link(scope);
        };
      }
    };
  }
  /**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
  function getUiViewName(scope, attrs, element, $interpolate) {
    var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
    var inherited = element.inheritedData('$uiView');
    return name.indexOf('@') >= 0 ? name : name + '@' + (inherited ? inherited.state.name : '');
  }
  angular.module('ui.router.state').directive('uiView', $ViewDirective);
  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);
  function parseStateRef(ref, current) {
    var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
    if (preparsed)
      ref = current + '(' + preparsed[1] + ')';
    parsed = ref.replace(/\n/g, ' ').match(/^([^(]+?)\s*(\((.*)\))?$/);
    if (!parsed || parsed.length !== 4)
      throw new Error('Invalid state ref \'' + ref + '\'');
    return {
      state: parsed[1],
      paramExpr: parsed[3] || null
    };
  }
  function stateContext(el) {
    var stateData = el.parent().inheritedData('$uiView');
    if (stateData && stateData.state && stateData.state.name) {
      return stateData.state;
    }
  }
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
  $StateRefDirective.$inject = [
    '$state',
    '$timeout'
  ];
  function $StateRefDirective($state, $timeout) {
    var allowedOptions = [
        'location',
        'inherit',
        'reload',
        'absolute'
      ];
    return {
      restrict: 'A',
      require: [
        '?^uiSrefActive',
        '?^uiSrefActiveEq'
      ],
      link: function (scope, element, attrs, uiSrefActive) {
        var ref = parseStateRef(attrs.uiSref, $state.current.name);
        var params = null, url = null, base = stateContext(element) || $state.$current;
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var hrefKind = Object.prototype.toString.call(element.prop('href')) === '[object SVGAnimatedString]' ? 'xlink:href' : 'href';
        var newHref = null, isAnchor = element.prop('tagName').toUpperCase() === 'A';
        var isForm = element[0].nodeName === 'FORM';
        var attr = isForm ? 'action' : hrefKind, nav = true;
        var options = {
            relative: base,
            inherit: true
          };
        var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};
        angular.forEach(allowedOptions, function (option) {
          if (option in optionsOverride) {
            options[option] = optionsOverride[option];
          }
        });
        var update = function (newVal) {
          if (newVal)
            params = angular.copy(newVal);
          if (!nav)
            return;
          newHref = $state.href(ref.state, params, options);
          var activeDirective = uiSrefActive[1] || uiSrefActive[0];
          if (activeDirective) {
            activeDirective.$$addStateInfo(ref.state, params);
          }
          if (newHref === null) {
            nav = false;
            return false;
          }
          attrs.$set(attr, newHref);
        };
        if (ref.paramExpr) {
          scope.$watch(ref.paramExpr, function (newVal, oldVal) {
            if (newVal !== params)
              update(newVal);
          }, true);
          params = angular.copy(scope.$eval(ref.paramExpr));
        }
        update();
        if (isForm)
          return;
        element.bind('click', function (e) {
          var button = e.which || e.button;
          if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target'))) {
            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
            var transition = $timeout(function () {
                $state.go(ref.state, params, options);
              });
            e.preventDefault();
            // if the state has no URL, ignore one preventDefault from the <a> directive.
            var ignorePreventDefaultCount = isAnchor && !newHref ? 1 : 0;
            e.preventDefault = function () {
              if (ignorePreventDefaultCount-- <= 0)
                $timeout.cancel(transition);
            };
          }
        });
      }
    };
  }
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
  $StateRefActiveDirective.$inject = [
    '$state',
    '$stateParams',
    '$interpolate'
  ];
  function $StateRefActiveDirective($state, $stateParams, $interpolate) {
    return {
      restrict: 'A',
      controller: [
        '$scope',
        '$element',
        '$attrs',
        function ($scope, $element, $attrs) {
          var states = [], activeClass;
          // There probably isn't much point in $observing this
          // uiSrefActive and uiSrefActiveEq share the same directive object with some
          // slight difference in logic routing
          activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);
          // Allow uiSref to communicate with uiSrefActive[Equals]
          this.$$addStateInfo = function (newState, newParams) {
            var state = $state.get(newState, stateContext($element));
            states.push({
              state: state || { name: newState },
              params: newParams
            });
            update();
          };
          $scope.$on('$stateChangeSuccess', update);
          // Update route state
          function update() {
            if (anyMatch()) {
              $element.addClass(activeClass);
            } else {
              $element.removeClass(activeClass);
            }
          }
          function anyMatch() {
            for (var i = 0; i < states.length; i++) {
              if (isMatch(states[i].state, states[i].params)) {
                return true;
              }
            }
            return false;
          }
          function isMatch(state, params) {
            if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
              return $state.is(state.name, params);
            } else {
              return $state.includes(state.name, params);
            }
          }
        }
      ]
    };
  }
  angular.module('ui.router.state').directive('uiSref', $StateRefDirective).directive('uiSrefActive', $StateRefActiveDirective).directive('uiSrefActiveEq', $StateRefActiveDirective);
  /**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
  $IsStateFilter.$inject = ['$state'];
  function $IsStateFilter($state) {
    var isFilter = function (state) {
      return $state.is(state);
    };
    isFilter.$stateful = true;
    return isFilter;
  }
  /**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
  $IncludedByStateFilter.$inject = ['$state'];
  function $IncludedByStateFilter($state) {
    var includesFilter = function (state) {
      return $state.includes(state);
    };
    includesFilter.$stateful = true;
    return includesFilter;
  }
  angular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);
}(window, window.angular));
/**
 * @license AngularJS v1.2.28
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /* jshint maxlen: false */
  /**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * # ngAnimate
 *
 * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
 *
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 *
 * To see animations in action, all that is required is to define the appropriate CSS classes
 * or to register a JavaScript animation via the myModule.animation() function. The directives that support animation automatically are:
 * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
 * by using the `$animate` service.
 *
 * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
 *
 * | Directive                                                 | Supported Animations                               |
 * |---------------------------------------------------------- |----------------------------------------------------|
 * | {@link ng.directive:ngRepeat#usage_animations ngRepeat}         | enter, leave and move                              |
 * | {@link ngRoute.directive:ngView#usage_animations ngView}        | enter and leave                                    |
 * | {@link ng.directive:ngInclude#usage_animations ngInclude}       | enter and leave                                    |
 * | {@link ng.directive:ngSwitch#usage_animations ngSwitch}         | enter and leave                                    |
 * | {@link ng.directive:ngIf#usage_animations ngIf}                 | enter and leave                                    |
 * | {@link ng.directive:ngClass#usage_animations ngClass}           | add and remove                                     |
 * | {@link ng.directive:ngShow#usage_animations ngShow & ngHide}    | add and remove (the ng-hide class value)           |
 * | {@link ng.directive:form#usage_animations form}                 | add and remove (dirty, pristine, valid, invalid & all other validations)                |
 * | {@link ng.directive:ngModel#usage_animations ngModel}           | add and remove (dirty, pristine, valid, invalid & all other validations)                |
 *
 * You can find out more information about animations upon visiting each directive page.
 *
 * Below is an example of how to apply animations to a directive that supports animation hooks:
 *
 * ```html
 * <style type="text/css">
 * .slide.ng-enter, .slide.ng-leave {
 *   -webkit-transition:0.5s linear all;
 *   transition:0.5s linear all;
 * }
 *
 * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
 * .slide.ng-enter.ng-enter-active { } /&#42; terminal animations for enter &#42;/
 * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
 * .slide.ng-leave.ng-leave-active { } /&#42; terminal animations for leave &#42;/
 * </style>
 *
 * <!--
 * the animate service will automatically add .ng-enter and .ng-leave to the element
 * to trigger the CSS transition/animations
 * -->
 * <ANY class="slide" ng-include="..."></ANY>
 * ```
 *
 * Keep in mind that, by default, if an animation is running, any child elements cannot be animated
 * until the parent element's animation has completed. This blocking feature can be overridden by
 * placing the `ng-animate-children` attribute on a parent container tag.
 *
 * ```html
 * <div class="slide-animation" ng-if="on" ng-animate-children>
 *   <div class="fade-animation" ng-if="on">
 *     <div class="explode-animation" ng-if="on">
 *        ...
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * When the `on` expression value changes and an animation is triggered then each of the elements within
 * will all animate without the block being applied to child elements.
 *
 * <h2>CSS-defined Animations</h2>
 * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
 * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
 * and can be used to play along with this naming structure.
 *
 * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
 *
 * ```html
 * <style type="text/css">
 * /&#42;
 *  The animate class is apart of the element and the ng-enter class
 *  is attached to the element once the enter animation event is triggered
 * &#42;/
 * .reveal-animation.ng-enter {
 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
 *
 *  /&#42; The animation preparation code &#42;/
 *  opacity: 0;
 * }
 *
 * /&#42;
 *  Keep in mind that you want to combine both CSS
 *  classes together to avoid any CSS-specificity
 *  conflicts
 * &#42;/
 * .reveal-animation.ng-enter.ng-enter-active {
 *  /&#42; The animation code itself &#42;/
 *  opacity: 1;
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
 *
 * ```html
 * <style type="text/css">
 * .reveal-animation.ng-enter {
 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
 * }
 * @-webkit-keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * @keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
 *
 * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
 * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
 * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
 * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
 * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
 * has no CSS transition/animation classes applied to it.
 *
 * <h3>CSS Staggering Animations</h3>
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module, as of 1.2.0, supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   -webkit-transition: 1s linear all;
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   -webkit-transition-delay: 0.1s;
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then these two values
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   -webkit-transition-duration: 0s;
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if more than 10ms has passed after the last animation has been fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * $timeout(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 * }, 100, false);
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * <h2>JavaScript-defined Animations</h2>
 * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
 * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
 *
 * ```js
 * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
 * var ngModule = angular.module('YourApp', ['ngAnimate']);
 * ngModule.animation('.my-crazy-animation', function() {
 *   return {
 *     enter: function(element, done) {
 *       //run the animation here and call done when the animation is complete
 *       return function(cancelled) {
 *         //this (optional) function will be called when the animation
 *         //completes or when the animation is cancelled (the cancelled
 *         //flag will be set to true if cancelled).
 *       };
 *     },
 *     leave: function(element, done) { },
 *     move: function(element, done) { },
 *
 *     //animation that can be triggered before the class is added
 *     beforeAddClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is added
 *     addClass: function(element, className, done) { },
 *
 *     //animation that can be triggered before the class is removed
 *     beforeRemoveClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is removed
 *     removeClass: function(element, className, done) { }
 *   };
 * });
 * ```
 *
 * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
 * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
 * the element's CSS class attribute value and then run the matching animation event function (if found).
 * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
 * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
 *
 * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
 * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
 * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
 * or transition code that is defined via a stylesheet).
 *
 */
  angular.module('ngAnimate', ['ng']).directive('ngAnimateChildren', function () {
    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
    return function (scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (angular.isString(val) && val.length === 0) {
        //empty attribute
        element.data(NG_ANIMATE_CHILDREN, true);
      } else {
        scope.$watch(val, function (value) {
          element.data(NG_ANIMATE_CHILDREN, !!value);
        });
      }
    };
  }).factory('$$animateReflow', [
    '$$rAF',
    '$document',
    function ($$rAF, $document) {
      var bod = $document[0].body;
      return function (fn) {
        //the returned function acts as the cancellation function
        return $$rAF(function () {
          //the line below will force the browser to perform a repaint
          //so that all the animated elements within the animation frame
          //will be properly updated and drawn on screen. This is
          //required to perform multi-class CSS based animations with
          //Firefox. DO NOT REMOVE THIS LINE.
          var a = bod.offsetWidth + 1;
          fn();
        });
      };
    }
  ]).config([
    '$provide',
    '$animateProvider',
    function ($provide, $animateProvider) {
      var noop = angular.noop;
      var forEach = angular.forEach;
      var selectors = $animateProvider.$$selectors;
      var ELEMENT_NODE = 1;
      var NG_ANIMATE_STATE = '$$ngAnimateState';
      var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
      var NG_ANIMATE_CLASS_NAME = 'ng-animate';
      var rootAnimateState = { running: true };
      function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
          var elm = element[i];
          if (elm.nodeType == ELEMENT_NODE) {
            return elm;
          }
        }
      }
      function prepareElement(element) {
        return element && angular.element(element);
      }
      function stripCommentsFromElement(element) {
        return angular.element(extractElementNode(element));
      }
      function isMatchingElement(elm1, elm2) {
        return extractElementNode(elm1) == extractElementNode(elm2);
      }
      $provide.decorator('$animate', [
        '$delegate',
        '$injector',
        '$sniffer',
        '$rootElement',
        '$$asyncCallback',
        '$rootScope',
        '$document',
        function ($delegate, $injector, $sniffer, $rootElement, $$asyncCallback, $rootScope, $document) {
          var globalAnimationCounter = 0;
          $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);
          // disable animations during bootstrap, but once we bootstrapped, wait again
          // for another digest until enabling animations. The reason why we digest twice
          // is because all structural animations (enter, leave and move) all perform a
          // post digest operation before animating. If we only wait for a single digest
          // to pass then the structural animation would render its animation on page load.
          // (which is what we're trying to avoid when the application first boots up.)
          $rootScope.$$postDigest(function () {
            $rootScope.$$postDigest(function () {
              rootAnimateState.running = false;
            });
          });
          var classNameFilter = $animateProvider.classNameFilter();
          var isAnimatableClassName = !classNameFilter ? function () {
              return true;
            } : function (className) {
              return classNameFilter.test(className);
            };
          function blockElementAnimations(element) {
            var data = element.data(NG_ANIMATE_STATE) || {};
            data.running = true;
            element.data(NG_ANIMATE_STATE, data);
          }
          function lookup(name) {
            if (name) {
              var matches = [], flagMap = {}, classes = name.substr(1).split('.');
              //the empty string value is the default animation
              //operation which performs CSS transition and keyframe
              //animations sniffing. This is always included for each
              //element animation procedure if the browser supports
              //transitions and/or keyframe animations. The default
              //animation is added to the top of the list to prevent
              //any previous animations from affecting the element styling
              //prior to the element being animated.
              if ($sniffer.transitions || $sniffer.animations) {
                matches.push($injector.get(selectors['']));
              }
              for (var i = 0; i < classes.length; i++) {
                var klass = classes[i], selectorFactoryName = selectors[klass];
                if (selectorFactoryName && !flagMap[klass]) {
                  matches.push($injector.get(selectorFactoryName));
                  flagMap[klass] = true;
                }
              }
              return matches;
            }
          }
          function animationRunner(element, animationEvent, className) {
            //transcluded directives may sometimes fire an animation using only comment nodes
            //best to catch this early on to prevent any animation operations from occurring
            var node = element[0];
            if (!node) {
              return;
            }
            var isSetClassOperation = animationEvent == 'setClass';
            var isClassBased = isSetClassOperation || animationEvent == 'addClass' || animationEvent == 'removeClass';
            var classNameAdd, classNameRemove;
            if (angular.isArray(className)) {
              classNameAdd = className[0];
              classNameRemove = className[1];
              className = classNameAdd + ' ' + classNameRemove;
            }
            var currentClassName = element.attr('class');
            var classes = currentClassName + ' ' + className;
            if (!isAnimatableClassName(classes)) {
              return;
            }
            var beforeComplete = noop, beforeCancel = [], before = [], afterComplete = noop, afterCancel = [], after = [];
            var animationLookup = (' ' + classes).replace(/\s+/g, '.');
            forEach(lookup(animationLookup), function (animationFactory) {
              var created = registerAnimation(animationFactory, animationEvent);
              if (!created && isSetClassOperation) {
                registerAnimation(animationFactory, 'addClass');
                registerAnimation(animationFactory, 'removeClass');
              }
            });
            function registerAnimation(animationFactory, event) {
              var afterFn = animationFactory[event];
              var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
              if (afterFn || beforeFn) {
                if (event == 'leave') {
                  beforeFn = afterFn;
                  //when set as null then animation knows to skip this phase
                  afterFn = null;
                }
                after.push({
                  event: event,
                  fn: afterFn
                });
                before.push({
                  event: event,
                  fn: beforeFn
                });
                return true;
              }
            }
            function run(fns, cancellations, allCompleteFn) {
              var animations = [];
              forEach(fns, function (animation) {
                animation.fn && animations.push(animation);
              });
              var count = 0;
              function afterAnimationComplete(index) {
                if (cancellations) {
                  (cancellations[index] || noop)();
                  if (++count < animations.length)
                    return;
                  cancellations = null;
                }
                allCompleteFn();
              }
              //The code below adds directly to the array in order to work with
              //both sync and async animations. Sync animations are when the done()
              //operation is called right away. DO NOT REFACTOR!
              forEach(animations, function (animation, index) {
                var progress = function () {
                  afterAnimationComplete(index);
                };
                switch (animation.event) {
                case 'setClass':
                  cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress));
                  break;
                case 'addClass':
                  cancellations.push(animation.fn(element, classNameAdd || className, progress));
                  break;
                case 'removeClass':
                  cancellations.push(animation.fn(element, classNameRemove || className, progress));
                  break;
                default:
                  cancellations.push(animation.fn(element, progress));
                  break;
                }
              });
              if (cancellations && cancellations.length === 0) {
                allCompleteFn();
              }
            }
            return {
              node: node,
              event: animationEvent,
              className: className,
              isClassBased: isClassBased,
              isSetClassOperation: isSetClassOperation,
              before: function (allCompleteFn) {
                beforeComplete = allCompleteFn;
                run(before, beforeCancel, function () {
                  beforeComplete = noop;
                  allCompleteFn();
                });
              },
              after: function (allCompleteFn) {
                afterComplete = allCompleteFn;
                run(after, afterCancel, function () {
                  afterComplete = noop;
                  allCompleteFn();
                });
              },
              cancel: function () {
                if (beforeCancel) {
                  forEach(beforeCancel, function (cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  beforeComplete(true);
                }
                if (afterCancel) {
                  forEach(afterCancel, function (cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  afterComplete(true);
                }
              }
            };
          }
          /**
       * @ngdoc service
       * @name $animate
       * @kind function
       *
       * @description
       * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
       * When any of these operations are run, the $animate service
       * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
       * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
       *
       * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
       * will work out of the box without any extra configuration.
       *
       * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
       *
       * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
       *
       */
          return {
            enter: function (element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);
              blockElementAnimations(element);
              $delegate.enter(element, parentElement, afterElement);
              $rootScope.$$postDigest(function () {
                element = stripCommentsFromElement(element);
                performAnimation('enter', 'ng-enter', element, parentElement, afterElement, noop, doneCallback);
              });
            },
            leave: function (element, doneCallback) {
              element = angular.element(element);
              cancelChildAnimations(element);
              blockElementAnimations(element);
              $rootScope.$$postDigest(function () {
                performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function () {
                  $delegate.leave(element);
                }, doneCallback);
              });
            },
            move: function (element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);
              cancelChildAnimations(element);
              blockElementAnimations(element);
              $delegate.move(element, parentElement, afterElement);
              $rootScope.$$postDigest(function () {
                element = stripCommentsFromElement(element);
                performAnimation('move', 'ng-move', element, parentElement, afterElement, noop, doneCallback);
              });
            },
            addClass: function (element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('addClass', className, element, null, null, function () {
                $delegate.addClass(element, className);
              }, doneCallback);
            },
            removeClass: function (element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('removeClass', className, element, null, null, function () {
                $delegate.removeClass(element, className);
              }, doneCallback);
            },
            setClass: function (element, add, remove, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('setClass', [
                add,
                remove
              ], element, null, null, function () {
                $delegate.setClass(element, add, remove);
              }, doneCallback);
            },
            enabled: function (value, element) {
              switch (arguments.length) {
              case 2:
                if (value) {
                  cleanup(element);
                } else {
                  var data = element.data(NG_ANIMATE_STATE) || {};
                  data.disabled = true;
                  element.data(NG_ANIMATE_STATE, data);
                }
                break;
              case 1:
                rootAnimateState.disabled = !value;
                break;
              default:
                value = !rootAnimateState.disabled;
                break;
              }
              return !!value;
            }
          };
          /*
        all animations call this shared animation triggering function internally.
        The animationEvent variable refers to the JavaScript animation event that will be triggered
        and the className value is the name of the animation that will be applied within the
        CSS code. Element, parentElement and afterElement are provided DOM elements for the animation
        and the onComplete callback will be fired once the animation is fully complete.
      */
          function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, doneCallback) {
            var runner = animationRunner(element, animationEvent, className);
            if (!runner) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }
            className = runner.className;
            var elementEvents = angular.element._data(runner.node);
            elementEvents = elementEvents && elementEvents.events;
            if (!parentElement) {
              parentElement = afterElement ? afterElement.parent() : element.parent();
            }
            var ngAnimateState = element.data(NG_ANIMATE_STATE) || {};
            var runningAnimations = ngAnimateState.active || {};
            var totalActiveAnimations = ngAnimateState.totalActive || 0;
            var lastAnimation = ngAnimateState.last;
            //only allow animations if the currently running animation is not structural
            //or if there is no animation running at all
            var skipAnimations;
            if (runner.isClassBased) {
              skipAnimations = ngAnimateState.running || ngAnimateState.disabled || lastAnimation && !lastAnimation.isClassBased;
            }
            //skip the animation if animations are disabled, a parent is already being animated,
            //the element is not currently attached to the document body or then completely close
            //the animation if any matching animations are not found at all.
            //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
            if (skipAnimations || animationsDisabled(element, parentElement)) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }
            var skipAnimation = false;
            if (totalActiveAnimations > 0) {
              var animationsToCancel = [];
              if (!runner.isClassBased) {
                if (animationEvent == 'leave' && runningAnimations['ng-leave']) {
                  skipAnimation = true;
                } else {
                  //cancel all animations when a structural animation takes place
                  for (var klass in runningAnimations) {
                    animationsToCancel.push(runningAnimations[klass]);
                    cleanup(element, klass);
                  }
                  runningAnimations = {};
                  totalActiveAnimations = 0;
                }
              } else if (lastAnimation.event == 'setClass') {
                animationsToCancel.push(lastAnimation);
                cleanup(element, className);
              } else if (runningAnimations[className]) {
                var current = runningAnimations[className];
                if (current.event == animationEvent) {
                  skipAnimation = true;
                } else {
                  animationsToCancel.push(current);
                  cleanup(element, className);
                }
              }
              if (animationsToCancel.length > 0) {
                forEach(animationsToCancel, function (operation) {
                  operation.cancel();
                });
              }
            }
            if (runner.isClassBased && !runner.isSetClassOperation && !skipAnimation) {
              skipAnimation = animationEvent == 'addClass' == element.hasClass(className);  //opposite of XOR
            }
            if (skipAnimation) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              fireDoneCallbackAsync();
              return;
            }
            if (animationEvent == 'leave') {
              //there's no need to ever remove the listener since the element
              //will be removed (destroyed) after the leave animation ends or
              //is cancelled midway
              element.one('$destroy', function (e) {
                var element = angular.element(this);
                var state = element.data(NG_ANIMATE_STATE);
                if (state) {
                  var activeLeaveAnimation = state.active['ng-leave'];
                  if (activeLeaveAnimation) {
                    activeLeaveAnimation.cancel();
                    cleanup(element, 'ng-leave');
                  }
                }
              });
            }
            //the ng-animate class does nothing, but it's here to allow for
            //parent animations to find and cancel child animations when needed
            element.addClass(NG_ANIMATE_CLASS_NAME);
            var localAnimationCount = globalAnimationCounter++;
            totalActiveAnimations++;
            runningAnimations[className] = runner;
            element.data(NG_ANIMATE_STATE, {
              last: runner,
              active: runningAnimations,
              index: localAnimationCount,
              totalActive: totalActiveAnimations
            });
            //first we run the before animations and when all of those are complete
            //then we perform the DOM operation and run the next set of animations
            fireBeforeCallbackAsync();
            runner.before(function (cancelled) {
              var data = element.data(NG_ANIMATE_STATE);
              cancelled = cancelled || !data || !data.active[className] || runner.isClassBased && data.active[className].event != animationEvent;
              fireDOMOperation();
              if (cancelled === true) {
                closeAnimation();
              } else {
                fireAfterCallbackAsync();
                runner.after(closeAnimation);
              }
            });
            function fireDOMCallback(animationPhase) {
              var eventName = '$animate:' + animationPhase;
              if (elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
                $$asyncCallback(function () {
                  element.triggerHandler(eventName, {
                    event: animationEvent,
                    className: className
                  });
                });
              }
            }
            function fireBeforeCallbackAsync() {
              fireDOMCallback('before');
            }
            function fireAfterCallbackAsync() {
              fireDOMCallback('after');
            }
            function fireDoneCallbackAsync() {
              fireDOMCallback('close');
              if (doneCallback) {
                $$asyncCallback(function () {
                  doneCallback();
                });
              }
            }
            //it is less complicated to use a flag than managing and canceling
            //timeouts containing multiple callbacks.
            function fireDOMOperation() {
              if (!fireDOMOperation.hasBeenRun) {
                fireDOMOperation.hasBeenRun = true;
                domOperation();
              }
            }
            function closeAnimation() {
              if (!closeAnimation.hasBeenRun) {
                closeAnimation.hasBeenRun = true;
                var data = element.data(NG_ANIMATE_STATE);
                if (data) {
                  /* only structural animations wait for reflow before removing an
                 animation, but class-based animations don't. An example of this
                 failing would be when a parent HTML tag has a ng-class attribute
                 causing ALL directives below to skip animations during the digest */
                  if (runner && runner.isClassBased) {
                    cleanup(element, className);
                  } else {
                    $$asyncCallback(function () {
                      var data = element.data(NG_ANIMATE_STATE) || {};
                      if (localAnimationCount == data.index) {
                        cleanup(element, className, animationEvent);
                      }
                    });
                    element.data(NG_ANIMATE_STATE, data);
                  }
                }
                fireDoneCallbackAsync();
              }
            }
          }
          function cancelChildAnimations(element) {
            var node = extractElementNode(element);
            if (node) {
              var nodes = angular.isFunction(node.getElementsByClassName) ? node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) : node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
              forEach(nodes, function (element) {
                element = angular.element(element);
                var data = element.data(NG_ANIMATE_STATE);
                if (data && data.active) {
                  forEach(data.active, function (runner) {
                    runner.cancel();
                  });
                }
              });
            }
          }
          function cleanup(element, className) {
            if (isMatchingElement(element, $rootElement)) {
              if (!rootAnimateState.disabled) {
                rootAnimateState.running = false;
                rootAnimateState.structural = false;
              }
            } else if (className) {
              var data = element.data(NG_ANIMATE_STATE) || {};
              var removeAnimations = className === true;
              if (!removeAnimations && data.active && data.active[className]) {
                data.totalActive--;
                delete data.active[className];
              }
              if (removeAnimations || !data.totalActive) {
                element.removeClass(NG_ANIMATE_CLASS_NAME);
                element.removeData(NG_ANIMATE_STATE);
              }
            }
          }
          function animationsDisabled(element, parentElement) {
            if (rootAnimateState.disabled) {
              return true;
            }
            if (isMatchingElement(element, $rootElement)) {
              return rootAnimateState.running;
            }
            var allowChildAnimations, parentRunningAnimation, hasParent;
            do {
              //the element did not reach the root element which means that it
              //is not apart of the DOM. Therefore there is no reason to do
              //any animations on it
              if (parentElement.length === 0)
                break;
              var isRoot = isMatchingElement(parentElement, $rootElement);
              var state = isRoot ? rootAnimateState : parentElement.data(NG_ANIMATE_STATE) || {};
              if (state.disabled) {
                return true;
              }
              //no matter what, for an animation to work it must reach the root element
              //this implies that the element is attached to the DOM when the animation is run
              if (isRoot) {
                hasParent = true;
              }
              //once a flag is found that is strictly false then everything before
              //it will be discarded and all child animations will be restricted
              if (allowChildAnimations !== false) {
                var animateChildrenFlag = parentElement.data(NG_ANIMATE_CHILDREN);
                if (angular.isDefined(animateChildrenFlag)) {
                  allowChildAnimations = animateChildrenFlag;
                }
              }
              parentRunningAnimation = parentRunningAnimation || state.running || state.last && !state.last.isClassBased;
            } while (parentElement = parentElement.parent());
            return !hasParent || !allowChildAnimations && parentRunningAnimation;
          }
        }
      ]);
      $animateProvider.register('', [
        '$window',
        '$sniffer',
        '$timeout',
        '$$animateReflow',
        function ($window, $sniffer, $timeout, $$animateReflow) {
          // Detect proper transitionend/animationend event names.
          var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;
          // If unprefixed events are not supported but webkit-prefixed are, use the latter.
          // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
          // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
          // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
          // Register both events in case `window.onanimationend` is not supported because of that,
          // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
          // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
          // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
          if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
            CSS_PREFIX = '-webkit-';
            TRANSITION_PROP = 'WebkitTransition';
            TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
          } else {
            TRANSITION_PROP = 'transition';
            TRANSITIONEND_EVENT = 'transitionend';
          }
          if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
            CSS_PREFIX = '-webkit-';
            ANIMATION_PROP = 'WebkitAnimation';
            ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
          } else {
            ANIMATION_PROP = 'animation';
            ANIMATIONEND_EVENT = 'animationend';
          }
          var DURATION_KEY = 'Duration';
          var PROPERTY_KEY = 'Property';
          var DELAY_KEY = 'Delay';
          var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
          var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
          var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
          var NG_ANIMATE_BLOCK_CLASS_NAME = 'ng-animate-block-transitions';
          var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
          var CLOSING_TIME_BUFFER = 1.5;
          var ONE_SECOND = 1000;
          var lookupCache = {};
          var parentCounter = 0;
          var animationReflowQueue = [];
          var cancelAnimationReflow;
          function clearCacheAfterReflow() {
            if (!cancelAnimationReflow) {
              cancelAnimationReflow = $$animateReflow(function () {
                animationReflowQueue = [];
                cancelAnimationReflow = null;
                lookupCache = {};
              });
            }
          }
          function afterReflow(element, callback) {
            if (cancelAnimationReflow) {
              cancelAnimationReflow();
            }
            animationReflowQueue.push(callback);
            cancelAnimationReflow = $$animateReflow(function () {
              forEach(animationReflowQueue, function (fn) {
                fn();
              });
              animationReflowQueue = [];
              cancelAnimationReflow = null;
              lookupCache = {};
            });
          }
          var closingTimer = null;
          var closingTimestamp = 0;
          var animationElementQueue = [];
          function animationCloseHandler(element, totalTime) {
            var node = extractElementNode(element);
            element = angular.element(node);
            //this item will be garbage collected by the closing
            //animation timeout
            animationElementQueue.push(element);
            //but it may not need to cancel out the existing timeout
            //if the timestamp is less than the previous one
            var futureTimestamp = Date.now() + totalTime;
            if (futureTimestamp <= closingTimestamp) {
              return;
            }
            $timeout.cancel(closingTimer);
            closingTimestamp = futureTimestamp;
            closingTimer = $timeout(function () {
              closeAllAnimations(animationElementQueue);
              animationElementQueue = [];
            }, totalTime, false);
          }
          function closeAllAnimations(elements) {
            forEach(elements, function (element) {
              var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
              if (elementData) {
                (elementData.closeAnimationFn || noop)();
              }
            });
          }
          function getElementAnimationDetails(element, cacheKey) {
            var data = cacheKey ? lookupCache[cacheKey] : null;
            if (!data) {
              var transitionDuration = 0;
              var transitionDelay = 0;
              var animationDuration = 0;
              var animationDelay = 0;
              var transitionDelayStyle;
              var animationDelayStyle;
              var transitionDurationStyle;
              var transitionPropertyStyle;
              //we want all the styles defined before and after
              forEach(element, function (element) {
                if (element.nodeType == ELEMENT_NODE) {
                  var elementStyles = $window.getComputedStyle(element) || {};
                  transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];
                  transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);
                  transitionPropertyStyle = elementStyles[TRANSITION_PROP + PROPERTY_KEY];
                  transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];
                  transitionDelay = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);
                  animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];
                  animationDelay = Math.max(parseMaxTime(animationDelayStyle), animationDelay);
                  var aDuration = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);
                  if (aDuration > 0) {
                    aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
                  }
                  animationDuration = Math.max(aDuration, animationDuration);
                }
              });
              data = {
                total: 0,
                transitionPropertyStyle: transitionPropertyStyle,
                transitionDurationStyle: transitionDurationStyle,
                transitionDelayStyle: transitionDelayStyle,
                transitionDelay: transitionDelay,
                transitionDuration: transitionDuration,
                animationDelayStyle: animationDelayStyle,
                animationDelay: animationDelay,
                animationDuration: animationDuration
              };
              if (cacheKey) {
                lookupCache[cacheKey] = data;
              }
            }
            return data;
          }
          function parseMaxTime(str) {
            var maxValue = 0;
            var values = angular.isString(str) ? str.split(/\s*,\s*/) : [];
            forEach(values, function (value) {
              maxValue = Math.max(parseFloat(value) || 0, maxValue);
            });
            return maxValue;
          }
          function getCacheKey(element) {
            var parentElement = element.parent();
            var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
            if (!parentID) {
              parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
              parentID = parentCounter;
            }
            return parentID + '-' + extractElementNode(element).getAttribute('class');
          }
          function animateSetup(animationEvent, element, className, calculationDecorator) {
            var cacheKey = getCacheKey(element);
            var eventCacheKey = cacheKey + ' ' + className;
            var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;
            var stagger = {};
            if (itemIndex > 0) {
              var staggerClassName = className + '-stagger';
              var staggerCacheKey = cacheKey + ' ' + staggerClassName;
              var applyClasses = !lookupCache[staggerCacheKey];
              applyClasses && element.addClass(staggerClassName);
              stagger = getElementAnimationDetails(element, staggerCacheKey);
              applyClasses && element.removeClass(staggerClassName);
            }
            /* the animation itself may need to add/remove special CSS classes
         * before calculating the anmation styles */
            calculationDecorator = calculationDecorator || function (fn) {
              return fn();
            };
            element.addClass(className);
            var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};
            var timings = calculationDecorator(function () {
                return getElementAnimationDetails(element, eventCacheKey);
              });
            var transitionDuration = timings.transitionDuration;
            var animationDuration = timings.animationDuration;
            if (transitionDuration === 0 && animationDuration === 0) {
              element.removeClass(className);
              return false;
            }
            element.data(NG_ANIMATE_CSS_DATA_KEY, {
              running: formerData.running || 0,
              itemIndex: itemIndex,
              stagger: stagger,
              timings: timings,
              closeAnimationFn: noop
            });
            //temporarily disable the transition so that the enter styles
            //don't animate twice (this is here to avoid a bug in Chrome/FF).
            var isCurrentlyAnimating = formerData.running > 0 || animationEvent == 'setClass';
            if (transitionDuration > 0) {
              blockTransitions(element, className, isCurrentlyAnimating);
            }
            //staggering keyframe animations work by adjusting the `animation-delay` CSS property
            //on the given element, however, the delay value can only calculated after the reflow
            //since by that time $animate knows how many elements are being animated. Therefore,
            //until the reflow occurs the element needs to be blocked (where the keyframe animation
            //is set to `none 0s`). This blocking mechanism should only be set for when a stagger
            //animation is detected and when the element item index is greater than 0.
            if (animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0) {
              blockKeyframeAnimations(element);
            }
            return true;
          }
          function isStructuralAnimation(className) {
            return className == 'ng-enter' || className == 'ng-move' || className == 'ng-leave';
          }
          function blockTransitions(element, className, isAnimating) {
            if (isStructuralAnimation(className) || !isAnimating) {
              extractElementNode(element).style[TRANSITION_PROP + PROPERTY_KEY] = 'none';
            } else {
              element.addClass(NG_ANIMATE_BLOCK_CLASS_NAME);
            }
          }
          function blockKeyframeAnimations(element) {
            extractElementNode(element).style[ANIMATION_PROP] = 'none 0s';
          }
          function unblockTransitions(element, className) {
            var prop = TRANSITION_PROP + PROPERTY_KEY;
            var node = extractElementNode(element);
            if (node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
            element.removeClass(NG_ANIMATE_BLOCK_CLASS_NAME);
          }
          function unblockKeyframeAnimations(element) {
            var prop = ANIMATION_PROP;
            var node = extractElementNode(element);
            if (node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
          }
          function animateRun(animationEvent, element, className, activeAnimationComplete) {
            var node = extractElementNode(element);
            var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if (node.getAttribute('class').indexOf(className) == -1 || !elementData) {
              activeAnimationComplete();
              return;
            }
            var activeClassName = '';
            forEach(className.split(' '), function (klass, i) {
              activeClassName += (i > 0 ? ' ' : '') + klass + '-active';
            });
            var stagger = elementData.stagger;
            var timings = elementData.timings;
            var itemIndex = elementData.itemIndex;
            var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
            var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
            var maxDelayTime = maxDelay * ONE_SECOND;
            var startTime = Date.now();
            var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;
            var style = '', appliedStyles = [];
            if (timings.transitionDuration > 0) {
              var propertyStyle = timings.transitionPropertyStyle;
              if (propertyStyle.indexOf('all') == -1) {
                style += CSS_PREFIX + 'transition-property: ' + propertyStyle + ';';
                style += CSS_PREFIX + 'transition-duration: ' + timings.transitionDurationStyle + ';';
                appliedStyles.push(CSS_PREFIX + 'transition-property');
                appliedStyles.push(CSS_PREFIX + 'transition-duration');
              }
            }
            if (itemIndex > 0) {
              if (stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
                var delayStyle = timings.transitionDelayStyle;
                style += CSS_PREFIX + 'transition-delay: ' + prepareStaggerDelay(delayStyle, stagger.transitionDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'transition-delay');
              }
              if (stagger.animationDelay > 0 && stagger.animationDuration === 0) {
                style += CSS_PREFIX + 'animation-delay: ' + prepareStaggerDelay(timings.animationDelayStyle, stagger.animationDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'animation-delay');
              }
            }
            if (appliedStyles.length > 0) {
              //the element being animated may sometimes contain comment nodes in
              //the jqLite object, so we're safe to use a single variable to house
              //the styles since there is always only one element being animated
              var oldStyle = node.getAttribute('style') || '';
              node.setAttribute('style', oldStyle + '; ' + style);
            }
            element.on(css3AnimationEvents, onAnimationProgress);
            element.addClass(activeClassName);
            elementData.closeAnimationFn = function () {
              onEnd();
              activeAnimationComplete();
            };
            var staggerTime = itemIndex * (Math.max(stagger.animationDelay, stagger.transitionDelay) || 0);
            var animationTime = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
            var totalTime = (staggerTime + animationTime) * ONE_SECOND;
            elementData.running++;
            animationCloseHandler(element, totalTime);
            return onEnd;
            // This will automatically be called by $animate so
            // there is no need to attach this internally to the
            // timeout done method.
            function onEnd(cancelled) {
              element.off(css3AnimationEvents, onAnimationProgress);
              element.removeClass(activeClassName);
              animateClose(element, className);
              var node = extractElementNode(element);
              for (var i in appliedStyles) {
                node.style.removeProperty(appliedStyles[i]);
              }
            }
            function onAnimationProgress(event) {
              event.stopPropagation();
              var ev = event.originalEvent || event;
              var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();
              /* Firefox (or possibly just Gecko) likes to not round values up
           * when a ms measurement is used for the animation */
              var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));
              /* $manualTimeStamp is a mocked timeStamp value which is set
           * within browserTrigger(). This is only here so that tests can
           * mock animations properly. Real events fallback to event.timeStamp,
           * or, if they don't, then a timeStamp is automatically created for them.
           * We're checking to see if the timeStamp surpasses the expected delay,
           * but we're using elapsedTime instead of the timeStamp on the 2nd
           * pre-condition since animations sometimes close off early */
              if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                activeAnimationComplete();
              }
            }
          }
          function prepareStaggerDelay(delayStyle, staggerDelay, index) {
            var style = '';
            forEach(delayStyle.split(','), function (val, i) {
              style += (i > 0 ? ',' : '') + (index * staggerDelay + parseInt(val, 10)) + 's';
            });
            return style;
          }
          function animateBefore(animationEvent, element, className, calculationDecorator) {
            if (animateSetup(animationEvent, element, className, calculationDecorator)) {
              return function (cancelled) {
                cancelled && animateClose(element, className);
              };
            }
          }
          function animateAfter(animationEvent, element, className, afterAnimationComplete) {
            if (element.data(NG_ANIMATE_CSS_DATA_KEY)) {
              return animateRun(animationEvent, element, className, afterAnimationComplete);
            } else {
              animateClose(element, className);
              afterAnimationComplete();
            }
          }
          function animate(animationEvent, element, className, animationComplete) {
            //If the animateSetup function doesn't bother returning a
            //cancellation function then it means that there is no animation
            //to perform at all
            var preReflowCancellation = animateBefore(animationEvent, element, className);
            if (!preReflowCancellation) {
              clearCacheAfterReflow();
              animationComplete();
              return;
            }
            //There are two cancellation functions: one is before the first
            //reflow animation and the second is during the active state
            //animation. The first function will take care of removing the
            //data from the element which will not make the 2nd animation
            //happen in the first place
            var cancel = preReflowCancellation;
            afterReflow(element, function () {
              unblockTransitions(element, className);
              unblockKeyframeAnimations(element);
              //once the reflow is complete then we point cancel to
              //the new cancellation function which will remove all of the
              //animation properties from the active animation
              cancel = animateAfter(animationEvent, element, className, animationComplete);
            });
            return function (cancelled) {
              (cancel || noop)(cancelled);
            };
          }
          function animateClose(element, className) {
            element.removeClass(className);
            var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if (data) {
              if (data.running) {
                data.running--;
              }
              if (!data.running || data.running === 0) {
                element.removeData(NG_ANIMATE_CSS_DATA_KEY);
              }
            }
          }
          return {
            enter: function (element, animationCompleted) {
              return animate('enter', element, 'ng-enter', animationCompleted);
            },
            leave: function (element, animationCompleted) {
              return animate('leave', element, 'ng-leave', animationCompleted);
            },
            move: function (element, animationCompleted) {
              return animate('move', element, 'ng-move', animationCompleted);
            },
            beforeSetClass: function (element, add, remove, animationCompleted) {
              var className = suffixClasses(remove, '-remove') + ' ' + suffixClasses(add, '-add');
              var cancellationMethod = animateBefore('setClass', element, className, function (fn) {
                  /* when classes are removed from an element then the transition style
             * that is applied is the transition defined on the element without the
             * CSS class being there. This is how CSS3 functions outside of ngAnimate.
             * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                  var klass = element.attr('class');
                  element.removeClass(remove);
                  element.addClass(add);
                  var timings = fn();
                  element.attr('class', klass);
                  return timings;
                });
              if (cancellationMethod) {
                afterReflow(element, function () {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              clearCacheAfterReflow();
              animationCompleted();
            },
            beforeAddClass: function (element, className, animationCompleted) {
              var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), function (fn) {
                  /* when a CSS class is added to an element then the transition style that
             * is applied is the transition defined on the element when the CSS class
             * is added at the time of the animation. This is how CSS3 functions
             * outside of ngAnimate. */
                  element.addClass(className);
                  var timings = fn();
                  element.removeClass(className);
                  return timings;
                });
              if (cancellationMethod) {
                afterReflow(element, function () {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              clearCacheAfterReflow();
              animationCompleted();
            },
            setClass: function (element, add, remove, animationCompleted) {
              remove = suffixClasses(remove, '-remove');
              add = suffixClasses(add, '-add');
              var className = remove + ' ' + add;
              return animateAfter('setClass', element, className, animationCompleted);
            },
            addClass: function (element, className, animationCompleted) {
              return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted);
            },
            beforeRemoveClass: function (element, className, animationCompleted) {
              var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), function (fn) {
                  /* when classes are removed from an element then the transition style
             * that is applied is the transition defined on the element without the
             * CSS class being there. This is how CSS3 functions outside of ngAnimate.
             * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                  var klass = element.attr('class');
                  element.removeClass(className);
                  var timings = fn();
                  element.attr('class', klass);
                  return timings;
                });
              if (cancellationMethod) {
                afterReflow(element, function () {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },
            removeClass: function (element, className, animationCompleted) {
              return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted);
            }
          };
          function suffixClasses(classes, suffix) {
            var className = '';
            classes = angular.isArray(classes) ? classes : classes.split(/\s+/);
            forEach(classes, function (klass, i) {
              if (klass && klass.length > 0) {
                className += (i > 0 ? ' ' : '') + klass + suffix;
              }
            });
            return className;
          }
        }
      ]);
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.2.28
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  var $resourceMinErr = angular.$$minErr('$resource');
  // Helper functions and regex to lookup a dotted path on an object
  // stopping at undefined/null.  The path must be composed of ASCII
  // identifiers (just like $parse)
  var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;
  function isValidDottedPath(path) {
    return path != null && path !== '' && path !== 'hasOwnProperty' && MEMBER_NAME_REGEX.test('.' + path);
  }
  function lookupDottedPath(obj, path) {
    if (!isValidDottedPath(path)) {
      throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
    }
    var keys = path.split('.');
    for (var i = 0, ii = keys.length; i < ii && obj !== undefined; i++) {
      var key = keys[i];
      obj = obj !== null ? obj[key] : undefined;
    }
    return obj;
  }
  /**
 * Create a shallow copy of an object and clear other fields from the destination
 */
  function shallowClearAndCopy(src, dst) {
    dst = dst || {};
    angular.forEach(dst, function (value, key) {
      delete dst[key];
    });
    for (var key in src) {
      if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
    return dst;
  }
  /**
 * @ngdoc module
 * @name ngResource
 * @description
 *
 * # ngResource
 *
 * The `ngResource` module provides interaction support with RESTful services
 * via the $resource service.
 *
 *
 * <div doc-module-components="ngResource"></div>
 *
 * See {@link ngResource.$resource `$resource`} for usage.
 */
  /**
 * @ngdoc service
 * @name $resource
 * @requires $http
 *
 * @description
 * A factory which creates a resource object that lets you interact with
 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
 *
 * The returned resource object has action methods which provide high-level behaviors without
 * the need to interact with the low level {@link ng.$http $http} service.
 *
 * Requires the {@link ngResource `ngResource`} module to be installed.
 *
 * @param {string} url A parametrized URL template with parameters prefixed by `:` as in
 *   `/user/:username`. If you are using a URL with a port number (e.g.
 *   `http://example.com:8080/api`), it will be respected.
 *
 *   If you are using a url with a suffix, just add the suffix, like this:
 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
 *   can escape it with `/\.`.
 *
 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
 *   `actions` methods. If any of the parameter value is a function, it will be executed every time
 *   when a param value needs to be obtained for a request (unless the param was overridden).
 *
 *   Each key value in the parameter object is first bound to url template if present and then any
 *   excess keys are appended to the url search query after the `?`.
 *
 *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
 *   URL `/path/greet?salutation=Hello`.
 *
 *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted
 *   from the corresponding property on the `data` object (provided when calling an action method).  For
 *   example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`
 *   will be `data.someProp`.
 *
 * @param {Object.<Object>=} actions Hash with declaration of custom action that should extend
 *   the default set of resource actions. The declaration should be created in the format of {@link
 *   ng.$http#usage_parameters $http.config}:
 *
 *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
 *        action2: {method:?, params:?, isArray:?, headers:?, ...},
 *        ...}
 *
 *   Where:
 *
 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
 *     your resource object.
 *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
 *     `DELETE`, `JSONP`, etc).
 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
 *     the parameter value is a function, it will be executed every time when a param value needs to
 *     be obtained for a request (unless the param was overridden).
 *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
 *     like for the resource-level urls.
 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
 *     see `returns` section.
 *   - **`transformRequest`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     request body and headers and returns its transformed (typically serialized) version.
 *     By default, transformRequest will contain one function that checks if the request data is
 *     an object and serializes to using `angular.toJson`. To prevent this behavior, set
 *     `transformRequest` to an empty array: `transformRequest: []`
 *   - **`transformResponse`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     response body and headers and returns its transformed (typically deserialized) version.
 *     By default, transformResponse will contain one function that checks if the response looks like
 *     a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set
 *     `transformResponse` to an empty array: `transformResponse: []`
 *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
 *     GET request, otherwise if a cache instance built with
 *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
 *     caching.
 *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that
 *     should abort the request when resolved.
 *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
 *     XHR object. See
 *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
 *     for more information.
 *   - **`responseType`** - `{string}` - see
 *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
 *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
 *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
 *     with `http response` object. See {@link ng.$http $http interceptors}.
 *
 * @returns {Object} A resource "class" object with methods for the default set of resource actions
 *   optionally extended with custom `actions`. The default set contains these actions:
 *   ```js
 *   { 'get':    {method:'GET'},
 *     'save':   {method:'POST'},
 *     'query':  {method:'GET', isArray:true},
 *     'remove': {method:'DELETE'},
 *     'delete': {method:'DELETE'} };
 *   ```
 *
 *   Calling these methods invoke an {@link ng.$http} with the specified http method,
 *   destination and parameters. When the data is returned from the server then the object is an
 *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
 *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
 *   read, update, delete) on server-side data like this:
 *   ```js
 *   var User = $resource('/user/:userId', {userId:'@id'});
 *   var user = User.get({userId:123}, function() {
 *     user.abc = true;
 *     user.$save();
 *   });
 *   ```
 *
 *   It is important to realize that invoking a $resource object method immediately returns an
 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
 *   server the existing reference is populated with the actual data. This is a useful trick since
 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
 *   object results in no rendering, once the data arrives from the server then the object is
 *   populated with the data and the view automatically re-renders itself showing the new data. This
 *   means that in most cases one never has to write a callback function for the action methods.
 *
 *   The action methods on the class object or instance object can be invoked with the following
 *   parameters:
 *
 *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
 *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
 *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
 *
 *   Success callback is called with (value, responseHeaders) arguments. Error callback is called
 *   with (httpResponse) argument.
 *
 *   Class actions return empty instance (with additional properties below).
 *   Instance actions return promise of the action.
 *
 *   The Resource instances and collection have these additional properties:
 *
 *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
 *     instance or collection.
 *
 *     On success, the promise is resolved with the same resource instance or collection object,
 *     updated with data from server. This makes it easy to use in
 *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
 *     rendering until the resource(s) are loaded.
 *
 *     On failure, the promise is resolved with the {@link ng.$http http response} object, without
 *     the `resource` property.
 *
 *     If an interceptor object was provided, the promise will instead be resolved with the value
 *     returned by the interceptor.
 *
 *   - `$resolved`: `true` after first server interaction is completed (either with success or
 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
 *      data-binding.
 *
 * @example
 *
 * # Credit card resource
 *
 * ```js
     // Define CreditCard class
     var CreditCard = $resource('/user/:userId/card/:cardId',
      {userId:123, cardId:'@id'}, {
       charge: {method:'POST', params:{charge:true}}
      });

     // We can retrieve a collection from the server
     var cards = CreditCard.query(function() {
       // GET: /user/123/card
       // server returns: [ {id:456, number:'1234', name:'Smith'} ];

       var card = cards[0];
       // each item is an instance of CreditCard
       expect(card instanceof CreditCard).toEqual(true);
       card.name = "J. Smith";
       // non GET methods are mapped onto the instances
       card.$save();
       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
       // server returns: {id:456, number:'1234', name: 'J. Smith'};

       // our custom method is mapped as well.
       card.$charge({amount:9.99});
       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
     });

     // we can create an instance as well
     var newCard = new CreditCard({number:'0123'});
     newCard.name = "Mike Smith";
     newCard.$save();
     // POST: /user/123/card {number:'0123', name:'Mike Smith'}
     // server returns: {id:789, number:'0123', name: 'Mike Smith'};
     expect(newCard.id).toEqual(789);
 * ```
 *
 * The object returned from this function execution is a resource "class" which has "static" method
 * for each action in the definition.
 *
 * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
 * `headers`.
 * When the data is returned from the server then the object is an instance of the resource type and
 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
 * operations (create, read, update, delete) on server-side data.

   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(user) {
       user.abc = true;
       user.$save();
     });
   ```
 *
 * It's worth noting that the success callback for `get`, `query` and other methods gets passed
 * in the response that came from the server as well as $http header getter function, so one
 * could rewrite the above example and get access to http headers as:
 *
   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(u, getResponseHeaders){
       u.abc = true;
       u.$save(function(u, putResponseHeaders) {
         //u => saved user object
         //putResponseHeaders => $http header getter
       });
     });
   ```
 *
 * You can also access the raw `$http` promise via the `$promise` property on the object returned
 *
   ```
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123})
         .$promise.then(function(user) {
           $scope.user = user;
         });
   ```

 * # Creating a custom 'PUT' request
 * In this example we create a custom method on our resource to make a PUT request
 * ```js
 *    var app = angular.module('app', ['ngResource', 'ngRoute']);
 *
 *    // Some APIs expect a PUT request in the format URL/object/ID
 *    // Here we are creating an 'update' method
 *    app.factory('Notes', ['$resource', function($resource) {
 *    return $resource('/notes/:id', null,
 *        {
 *            'update': { method:'PUT' }
 *        });
 *    }]);
 *
 *    // In our controller we get the ID from the URL using ngRoute and $routeParams
 *    // We pass in $routeParams and our Notes factory along with $scope
 *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
                                      function($scope, $routeParams, Notes) {
 *    // First get a note object from the factory
 *    var note = Notes.get({ id:$routeParams.id });
 *    $id = note.id;
 *
 *    // Now call update passing in the ID first then the object you are updating
 *    Notes.update({ id:$id }, note);
 *
 *    // This will PUT /notes/ID with the note object in the request payload
 *    }]);
 * ```
 */
  angular.module('ngResource', ['ng']).factory('$resource', [
    '$http',
    '$q',
    function ($http, $q) {
      var DEFAULT_ACTIONS = {
          'get': { method: 'GET' },
          'save': { method: 'POST' },
          'query': {
            method: 'GET',
            isArray: true
          },
          'remove': { method: 'DELETE' },
          'delete': { method: 'DELETE' }
        };
      var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isFunction = angular.isFunction;
      /**
     * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
     * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
     * segments:
     *    segment       = *pchar
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
      }
      /**
     * This method is intended for encoding *key* or *value* parts of query component. We need a
     * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
     * have to be encoded per http://tools.ietf.org/html/rfc3986:
     *    query       = *( pchar / "/" / "?" )
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
      }
      function Route(template, defaults) {
        this.template = template;
        this.defaults = defaults || {};
        this.urlParams = {};
      }
      Route.prototype = {
        setUrlParams: function (config, params, actionUrl) {
          var self = this, url = actionUrl || self.template, val, encodedVal;
          var urlParams = self.urlParams = {};
          forEach(url.split(/\W/), function (param) {
            if (param === 'hasOwnProperty') {
              throw $resourceMinErr('badname', 'hasOwnProperty is not a valid parameter name.');
            }
            if (!new RegExp('^\\d+$').test(param) && param && new RegExp('(^|[^\\\\]):' + param + '(\\W|$)').test(url)) {
              urlParams[param] = true;
            }
          });
          url = url.replace(/\\:/g, ':');
          params = params || {};
          forEach(self.urlParams, function (_, urlParam) {
            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
            if (angular.isDefined(val) && val !== null) {
              encodedVal = encodeUriSegment(val);
              url = url.replace(new RegExp(':' + urlParam + '(\\W|$)', 'g'), function (match, p1) {
                return encodedVal + p1;
              });
            } else {
              url = url.replace(new RegExp('(/?):' + urlParam + '(\\W|$)', 'g'), function (match, leadingSlashes, tail) {
                if (tail.charAt(0) == '/') {
                  return tail;
                } else {
                  return leadingSlashes + tail;
                }
              });
            }
          });
          // strip trailing slashes and set the url
          url = url.replace(/\/+$/, '') || '/';
          // then replace collapse `/.` if found in the last URL path segment before the query
          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
          url = url.replace(/\/\.(?=\w+($|\?))/, '.');
          // replace escaped `/\.` with `/.`
          config.url = url.replace(/\/\\\./, '/.');
          // set params - delegate param encoding to $http
          forEach(params, function (value, key) {
            if (!self.urlParams[key]) {
              config.params = config.params || {};
              config.params[key] = value;
            }
          });
        }
      };
      function resourceFactory(url, paramDefaults, actions) {
        var route = new Route(url);
        actions = extend({}, DEFAULT_ACTIONS, actions);
        function extractParams(data, actionParams) {
          var ids = {};
          actionParams = extend({}, paramDefaults, actionParams);
          forEach(actionParams, function (value, key) {
            if (isFunction(value)) {
              value = value();
            }
            ids[key] = value && value.charAt && value.charAt(0) == '@' ? lookupDottedPath(data, value.substr(1)) : value;
          });
          return ids;
        }
        function defaultResponseInterceptor(response) {
          return response.resource;
        }
        function Resource(value) {
          shallowClearAndCopy(value || {}, this);
        }
        forEach(actions, function (action, name) {
          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
          Resource[name] = function (a1, a2, a3, a4) {
            var params = {}, data, success, error;
            /* jshint -W086 */
            /* (purposefully fall through case statements) */
            switch (arguments.length) {
            case 4:
              error = a4;
              success = a3;
            //fallthrough
            case 3:
            case 2:
              if (isFunction(a2)) {
                if (isFunction(a1)) {
                  success = a1;
                  error = a2;
                  break;
                }
                success = a2;
                error = a3;  //fallthrough
              } else {
                params = a1;
                data = a2;
                success = a3;
                break;
              }
            case 1:
              if (isFunction(a1))
                success = a1;
              else if (hasBody)
                data = a1;
              else
                params = a1;
              break;
            case 0:
              break;
            default:
              throw $resourceMinErr('badargs', 'Expected up to 4 arguments [params, data, success, error], got {0} arguments', arguments.length);
            }
            /* jshint +W086 */
            /* (purposefully fall through case statements) */
            var isInstanceCall = this instanceof Resource;
            var value = isInstanceCall ? data : action.isArray ? [] : new Resource(data);
            var httpConfig = {};
            var responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor;
            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError || undefined;
            forEach(action, function (value, key) {
              if (key != 'params' && key != 'isArray' && key != 'interceptor') {
                httpConfig[key] = copy(value);
              }
            });
            if (hasBody)
              httpConfig.data = data;
            route.setUrlParams(httpConfig, extend({}, extractParams(data, action.params || {}), params), action.url);
            var promise = $http(httpConfig).then(function (response) {
                var data = response.data, promise = value.$promise;
                if (data) {
                  // Need to convert action.isArray to boolean in case it is undefined
                  // jshint -W018
                  if (angular.isArray(data) !== !!action.isArray) {
                    throw $resourceMinErr('badcfg', 'Error in resource configuration. Expected ' + 'response to contain an {0} but got an {1}', action.isArray ? 'array' : 'object', angular.isArray(data) ? 'array' : 'object');
                  }
                  // jshint +W018
                  if (action.isArray) {
                    value.length = 0;
                    forEach(data, function (item) {
                      if (typeof item === 'object') {
                        value.push(new Resource(item));
                      } else {
                        // Valid JSON values may be string literals, and these should not be converted
                        // into objects. These items will not have access to the Resource prototype
                        // methods, but unfortunately there
                        value.push(item);
                      }
                    });
                  } else {
                    shallowClearAndCopy(data, value);
                    value.$promise = promise;
                  }
                }
                value.$resolved = true;
                response.resource = value;
                return response;
              }, function (response) {
                value.$resolved = true;
                (error || noop)(response);
                return $q.reject(response);
              });
            promise = promise.then(function (response) {
              var value = responseInterceptor(response);
              (success || noop)(value, response.headers);
              return value;
            }, responseErrorInterceptor);
            if (!isInstanceCall) {
              // we are creating instance / collection
              // - set the initial promise
              // - return the instance / collection
              value.$promise = promise;
              value.$resolved = false;
              return value;
            }
            // instance call
            return promise;
          };
          Resource.prototype['$' + name] = function (params, success, error) {
            if (isFunction(params)) {
              error = success;
              success = params;
              params = {};
            }
            var result = Resource[name].call(this, params, this, success, error);
            return result.$promise || result;
          };
        });
        Resource.bind = function (additionalParamDefaults) {
          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
        };
        return Resource;
      }
      return resourceFactory;
    }
  ]);
}(window, window.angular));
/*!
 * Bootstrap v3.3.5 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */
if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery');
}
+function ($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.');
  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher');
  }
}(jQuery);
/* ========================================================================
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================
  function transitionEnd() {
    var el = document.createElement('bootstrap');
    var transEndEventNames = {
        WebkitTransition: 'webkitTransitionEnd',
        MozTransition: 'transitionend',
        OTransition: 'oTransitionEnd otransitionend',
        transition: 'transitionend'
      };
    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }
    return false;  // explicit for ie8 (  ._.)
  }
  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false;
    var $el = this;
    $(this).one('bsTransitionEnd', function () {
      called = true;
    });
    var callback = function () {
      if (!called)
        $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };
  $(function () {
    $.support.transition = transitionEnd();
    if (!$.support.transition)
      return;
    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this))
          return e.handleObj.handler.apply(this, arguments);
      }
    };
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: alert.js v3.3.5
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // ALERT CLASS DEFINITION
  // ======================
  var dismiss = '[data-dismiss="alert"]';
  var Alert = function (el) {
    $(el).on('click', dismiss, this.close);
  };
  Alert.VERSION = '3.3.5';
  Alert.TRANSITION_DURATION = 150;
  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr('data-target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');  // strip for ie7
    }
    var $parent = $(selector);
    if (e)
      e.preventDefault();
    if (!$parent.length) {
      $parent = $this.closest('.alert');
    }
    $parent.trigger(e = $.Event('close.bs.alert'));
    if (e.isDefaultPrevented())
      return;
    $parent.removeClass('in');
    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove();
    }
    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
  };
  // ALERT PLUGIN DEFINITION
  // =======================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.alert');
      if (!data)
        $this.data('bs.alert', data = new Alert(this));
      if (typeof option == 'string')
        data[option].call($this);
    });
  }
  var old = $.fn.alert;
  $.fn.alert = Plugin;
  $.fn.alert.Constructor = Alert;
  // ALERT NO CONFLICT
  // =================
  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };
  // ALERT DATA-API
  // ==============
  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
}(jQuery);
/* ========================================================================
 * Bootstrap: button.js v3.3.5
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================
  var Button = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };
  Button.VERSION = '3.3.5';
  Button.DEFAULTS = { loadingText: 'loading...' };
  Button.prototype.setState = function (state) {
    var d = 'disabled';
    var $el = this.$element;
    var val = $el.is('input') ? 'val' : 'html';
    var data = $el.data();
    state += 'Text';
    if (data.resetText == null)
      $el.data('resetText', $el[val]());
    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state]);
      if (state == 'loadingText') {
        this.isLoading = true;
        $el.addClass(d).attr(d, d);
      } else if (this.isLoading) {
        this.isLoading = false;
        $el.removeClass(d).removeAttr(d);
      }
    }, this), 0);
  };
  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');
    if ($parent.length) {
      var $input = this.$element.find('input');
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked'))
          changed = false;
        $parent.find('.active').removeClass('active');
        this.$element.addClass('active');
      } else if ($input.prop('type') == 'checkbox') {
        if ($input.prop('checked') !== this.$element.hasClass('active'))
          changed = false;
        this.$element.toggleClass('active');
      }
      $input.prop('checked', this.$element.hasClass('active'));
      if (changed)
        $input.trigger('change');
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
      this.$element.toggleClass('active');
    }
  };
  // BUTTON PLUGIN DEFINITION
  // ========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.button');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.button', data = new Button(this, options));
      if (option == 'toggle')
        data.toggle();
      else if (option)
        data.setState(option);
    });
  }
  var old = $.fn.button;
  $.fn.button = Plugin;
  $.fn.button.Constructor = Button;
  // BUTTON NO CONFLICT
  // ==================
  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };
  // BUTTON DATA-API
  // ===============
  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target);
    if (!$btn.hasClass('btn'))
      $btn = $btn.closest('.btn');
    Plugin.call($btn, 'toggle');
    if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]')))
      e.preventDefault();
  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: carousel.js v3.3.5
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // CAROUSEL CLASS DEFINITION
  // =========================
  var Carousel = function (element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.paused = null;
    this.sliding = null;
    this.interval = null;
    this.$active = null;
    this.$items = null;
    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));
    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
  };
  Carousel.VERSION = '3.3.5';
  Carousel.TRANSITION_DURATION = 600;
  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  };
  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName))
      return;
    switch (e.which) {
    case 37:
      this.prev();
      break;
    case 39:
      this.next();
      break;
    default:
      return;
    }
    e.preventDefault();
  };
  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);
    this.interval && clearInterval(this.interval);
    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
    return this;
  };
  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item');
    return this.$items.index(item || this.$active);
  };
  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active);
    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
    if (willWrap && !this.options.wrap)
      return active;
    var delta = direction == 'prev' ? -1 : 1;
    var itemIndex = (activeIndex + delta) % this.$items.length;
    return this.$items.eq(itemIndex);
  };
  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));
    if (pos > this.$items.length - 1 || pos < 0)
      return;
    if (this.sliding)
      return this.$element.one('slid.bs.carousel', function () {
        that.to(pos);
      });
    // yes, "slid"
    if (activeIndex == pos)
      return this.pause().cycle();
    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
  };
  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);
    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }
    this.interval = clearInterval(this.interval);
    return this;
  };
  Carousel.prototype.next = function () {
    if (this.sliding)
      return;
    return this.slide('next');
  };
  Carousel.prototype.prev = function () {
    if (this.sliding)
      return;
    return this.slide('prev');
  };
  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active');
    var $next = next || this.getItemForDirection(type, $active);
    var isCycling = this.interval;
    var direction = type == 'next' ? 'left' : 'right';
    var that = this;
    if ($next.hasClass('active'))
      return this.sliding = false;
    var relatedTarget = $next[0];
    var slideEvent = $.Event('slide.bs.carousel', {
        relatedTarget: relatedTarget,
        direction: direction
      });
    this.$element.trigger(slideEvent);
    if (slideEvent.isDefaultPrevented())
      return;
    this.sliding = true;
    isCycling && this.pause();
    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active');
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
      $nextIndicator && $nextIndicator.addClass('active');
    }
    var slidEvent = $.Event('slid.bs.carousel', {
        relatedTarget: relatedTarget,
        direction: direction
      });
    // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type);
      $next[0].offsetWidth;
      // force reflow
      $active.addClass(direction);
      $next.addClass(direction);
      $active.one('bsTransitionEnd', function () {
        $next.removeClass([
          type,
          direction
        ].join(' ')).addClass('active');
        $active.removeClass([
          'active',
          direction
        ].join(' '));
        that.sliding = false;
        setTimeout(function () {
          that.$element.trigger(slidEvent);
        }, 0);
      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
    } else {
      $active.removeClass('active');
      $next.addClass('active');
      this.sliding = false;
      this.$element.trigger(slidEvent);
    }
    isCycling && this.cycle();
    return this;
  };
  // CAROUSEL PLUGIN DEFINITION
  // ==========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.carousel');
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option);
      var action = typeof option == 'string' ? option : options.slide;
      if (!data)
        $this.data('bs.carousel', data = new Carousel(this, options));
      if (typeof option == 'number')
        data.to(option);
      else if (action)
        data[action]();
      else if (options.interval)
        data.pause().cycle();
    });
  }
  var old = $.fn.carousel;
  $.fn.carousel = Plugin;
  $.fn.carousel.Constructor = Carousel;
  // CAROUSEL NO CONFLICT
  // ====================
  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };
  // CAROUSEL DATA-API
  // =================
  var clickHandler = function (e) {
    var href;
    var $this = $(this);
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''));
    // strip for ie7
    if (!$target.hasClass('carousel'))
      return;
    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr('data-slide-to');
    if (slideIndex)
      options.interval = false;
    Plugin.call($target, options);
    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex);
    }
    e.preventDefault();
  };
  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);
  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      Plugin.call($carousel, $carousel.data());
    });
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: collapse.js v3.3.5
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================
  var Collapse = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
    this.transitioning = null;
    if (this.options.parent) {
      this.$parent = this.getParent();
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
    }
    if (this.options.toggle)
      this.toggle();
  };
  Collapse.VERSION = '3.3.5';
  Collapse.TRANSITION_DURATION = 350;
  Collapse.DEFAULTS = { toggle: true };
  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };
  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in'))
      return;
    var activesData;
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');
    if (actives && actives.length) {
      activesData = actives.data('bs.collapse');
      if (activesData && activesData.transitioning)
        return;
    }
    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented())
      return;
    if (actives && actives.length) {
      Plugin.call(actives, 'hide');
      activesData || actives.data('bs.collapse', null);
    }
    var dimension = this.dimension();
    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);
    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);
    this.transitioning = 1;
    var complete = function () {
      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
      this.transitioning = 0;
      this.$element.trigger('shown.bs.collapse');
    };
    if (!$.support.transition)
      return complete.call(this);
    var scrollSize = $.camelCase([
        'scroll',
        dimension
      ].join('-'));
    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
  };
  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in'))
      return;
    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented())
      return;
    var dimension = this.dimension();
    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);
    this.$trigger.addClass('collapsed').attr('aria-expanded', false);
    this.transitioning = 1;
    var complete = function () {
      this.transitioning = 0;
      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
    };
    if (!$.support.transition)
      return complete.call(this);
    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
  };
  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };
  Collapse.prototype.getParent = function () {
    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
      var $element = $(element);
      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
    }, this)).end();
  };
  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in');
    $element.attr('aria-expanded', isOpen);
    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
  };
  function getTargetFromTrigger($trigger) {
    var href;
    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '');
    // strip for ie7
    return $(target);
  }
  // COLLAPSE PLUGIN DEFINITION
  // ==========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);
      if (!data && options.toggle && /show|hide/.test(option))
        options.toggle = false;
      if (!data)
        $this.data('bs.collapse', data = new Collapse(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.collapse;
  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;
  // COLLAPSE NO CONFLICT
  // ====================
  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };
  // COLLAPSE DATA-API
  // =================
  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this = $(this);
    if (!$this.attr('data-target'))
      e.preventDefault();
    var $target = getTargetFromTrigger($this);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $this.data();
    Plugin.call($target, option);
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.5
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // DROPDOWN CLASS DEFINITION
  // =========================
  var backdrop = '.dropdown-backdrop';
  var toggle = '[data-toggle="dropdown"]';
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle);
  };
  Dropdown.VERSION = '3.3.5';
  function getParent($this) {
    var selector = $this.attr('data-target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '');  // strip for ie7
    }
    var $parent = selector && $(selector);
    return $parent && $parent.length ? $parent : $this.parent();
  }
  function clearMenus(e) {
    if (e && e.which === 3)
      return;
    $(backdrop).remove();
    $(toggle).each(function () {
      var $this = $(this);
      var $parent = getParent($this);
      var relatedTarget = { relatedTarget: this };
      if (!$parent.hasClass('open'))
        return;
      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target))
        return;
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));
      if (e.isDefaultPrevented())
        return;
      $this.attr('aria-expanded', 'false');
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget);
    });
  }
  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);
    if ($this.is('.disabled, :disabled'))
      return;
    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');
    clearMenus();
    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
      }
      var relatedTarget = { relatedTarget: this };
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));
      if (e.isDefaultPrevented())
        return;
      $this.trigger('focus').attr('aria-expanded', 'true');
      $parent.toggleClass('open').trigger('shown.bs.dropdown', relatedTarget);
    }
    return false;
  };
  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName))
      return;
    var $this = $(this);
    e.preventDefault();
    e.stopPropagation();
    if ($this.is('.disabled, :disabled'))
      return;
    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');
    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27)
        $parent.find(toggle).trigger('focus');
      return $this.trigger('click');
    }
    var desc = ' li:not(.disabled):visible a';
    var $items = $parent.find('.dropdown-menu' + desc);
    if (!$items.length)
      return;
    var index = $items.index(e.target);
    if (e.which == 38 && index > 0)
      index--;
    // up
    if (e.which == 40 && index < $items.length - 1)
      index++;
    // down
    if (!~index)
      index = 0;
    $items.eq(index).trigger('focus');
  };
  // DROPDOWN PLUGIN DEFINITION
  // ==========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.dropdown');
      if (!data)
        $this.data('bs.dropdown', data = new Dropdown(this));
      if (typeof option == 'string')
        data[option].call($this);
    });
  }
  var old = $.fn.dropdown;
  $.fn.dropdown = Plugin;
  $.fn.dropdown.Constructor = Dropdown;
  // DROPDOWN NO CONFLICT
  // ====================
  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };
  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================
  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
}(jQuery);
/* ========================================================================
 * Bootstrap: modal.js v3.3.5
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // MODAL CLASS DEFINITION
  // ======================
  var Modal = function (element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$dialog = this.$element.find('.modal-dialog');
    this.$backdrop = null;
    this.isShown = null;
    this.originalBodyPad = null;
    this.scrollbarWidth = 0;
    this.ignoreBackdropClick = false;
    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };
  Modal.VERSION = '3.3.5';
  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;
  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };
  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };
  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });
    this.$element.trigger(e);
    if (this.isShown || e.isDefaultPrevented())
      return;
    this.isShown = true;
    this.checkScrollbar();
    this.setScrollbar();
    this.$body.addClass('modal-open');
    this.escape();
    this.resize();
    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));
    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element))
          that.ignoreBackdropClick = true;
      });
    });
    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');
      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body);  // don't move modals dom position
      }
      that.$element.show().scrollTop(0);
      that.adjustDialog();
      if (transition) {
        that.$element[0].offsetWidth;  // force reflow
      }
      that.$element.addClass('in');
      that.enforceFocus();
      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });
      transition ? that.$dialog.one('bsTransitionEnd', function () {
        that.$element.trigger('focus').trigger(e);
      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
    });
  };
  Modal.prototype.hide = function (e) {
    if (e)
      e.preventDefault();
    e = $.Event('hide.bs.modal');
    this.$element.trigger(e);
    if (!this.isShown || e.isDefaultPrevented())
      return;
    this.isShown = false;
    this.escape();
    this.resize();
    $(document).off('focusin.bs.modal');
    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');
    this.$dialog.off('mousedown.dismiss.bs.modal');
    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
  };
  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal').on('focusin.bs.modal', $.proxy(function (e) {
      if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.trigger('focus');
      }
    }, this));
  };
  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal');
    }
  };
  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
    } else {
      $(window).off('resize.bs.modal');
    }
  };
  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$body.removeClass('modal-open');
      that.resetAdjustments();
      that.resetScrollbar();
      that.$element.trigger('hidden.bs.modal');
    });
  };
  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };
  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass('fade') ? 'fade' : '';
    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;
      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);
      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false;
          return;
        }
        if (e.target !== e.currentTarget)
          return;
        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
      }, this));
      if (doAnimate)
        this.$backdrop[0].offsetWidth;
      // force reflow
      this.$backdrop.addClass('in');
      if (!callback)
        return;
      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');
      var callbackRemove = function () {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
    } else if (callback) {
      callback();
    }
  };
  // these following methods are used to handle overflowing modals
  Modal.prototype.handleUpdate = function () {
    this.adjustDialog();
  };
  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;
    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    });
  };
  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    });
  };
  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth;
    if (!fullWindowWidth) {
      // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect();
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    this.scrollbarWidth = this.measureScrollbar();
  };
  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
    this.originalBodyPad = document.body.style.paddingRight || '';
    if (this.bodyIsOverflowing)
      this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
  };
  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad);
  };
  Modal.prototype.measureScrollbar = function () {
    // thx walsh
    var scrollDiv = document.createElement('div');
    scrollDiv.className = 'modal-scrollbar-measure';
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };
  // MODAL PLUGIN DEFINITION
  // =======================
  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);
      if (!data)
        $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string')
        data[option](_relatedTarget);
      else if (options.show)
        data.show(_relatedTarget);
    });
  }
  var old = $.fn.modal;
  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;
  // MODAL NO CONFLICT
  // =================
  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };
  // MODAL DATA-API
  // ==============
  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, ''));
    // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());
    if ($this.is('a'))
      e.preventDefault();
    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented())
        return;
      // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    Plugin.call($target, option, this);
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.5
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================
  var Tooltip = function (element, options) {
    this.type = null;
    this.options = null;
    this.enabled = null;
    this.timeout = null;
    this.hoverState = null;
    this.$element = null;
    this.inState = null;
    this.init('tooltip', element, options);
  };
  Tooltip.VERSION = '3.3.5';
  Tooltip.TRANSITION_DURATION = 150;
  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  };
  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
    this.inState = {
      click: false,
      hover: false,
      focus: false
    };
    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
    }
    var triggers = this.options.trigger.split(' ');
    for (var i = triggers.length; i--;) {
      var trigger = triggers[i];
      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';
        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
      }
    }
    this.options.selector ? this._options = $.extend({}, this.options, {
      trigger: 'manual',
      selector: ''
    }) : this.fixTitle();
  };
  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };
  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options);
    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      };
    }
    return options;
  };
  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();
    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value)
        options[key] = value;
    });
    return options;
  };
  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);
    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }
    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
    }
    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in';
      return;
    }
    clearTimeout(self.timeout);
    self.hoverState = 'in';
    if (!self.options.delay || !self.options.delay.show)
      return self.show();
    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in')
        self.show();
    }, self.options.delay.show);
  };
  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key])
        return true;
    }
    return false;
  };
  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);
    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }
    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
    }
    if (self.isInStateTrue())
      return;
    clearTimeout(self.timeout);
    self.hoverState = 'out';
    if (!self.options.delay || !self.options.delay.hide)
      return self.hide();
    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out')
        self.hide();
    }, self.options.delay.hide);
  };
  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type);
    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);
      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
      if (e.isDefaultPrevented() || !inDom)
        return;
      var that = this;
      var $tip = this.tip();
      var tipId = this.getUID(this.type);
      this.setContent();
      $tip.attr('id', tipId);
      this.$element.attr('aria-describedby', tipId);
      if (this.options.animation)
        $tip.addClass('fade');
      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace)
        placement = placement.replace(autoToken, '') || 'top';
      $tip.detach().css({
        top: 0,
        left: 0,
        display: 'block'
      }).addClass(placement).data('bs.' + this.type, this);
      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
      this.$element.trigger('inserted.bs.' + this.type);
      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;
      if (autoPlace) {
        var orgPlacement = placement;
        var viewportDim = this.getPosition(this.$viewport);
        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;
        $tip.removeClass(orgPlacement).addClass(placement);
      }
      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
      this.applyPlacement(calculatedOffset, placement);
      var complete = function () {
        var prevHoverState = that.hoverState;
        that.$element.trigger('shown.bs.' + that.type);
        that.hoverState = null;
        if (prevHoverState == 'out')
          that.leave(that);
      };
      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
    }
  };
  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;
    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10);
    var marginLeft = parseInt($tip.css('margin-left'), 10);
    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))
      marginTop = 0;
    if (isNaN(marginLeft))
      marginLeft = 0;
    offset.top += marginTop;
    offset.left += marginLeft;
    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        });
      }
    }, offset), 0);
    $tip.addClass('in');
    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;
    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight;
    }
    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
    if (delta.left)
      offset.left += delta.left;
    else
      offset.top += delta.top;
    var isVertical = /top|bottom/.test(placement);
    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';
    $tip.offset(offset);
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
  };
  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
  };
  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
    $tip.removeClass('fade in top bottom left right');
  };
  Tooltip.prototype.hide = function (callback) {
    var that = this;
    var $tip = $(this.$tip);
    var e = $.Event('hide.bs.' + this.type);
    function complete() {
      if (that.hoverState != 'in')
        $tip.detach();
      that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
      callback && callback();
    }
    this.$element.trigger(e);
    if (e.isDefaultPrevented())
      return;
    $tip.removeClass('in');
    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
    this.hoverState = null;
    return this;
  };
  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
    }
  };
  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };
  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element;
    var el = $element[0];
    var isBody = el.tagName == 'BODY';
    var elRect = el.getBoundingClientRect();
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, {
        width: elRect.right - elRect.left,
        height: elRect.bottom - elRect.top
      });
    }
    var elOffset = isBody ? {
        top: 0,
        left: 0
      } : $element.offset();
    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
    var outerDims = isBody ? {
        width: $(window).width(),
        height: $(window).height()
      } : null;
    return $.extend({}, elRect, scroll, outerDims, elOffset);
  };
  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? {
      top: pos.top + pos.height,
      left: pos.left + pos.width / 2 - actualWidth / 2
    } : placement == 'top' ? {
      top: pos.top - actualHeight,
      left: pos.left + pos.width / 2 - actualWidth / 2
    } : placement == 'left' ? {
      top: pos.top + pos.height / 2 - actualHeight / 2,
      left: pos.left - actualWidth
    } : {
      top: pos.top + pos.height / 2 - actualHeight / 2,
      left: pos.left + pos.width
    };
  };
  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = {
        top: 0,
        left: 0
      };
    if (!this.$viewport)
      return delta;
    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
    var viewportDimensions = this.getPosition(this.$viewport);
    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
      if (topEdgeOffset < viewportDimensions.top) {
        // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset;
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
        // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding;
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
      if (leftEdgeOffset < viewportDimensions.left) {
        // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset;
      } else if (rightEdgeOffset > viewportDimensions.right) {
        // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
      }
    }
    return delta;
  };
  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;
    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);
    return title;
  };
  Tooltip.prototype.getUID = function (prefix) {
    do
      prefix += ~~(Math.random() * 1000000);
    while (document.getElementById(prefix));
    return prefix;
  };
  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template);
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
      }
    }
    return this.$tip;
  };
  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
  };
  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };
  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };
  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };
  Tooltip.prototype.toggle = function (e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data('bs.' + this.type, self);
      }
    }
    if (e) {
      self.inState.click = !self.inState.click;
      if (self.isInStateTrue())
        self.enter(self);
      else
        self.leave(self);
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
    }
  };
  Tooltip.prototype.destroy = function () {
    var that = this;
    clearTimeout(this.timeout);
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type);
      if (that.$tip) {
        that.$tip.detach();
      }
      that.$tip = null;
      that.$arrow = null;
      that.$viewport = null;
    });
  };
  // TOOLTIP PLUGIN DEFINITION
  // =========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tooltip');
      var options = typeof option == 'object' && option;
      if (!data && /destroy|hide/.test(option))
        return;
      if (!data)
        $this.data('bs.tooltip', data = new Tooltip(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.tooltip;
  $.fn.tooltip = Plugin;
  $.fn.tooltip.Constructor = Tooltip;
  // TOOLTIP NO CONFLICT
  // ===================
  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(jQuery);
/* ========================================================================
 * Bootstrap: popover.js v3.3.5
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================
  var Popover = function (element, options) {
    this.init('popover', element, options);
  };
  if (!$.fn.tooltip)
    throw new Error('Popover requires tooltip.js');
  Popover.VERSION = '3.3.5';
  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });
  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================
  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
  Popover.prototype.constructor = Popover;
  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };
  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();
    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
    $tip.find('.popover-content').children().detach().end()[this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);
    $tip.removeClass('fade top bottom left right in');
    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html())
      $tip.find('.popover-title').hide();
  };
  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };
  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;
    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
  };
  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow');
  };
  // POPOVER PLUGIN DEFINITION
  // =========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.popover');
      var options = typeof option == 'object' && option;
      if (!data && /destroy|hide/.test(option))
        return;
      if (!data)
        $this.data('bs.popover', data = new Popover(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.popover;
  $.fn.popover = Plugin;
  $.fn.popover.Constructor = Popover;
  // POPOVER NO CONFLICT
  // ===================
  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(jQuery);
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.5
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // SCROLLSPY CLASS DEFINITION
  // ==========================
  function ScrollSpy(element, options) {
    this.$body = $(document.body);
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || '') + ' .nav li > a';
    this.offsets = [];
    this.targets = [];
    this.activeTarget = null;
    this.scrollHeight = 0;
    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
    this.refresh();
    this.process();
  }
  ScrollSpy.VERSION = '3.3.5';
  ScrollSpy.DEFAULTS = { offset: 10 };
  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  };
  ScrollSpy.prototype.refresh = function () {
    var that = this;
    var offsetMethod = 'offset';
    var offsetBase = 0;
    this.offsets = [];
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();
    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position';
      offsetBase = this.$scrollElement.scrollTop();
    }
    this.$body.find(this.selector).map(function () {
      var $el = $(this);
      var href = $el.data('target') || $el.attr('href');
      var $href = /^#./.test(href) && $(href);
      return $href && $href.length && $href.is(':visible') && [[
          $href[offsetMethod]().top + offsetBase,
          href
        ]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      that.offsets.push(this[0]);
      that.targets.push(this[1]);
    });
  };
  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.getScrollHeight();
    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;
    if (this.scrollHeight != scrollHeight) {
      this.refresh();
    }
    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
    }
    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null;
      return this.clear();
    }
    for (i = offsets.length; i--;) {
      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
    }
  };
  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;
    this.clear();
    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
    var active = $(selector).parents('li').addClass('active');
    if (active.parent('.dropdown-menu').length) {
      active = active.closest('li.dropdown').addClass('active');
    }
    active.trigger('activate.bs.scrollspy');
  };
  ScrollSpy.prototype.clear = function () {
    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
  };
  // SCROLLSPY PLUGIN DEFINITION
  // ===========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.scrollspy');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.scrollspy;
  $.fn.scrollspy = Plugin;
  $.fn.scrollspy.Constructor = ScrollSpy;
  // SCROLLSPY NO CONFLICT
  // =====================
  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };
  // SCROLLSPY DATA-API
  // ==================
  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      Plugin.call($spy, $spy.data());
    });
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: tab.js v3.3.5
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // TAB CLASS DEFINITION
  // ====================
  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element);  // jscs:enable requireDollarBeforejQueryAssignment
  };
  Tab.VERSION = '3.3.5';
  Tab.TRANSITION_DURATION = 150;
  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest('ul:not(.dropdown-menu)');
    var selector = $this.data('target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');  // strip for ie7
    }
    if ($this.parent('li').hasClass('active'))
      return;
    var $previous = $ul.find('.active:last a');
    var hideEvent = $.Event('hide.bs.tab', { relatedTarget: $this[0] });
    var showEvent = $.Event('show.bs.tab', { relatedTarget: $previous[0] });
    $previous.trigger(hideEvent);
    $this.trigger(showEvent);
    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented())
      return;
    var $target = $(selector);
    this.activate($this.closest('li'), $ul);
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      });
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      });
    });
  };
  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active');
    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);
    function next() {
      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);
      element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);
      if (transition) {
        element[0].offsetWidth;
        // reflow for transition
        element.addClass('in');
      } else {
        element.removeClass('fade');
      }
      if (element.parent('.dropdown-menu').length) {
        element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
      }
      callback && callback();
    }
    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();
    $active.removeClass('in');
  };
  // TAB PLUGIN DEFINITION
  // =====================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tab');
      if (!data)
        $this.data('bs.tab', data = new Tab(this));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.tab;
  $.fn.tab = Plugin;
  $.fn.tab.Constructor = Tab;
  // TAB NO CONFLICT
  // ===============
  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };
  // TAB DATA-API
  // ============
  var clickHandler = function (e) {
    e.preventDefault();
    Plugin.call($(this), 'show');
  };
  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
}(jQuery);
/* ========================================================================
 * Bootstrap: affix.js v3.3.5
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // AFFIX CLASS DEFINITION
  // ======================
  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);
    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));
    this.$element = $(element);
    this.affixed = null;
    this.unpin = null;
    this.pinnedOffset = null;
    this.checkPosition();
  };
  Affix.VERSION = '3.3.5';
  Affix.RESET = 'affix affix-top affix-bottom';
  Affix.DEFAULTS = {
    offset: 0,
    target: window
  };
  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var targetHeight = this.$target.height();
    if (offsetTop != null && this.affixed == 'top')
      return scrollTop < offsetTop ? 'top' : false;
    if (this.affixed == 'bottom') {
      if (offsetTop != null)
        return scrollTop + this.unpin <= position.top ? false : 'bottom';
      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
    }
    var initializing = this.affixed == null;
    var colliderTop = initializing ? scrollTop : position.top;
    var colliderHeight = initializing ? targetHeight : height;
    if (offsetTop != null && scrollTop <= offsetTop)
      return 'top';
    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom)
      return 'bottom';
    return false;
  };
  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset)
      return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };
  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };
  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible'))
      return;
    var height = this.$element.height();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    var scrollHeight = Math.max($(document).height(), $(document.body).height());
    if (typeof offset != 'object')
      offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function')
      offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function')
      offsetBottom = offset.bottom(this.$element);
    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);
    if (this.affixed != affix) {
      if (this.unpin != null)
        this.$element.css('top', '');
      var affixType = 'affix' + (affix ? '-' + affix : '');
      var e = $.Event(affixType + '.bs.affix');
      this.$element.trigger(e);
      if (e.isDefaultPrevented())
        return;
      this.affixed = affix;
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;
      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
    }
    if (affix == 'bottom') {
      this.$element.offset({ top: scrollHeight - height - offsetBottom });
    }
  };
  // AFFIX PLUGIN DEFINITION
  // =======================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.affix;
  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;
  // AFFIX NO CONFLICT
  // =================
  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };
  // AFFIX DATA-API
  // ==============
  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();
      data.offset = data.offset || {};
      if (data.offsetBottom != null)
        data.offset.bottom = data.offsetBottom;
      if (data.offsetTop != null)
        data.offset.top = data.offsetTop;
      Plugin.call($spy, data);
    });
  });
}(jQuery);
/**
 * angular-ui-utils - Swiss-Army-Knife of AngularJS tools (with no external dependencies!)
 * @version v0.1.1 - 2014-02-05
 * @link http://angular-ui.github.com
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
'use strict';
angular.module('ui.alias', []).config([
  '$compileProvider',
  'uiAliasConfig',
  function ($compileProvider, uiAliasConfig) {
    uiAliasConfig = uiAliasConfig || {};
    angular.forEach(uiAliasConfig, function (config, alias) {
      if (angular.isString(config)) {
        config = {
          replace: true,
          template: config
        };
      }
      $compileProvider.directive(alias, function () {
        return config;
      });
    });
  }
]);
'use strict';
/**
 * General-purpose Event binding. Bind any event not natively supported by Angular
 * Pass an object with keynames for events to ui-event
 * Allows $event object and $params object to be passed
 *
 * @example <input ui-event="{ focus : 'counter++', blur : 'someCallback()' }">
 * @example <input ui-event="{ myCustomEvent : 'myEventHandler($event, $params)'}">
 *
 * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks
 */
angular.module('ui.event', []).directive('uiEvent', [
  '$parse',
  function ($parse) {
    return function ($scope, elm, attrs) {
      var events = $scope.$eval(attrs.uiEvent);
      angular.forEach(events, function (uiEvent, eventName) {
        var fn = $parse(uiEvent);
        elm.bind(eventName, function (evt) {
          var params = Array.prototype.slice.call(arguments);
          //Take out first paramater (event object);
          params = params.splice(1);
          fn($scope, {
            $event: evt,
            $params: params
          });
          if (!$scope.$$phase) {
            $scope.$apply();
          }
        });
      });
    };
  }
]);
'use strict';
/**
 * A replacement utility for internationalization very similar to sprintf.
 *
 * @param replace {mixed} The tokens to replace depends on type
 *  string: all instances of $0 will be replaced
 *  array: each instance of $0, $1, $2 etc. will be placed with each array item in corresponding order
 *  object: all attributes will be iterated through, with :key being replaced with its corresponding value
 * @return string
 *
 * @example: 'Hello :name, how are you :day'.format({ name:'John', day:'Today' })
 * @example: 'Records $0 to $1 out of $2 total'.format(['10', '20', '3000'])
 * @example: '$0 agrees to all mentions $0 makes in the event that $0 hits a tree while $0 is driving drunk'.format('Bob')
 */
angular.module('ui.format', []).filter('format', function () {
  return function (value, replace) {
    var target = value;
    if (angular.isString(target) && replace !== undefined) {
      if (!angular.isArray(replace) && !angular.isObject(replace)) {
        replace = [replace];
      }
      if (angular.isArray(replace)) {
        var rlen = replace.length;
        var rfx = function (str, i) {
          i = parseInt(i, 10);
          return i >= 0 && i < rlen ? replace[i] : str;
        };
        target = target.replace(/\$([0-9]+)/g, rfx);
      } else {
        angular.forEach(replace, function (value, key) {
          target = target.split(':' + key).join(value);
        });
      }
    }
    return target;
  };
});
'use strict';
/**
 * Wraps the
 * @param text {string} haystack to search through
 * @param search {string} needle to search for
 * @param [caseSensitive] {boolean} optional boolean to use case-sensitive searching
 */
angular.module('ui.highlight', []).filter('highlight', function () {
  return function (text, search, caseSensitive) {
    if (search || angular.isNumber(search)) {
      text = text.toString();
      search = search.toString();
      if (caseSensitive) {
        return text.split(search).join('<span class="ui-match">' + search + '</span>');
      } else {
        return text.replace(new RegExp(search, 'gi'), '<span class="ui-match">$&</span>');
      }
    } else {
      return text;
    }
  };
});
'use strict';
// modeled after: angular-1.0.7/src/ng/directive/ngInclude.js
angular.module('ui.include', []).directive('uiInclude', [
  '$http',
  '$templateCache',
  '$anchorScroll',
  '$compile',
  function ($http, $templateCache, $anchorScroll, $compile) {
    return {
      restrict: 'ECA',
      terminal: true,
      compile: function (element, attr) {
        var srcExp = attr.uiInclude || attr.src, fragExp = attr.fragment || '', onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
        return function (scope, element) {
          var changeCounter = 0, childScope;
          var clearContent = function () {
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            element.html('');
          };
          function ngIncludeWatchAction() {
            var thisChangeId = ++changeCounter;
            var src = scope.$eval(srcExp);
            var fragment = scope.$eval(fragExp);
            if (src) {
              $http.get(src, { cache: $templateCache }).success(function (response) {
                if (thisChangeId !== changeCounter) {
                  return;
                }
                if (childScope) {
                  childScope.$destroy();
                }
                childScope = scope.$new();
                var contents;
                if (fragment) {
                  contents = angular.element('<div/>').html(response).find(fragment);
                } else {
                  contents = angular.element('<div/>').html(response).contents();
                }
                element.html(contents);
                $compile(contents)(childScope);
                if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
                childScope.$emit('$includeContentLoaded');
                scope.$eval(onloadExp);
              }).error(function () {
                if (thisChangeId === changeCounter) {
                  clearContent();
                }
              });
            } else {
              clearContent();
            }
          }
          scope.$watch(fragExp, ngIncludeWatchAction);
          scope.$watch(srcExp, ngIncludeWatchAction);
        };
      }
    };
  }
]);
'use strict';
/**
 * Provides an easy way to toggle a checkboxes indeterminate property
 *
 * @example <input type="checkbox" ui-indeterminate="isUnkown">
 */
angular.module('ui.indeterminate', []).directive('uiIndeterminate', [function () {
    return {
      compile: function (tElm, tAttrs) {
        if (!tAttrs.type || tAttrs.type.toLowerCase() !== 'checkbox') {
          return angular.noop;
        }
        return function ($scope, elm, attrs) {
          $scope.$watch(attrs.uiIndeterminate, function (newVal) {
            elm[0].indeterminate = !!newVal;
          });
        };
      }
    };
  }]);
'use strict';
/**
 * Converts variable-esque naming conventions to something presentational, capitalized words separated by space.
 * @param {String} value The value to be parsed and prettified.
 * @param {String} [inflector] The inflector to use. Default: humanize.
 * @return {String}
 * @example {{ 'Here Is my_phoneNumber' | inflector:'humanize' }} => Here Is My Phone Number
 *          {{ 'Here Is my_phoneNumber' | inflector:'underscore' }} => here_is_my_phone_number
 *          {{ 'Here Is my_phoneNumber' | inflector:'variable' }} => hereIsMyPhoneNumber
 */
angular.module('ui.inflector', []).filter('inflector', function () {
  function ucwords(text) {
    return text.replace(/^([a-z])|\s+([a-z])/g, function ($1) {
      return $1.toUpperCase();
    });
  }
  function breakup(text, separator) {
    return text.replace(/[A-Z]/g, function (match) {
      return separator + match;
    });
  }
  var inflectors = {
      humanize: function (value) {
        return ucwords(breakup(value, ' ').split('_').join(' '));
      },
      underscore: function (value) {
        return value.substr(0, 1).toLowerCase() + breakup(value.substr(1), '_').toLowerCase().split(' ').join('_');
      },
      variable: function (value) {
        value = value.substr(0, 1).toLowerCase() + ucwords(value.split('_').join(' ')).substr(1).split(' ').join('');
        return value;
      }
    };
  return function (text, inflector) {
    if (inflector !== false && angular.isString(text)) {
      inflector = inflector || 'humanize';
      return inflectors[inflector](text);
    } else {
      return text;
    }
  };
});
'use strict';
/**
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *     Multiple parameters can be separated by commas
 * @param [ui-refresh] {expression} Watch expression and refire plugin on changes
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter" ui-refresh="iChange">
 */
angular.module('ui.jq', []).value('uiJqConfig', {}).directive('uiJq', [
  'uiJqConfig',
  '$timeout',
  function uiJqInjectingFunction(uiJqConfig, $timeout) {
    return {
      restrict: 'A',
      compile: function uiJqCompilingFunction(tElm, tAttrs) {
        if (!angular.isFunction(tElm[tAttrs.uiJq])) {
          throw new Error('ui-jq: The "' + tAttrs.uiJq + '" function does not exist');
        }
        var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];
        return function uiJqLinkingFunction(scope, elm, attrs) {
          var linkOptions = [];
          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
          if (attrs.uiOptions) {
            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
              linkOptions[0] = angular.extend({}, options, linkOptions[0]);
            }
          } else if (options) {
            linkOptions = [options];
          }
          // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
          if (attrs.ngModel && elm.is('select,input,textarea')) {
            elm.bind('change', function () {
              elm.trigger('input');
            });
          }
          // Call jQuery method and pass relevant options
          function callPlugin() {
            $timeout(function () {
              elm[attrs.uiJq].apply(elm, linkOptions);
            }, 0, false);
          }
          // If ui-refresh is used, re-fire the the method upon every change
          if (attrs.uiRefresh) {
            scope.$watch(attrs.uiRefresh, function () {
              callPlugin();
            });
          }
          callPlugin();
        };
      }
    };
  }
]);
'use strict';
angular.module('ui.keypress', []).factory('keypressHelper', [
  '$parse',
  function keypress($parse) {
    var keysByCode = {
        8: 'backspace',
        9: 'tab',
        13: 'enter',
        27: 'esc',
        32: 'space',
        33: 'pageup',
        34: 'pagedown',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        45: 'insert',
        46: 'delete'
      };
    var capitaliseFirstLetter = function (string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };
    return function (mode, scope, elm, attrs) {
      var params, combinations = [];
      params = scope.$eval(attrs['ui' + capitaliseFirstLetter(mode)]);
      // Prepare combinations for simple checking
      angular.forEach(params, function (v, k) {
        var combination, expression;
        expression = $parse(v);
        angular.forEach(k.split(' '), function (variation) {
          combination = {
            expression: expression,
            keys: {}
          };
          angular.forEach(variation.split('-'), function (value) {
            combination.keys[value] = true;
          });
          combinations.push(combination);
        });
      });
      // Check only matching of pressed keys one of the conditions
      elm.bind(mode, function (event) {
        // No need to do that inside the cycle
        var metaPressed = !!(event.metaKey && !event.ctrlKey);
        var altPressed = !!event.altKey;
        var ctrlPressed = !!event.ctrlKey;
        var shiftPressed = !!event.shiftKey;
        var keyCode = event.keyCode;
        // normalize keycodes
        if (mode === 'keypress' && !shiftPressed && keyCode >= 97 && keyCode <= 122) {
          keyCode = keyCode - 32;
        }
        // Iterate over prepared combinations
        angular.forEach(combinations, function (combination) {
          var mainKeyPressed = combination.keys[keysByCode[keyCode]] || combination.keys[keyCode.toString()];
          var metaRequired = !!combination.keys.meta;
          var altRequired = !!combination.keys.alt;
          var ctrlRequired = !!combination.keys.ctrl;
          var shiftRequired = !!combination.keys.shift;
          if (mainKeyPressed && metaRequired === metaPressed && altRequired === altPressed && ctrlRequired === ctrlPressed && shiftRequired === shiftPressed) {
            // Run the function
            scope.$apply(function () {
              combination.expression(scope, { '$event': event });
            });
          }
        });
      });
    };
  }
]);
/**
 * Bind one or more handlers to particular keys or their combination
 * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: "{ keys1: expression1 [, keys2: expression2 [ , ... ]]}". String syntax: ""expression1 on keys1 [ and expression2 on keys2 [ and ... ]]"". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.
 * @example <input ui-keypress="{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}" /> <input ui-keypress="foo = 2 on ctrl-13 and bar('hello') on shift-esc" />
 **/
angular.module('ui.keypress').directive('uiKeydown', [
  'keypressHelper',
  function (keypressHelper) {
    return {
      link: function (scope, elm, attrs) {
        keypressHelper('keydown', scope, elm, attrs);
      }
    };
  }
]);
angular.module('ui.keypress').directive('uiKeypress', [
  'keypressHelper',
  function (keypressHelper) {
    return {
      link: function (scope, elm, attrs) {
        keypressHelper('keypress', scope, elm, attrs);
      }
    };
  }
]);
angular.module('ui.keypress').directive('uiKeyup', [
  'keypressHelper',
  function (keypressHelper) {
    return {
      link: function (scope, elm, attrs) {
        keypressHelper('keyup', scope, elm, attrs);
      }
    };
  }
]);
'use strict';
/*
 Attaches input mask onto input element
 */
angular.module('ui.mask', []).value('uiMaskConfig', {
  'maskDefinitions': {
    '9': /\d/,
    'A': /[a-zA-Z]/,
    '*': /[a-zA-Z0-9]/
  }
}).directive('uiMask', [
  'uiMaskConfig',
  function (maskConfig) {
    return {
      priority: 100,
      require: 'ngModel',
      restrict: 'A',
      compile: function uiMaskCompilingFunction() {
        var options = maskConfig;
        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller) {
          var maskProcessed = false, eventsBound = false, maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,
            // Minimum required length of the value to be considered valid
            minRequiredLength, value, valueMasked, isValid,
            // Vars for initializing/uninitializing
            originalPlaceholder = iAttrs.placeholder, originalMaxlength = iAttrs.maxlength,
            // Vars used exclusively in eventHandler()
            oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;
          function initialize(maskAttr) {
            if (!angular.isDefined(maskAttr)) {
              return uninitialize();
            }
            processRawMask(maskAttr);
            if (!maskProcessed) {
              return uninitialize();
            }
            initializeElement();
            bindEventListeners();
            return true;
          }
          function initPlaceholder(placeholderAttr) {
            if (!angular.isDefined(placeholderAttr)) {
              return;
            }
            maskPlaceholder = placeholderAttr;
            // If the mask is processed, then we need to update the value
            if (maskProcessed) {
              eventHandler();
            }
          }
          function formatter(fromModelValue) {
            if (!maskProcessed) {
              return fromModelValue;
            }
            value = unmaskValue(fromModelValue || '');
            isValid = validateValue(value);
            controller.$setValidity('mask', isValid);
            return isValid && value.length ? maskValue(value) : undefined;
          }
          function parser(fromViewValue) {
            if (!maskProcessed) {
              return fromViewValue;
            }
            value = unmaskValue(fromViewValue || '');
            isValid = validateValue(value);
            // We have to set viewValue manually as the reformatting of the input
            // value performed by eventHandler() doesn't happen until after
            // this parser is called, which causes what the user sees in the input
            // to be out-of-sync with what the controller's $viewValue is set to.
            controller.$viewValue = value.length ? maskValue(value) : '';
            controller.$setValidity('mask', isValid);
            if (value === '' && controller.$error.required !== undefined) {
              controller.$setValidity('required', false);
            }
            return isValid ? value : undefined;
          }
          var linkOptions = {};
          if (iAttrs.uiOptions) {
            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');
            if (angular.isObject(linkOptions[0])) {
              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge
              linkOptions = function (original, current) {
                for (var i in original) {
                  if (Object.prototype.hasOwnProperty.call(original, i)) {
                    if (!current[i]) {
                      current[i] = angular.copy(original[i]);
                    } else {
                      angular.extend(current[i], original[i]);
                    }
                  }
                }
                return current;
              }(options, linkOptions[0]);
            }
          } else {
            linkOptions = options;
          }
          iAttrs.$observe('uiMask', initialize);
          iAttrs.$observe('placeholder', initPlaceholder);
          controller.$formatters.push(formatter);
          controller.$parsers.push(parser);
          function uninitialize() {
            maskProcessed = false;
            unbindEventListeners();
            if (angular.isDefined(originalPlaceholder)) {
              iElement.attr('placeholder', originalPlaceholder);
            } else {
              iElement.removeAttr('placeholder');
            }
            if (angular.isDefined(originalMaxlength)) {
              iElement.attr('maxlength', originalMaxlength);
            } else {
              iElement.removeAttr('maxlength');
            }
            iElement.val(controller.$modelValue);
            controller.$viewValue = controller.$modelValue;
            return false;
          }
          function initializeElement() {
            value = oldValueUnmasked = unmaskValue(controller.$modelValue || '');
            valueMasked = oldValue = maskValue(value);
            isValid = validateValue(value);
            var viewValue = isValid && value.length ? valueMasked : '';
            if (iAttrs.maxlength) {
              // Double maxlength to allow pasting new val at end of mask
              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);
            }
            iElement.attr('placeholder', maskPlaceholder);
            iElement.val(viewValue);
            controller.$viewValue = viewValue;  // Not using $setViewValue so we don't clobber the model value and dirty the form
                                                // without any kind of user interaction.
          }
          function bindEventListeners() {
            if (eventsBound) {
              return;
            }
            iElement.bind('blur', blurHandler);
            iElement.bind('mousedown mouseup', mouseDownUpHandler);
            iElement.bind('input keyup click focus', eventHandler);
            eventsBound = true;
          }
          function unbindEventListeners() {
            if (!eventsBound) {
              return;
            }
            iElement.unbind('blur', blurHandler);
            iElement.unbind('mousedown', mouseDownUpHandler);
            iElement.unbind('mouseup', mouseDownUpHandler);
            iElement.unbind('input', eventHandler);
            iElement.unbind('keyup', eventHandler);
            iElement.unbind('click', eventHandler);
            iElement.unbind('focus', eventHandler);
            eventsBound = false;
          }
          function validateValue(value) {
            // Zero-length value validity is ngRequired's determination
            return value.length ? value.length >= minRequiredLength : true;
          }
          function unmaskValue(value) {
            var valueUnmasked = '', maskPatternsCopy = maskPatterns.slice();
            // Preprocess by stripping mask components from value
            value = value.toString();
            angular.forEach(maskComponents, function (component) {
              value = value.replace(component, '');
            });
            angular.forEach(value.split(''), function (chr) {
              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {
                valueUnmasked += chr;
                maskPatternsCopy.shift();
              }
            });
            return valueUnmasked;
          }
          function maskValue(unmaskedValue) {
            var valueMasked = '', maskCaretMapCopy = maskCaretMap.slice();
            angular.forEach(maskPlaceholder.split(''), function (chr, i) {
              if (unmaskedValue.length && i === maskCaretMapCopy[0]) {
                valueMasked += unmaskedValue.charAt(0) || '_';
                unmaskedValue = unmaskedValue.substr(1);
                maskCaretMapCopy.shift();
              } else {
                valueMasked += chr;
              }
            });
            return valueMasked;
          }
          function getPlaceholderChar(i) {
            var placeholder = iAttrs.placeholder;
            if (typeof placeholder !== 'undefined' && placeholder[i]) {
              return placeholder[i];
            } else {
              return '_';
            }
          }
          // Generate array of mask components that will be stripped from a masked value
          // before processing to prevent mask components from being added to the unmasked value.
          // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.
          // If a maskable char is followed by a mask char and has a mask
          // char behind it, we'll split it into it's own component so if
          // a user is aggressively deleting in the input and a char ahead
          // of the maskable char gets deleted, we'll still be able to strip
          // it in the unmaskValue() preprocessing.
          function getMaskComponents() {
            return maskPlaceholder.replace(/[_]+/g, '_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');
          }
          function processRawMask(mask) {
            var characterCount = 0;
            maskCaretMap = [];
            maskPatterns = [];
            maskPlaceholder = '';
            if (typeof mask === 'string') {
              minRequiredLength = 0;
              var isOptional = false, splitMask = mask.split('');
              angular.forEach(splitMask, function (chr, i) {
                if (linkOptions.maskDefinitions[chr]) {
                  maskCaretMap.push(characterCount);
                  maskPlaceholder += getPlaceholderChar(i);
                  maskPatterns.push(linkOptions.maskDefinitions[chr]);
                  characterCount++;
                  if (!isOptional) {
                    minRequiredLength++;
                  }
                } else if (chr === '?') {
                  isOptional = true;
                } else {
                  maskPlaceholder += chr;
                  characterCount++;
                }
              });
            }
            // Caret position immediately following last position is valid.
            maskCaretMap.push(maskCaretMap.slice().pop() + 1);
            maskComponents = getMaskComponents();
            maskProcessed = maskCaretMap.length > 1 ? true : false;
          }
          function blurHandler() {
            oldCaretPosition = 0;
            oldSelectionLength = 0;
            if (!isValid || value.length === 0) {
              valueMasked = '';
              iElement.val('');
              scope.$apply(function () {
                controller.$setViewValue('');
              });
            }
          }
          function mouseDownUpHandler(e) {
            if (e.type === 'mousedown') {
              iElement.bind('mouseout', mouseoutHandler);
            } else {
              iElement.unbind('mouseout', mouseoutHandler);
            }
          }
          iElement.bind('mousedown mouseup', mouseDownUpHandler);
          function mouseoutHandler() {
            /*jshint validthis: true */
            oldSelectionLength = getSelectionLength(this);
            iElement.unbind('mouseout', mouseoutHandler);
          }
          function eventHandler(e) {
            /*jshint validthis: true */
            e = e || {};
            // Allows more efficient minification
            var eventWhich = e.which, eventType = e.type;
            // Prevent shift and ctrl from mucking with old values
            if (eventWhich === 16 || eventWhich === 91) {
              return;
            }
            var val = iElement.val(), valOld = oldValue, valMasked, valUnmasked = unmaskValue(val), valUnmaskedOld = oldValueUnmasked, valAltered = false, caretPos = getCaretPosition(this) || 0, caretPosOld = oldCaretPosition || 0, caretPosDelta = caretPos - caretPosOld, caretPosMin = maskCaretMap[0], caretPosMax = maskCaretMap[valUnmasked.length] || maskCaretMap.slice().shift(), selectionLenOld = oldSelectionLength || 0, isSelected = getSelectionLength(this) > 0, wasSelected = selectionLenOld > 0,
              // Case: Typing a character to overwrite a selection
              isAddition = val.length > valOld.length || selectionLenOld && val.length > valOld.length - selectionLenOld,
              // Case: Delete and backspace behave identically on a selection
              isDeletion = val.length < valOld.length || selectionLenOld && val.length === valOld.length - selectionLenOld, isSelection = eventWhich >= 37 && eventWhich <= 40 && e.shiftKey,
              // Arrow key codes
              isKeyLeftArrow = eventWhich === 37,
              // Necessary due to "input" event not providing a key code
              isKeyBackspace = eventWhich === 8 || eventType !== 'keyup' && isDeletion && caretPosDelta === -1, isKeyDelete = eventWhich === 46 || eventType !== 'keyup' && isDeletion && caretPosDelta === 0 && !wasSelected,
              // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below
              // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of
              // non-mask character. Also applied to click since users are (arguably) more likely to backspace
              // a character when clicking within a filled input.
              caretBumpBack = (isKeyLeftArrow || isKeyBackspace || eventType === 'click') && caretPos > caretPosMin;
            oldSelectionLength = getSelectionLength(this);
            // These events don't require any action
            if (isSelection || isSelected && (eventType === 'click' || eventType === 'keyup')) {
              return;
            }
            // Value Handling
            // ==============
            // User attempted to delete but raw value was unaffected--correct this grievous offense
            if (eventType === 'input' && isDeletion && !wasSelected && valUnmasked === valUnmaskedOld) {
              while (isKeyBackspace && caretPos > caretPosMin && !isValidCaretPosition(caretPos)) {
                caretPos--;
              }
              while (isKeyDelete && caretPos < caretPosMax && maskCaretMap.indexOf(caretPos) === -1) {
                caretPos++;
              }
              var charIndex = maskCaretMap.indexOf(caretPos);
              // Strip out non-mask character that user would have deleted if mask hadn't been in the way.
              valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);
              valAltered = true;
            }
            // Update values
            valMasked = maskValue(valUnmasked);
            oldValue = valMasked;
            oldValueUnmasked = valUnmasked;
            iElement.val(valMasked);
            if (valAltered) {
              // We've altered the raw value after it's been $digest'ed, we need to $apply the new value.
              scope.$apply(function () {
                controller.$setViewValue(valUnmasked);
              });
            }
            // Caret Repositioning
            // ===================
            // Ensure that typing always places caret ahead of typed character in cases where the first char of
            // the input is a mask char and the caret is placed at the 0 position.
            if (isAddition && caretPos <= caretPosMin) {
              caretPos = caretPosMin + 1;
            }
            if (caretBumpBack) {
              caretPos--;
            }
            // Make sure caret is within min and max position limits
            caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;
            // Scoot the caret back or forth until it's in a non-mask position and within min/max position limits
            while (!isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax) {
              caretPos += caretBumpBack ? -1 : 1;
            }
            if (caretBumpBack && caretPos < caretPosMax || isAddition && !isValidCaretPosition(caretPosOld)) {
              caretPos++;
            }
            oldCaretPosition = caretPos;
            setCaretPosition(this, caretPos);
          }
          function isValidCaretPosition(pos) {
            return maskCaretMap.indexOf(pos) > -1;
          }
          function getCaretPosition(input) {
            if (!input)
              return 0;
            if (input.selectionStart !== undefined) {
              return input.selectionStart;
            } else if (document.selection) {
              // Curse you IE
              input.focus();
              var selection = document.selection.createRange();
              selection.moveStart('character', -input.value.length);
              return selection.text.length;
            }
            return 0;
          }
          function setCaretPosition(input, pos) {
            if (!input)
              return 0;
            if (input.offsetWidth === 0 || input.offsetHeight === 0) {
              return;  // Input's hidden
            }
            if (input.setSelectionRange) {
              input.focus();
              input.setSelectionRange(pos, pos);
            } else if (input.createTextRange) {
              // Curse you IE
              var range = input.createTextRange();
              range.collapse(true);
              range.moveEnd('character', pos);
              range.moveStart('character', pos);
              range.select();
            }
          }
          function getSelectionLength(input) {
            if (!input)
              return 0;
            if (input.selectionStart !== undefined) {
              return input.selectionEnd - input.selectionStart;
            }
            if (document.selection) {
              return document.selection.createRange().text.length;
            }
            return 0;
          }
          // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
          if (!Array.prototype.indexOf) {
            Array.prototype.indexOf = function (searchElement) {
              if (this === null) {
                throw new TypeError();
              }
              var t = Object(this);
              var len = t.length >>> 0;
              if (len === 0) {
                return -1;
              }
              var n = 0;
              if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n !== n) {
                  // shortcut for verifying if it's NaN
                  n = 0;
                } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                  n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
              }
              if (n >= len) {
                return -1;
              }
              var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
              for (; k < len; k++) {
                if (k in t && t[k] === searchElement) {
                  return k;
                }
              }
              return -1;
            };
          }
        };
      }
    };
  }
]);
'use strict';
/**
 * Add a clear button to form inputs to reset their value
 */
angular.module('ui.reset', []).value('uiResetConfig', null).directive('uiReset', [
  'uiResetConfig',
  function (uiResetConfig) {
    var resetValue = null;
    if (uiResetConfig !== undefined) {
      resetValue = uiResetConfig;
    }
    return {
      require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
        var aElement;
        aElement = angular.element('<a class="ui-reset" />');
        elm.wrap('<span class="ui-resetwrap" />').after(aElement);
        aElement.bind('click', function (e) {
          e.preventDefault();
          scope.$apply(function () {
            if (attrs.uiReset) {
              ctrl.$setViewValue(scope.$eval(attrs.uiReset));
            } else {
              ctrl.$setViewValue(resetValue);
            }
            ctrl.$render();
          });
        });
      }
    };
  }
]);
'use strict';
/**
 * Set a $uiRoute boolean to see if the current route matches
 */
angular.module('ui.route', []).directive('uiRoute', [
  '$location',
  '$parse',
  function ($location, $parse) {
    return {
      restrict: 'AC',
      scope: true,
      compile: function (tElement, tAttrs) {
        var useProperty;
        if (tAttrs.uiRoute) {
          useProperty = 'uiRoute';
        } else if (tAttrs.ngHref) {
          useProperty = 'ngHref';
        } else if (tAttrs.href) {
          useProperty = 'href';
        } else {
          throw new Error('uiRoute missing a route or href property on ' + tElement[0]);
        }
        return function ($scope, elm, attrs) {
          var modelSetter = $parse(attrs.ngModel || attrs.routeModel || '$uiRoute').assign;
          var watcher = angular.noop;
          // Used by href and ngHref
          function staticWatcher(newVal) {
            var hash = newVal.indexOf('#');
            if (hash > -1) {
              newVal = newVal.substr(hash + 1);
            }
            watcher = function watchHref() {
              modelSetter($scope, $location.path().indexOf(newVal) > -1);
            };
            watcher();
          }
          // Used by uiRoute
          function regexWatcher(newVal) {
            var hash = newVal.indexOf('#');
            if (hash > -1) {
              newVal = newVal.substr(hash + 1);
            }
            watcher = function watchRegex() {
              var regexp = new RegExp('^' + newVal + '$', ['i']);
              modelSetter($scope, regexp.test($location.path()));
            };
            watcher();
          }
          switch (useProperty) {
          case 'uiRoute':
            // if uiRoute={{}} this will be undefined, otherwise it will have a value and $observe() never gets triggered
            if (attrs.uiRoute) {
              regexWatcher(attrs.uiRoute);
            } else {
              attrs.$observe('uiRoute', regexWatcher);
            }
            break;
          case 'ngHref':
            // Setup watcher() every time ngHref changes
            if (attrs.ngHref) {
              staticWatcher(attrs.ngHref);
            } else {
              attrs.$observe('ngHref', staticWatcher);
            }
            break;
          case 'href':
            // Setup watcher()
            staticWatcher(attrs.href);
          }
          $scope.$on('$routeChangeSuccess', function () {
            watcher();
          });
          //Added for compatibility with ui-router
          $scope.$on('$stateChangeSuccess', function () {
            watcher();
          });
        };
      }
    };
  }
]);
'use strict';
angular.module('ui.scroll.jqlite', ['ui.scroll']).service('jqLiteExtras', [
  '$log',
  '$window',
  function (console, window) {
    return {
      registerFor: function (element) {
        var convertToPx, css, getMeasurements, getStyle, getWidthHeight, isWindow, scrollTo;
        css = angular.element.prototype.css;
        element.prototype.css = function (name, value) {
          var elem, self;
          self = this;
          elem = self[0];
          if (!(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style)) {
            return css.call(self, name, value);
          }
        };
        isWindow = function (obj) {
          return obj && obj.document && obj.location && obj.alert && obj.setInterval;
        };
        scrollTo = function (self, direction, value) {
          var elem, method, preserve, prop, _ref;
          elem = self[0];
          _ref = {
            top: [
              'scrollTop',
              'pageYOffset',
              'scrollLeft'
            ],
            left: [
              'scrollLeft',
              'pageXOffset',
              'scrollTop'
            ]
          }[direction], method = _ref[0], prop = _ref[1], preserve = _ref[2];
          if (isWindow(elem)) {
            if (angular.isDefined(value)) {
              return elem.scrollTo(self[preserve].call(self), value);
            } else {
              if (prop in elem) {
                return elem[prop];
              } else {
                return elem.document.documentElement[method];
              }
            }
          } else {
            if (angular.isDefined(value)) {
              return elem[method] = value;
            } else {
              return elem[method];
            }
          }
        };
        if (window.getComputedStyle) {
          getStyle = function (elem) {
            return window.getComputedStyle(elem, null);
          };
          convertToPx = function (elem, value) {
            return parseFloat(value);
          };
        } else {
          getStyle = function (elem) {
            return elem.currentStyle;
          };
          convertToPx = function (elem, value) {
            var core_pnum, left, result, rnumnonpx, rs, rsLeft, style;
            core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
            rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i');
            if (!rnumnonpx.test(value)) {
              return parseFloat(value);
            } else {
              style = elem.style;
              left = style.left;
              rs = elem.runtimeStyle;
              rsLeft = rs && rs.left;
              if (rs) {
                rs.left = style.left;
              }
              style.left = value;
              result = style.pixelLeft;
              style.left = left;
              if (rsLeft) {
                rs.left = rsLeft;
              }
              return result;
            }
          };
        }
        getMeasurements = function (elem, measure) {
          var base, borderA, borderB, computedMarginA, computedMarginB, computedStyle, dirA, dirB, marginA, marginB, paddingA, paddingB, _ref;
          if (isWindow(elem)) {
            base = document.documentElement[{
              height: 'clientHeight',
              width: 'clientWidth'
            }[measure]];
            return {
              base: base,
              padding: 0,
              border: 0,
              margin: 0
            };
          }
          _ref = {
            width: [
              elem.offsetWidth,
              'Left',
              'Right'
            ],
            height: [
              elem.offsetHeight,
              'Top',
              'Bottom'
            ]
          }[measure], base = _ref[0], dirA = _ref[1], dirB = _ref[2];
          computedStyle = getStyle(elem);
          paddingA = convertToPx(elem, computedStyle['padding' + dirA]) || 0;
          paddingB = convertToPx(elem, computedStyle['padding' + dirB]) || 0;
          borderA = convertToPx(elem, computedStyle['border' + dirA + 'Width']) || 0;
          borderB = convertToPx(elem, computedStyle['border' + dirB + 'Width']) || 0;
          computedMarginA = computedStyle['margin' + dirA];
          computedMarginB = computedStyle['margin' + dirB];
          marginA = convertToPx(elem, computedMarginA) || 0;
          marginB = convertToPx(elem, computedMarginB) || 0;
          return {
            base: base,
            padding: paddingA + paddingB,
            border: borderA + borderB,
            margin: marginA + marginB
          };
        };
        getWidthHeight = function (elem, direction, measure) {
          var computedStyle, measurements, result;
          measurements = getMeasurements(elem, direction);
          if (measurements.base > 0) {
            return {
              base: measurements.base - measurements.padding - measurements.border,
              outer: measurements.base,
              outerfull: measurements.base + measurements.margin
            }[measure];
          } else {
            computedStyle = getStyle(elem);
            result = computedStyle[direction];
            if (result < 0 || result === null) {
              result = elem.style[direction] || 0;
            }
            result = parseFloat(result) || 0;
            return {
              base: result - measurements.padding - measurements.border,
              outer: result,
              outerfull: result + measurements.padding + measurements.border + measurements.margin
            }[measure];
          }
        };
        return angular.forEach({
          before: function (newElem) {
            var children, elem, i, parent, self, _i, _ref;
            self = this;
            elem = self[0];
            parent = self.parent();
            children = parent.contents();
            if (children[0] === elem) {
              return parent.prepend(newElem);
            } else {
              for (i = _i = 1, _ref = children.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                if (children[i] === elem) {
                  angular.element(children[i - 1]).after(newElem);
                  return;
                }
              }
              throw new Error('invalid DOM structure ' + elem.outerHTML);
            }
          },
          height: function (value) {
            var self;
            self = this;
            if (angular.isDefined(value)) {
              if (angular.isNumber(value)) {
                value = value + 'px';
              }
              return css.call(self, 'height', value);
            } else {
              return getWidthHeight(this[0], 'height', 'base');
            }
          },
          outerHeight: function (option) {
            return getWidthHeight(this[0], 'height', option ? 'outerfull' : 'outer');
          },
          offset: function (value) {
            var box, doc, docElem, elem, self, win;
            self = this;
            if (arguments.length) {
              if (value === void 0) {
                return self;
              } else {
                return value;
              }
            }
            box = {
              top: 0,
              left: 0
            };
            elem = self[0];
            doc = elem && elem.ownerDocument;
            if (!doc) {
              return;
            }
            docElem = doc.documentElement;
            if (elem.getBoundingClientRect) {
              box = elem.getBoundingClientRect();
            }
            win = doc.defaultView || doc.parentWindow;
            return {
              top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
              left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
          },
          scrollTop: function (value) {
            return scrollTo(this, 'top', value);
          },
          scrollLeft: function (value) {
            return scrollTo(this, 'left', value);
          }
        }, function (value, key) {
          if (!element.prototype[key]) {
            return element.prototype[key] = value;
          }
        });
      }
    };
  }
]).run([
  '$log',
  '$window',
  'jqLiteExtras',
  function (console, window, jqLiteExtras) {
    if (!window.jQuery) {
      return jqLiteExtras.registerFor(angular.element);
    }
  }
]);
'use strict';
/*

 List of used element methods available in JQuery but not in JQuery Lite

 element.before(elem)
 element.height()
 element.outerHeight(true)
 element.height(value) = only for Top/Bottom padding elements
 element.scrollTop()
 element.scrollTop(value)
 */
angular.module('ui.scroll', []).directive('ngScrollViewport', [
  '$log',
  function () {
    return {
      controller: [
        '$scope',
        '$element',
        function (scope, element) {
          return element;
        }
      ]
    };
  }
]).directive('ngScroll', [
  '$log',
  '$injector',
  '$rootScope',
  '$timeout',
  function (console, $injector, $rootScope, $timeout) {
    return {
      require: ['?^ngScrollViewport'],
      transclude: 'element',
      priority: 1000,
      terminal: true,
      compile: function (element, attr, linker) {
        return function ($scope, $element, $attr, controllers) {
          var adapter, adjustBuffer, adjustRowHeight, bof, bottomVisiblePos, buffer, bufferPadding, bufferSize, clipBottom, clipTop, datasource, datasourceName, enqueueFetch, eof, eventListener, fetch, finalize, first, insert, isDatasource, isLoading, itemName, loading, match, next, pending, reload, removeFromBuffer, resizeHandler, scrollHandler, scrollHeight, shouldLoadBottom, shouldLoadTop, tempScope, topVisiblePos, viewport;
          match = $attr.ngScroll.match(/^\s*(\w+)\s+in\s+(\w+)\s*$/);
          if (!match) {
            throw new Error('Expected ngScroll in form of "item_ in _datasource_" but got "' + $attr.ngScroll + '"');
          }
          itemName = match[1];
          datasourceName = match[2];
          isDatasource = function (datasource) {
            return angular.isObject(datasource) && datasource.get && angular.isFunction(datasource.get);
          };
          datasource = $scope[datasourceName];
          if (!isDatasource(datasource)) {
            datasource = $injector.get(datasourceName);
            if (!isDatasource(datasource)) {
              throw new Error(datasourceName + ' is not a valid datasource');
            }
          }
          bufferSize = Math.max(3, +$attr.bufferSize || 10);
          bufferPadding = function () {
            return viewport.height() * Math.max(0.1, +$attr.padding || 0.1);
          };
          scrollHeight = function (elem) {
            return elem[0].scrollHeight || elem[0].document.documentElement.scrollHeight;
          };
          adapter = null;
          linker(tempScope = $scope.$new(), function (template) {
            var bottomPadding, createPadding, padding, repeaterType, topPadding, viewport;
            repeaterType = template[0].localName;
            if (repeaterType === 'dl') {
              throw new Error('ng-scroll directive does not support <' + template[0].localName + '> as a repeating tag: ' + template[0].outerHTML);
            }
            if (repeaterType !== 'li' && repeaterType !== 'tr') {
              repeaterType = 'div';
            }
            viewport = controllers[0] || angular.element(window);
            viewport.css({
              'overflow-y': 'auto',
              'display': 'block'
            });
            padding = function (repeaterType) {
              var div, result, table;
              switch (repeaterType) {
              case 'tr':
                table = angular.element('<table><tr><td><div></div></td></tr></table>');
                div = table.find('div');
                result = table.find('tr');
                result.paddingHeight = function () {
                  return div.height.apply(div, arguments);
                };
                return result;
              default:
                result = angular.element('<' + repeaterType + '></' + repeaterType + '>');
                result.paddingHeight = result.height;
                return result;
              }
            };
            createPadding = function (padding, element, direction) {
              element[{
                top: 'before',
                bottom: 'after'
              }[direction]](padding);
              return {
                paddingHeight: function () {
                  return padding.paddingHeight.apply(padding, arguments);
                },
                insert: function (element) {
                  return padding[{
                    top: 'after',
                    bottom: 'before'
                  }[direction]](element);
                }
              };
            };
            topPadding = createPadding(padding(repeaterType), element, 'top');
            bottomPadding = createPadding(padding(repeaterType), element, 'bottom');
            tempScope.$destroy();
            return adapter = {
              viewport: viewport,
              topPadding: topPadding.paddingHeight,
              bottomPadding: bottomPadding.paddingHeight,
              append: bottomPadding.insert,
              prepend: topPadding.insert,
              bottomDataPos: function () {
                return scrollHeight(viewport) - bottomPadding.paddingHeight();
              },
              topDataPos: function () {
                return topPadding.paddingHeight();
              }
            };
          });
          viewport = adapter.viewport;
          first = 1;
          next = 1;
          buffer = [];
          pending = [];
          eof = false;
          bof = false;
          loading = datasource.loading || function () {
          };
          isLoading = false;
          removeFromBuffer = function (start, stop) {
            var i, _i;
            for (i = _i = start; start <= stop ? _i < stop : _i > stop; i = start <= stop ? ++_i : --_i) {
              buffer[i].scope.$destroy();
              buffer[i].element.remove();
            }
            return buffer.splice(start, stop - start);
          };
          reload = function () {
            first = 1;
            next = 1;
            removeFromBuffer(0, buffer.length);
            adapter.topPadding(0);
            adapter.bottomPadding(0);
            pending = [];
            eof = false;
            bof = false;
            return adjustBuffer(false);
          };
          bottomVisiblePos = function () {
            return viewport.scrollTop() + viewport.height();
          };
          topVisiblePos = function () {
            return viewport.scrollTop();
          };
          shouldLoadBottom = function () {
            return !eof && adapter.bottomDataPos() < bottomVisiblePos() + bufferPadding();
          };
          clipBottom = function () {
            var bottomHeight, i, itemHeight, overage, _i, _ref;
            bottomHeight = 0;
            overage = 0;
            for (i = _i = _ref = buffer.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
              itemHeight = buffer[i].element.outerHeight(true);
              if (adapter.bottomDataPos() - bottomHeight - itemHeight > bottomVisiblePos() + bufferPadding()) {
                bottomHeight += itemHeight;
                overage++;
                eof = false;
              } else {
                break;
              }
            }
            if (overage > 0) {
              adapter.bottomPadding(adapter.bottomPadding() + bottomHeight);
              removeFromBuffer(buffer.length - overage, buffer.length);
              next -= overage;
              return console.log('clipped off bottom ' + overage + ' bottom padding ' + adapter.bottomPadding());
            }
          };
          shouldLoadTop = function () {
            return !bof && adapter.topDataPos() > topVisiblePos() - bufferPadding();
          };
          clipTop = function () {
            var item, itemHeight, overage, topHeight, _i, _len;
            topHeight = 0;
            overage = 0;
            for (_i = 0, _len = buffer.length; _i < _len; _i++) {
              item = buffer[_i];
              itemHeight = item.element.outerHeight(true);
              if (adapter.topDataPos() + topHeight + itemHeight < topVisiblePos() - bufferPadding()) {
                topHeight += itemHeight;
                overage++;
                bof = false;
              } else {
                break;
              }
            }
            if (overage > 0) {
              adapter.topPadding(adapter.topPadding() + topHeight);
              removeFromBuffer(0, overage);
              first += overage;
              return console.log('clipped off top ' + overage + ' top padding ' + adapter.topPadding());
            }
          };
          enqueueFetch = function (direction, scrolling) {
            if (!isLoading) {
              isLoading = true;
              loading(true);
            }
            if (pending.push(direction) === 1) {
              return fetch(scrolling);
            }
          };
          insert = function (index, item) {
            var itemScope, toBeAppended, wrapper;
            itemScope = $scope.$new();
            itemScope[itemName] = item;
            toBeAppended = index > first;
            itemScope.$index = index;
            if (toBeAppended) {
              itemScope.$index--;
            }
            wrapper = { scope: itemScope };
            linker(itemScope, function (clone) {
              wrapper.element = clone;
              if (toBeAppended) {
                if (index === next) {
                  adapter.append(clone);
                  return buffer.push(wrapper);
                } else {
                  buffer[index - first].element.after(clone);
                  return buffer.splice(index - first + 1, 0, wrapper);
                }
              } else {
                adapter.prepend(clone);
                return buffer.unshift(wrapper);
              }
            });
            return {
              appended: toBeAppended,
              wrapper: wrapper
            };
          };
          adjustRowHeight = function (appended, wrapper) {
            var newHeight;
            if (appended) {
              return adapter.bottomPadding(Math.max(0, adapter.bottomPadding() - wrapper.element.outerHeight(true)));
            } else {
              newHeight = adapter.topPadding() - wrapper.element.outerHeight(true);
              if (newHeight >= 0) {
                return adapter.topPadding(newHeight);
              } else {
                return viewport.scrollTop(viewport.scrollTop() + wrapper.element.outerHeight(true));
              }
            }
          };
          adjustBuffer = function (scrolling, newItems, finalize) {
            var doAdjustment;
            doAdjustment = function () {
              console.log('top {actual=' + adapter.topDataPos() + ' visible from=' + topVisiblePos() + ' bottom {visible through=' + bottomVisiblePos() + ' actual=' + adapter.bottomDataPos() + '}');
              if (shouldLoadBottom()) {
                enqueueFetch(true, scrolling);
              } else {
                if (shouldLoadTop()) {
                  enqueueFetch(false, scrolling);
                }
              }
              if (finalize) {
                return finalize();
              }
            };
            if (newItems) {
              return $timeout(function () {
                var row, _i, _len;
                for (_i = 0, _len = newItems.length; _i < _len; _i++) {
                  row = newItems[_i];
                  adjustRowHeight(row.appended, row.wrapper);
                }
                return doAdjustment();
              });
            } else {
              return doAdjustment();
            }
          };
          finalize = function (scrolling, newItems) {
            return adjustBuffer(scrolling, newItems, function () {
              pending.shift();
              if (pending.length === 0) {
                isLoading = false;
                return loading(false);
              } else {
                return fetch(scrolling);
              }
            });
          };
          fetch = function (scrolling) {
            var direction;
            direction = pending[0];
            if (direction) {
              if (buffer.length && !shouldLoadBottom()) {
                return finalize(scrolling);
              } else {
                return datasource.get(next, bufferSize, function (result) {
                  var item, newItems, _i, _len;
                  newItems = [];
                  if (result.length === 0) {
                    eof = true;
                    adapter.bottomPadding(0);
                    console.log('appended: requested ' + bufferSize + ' records starting from ' + next + ' recieved: eof');
                  } else {
                    clipTop();
                    for (_i = 0, _len = result.length; _i < _len; _i++) {
                      item = result[_i];
                      newItems.push(insert(++next, item));
                    }
                    console.log('appended: requested ' + bufferSize + ' received ' + result.length + ' buffer size ' + buffer.length + ' first ' + first + ' next ' + next);
                  }
                  return finalize(scrolling, newItems);
                });
              }
            } else {
              if (buffer.length && !shouldLoadTop()) {
                return finalize(scrolling);
              } else {
                return datasource.get(first - bufferSize, bufferSize, function (result) {
                  var i, newItems, _i, _ref;
                  newItems = [];
                  if (result.length === 0) {
                    bof = true;
                    adapter.topPadding(0);
                    console.log('prepended: requested ' + bufferSize + ' records starting from ' + (first - bufferSize) + ' recieved: bof');
                  } else {
                    clipBottom();
                    for (i = _i = _ref = result.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
                      newItems.unshift(insert(--first, result[i]));
                    }
                    console.log('prepended: requested ' + bufferSize + ' received ' + result.length + ' buffer size ' + buffer.length + ' first ' + first + ' next ' + next);
                  }
                  return finalize(scrolling, newItems);
                });
              }
            }
          };
          resizeHandler = function () {
            if (!$rootScope.$$phase && !isLoading) {
              adjustBuffer(false);
              return $scope.$apply();
            }
          };
          viewport.bind('resize', resizeHandler);
          scrollHandler = function () {
            if (!$rootScope.$$phase && !isLoading) {
              adjustBuffer(true);
              return $scope.$apply();
            }
          };
          viewport.bind('scroll', scrollHandler);
          $scope.$watch(datasource.revision, function () {
            return reload();
          });
          if (datasource.scope) {
            eventListener = datasource.scope.$new();
          } else {
            eventListener = $scope.$new();
          }
          $scope.$on('$destroy', function () {
            eventListener.$destroy();
            viewport.unbind('resize', resizeHandler);
            return viewport.unbind('scroll', scrollHandler);
          });
          eventListener.$on('update.items', function (event, locator, newItem) {
            var wrapper, _fn, _i, _len, _ref;
            if (angular.isFunction(locator)) {
              _fn = function (wrapper) {
                return locator(wrapper.scope);
              };
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                wrapper = buffer[_i];
                _fn(wrapper);
              }
            } else {
              if (0 <= (_ref = locator - first - 1) && _ref < buffer.length) {
                buffer[locator - first - 1].scope[itemName] = newItem;
              }
            }
            return null;
          });
          eventListener.$on('delete.items', function (event, locator) {
            var i, item, temp, wrapper, _fn, _i, _j, _k, _len, _len1, _len2, _ref;
            if (angular.isFunction(locator)) {
              temp = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                temp.unshift(item);
              }
              _fn = function (wrapper) {
                if (locator(wrapper.scope)) {
                  removeFromBuffer(temp.length - 1 - i, temp.length - i);
                  return next--;
                }
              };
              for (i = _j = 0, _len1 = temp.length; _j < _len1; i = ++_j) {
                wrapper = temp[i];
                _fn(wrapper);
              }
            } else {
              if (0 <= (_ref = locator - first - 1) && _ref < buffer.length) {
                removeFromBuffer(locator - first - 1, locator - first);
                next--;
              }
            }
            for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer(false);
          });
          return eventListener.$on('insert.item', function (event, locator, item) {
            var i, inserted, temp, wrapper, _fn, _i, _j, _k, _len, _len1, _len2, _ref;
            inserted = [];
            if (angular.isFunction(locator)) {
              temp = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                temp.unshift(item);
              }
              _fn = function (wrapper) {
                var j, newItems, _k, _len2, _results;
                if (newItems = locator(wrapper.scope)) {
                  insert = function (index, newItem) {
                    insert(index, newItem);
                    return next++;
                  };
                  if (angular.isArray(newItems)) {
                    _results = [];
                    for (j = _k = 0, _len2 = newItems.length; _k < _len2; j = ++_k) {
                      item = newItems[j];
                      _results.push(inserted.push(insert(i + j, item)));
                    }
                    return _results;
                  } else {
                    return inserted.push(insert(i, newItems));
                  }
                }
              };
              for (i = _j = 0, _len1 = temp.length; _j < _len1; i = ++_j) {
                wrapper = temp[i];
                _fn(wrapper);
              }
            } else {
              if (0 <= (_ref = locator - first - 1) && _ref < buffer.length) {
                inserted.push(insert(locator, item));
                next++;
              }
            }
            for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer(false, inserted);
          });
        };
      }
    };
  }
]);
'use strict';
/**
 * Adds a 'ui-scrollfix' class to the element when the page scrolls past it's position.
 * @param [offset] {int} optional Y-offset to override the detected offset.
 *   Takes 300 (absolute) or -300 or +300 (relative to detected)
 */
angular.module('ui.scrollfix', []).directive('uiScrollfix', [
  '$window',
  function ($window) {
    return {
      require: '^?uiScrollfixTarget',
      link: function (scope, elm, attrs, uiScrollfixTarget) {
        var top = elm[0].offsetTop, $target = uiScrollfixTarget && uiScrollfixTarget.$element || angular.element($window);
        if (!attrs.uiScrollfix) {
          attrs.uiScrollfix = top;
        } else if (typeof attrs.uiScrollfix === 'string') {
          // charAt is generally faster than indexOf: http://jsperf.com/indexof-vs-charat
          if (attrs.uiScrollfix.charAt(0) === '-') {
            attrs.uiScrollfix = top - parseFloat(attrs.uiScrollfix.substr(1));
          } else if (attrs.uiScrollfix.charAt(0) === '+') {
            attrs.uiScrollfix = top + parseFloat(attrs.uiScrollfix.substr(1));
          }
        }
        function onScroll() {
          // if pageYOffset is defined use it, otherwise use other crap for IE
          var offset;
          if (angular.isDefined($window.pageYOffset)) {
            offset = $window.pageYOffset;
          } else {
            var iebody = document.compatMode && document.compatMode !== 'BackCompat' ? document.documentElement : document.body;
            offset = iebody.scrollTop;
          }
          if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {
            elm.addClass('ui-scrollfix');
          } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {
            elm.removeClass('ui-scrollfix');
          }
        }
        $target.on('scroll', onScroll);
        // Unbind scroll event handler when directive is removed
        scope.$on('$destroy', function () {
          $target.off('scroll', onScroll);
        });
      }
    };
  }
]).directive('uiScrollfixTarget', [function () {
    return {
      controller: [
        '$element',
        function ($element) {
          this.$element = $element;
        }
      ]
    };
  }]);
'use strict';
/**
 * uiShow Directive
 *
 * Adds a 'ui-show' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
angular.module('ui.showhide', []).directive('uiShow', [function () {
    return function (scope, elm, attrs) {
      scope.$watch(attrs.uiShow, function (newVal) {
        if (newVal) {
          elm.addClass('ui-show');
        } else {
          elm.removeClass('ui-show');
        }
      });
    };
  }]).directive('uiHide', [function () {
    return function (scope, elm, attrs) {
      scope.$watch(attrs.uiHide, function (newVal) {
        if (newVal) {
          elm.addClass('ui-hide');
        } else {
          elm.removeClass('ui-hide');
        }
      });
    };
  }]).directive('uiToggle', [function () {
    return function (scope, elm, attrs) {
      scope.$watch(attrs.uiToggle, function (newVal) {
        if (newVal) {
          elm.removeClass('ui-hide').addClass('ui-show');
        } else {
          elm.removeClass('ui-show').addClass('ui-hide');
        }
      });
    };
  }]);
'use strict';
/**
 * Filters out all duplicate items from an array by checking the specified key
 * @param [key] {string} the name of the attribute of each object to compare for uniqueness
 if the key is empty, the entire object will be compared
 if the key === false then no filtering will be performed
 * @return {array}
 */
angular.module('ui.unique', []).filter('unique', [
  '$parse',
  function ($parse) {
    return function (items, filterOn) {
      if (filterOn === false) {
        return items;
      }
      if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
        var newItems = [], get = angular.isString(filterOn) ? $parse(filterOn) : function (item) {
            return item;
          };
        var extractValueToCompare = function (item) {
          return angular.isObject(item) ? get(item) : item;
        };
        angular.forEach(items, function (item) {
          var isDuplicate = false;
          for (var i = 0; i < newItems.length; i++) {
            if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
              isDuplicate = true;
              break;
            }
          }
          if (!isDuplicate) {
            newItems.push(item);
          }
        });
        items = newItems;
      }
      return items;
    };
  }
]);
'use strict';
/**
 * General-purpose validator for ngModel.
 * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using
 * an arbitrary validation function requires creation of a custom formatters and / or parsers.
 * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).
 * A validator function will trigger validation on both model and input changes.
 *
 * @example <input ui-validate=" 'myValidatorFunction($value)' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }">
 * @example <input ui-validate="{ foo : '$value > anotherModel' }" ui-validate-watch=" 'anotherModel' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }" ui-validate-watch=" { foo : 'anotherModel' } ">
 *
 * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.
 * If an object literal is passed a key denotes a validation error key while a value should be a validator function.
 * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.
 */
angular.module('ui.validate', []).directive('uiValidate', function () {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      var validateFn, validators = {}, validateExpr = scope.$eval(attrs.uiValidate);
      if (!validateExpr) {
        return;
      }
      if (angular.isString(validateExpr)) {
        validateExpr = { validator: validateExpr };
      }
      angular.forEach(validateExpr, function (exprssn, key) {
        validateFn = function (valueToValidate) {
          var expression = scope.$eval(exprssn, { '$value': valueToValidate });
          if (angular.isObject(expression) && angular.isFunction(expression.then)) {
            // expression is a promise
            expression.then(function () {
              ctrl.$setValidity(key, true);
            }, function () {
              ctrl.$setValidity(key, false);
            });
            return valueToValidate;
          } else if (expression) {
            // expression is true
            ctrl.$setValidity(key, true);
            return valueToValidate;
          } else {
            // expression is false
            ctrl.$setValidity(key, false);
            return valueToValidate;
          }
        };
        validators[key] = validateFn;
        ctrl.$formatters.push(validateFn);
        ctrl.$parsers.push(validateFn);
      });
      function apply_watch(watch) {
        //string - update all validators on expression change
        if (angular.isString(watch)) {
          scope.$watch(watch, function () {
            angular.forEach(validators, function (validatorFn) {
              validatorFn(ctrl.$modelValue);
            });
          });
          return;
        }
        //array - update all validators on change of any expression
        if (angular.isArray(watch)) {
          angular.forEach(watch, function (expression) {
            scope.$watch(expression, function () {
              angular.forEach(validators, function (validatorFn) {
                validatorFn(ctrl.$modelValue);
              });
            });
          });
          return;
        }
        //object - update appropriate validator
        if (angular.isObject(watch)) {
          angular.forEach(watch, function (expression, validatorKey) {
            //value is string - look after one expression
            if (angular.isString(expression)) {
              scope.$watch(expression, function () {
                validators[validatorKey](ctrl.$modelValue);
              });
            }
            //value is array - look after all expressions in array
            if (angular.isArray(expression)) {
              angular.forEach(expression, function (intExpression) {
                scope.$watch(intExpression, function () {
                  validators[validatorKey](ctrl.$modelValue);
                });
              });
            }
          });
        }
      }
      // Support for ui-validate-watch
      if (attrs.uiValidateWatch) {
        apply_watch(scope.$eval(attrs.uiValidateWatch));
      }
    }
  };
});
angular.module('ui.utils', [
  'ui.event',
  'ui.format',
  'ui.highlight',
  'ui.include',
  'ui.indeterminate',
  'ui.inflector',
  'ui.jq',
  'ui.keypress',
  'ui.mask',
  'ui.reset',
  'ui.route',
  'ui.scrollfix',
  'ui.scroll',
  'ui.scroll.jqlite',
  'ui.showhide',
  'ui.unique',
  'ui.validate'
]);
!function (e) {
  if ('object' == typeof exports)
    module.exports = e();
  else if ('function' == typeof define && define.amd)
    define(e);
  else {
    var r;
    'undefined' != typeof window ? r = window : 'undefined' != typeof global ? r = global : 'undefined' != typeof self && (r = self), r.s = e();
  }
}(function () {
  return function e(r, t, n) {
    function i(o, p) {
      if (!t[o]) {
        if (!r[o]) {
          var u = 'function' == typeof require && require;
          if (!p && u)
            return u(o, !0);
          if (a)
            return a(o, !0);
          throw new Error('Cannot find module \'' + o + '\'');
        }
        var c = t[o] = { exports: {} };
        r[o][0].call(c.exports, function (e) {
          var t = r[o][1][e];
          return i(t ? t : e);
        }, c, c.exports, e, r, t, n);
      }
      return t[o].exports;
    }
    for (var a = 'function' == typeof require && require, o = 0; o < n.length; o++)
      i(n[o]);
    return i;
  }({
    1: [
      function (e, r) {
        var t = e('./trim'), n = e('./decapitalize');
        r.exports = function (e, r) {
          return e = t(e).replace(/[-_\s]+(.)?/g, function (e, r) {
            return r ? r.toUpperCase() : '';
          }), r === !0 ? n(e) : e;
        };
      },
      {
        './decapitalize': 9,
        './trim': 60
      }
    ],
    2: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e) {
          return e = t(e), e.charAt(0).toUpperCase() + e.slice(1);
        };
      },
      { './helper/makeString': 19 }
    ],
    3: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e) {
          return t(e).split('');
        };
      },
      { './helper/makeString': 19 }
    ],
    4: [
      function (e, r) {
        r.exports = function (e, r) {
          return null == e ? [] : (e = String(e), r = ~~r, r > 0 ? e.match(new RegExp('.{1,' + r + '}', 'g')) : [e]);
        };
      },
      {}
    ],
    5: [
      function (e, r) {
        var t = e('./capitalize'), n = e('./camelize'), i = e('./helper/makeString');
        r.exports = function (e) {
          return e = i(e), t(n(e.replace(/[\W_]/g, ' ')).replace(/\s/g, ''));
        };
      },
      {
        './camelize': 1,
        './capitalize': 2,
        './helper/makeString': 19
      }
    ],
    6: [
      function (e, r) {
        var t = e('./trim');
        r.exports = function (e) {
          return t(e).replace(/\s+/g, ' ');
        };
      },
      { './trim': 60 }
    ],
    7: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r) {
          if (e = t(e), r = t(r), 0 === e.length || 0 === r.length)
            return 0;
          for (var n = 0, i = 0, a = r.length;;) {
            if (i = e.indexOf(r, i), -1 === i)
              break;
            n++, i += a;
          }
          return n;
        };
      },
      { './helper/makeString': 19 }
    ],
    8: [
      function (e, r) {
        var t = e('./trim');
        r.exports = function (e) {
          return t(e).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
        };
      },
      { './trim': 60 }
    ],
    9: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e) {
          return e = t(e), e.charAt(0).toLowerCase() + e.slice(1);
        };
      },
      { './helper/makeString': 19 }
    ],
    10: [
      function (e, r) {
        function t(e) {
          for (var r = e.match(/^[\s\\t]*/gm), t = r[0].length, n = 1; n < r.length; n++)
            t = Math.min(r[n].length, t);
          return t;
        }
        var n = e('./helper/makeString');
        r.exports = function (e, r) {
          e = n(e);
          var i, a = t(e);
          return 0 === a ? e : (i = 'string' == typeof r ? new RegExp('^' + r, 'gm') : new RegExp('^[ \\t]{' + a + '}', 'gm'), e.replace(i, ''));
        };
      },
      { './helper/makeString': 19 }
    ],
    11: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/toPositive');
        r.exports = function (e, r, i) {
          return e = t(e), r = '' + r, i = 'undefined' == typeof i ? e.length - r.length : Math.min(n(i), e.length) - r.length, i >= 0 && e.indexOf(r, i) === i;
        };
      },
      {
        './helper/makeString': 19,
        './helper/toPositive': 21
      }
    ],
    12: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/escapeChars'), i = {};
        for (var a in n)
          i[n[a]] = a;
        i['\''] = '#39', r.exports = function (e) {
          return t(e).replace(/[&<>"']/g, function (e) {
            return '&' + i[e] + ';';
          });
        };
      },
      {
        './helper/escapeChars': 17,
        './helper/makeString': 19
      }
    ],
    13: [
      function (e, r) {
        r.exports = function () {
          var e = {};
          for (var r in this)
            this.hasOwnProperty(r) && !r.match(/^(?:include|contains|reverse|join)$/) && (e[r] = this[r]);
          return e;
        };
      },
      {}
    ],
    14: [
      function (e, r) {
        'use strict';
        function t(e) {
          return this instanceof t ? void (this._wrapped = e) : new t(e);
        }
        function n(e, r) {
          'function' == typeof r && (t.prototype[e] = function () {
            var e = [this._wrapped].concat(Array.prototype.slice.call(arguments)), n = r.apply(null, e);
            return 'string' == typeof n ? new t(n) : n;
          });
        }
        function i(e) {
          n(e, function (r) {
            var t = Array.prototype.slice.call(arguments, 1);
            return String.prototype[e].apply(r, t);
          });
        }
        t.VERSION = '3.0.3', t.isBlank = e('./isBlank'), t.stripTags = e('./stripTags'), t.capitalize = e('./capitalize'), t.decapitalize = e('./decapitalize'), t.chop = e('./chop'), t.trim = e('./trim'), t.clean = e('./clean'), t.count = e('./count'), t.chars = e('./chars'), t.swapCase = e('./swapCase'), t.escapeHTML = e('./escapeHTML'), t.unescapeHTML = e('./unescapeHTML'), t.splice = e('./splice'), t.insert = e('./insert'), t.replaceAll = e('./replaceAll'), t.include = e('./include'), t.join = e('./join'), t.lines = e('./lines'), t.dedent = e('./dedent'), t.reverse = e('./reverse'), t.startsWith = e('./startsWith'), t.endsWith = e('./endsWith'), t.pred = e('./pred'), t.succ = e('./succ'), t.titleize = e('./titleize'), t.camelize = e('./camelize'), t.underscored = e('./underscored'), t.dasherize = e('./dasherize'), t.classify = e('./classify'), t.humanize = e('./humanize'), t.ltrim = e('./ltrim'), t.rtrim = e('./rtrim'), t.truncate = e('./truncate'), t.prune = e('./prune'), t.words = e('./words'), t.pad = e('./pad'), t.lpad = e('./lpad'), t.rpad = e('./rpad'), t.lrpad = e('./lrpad'), t.sprintf = e('./sprintf'), t.vsprintf = e('./vsprintf'), t.toNumber = e('./toNumber'), t.numberFormat = e('./numberFormat'), t.strRight = e('./strRight'), t.strRightBack = e('./strRightBack'), t.strLeft = e('./strLeft'), t.strLeftBack = e('./strLeftBack'), t.toSentence = e('./toSentence'), t.toSentenceSerial = e('./toSentenceSerial'), t.slugify = e('./slugify'), t.surround = e('./surround'), t.quote = e('./quote'), t.unquote = e('./unquote'), t.repeat = e('./repeat'), t.naturalCmp = e('./naturalCmp'), t.levenshtein = e('./levenshtein'), t.toBoolean = e('./toBoolean'), t.exports = e('./exports'), t.escapeRegExp = e('./helper/escapeRegExp'), t.strip = t.trim, t.lstrip = t.ltrim, t.rstrip = t.rtrim, t.center = t.lrpad, t.rjust = t.lpad, t.ljust = t.rpad, t.contains = t.include, t.q = t.quote, t.toBool = t.toBoolean, t.camelcase = t.camelize, t.prototype = {
          value: function () {
            return this._wrapped;
          }
        };
        for (var a in t)
          n(a, t[a]);
        n('tap', function (e, r) {
          return r(e);
        });
        var o = [
            'toUpperCase',
            'toLowerCase',
            'split',
            'replace',
            'slice',
            'substring',
            'substr',
            'concat'
          ];
        for (var a in o)
          i(o[a]);
        r.exports = t;
      },
      {
        './camelize': 1,
        './capitalize': 2,
        './chars': 3,
        './chop': 4,
        './classify': 5,
        './clean': 6,
        './count': 7,
        './dasherize': 8,
        './decapitalize': 9,
        './dedent': 10,
        './endsWith': 11,
        './escapeHTML': 12,
        './exports': 13,
        './helper/escapeRegExp': 18,
        './humanize': 22,
        './include': 23,
        './insert': 24,
        './isBlank': 25,
        './join': 26,
        './levenshtein': 27,
        './lines': 28,
        './lpad': 29,
        './lrpad': 30,
        './ltrim': 31,
        './naturalCmp': 32,
        './numberFormat': 33,
        './pad': 34,
        './pred': 35,
        './prune': 36,
        './quote': 37,
        './repeat': 38,
        './replaceAll': 39,
        './reverse': 40,
        './rpad': 41,
        './rtrim': 42,
        './slugify': 43,
        './splice': 44,
        './sprintf': 45,
        './startsWith': 46,
        './strLeft': 47,
        './strLeftBack': 48,
        './strRight': 49,
        './strRightBack': 50,
        './stripTags': 51,
        './succ': 52,
        './surround': 53,
        './swapCase': 54,
        './titleize': 55,
        './toBoolean': 56,
        './toNumber': 57,
        './toSentence': 58,
        './toSentenceSerial': 59,
        './trim': 60,
        './truncate': 61,
        './underscored': 62,
        './unescapeHTML': 63,
        './unquote': 64,
        './vsprintf': 65,
        './words': 66
      }
    ],
    15: [
      function (e, r) {
        var t = e('./makeString');
        r.exports = function (e, r) {
          return e = t(e), 0 === e.length ? '' : e.slice(0, -1) + String.fromCharCode(e.charCodeAt(e.length - 1) + r);
        };
      },
      { './makeString': 19 }
    ],
    16: [
      function (e, r) {
        var t = e('./escapeRegExp');
        r.exports = function (e) {
          return null == e ? '\\s' : e.source ? e.source : '[' + t(e) + ']';
        };
      },
      { './escapeRegExp': 18 }
    ],
    17: [
      function (e, r) {
        var t = {
            lt: '<',
            gt: '>',
            quot: '"',
            amp: '&',
            apos: '\''
          };
        r.exports = t;
      },
      {}
    ],
    18: [
      function (e, r) {
        var t = e('./makeString');
        r.exports = function (e) {
          return t(e).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
        };
      },
      { './makeString': 19 }
    ],
    19: [
      function (e, r) {
        r.exports = function (e) {
          return null == e ? '' : '' + e;
        };
      },
      {}
    ],
    20: [
      function (e, r) {
        r.exports = function (e, r) {
          if (1 > r)
            return '';
          for (var t = ''; r > 0;)
            1 & r && (t += e), r >>= 1, e += e;
          return t;
        };
      },
      {}
    ],
    21: [
      function (e, r) {
        r.exports = function (e) {
          return 0 > e ? 0 : +e || 0;
        };
      },
      {}
    ],
    22: [
      function (e, r) {
        var t = e('./capitalize'), n = e('./underscored'), i = e('./trim');
        r.exports = function (e) {
          return t(i(n(e).replace(/_id$/, '').replace(/_/g, ' ')));
        };
      },
      {
        './capitalize': 2,
        './trim': 60,
        './underscored': 62
      }
    ],
    23: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r) {
          return '' === r ? !0 : -1 !== t(e).indexOf(r);
        };
      },
      { './helper/makeString': 19 }
    ],
    24: [
      function (e, r) {
        var t = e('./splice');
        r.exports = function (e, r, n) {
          return t(e, r, 0, n);
        };
      },
      { './splice': 44 }
    ],
    25: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e) {
          return /^\s*$/.test(t(e));
        };
      },
      { './helper/makeString': 19 }
    ],
    26: [
      function (e, r) {
        var t = e('./helper/makeString'), n = [].slice;
        r.exports = function () {
          var e = n.call(arguments), r = e.shift();
          return e.join(t(r));
        };
      },
      { './helper/makeString': 19 }
    ],
    27: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r) {
          e = t(e), r = t(r);
          for (var n, i, a = [], o = 0; o <= r.length; o++)
            for (var p = 0; p <= e.length; p++)
              i = o && p ? e.charAt(p - 1) === r.charAt(o - 1) ? n : Math.min(a[p], a[p - 1], n) + 1 : o + p, n = a[p], a[p] = i;
          return a.pop();
        };
      },
      { './helper/makeString': 19 }
    ],
    28: [
      function (e, r) {
        r.exports = function (e) {
          return null == e ? [] : String(e).split(/\r?\n/);
        };
      },
      {}
    ],
    29: [
      function (e, r) {
        var t = e('./pad');
        r.exports = function (e, r, n) {
          return t(e, r, n);
        };
      },
      { './pad': 34 }
    ],
    30: [
      function (e, r) {
        var t = e('./pad');
        r.exports = function (e, r, n) {
          return t(e, r, n, 'both');
        };
      },
      { './pad': 34 }
    ],
    31: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/defaultToWhiteSpace'), i = String.prototype.trimLeft;
        r.exports = function (e, r) {
          return e = t(e), !r && i ? i.call(e) : (r = n(r), e.replace(new RegExp('^' + r + '+'), ''));
        };
      },
      {
        './helper/defaultToWhiteSpace': 16,
        './helper/makeString': 19
      }
    ],
    32: [
      function (e, r) {
        r.exports = function (e, r) {
          if (e == r)
            return 0;
          if (!e)
            return -1;
          if (!r)
            return 1;
          for (var t = /(\.\d+)|(\d+)|(\D+)/g, n = String(e).match(t), i = String(r).match(t), a = Math.min(n.length, i.length), o = 0; a > o; o++) {
            var p = n[o], u = i[o];
            if (p !== u) {
              var c = +p, s = +u;
              return c === c && s === s ? c > s ? 1 : -1 : u > p ? -1 : 1;
            }
          }
          return n.length != i.length ? n.length - i.length : r > e ? -1 : 1;
        };
      },
      {}
    ],
    33: [
      function (e, r) {
        r.exports = function (e, r, t, n) {
          if (isNaN(e) || null == e)
            return '';
          e = e.toFixed(~~r), n = 'string' == typeof n ? n : ',';
          var i = e.split('.'), a = i[0], o = i[1] ? (t || '.') + i[1] : '';
          return a.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + n) + o;
        };
      },
      {}
    ],
    34: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/strRepeat');
        r.exports = function (e, r, i, a) {
          e = t(e), r = ~~r;
          var o = 0;
          switch (i ? i.length > 1 && (i = i.charAt(0)) : i = ' ', a) {
          case 'right':
            return o = r - e.length, e + n(i, o);
          case 'both':
            return o = r - e.length, n(i, Math.ceil(o / 2)) + e + n(i, Math.floor(o / 2));
          default:
            return o = r - e.length, n(i, o) + e;
          }
        };
      },
      {
        './helper/makeString': 19,
        './helper/strRepeat': 20
      }
    ],
    35: [
      function (e, r) {
        var t = e('./helper/adjacent');
        r.exports = function (e) {
          return t(e, -1);
        };
      },
      { './helper/adjacent': 15 }
    ],
    36: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./rtrim');
        r.exports = function (e, r, i) {
          if (e = t(e), r = ~~r, i = null != i ? String(i) : '...', e.length <= r)
            return e;
          var a = function (e) {
              return e.toUpperCase() !== e.toLowerCase() ? 'A' : ' ';
            }, o = e.slice(0, r + 1).replace(/.(?=\W*\w*$)/g, a);
          return o = o.slice(o.length - 2).match(/\w\w/) ? o.replace(/\s*\S+$/, '') : n(o.slice(0, o.length - 1)), (o + i).length > e.length ? e : e.slice(0, o.length) + i;
        };
      },
      {
        './helper/makeString': 19,
        './rtrim': 42
      }
    ],
    37: [
      function (e, r) {
        var t = e('./surround');
        r.exports = function (e, r) {
          return t(e, r || '"');
        };
      },
      { './surround': 53 }
    ],
    38: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/strRepeat');
        r.exports = function i(e, r, a) {
          if (e = t(e), r = ~~r, null == a)
            return n(e, r);
          for (var i = []; r > 0; i[--r] = e);
          return i.join(a);
        };
      },
      {
        './helper/makeString': 19,
        './helper/strRepeat': 20
      }
    ],
    39: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r, n, i) {
          var a = i === !0 ? 'gi' : 'g', o = new RegExp(r, a);
          return t(e).replace(o, n);
        };
      },
      { './helper/makeString': 19 }
    ],
    40: [
      function (e, r) {
        var t = e('./chars');
        r.exports = function (e) {
          return t(e).reverse().join('');
        };
      },
      { './chars': 3 }
    ],
    41: [
      function (e, r) {
        var t = e('./pad');
        r.exports = function (e, r, n) {
          return t(e, r, n, 'right');
        };
      },
      { './pad': 34 }
    ],
    42: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/defaultToWhiteSpace'), i = String.prototype.trimRight;
        r.exports = function (e, r) {
          return e = t(e), !r && i ? i.call(e) : (r = n(r), e.replace(new RegExp(r + '+$'), ''));
        };
      },
      {
        './helper/defaultToWhiteSpace': 16,
        './helper/makeString': 19
      }
    ],
    43: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/defaultToWhiteSpace'), i = e('./trim'), a = e('./dasherize');
        r.exports = function (e) {
          var r = '\u0105\xe0\xe1\xe4\xe2\xe3\xe5\xe6\u0103\u0107\u010d\u0109\u0119\xe8\xe9\xeb\xea\u011d\u0125\xec\xed\xef\xee\u0135\u0142\u013e\u0144\u0148\xf2\xf3\xf6\u0151\xf4\xf5\xf0\xf8\u015b\u0219\u0161\u015d\u0165\u021b\u016d\xf9\xfa\xfc\u0171\xfb\xf1\xff\xfd\xe7\u017c\u017a\u017e', o = 'aaaaaaaaaccceeeeeghiiiijllnnoooooooossssttuuuuuunyyczzz', p = new RegExp(n(r), 'g');
          return e = t(e).toLowerCase().replace(p, function (e) {
            var t = r.indexOf(e);
            return o.charAt(t) || '-';
          }), i(a(e.replace(/[^\w\s-]/g, '-')), '-');
        };
      },
      {
        './dasherize': 8,
        './helper/defaultToWhiteSpace': 16,
        './helper/makeString': 19,
        './trim': 60
      }
    ],
    44: [
      function (e, r) {
        var t = e('./chars');
        r.exports = function (e, r, n, i) {
          var a = t(e);
          return a.splice(~~r, ~~n, i), a.join('');
        };
      },
      { './chars': 3 }
    ],
    45: [
      function (e, r) {
        var t = e('./helper/strRepeat'), n = Object.prototype.toString, i = function () {
            function e(e) {
              return n.call(e).slice(8, -1).toLowerCase();
            }
            var r = t, a = function () {
                return a.cache.hasOwnProperty(arguments[0]) || (a.cache[arguments[0]] = a.parse(arguments[0])), a.format.call(null, a.cache[arguments[0]], arguments);
              };
            return a.format = function (t, n) {
              var a, o, p, u, c, s, l, f = 1, h = t.length, g = '', m = [];
              for (o = 0; h > o; o++)
                if (g = e(t[o]), 'string' === g)
                  m.push(t[o]);
                else if ('array' === g) {
                  if (u = t[o], u[2])
                    for (a = n[f], p = 0; p < u[2].length; p++) {
                      if (!a.hasOwnProperty(u[2][p]))
                        throw new Error(i('[_.sprintf] property "%s" does not exist', u[2][p]));
                      a = a[u[2][p]];
                    }
                  else
                    a = u[1] ? n[u[1]] : n[f++];
                  if (/[^s]/.test(u[8]) && 'number' != e(a))
                    throw new Error(i('[_.sprintf] expecting number but found %s', e(a)));
                  switch (u[8]) {
                  case 'b':
                    a = a.toString(2);
                    break;
                  case 'c':
                    a = String.fromCharCode(a);
                    break;
                  case 'd':
                    a = parseInt(a, 10);
                    break;
                  case 'e':
                    a = u[7] ? a.toExponential(u[7]) : a.toExponential();
                    break;
                  case 'f':
                    a = u[7] ? parseFloat(a).toFixed(u[7]) : parseFloat(a);
                    break;
                  case 'o':
                    a = a.toString(8);
                    break;
                  case 's':
                    a = (a = String(a)) && u[7] ? a.substring(0, u[7]) : a;
                    break;
                  case 'u':
                    a = Math.abs(a);
                    break;
                  case 'x':
                    a = a.toString(16);
                    break;
                  case 'X':
                    a = a.toString(16).toUpperCase();
                  }
                  a = /[def]/.test(u[8]) && u[3] && a >= 0 ? '+' + a : a, s = u[4] ? '0' == u[4] ? '0' : u[4].charAt(1) : ' ', l = u[6] - String(a).length, c = u[6] ? r(s, l) : '', m.push(u[5] ? a + c : c + a);
                }
              return m.join('');
            }, a.cache = {}, a.parse = function (e) {
              for (var r = e, t = [], n = [], i = 0; r;) {
                if (null !== (t = /^[^\x25]+/.exec(r)))
                  n.push(t[0]);
                else if (null !== (t = /^\x25{2}/.exec(r)))
                  n.push('%');
                else {
                  if (null === (t = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(r)))
                    throw new Error('[_.sprintf] huh?');
                  if (t[2]) {
                    i |= 1;
                    var a = [], o = t[2], p = [];
                    if (null === (p = /^([a-z_][a-z_\d]*)/i.exec(o)))
                      throw new Error('[_.sprintf] huh?');
                    for (a.push(p[1]); '' !== (o = o.substring(p[0].length));)
                      if (null !== (p = /^\.([a-z_][a-z_\d]*)/i.exec(o)))
                        a.push(p[1]);
                      else {
                        if (null === (p = /^\[(\d+)\]/.exec(o)))
                          throw new Error('[_.sprintf] huh?');
                        a.push(p[1]);
                      }
                    t[2] = a;
                  } else
                    i |= 2;
                  if (3 === i)
                    throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
                  n.push(t);
                }
                r = r.substring(t[0].length);
              }
              return n;
            }, a;
          }();
        r.exports = i;
      },
      { './helper/strRepeat': 20 }
    ],
    46: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/toPositive');
        r.exports = function (e, r, i) {
          return e = t(e), r = '' + r, i = null == i ? 0 : Math.min(n(i), e.length), e.lastIndexOf(r, i) === i;
        };
      },
      {
        './helper/makeString': 19,
        './helper/toPositive': 21
      }
    ],
    47: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r) {
          e = t(e), r = t(r);
          var n = r ? e.indexOf(r) : -1;
          return ~n ? e.slice(0, n) : e;
        };
      },
      { './helper/makeString': 19 }
    ],
    48: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r) {
          e = t(e), r = t(r);
          var n = e.lastIndexOf(r);
          return ~n ? e.slice(0, n) : e;
        };
      },
      { './helper/makeString': 19 }
    ],
    49: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r) {
          e = t(e), r = t(r);
          var n = r ? e.indexOf(r) : -1;
          return ~n ? e.slice(n + r.length, e.length) : e;
        };
      },
      { './helper/makeString': 19 }
    ],
    50: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r) {
          e = t(e), r = t(r);
          var n = r ? e.lastIndexOf(r) : -1;
          return ~n ? e.slice(n + r.length, e.length) : e;
        };
      },
      { './helper/makeString': 19 }
    ],
    51: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e) {
          return t(e).replace(/<\/?[^>]+>/g, '');
        };
      },
      { './helper/makeString': 19 }
    ],
    52: [
      function (e, r) {
        var t = e('./helper/adjacent');
        r.exports = function (e) {
          return t(e, 1);
        };
      },
      { './helper/adjacent': 15 }
    ],
    53: [
      function (e, r) {
        r.exports = function (e, r) {
          return [
            r,
            e,
            r
          ].join('');
        };
      },
      {}
    ],
    54: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e) {
          return t(e).replace(/\S/g, function (e) {
            return e === e.toUpperCase() ? e.toLowerCase() : e.toUpperCase();
          });
        };
      },
      { './helper/makeString': 19 }
    ],
    55: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e) {
          return t(e).toLowerCase().replace(/(?:^|\s|-)\S/g, function (e) {
            return e.toUpperCase();
          });
        };
      },
      { './helper/makeString': 19 }
    ],
    56: [
      function (e, r) {
        function t(e, r) {
          var t, n, i = e.toLowerCase();
          for (r = [].concat(r), t = 0; t < r.length; t += 1)
            if (n = r[t]) {
              if (n.test && n.test(e))
                return !0;
              if (n.toLowerCase() === i)
                return !0;
            }
        }
        var n = e('./trim');
        r.exports = function (e, r, i) {
          return 'number' == typeof e && (e = '' + e), 'string' != typeof e ? !!e : (e = n(e), t(e, r || [
            'true',
            '1'
          ]) ? !0 : t(e, i || [
            'false',
            '0'
          ]) ? !1 : void 0);
        };
      },
      { './trim': 60 }
    ],
    57: [
      function (e, r) {
        e('./trim');
        r.exports = function (e, r) {
          if (null == e)
            return 0;
          var t = Math.pow(10, isFinite(r) ? r : 0);
          return Math.round(e * t) / t;
        };
      },
      { './trim': 60 }
    ],
    58: [
      function (e, r) {
        var t = e('./rtrim');
        r.exports = function (e, r, n, i) {
          r = r || ', ', n = n || ' and ';
          var a = e.slice(), o = a.pop();
          return e.length > 2 && i && (n = t(r) + n), a.length ? a.join(r) + n + o : o;
        };
      },
      { './rtrim': 42 }
    ],
    59: [
      function (e, r) {
        var t = e('./toSentence');
        r.exports = function (e, r, n) {
          return t(e, r, n, !0);
        };
      },
      { './toSentence': 58 }
    ],
    60: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/defaultToWhiteSpace'), i = String.prototype.trim;
        r.exports = function (e, r) {
          return e = t(e), !r && i ? i.call(e) : (r = n(r), e.replace(new RegExp('^' + r + '+|' + r + '+$', 'g'), ''));
        };
      },
      {
        './helper/defaultToWhiteSpace': 16,
        './helper/makeString': 19
      }
    ],
    61: [
      function (e, r) {
        var t = e('./helper/makeString');
        r.exports = function (e, r, n) {
          return e = t(e), n = n || '...', r = ~~r, e.length > r ? e.slice(0, r) + n : e;
        };
      },
      { './helper/makeString': 19 }
    ],
    62: [
      function (e, r) {
        var t = e('./trim');
        r.exports = function (e) {
          return t(e).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
        };
      },
      { './trim': 60 }
    ],
    63: [
      function (e, r) {
        var t = e('./helper/makeString'), n = e('./helper/escapeChars');
        r.exports = function (e) {
          return t(e).replace(/\&([^;]+);/g, function (e, r) {
            var t;
            return r in n ? n[r] : (t = r.match(/^#x([\da-fA-F]+)$/)) ? String.fromCharCode(parseInt(t[1], 16)) : (t = r.match(/^#(\d+)$/)) ? String.fromCharCode(~~t[1]) : e;
          });
        };
      },
      {
        './helper/escapeChars': 17,
        './helper/makeString': 19
      }
    ],
    64: [
      function (e, r) {
        r.exports = function (e, r) {
          return r = r || '"', e[0] === r && e[e.length - 1] === r ? e.slice(1, e.length - 1) : e;
        };
      },
      {}
    ],
    65: [
      function (e, r) {
        var t = e('./sprintf');
        r.exports = function (e, r) {
          return r.unshift(e), t.apply(null, r);
        };
      },
      { './sprintf': 45 }
    ],
    66: [
      function (e, r) {
        var t = e('./isBlank'), n = e('./trim');
        r.exports = function (e, r) {
          return t(e) ? [] : n(e, r).split(r || /\s+/);
        };
      },
      {
        './isBlank': 25,
        './trim': 60
      }
    ]
  }, {}, [14])(14);
});
// Eve.js <evejs.com> - v0.8.4 February 18, 2013
(function (u) {
  function g(a) {
    if (!f)
      a:
        if (!f) {
          for (var b = [
                'jQuery',
                'MooTools',
                'YUI',
                'Prototype',
                'dojo'
              ], d = 0; d <= b.length; d++)
            if (window[b[d]]) {
              Eve.setFramework(b[d]);
              break a;
            }
          console.error('Eve doesn\'t support your JavaScript framework.');
        }
    return a ? f == a.toLowerCase() : f;
  }
  function l(a, b) {
    if (window.console) {
      var d = m;
      if (!m)
        for (var d = !1, c = 0; c < n.length; c++)
          n[c] == a && (d = !0);
      if (d) {
        for (; 10 > a.length;)
          a += ' ';
        a = a.substring(0, 10) + ' - ';
        console.info(a, b);
      }
    }
  }
  function q(a, b, d, c) {
    for (var e in r)
      b[e] = r[e];
    for (e in p)
      b[e] = p[e];
    g('YUI') ? YUI().use('node', function (e) {
      j = e.one;
      d[c] = a.apply(b);
    }) : g('dojo') ? require([
      'dojo/NodeList-dom',
      'dojo/NodeList-traverse'
    ], function (e) {
      j = e;
      d[c] = a.apply(b);
    }) : d[c] = a.apply(b);
  }
  var h = {}, s = {}, t = {}, p = {}, n = [], m = !1, f, j;
  u.Eve = {
    setFramework: function (a) {
      f = (a + '').toLowerCase();
      'jquery' == f && ($ = jQuery);
    },
    debug: function (a) {
      a ? n.push(a) : m = !0;
    },
    register: function (a, b) {
      l(a, 'registered');
      if (h[a])
        throw Error('Module already exists: ' + a);
      h[a] = b;
      return this;
    },
    extend: function (a, b) {
      p[a] = b;
    },
    scope: function (a, b) {
      s[a] && console.warn('Duplicate namespace: ' + a);
      q(b, {
        name: a,
        namespace: a
      }, s, a);
    },
    attach: function (a, b) {
      var d = [], c = 0;
      for (c; c < arguments.length; c++)
        d[d.length] = arguments[c];
      l(a, 'attached to ' + b);
      if (t[a + b])
        return !1;
      if (!h[a])
        return console.warn('Module not found: ' + a), !1;
      q(function () {
        h[a].apply(this, d.slice(2));
      }, {
        namespace: b,
        name: a
      }, t, a + b);
      return !0;
    }
  };
  var r = {
      listen: function (a, b, d) {
        function c(a, c) {
          l(v, f + ':' + b);
          h.event = a;
          g('MooTools') && (a.target = c);
          g('jQuery') && (a.target = a.currentTarget);
          g('dojo') && (a.target = a.explicitOriginalTarget);
          d.apply(h, arguments);
        }
        d || (d = b, b = a, a = '');
        a = a || '';
        var e = this.event ? this.find() : document.body, v = this.name, f = (this.namespace + ' ' + a).trim(), h = {}, k;
        for (k in this)
          this.hasOwnProperty(k) && (h[k] = this[k]);
        if (g('jQuery'))
          $(e).delegate(f, b, c);
        else if (g('MooTools'))
          $(e).addEvent(b + ':relay(' + f + ')', c);
        else if (g('YUI'))
          j(e).delegate(b, c, f);
        else if (g('Prototype'))
          $(e).on(b, f, c);
        else
          g('dojo') && require(['dojo/on'], function (a) {
            a(e, f + ':' + b, c);
          });
      },
      find: function (a) {
        var b, d = this.namespace;
        if (!a || 'string' == typeof a)
          a = (a || '').trim();
        b = this.event ? this.event.target : document.body;
        g('jQuery') && (b = jQuery(b));
        j && (b = j(b));
        var c = {
            jQuery: [
              'is',
              'parents',
              'find'
            ],
            MooTools: [
              'match',
              'getParent',
              'getElements'
            ],
            Prototype: [
              'match',
              'up',
              'select'
            ],
            YUI: [
              'test',
              'ancestor',
              'all'
            ],
            dojo: [
              '',
              'closest',
              'query'
            ]
          }, e;
        for (e in c)
          if (g(e)) {
            var f = c[e], c = f[0];
            e = f[1];
            f = f[2];
            if (!g('dojo') && b[c](d))
              return b;
            b = this.event ? b[e](d) : b;
            return this.event ? b[f](a) : b[f](d + ' ' + a);
          }
      },
      first: function (a, b) {
        b = 2 == arguments.length ? b : this.find(a);
        g('YUI') && (b = b.getDOMNodes());
        return b[0];
      },
      scope: function (a, b) {
        Eve.scope(this.namespace + ' ' + a, b);
      },
      attach: function (a, b) {
        Eve.attach(a, this.namespace + ' ' + (b || ''));
      }
    };
}(this));
this.module && (this.module.exports = this.Eve);
/*!
 * jqPagination, a jQuery pagination plugin (obviously)
 * Version: 1.4 (26th July 2013)
 *
 * Copyright (C) 2013 Ben Everard
 *
 * http://beneverard.github.com/jqPagination
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
(function ($) {
  'use strict';
  $.jqPagination = function (el, options) {
    // To avoid scope issues, use 'base' instead of 'this'
    // to reference this class from internal events and functions.
    var base = this;
    // Access to jQuery and DOM versions of element
    base.$el = $(el);
    base.el = el;
    // get input jQuery object
    base.$input = base.$el.find('input');
    // Add a reverse reference to the DOM object
    base.$el.data('jqPagination', base);
    base.init = function () {
      base.options = $.extend({}, $.jqPagination.defaultOptions, options);
      // if the user hasn't provided a max page number in the options try and find
      // the data attribute for it, if that cannot be found, use one as a max page number
      if (base.options.max_page === null) {
        if (base.$input.data('max-page') !== undefined) {
          base.options.max_page = base.$input.data('max-page');
        } else {
          base.options.max_page = 1;
        }
      }
      // if the current-page data attribute is specified this takes priority
      // over the options passed in, so long as it's a number
      if (base.$input.data('current-page') !== undefined && base.isNumber(base.$input.data('current-page'))) {
        base.options.current_page = base.$input.data('current-page');
      }
      // remove the readonly attribute as JavaScript must be working by now ;-)
      base.$input.removeAttr('readonly');
      // set the initial input value
      // pass true to prevent paged callback form being fired
      base.updateInput(true);
      //***************
      // BIND EVENTS
      base.$input.on('focus.jqPagination mouseup.jqPagination', function (event) {
        // if event === focus, select all text...
        if (event.type === 'focus') {
          var current_page = parseInt(base.options.current_page, 10);
          $(this).val(current_page).select();
        }
        // if event === mouse up, return false. Fixes Chrome bug
        if (event.type === 'mouseup') {
          return false;
        }
      });
      base.$input.on('blur.jqPagination keydown.jqPagination', function (event) {
        var $self = $(this), current_page = parseInt(base.options.current_page, 10);
        // if the user hits escape revert the input back to the original value
        if (event.keyCode === 27) {
          $self.val(current_page);
          $self.blur();
        }
        // if the user hits enter, trigger blur event but DO NOT set the page value
        if (event.keyCode === 13) {
          $self.blur();
        }
        // only set the page is the event is focusout.. aka blur
        if (event.type === 'blur') {
          base.setPage($self.val());
        }
      });
      base.$el.on('click.jqPagination', 'a', function (event) {
        var $self = $(this);
        // we don't want to do anything if we've clicked a disabled link
        // return false so we stop normal link action btu also drop out of this event
        if ($self.hasClass('disabled')) {
          return false;
        }
        // for mac + windows (read: other), maintain the cmd + ctrl click for new tab
        if (!event.metaKey && !event.ctrlKey) {
          event.preventDefault();
          base.setPage($self.data('action'));
        }
      });
    };
    base.setPage = function (page, prevent_paged) {
      // return current_page value if getting instead of setting
      if (page === undefined) {
        return base.options.current_page;
      }
      var current_page = parseInt(base.options.current_page, 10), max_page = parseInt(base.options.max_page, 10);
      if (isNaN(parseInt(page, 10))) {
        switch (page) {
        case 'first':
          page = 1;
          break;
        case 'prev':
        case 'previous':
          page = current_page - 1;
          break;
        case 'next':
          page = current_page + 1;
          break;
        case 'last':
          page = max_page;
          break;
        }
      }
      page = parseInt(page, 10);
      // reject any invalid page requests
      if (isNaN(page) || page < 1 || page > max_page) {
        // update the input element
        base.setInputValue(current_page);
        return false;
      }
      // update current page options
      base.options.current_page = page;
      base.$input.data('current-page', page);
      // update the input element
      base.updateInput(prevent_paged);
    };
    base.setMaxPage = function (max_page, prevent_paged) {
      // return the max_page value if getting instead of setting
      if (max_page === undefined) {
        return base.options.max_page;
      }
      // ignore if max_page is not a number
      if (!base.isNumber(max_page)) {
        console.error('jqPagination: max_page is not a number');
        return false;
      }
      // ignore if max_page is less than the current_page
      if (max_page < base.options.current_page) {
        console.error('jqPagination: max_page lower than current_page');
        return false;
      }
      // set max_page options
      base.options.max_page = max_page;
      base.$input.data('max-page', max_page);
      // update the input element
      base.updateInput(prevent_paged);
    };
    // ATTN this isn't really the correct name is it?
    base.updateInput = function (prevent_paged) {
      var current_page = parseInt(base.options.current_page, 10);
      // set the input value
      base.setInputValue(current_page);
      // set the link href attributes
      base.setLinks(current_page);
      // we may want to prevent the paged callback from being fired
      if (prevent_paged !== true) {
        // fire the callback function with the current page
        base.options.paged(current_page);
      }
    };
    base.setInputValue = function (page) {
      var page_string = base.options.page_string, max_page = base.options.max_page;
      // this looks horrible :-(
      page_string = page_string.replace('{current_page}', page).replace('{max_page}', max_page);
      base.$input.val(page_string);
    };
    base.isNumber = function (n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };
    base.setLinks = function (page) {
      var link_string = base.options.link_string, current_page = parseInt(base.options.current_page, 10), max_page = parseInt(base.options.max_page, 10);
      if (link_string !== '') {
        // set initial page numbers + make sure the page numbers aren't out of range
        var previous = current_page - 1;
        if (previous < 1) {
          previous = 1;
        }
        var next = current_page + 1;
        if (next > max_page) {
          next = max_page;
        }
        // apply each page number to the link string, set it back to the element href attribute
        base.$el.find('a.first').attr('href', link_string.replace('{page_number}', '1'));
        base.$el.find('a.prev, a.previous').attr('href', link_string.replace('{page_number}', previous));
        base.$el.find('a.next').attr('href', link_string.replace('{page_number}', next));
        base.$el.find('a.last').attr('href', link_string.replace('{page_number}', max_page));
      }
      // set disable class on appropriate links
      base.$el.find('a').removeClass('disabled');
      if (current_page === max_page) {
        base.$el.find('.next, .last').addClass('disabled');
      }
      if (current_page === 1) {
        //base.$el.find('.previous, .first').addClass('disabled');
        base.$el.find('.previous').addClass('pull-left');
        base.$el.find('.first').addClass('pull-right');
      }
    };
    base.callMethod = function (method, key, value) {
      switch (method.toLowerCase()) {
      case 'option':
        // if we're getting, immediately return the value
        if (value === undefined && typeof key !== 'object') {
          return base.options[key];
        }
        // set default object to trigger the paged event (legacy opperation)
        var options = { 'trigger': true }, result = false;
        // if the key passed in is an object
        if ($.isPlainObject(key) && !value) {
          $.extend(options, key);
        } else {
          // make the key value pair part of the default object
          options[key] = value;
        }
        var prevent_paged = options.trigger === false;
        // if current_page property is set call setPage
        if (options.current_page !== undefined) {
          result = base.setPage(options.current_page, prevent_paged);
        }
        // if max_page property is set call setMaxPage
        if (options.max_page !== undefined) {
          result = base.setMaxPage(options.max_page, prevent_paged);
        }
        // if we've not got a result fire an error and return false
        if (result === false)
          console.error('jqPagination: cannot get / set option ' + key);
        return result;
        break;
      case 'destroy':
        base.$el.off('.jqPagination').find('*').off('.jqPagination');
        break;
      default:
        // the function name must not exist
        console.error('jqPagination: method "' + method + '" does not exist');
        return false;
      }
    };
    // Run initializer
    base.init();
  };
  $.jqPagination.defaultOptions = {
    current_page: 1,
    link_string: '',
    max_page: null,
    page_string: '{current_page}',
    paged: function () {
    }
  };
  $.fn.jqPagination = function () {
    // get any function parameters
    var self = this, $self = $(self), args = Array.prototype.slice.call(arguments), result = false;
    // if the first argument is a string call the desired function
    // note: we can only do this to a single element, and not a collection of elements
    if (typeof args[0] === 'string') {
      // if we're getting, we can only get value for the first pagination element
      if (args[2] === undefined) {
        result = $self.first().data('jqPagination').callMethod(args[0], args[1]);
      } else {
        // if we're setting, set values for all pagination elements
        $self.each(function () {
          result = $(this).data('jqPagination').callMethod(args[0], args[1], args[2]);
        });
      }
      return result;
    }
    // if we're not dealing with a method, initialise plugin
    self.each(function () {
      new $.jqPagination(this, args[0]);
    });
  };
}(jQuery));
// polyfill, provide a fallback if the console doesn't exist
if (!console) {
  var console = {}, func = function () {
      return false;
    };
  console.log = func;
  console.info = func;
  console.warn = func;
  console.error = func;
}
/*
 Input Mask plugin for jquery
 http://github.com/RobinHerbots/jquery.inputmask
 Copyright (c) 2010 - 2014 Robin Herbots
 Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
 Version: 3.0.55
 Input Mask plugin for jquery
 http://github.com/RobinHerbots/jquery.inputmask
 Copyright (c) 2010 - 2014 Robin Herbots
 Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
 Version: 3.0.55
*/
(function (e) {
  if (void 0 === e.fn.inputmask) {
    var a = function (a) {
        var b = document.createElement('input');
        a = 'on' + a;
        var e = a in b;
        e || (b.setAttribute(a, 'return;'), e = 'function' == typeof b[a]);
        return e;
      }, b = function (a, d, f) {
        return (a = f.aliases[a]) ? (a.alias && b(a.alias, void 0, f), e.extend(!0, f, a), e.extend(!0, f, d), !0) : !1;
      }, d = function (a) {
        function b(e) {
          function f(a, b, e, d) {
            this.matches = [];
            this.isGroup = a || !1;
            this.isOptional = b || !1;
            this.isQuantifier = e || !1;
            this.isAlternator = d || !1;
            this.quantifier = {
              min: 1,
              max: 1
            };
          }
          function d(b, e, f) {
            var c = a.definitions[e], g = 0 == b.matches.length;
            f = void 0 != f ? f : b.matches.length;
            if (c && !q) {
              for (var k = c.prevalidator, h = k ? k.length : 0, t = 1; t < c.cardinality; t++) {
                var m = h >= t ? k[t - 1] : [], I = m.validator, m = m.cardinality;
                b.matches.splice(f++, 0, {
                  fn: I ? 'string' == typeof I ? RegExp(I) : new function () {
                    this.test = I;
                  }() : /./,
                  cardinality: m ? m : 1,
                  optionality: b.isOptional,
                  newBlockMarker: g,
                  casing: c.casing,
                  def: c.definitionSymbol || e,
                  placeholder: c.placeholder
                });
              }
              b.matches.splice(f++, 0, {
                fn: c.validator ? 'string' == typeof c.validator ? RegExp(c.validator) : new function () {
                  this.test = c.validator;
                }() : /./,
                cardinality: c.cardinality,
                optionality: b.isOptional,
                newBlockMarker: g,
                casing: c.casing,
                def: c.definitionSymbol || e,
                placeholder: c.placeholder
              });
            } else
              b.matches.splice(f++, 0, {
                fn: null,
                cardinality: 0,
                optionality: b.isOptional,
                newBlockMarker: g,
                casing: null,
                def: e,
                placeholder: void 0
              }), q = !1;
          }
          for (var c = /(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})\??|[^.?*+^${[]()|\\]+|./g, q = !1, g = new f(), h, m = [], n = []; h = c.exec(e);)
            switch (h = h[0], h.charAt(0)) {
            case a.optionalmarker.end:
            case a.groupmarker.end:
              var p = m.pop();
              0 < m.length ? m[m.length - 1].matches.push(p) : g.matches.push(p);
              break;
            case a.optionalmarker.start:
              m.push(new f(!1, !0));
              break;
            case a.groupmarker.start:
              m.push(new f(!0));
              break;
            case a.quantifiermarker.start:
              p = new f(!1, !1, !0);
              h = h.replace(/[{}]/g, '');
              var r = h.split(',');
              h = isNaN(r[0]) ? r[0] : parseInt(r[0]);
              r = 1 == r.length ? h : isNaN(r[1]) ? r[1] : parseInt(r[1]);
              if ('*' == r || '+' == r)
                h = '*' == r ? 0 : 1;
              p.quantifier = {
                min: h,
                max: r
              };
              if (0 < m.length) {
                r = m[m.length - 1].matches;
                h = r.pop();
                if (!h.isGroup) {
                  var u = new f(!0);
                  u.matches.push(h);
                  h = u;
                }
                r.push(h);
                r.push(p);
              } else
                h = g.matches.pop(), h.isGroup || (u = new f(!0), u.matches.push(h), h = u), g.matches.push(h), g.matches.push(p);
              break;
            case a.escapeChar:
              q = !0;
              break;
            case a.alternatormarker:
              break;
            default:
              0 < m.length ? d(m[m.length - 1], h) : (0 < g.matches.length && (p = g.matches[g.matches.length - 1], p.isGroup && (p.isGroup = !1, d(p, a.groupmarker.start, 0), d(p, a.groupmarker.end))), d(g, h));
            }
          0 < g.matches.length && (p = g.matches[g.matches.length - 1], p.isGroup && (p.isGroup = !1, d(p, a.groupmarker.start, 0), d(p, a.groupmarker.end)), n.push(g));
          return n;
        }
        function f(f, d) {
          if (a.numericInput && !0 !== a.multi) {
            f = f.split('').reverse();
            for (var c = 0; c < f.length; c++)
              f[c] == a.optionalmarker.start ? f[c] = a.optionalmarker.end : f[c] == a.optionalmarker.end ? f[c] = a.optionalmarker.start : f[c] == a.groupmarker.start ? f[c] = a.groupmarker.end : f[c] == a.groupmarker.end && (f[c] = a.groupmarker.start);
            f = f.join('');
          }
          if (void 0 != f && '' != f) {
            if (0 < a.repeat || '*' == a.repeat || '+' == a.repeat)
              f = a.groupmarker.start + f + a.groupmarker.end + a.quantifiermarker.start + ('*' == a.repeat ? 0 : '+' == a.repeat ? 1 : a.repeat) + ',' + a.repeat + a.quantifiermarker.end;
            void 0 == e.inputmask.masksCache[f] && (e.inputmask.masksCache[f] = {
              mask: f,
              maskToken: b(f),
              validPositions: {},
              _buffer: void 0,
              buffer: void 0,
              tests: {},
              metadata: d
            });
            return e.extend(!0, {}, e.inputmask.masksCache[f]);
          }
        }
        var d = [];
        e.isFunction(a.mask) && (a.mask = a.mask.call(this, a));
        e.isArray(a.mask) ? e.each(a.mask, function (a, b) {
          void 0 != b.mask ? d.push(f(b.mask.toString(), b)) : d.push(f(b.toString()));
        }) : (1 == a.mask.length && !1 == a.greedy && 0 != a.repeat && (a.placeholder = ''), d = void 0 != a.mask.mask ? f(a.mask.mask.toString(), a.mask) : f(a.mask.toString()));
        return d;
      }, c = 'function' === typeof ScriptEngineMajorVersion ? ScriptEngineMajorVersion() : 10 <= new Function('/*@cc_on return @_jscript_version; @*/')(), g = navigator.userAgent, h = null !== g.match(/iphone/i), n = null !== g.match(/android.*safari.*/i), z = null !== g.match(/android.*chrome.*/i), u = null !== g.match(/android.*firefox.*/i), J = /Kindle/i.test(g) || /Silk/i.test(g) || /KFTT/i.test(g) || /KFOT/i.test(g) || /KFJWA/i.test(g) || /KFJWI/i.test(g) || /KFSOWI/i.test(g) || /KFTHWA/i.test(g) || /KFTHWI/i.test(g) || /KFAPWA/i.test(g) || /KFAPWI/i.test(g), K = a('paste') ? 'paste' : a('input') ? 'input' : 'propertychange', r = function (a, b, f) {
        function d(a, e, c) {
          e = e || 0;
          var g = [], h, w = 0, k;
          do {
            if (!0 === a && b.validPositions[w]) {
              var t = b.validPositions[w];
              k = t.match;
              h = t.locator.slice();
              g.push(null == k.fn ? k.def : !0 === c ? t.input : k.placeholder || f.placeholder.charAt(w % f.placeholder.length));
            } else
              h = e > w ? N(w, h, w - 1)[0] : G(w, h, w - 1), k = h.match, h = h.locator.slice(), g.push(null == k.fn ? k.def : k.placeholder || f.placeholder.charAt(w % f.placeholder.length));
            w++;
          } while ((void 0 == L || w - 1 < L) && null != k.fn || null == k.fn && '' != k.def || e >= w);
          g.pop();
          return g;
        }
        function g(a) {
          var e = b;
          e.buffer = void 0;
          e.tests = {};
          !0 !== a && (e._buffer = void 0, e.validPositions = {}, e.p = -1);
        }
        function r(a) {
          var e = -1, f = b.validPositions;
          void 0 == a && (a = -1);
          var c = e, d;
          for (d in f) {
            var g = parseInt(d);
            if (-1 == a || null != f[g].match.fn)
              g < a && (c = g), g >= a && (e = g);
          }
          return 1 < a - c || e < a ? c : e;
        }
        function k(a, c, d) {
          if (f.insertMode && void 0 != b.validPositions[a] && void 0 == d) {
            d = e.extend(!0, {}, b.validPositions);
            var g = r(), k;
            for (k = a; k <= g; k++)
              delete b.validPositions[k];
            b.validPositions[a] = c;
            c = !0;
            for (k = a; k <= g; k++) {
              a = d[k];
              if (void 0 != a) {
                var h = null == a.match.fn ? k + 1 : C(k);
                c = ea(h, a.match.def) ? c && !1 !== P(h, a.input, !0, !0) : !1;
              }
              if (!c)
                break;
            }
            if (!c)
              return b.validPositions = e.extend(!0, {}, d), !1;
          } else
            b.validPositions[a] = c;
          return !0;
        }
        function t(a, e) {
          var f, c = a;
          for (f = a; f < e; f++)
            delete b.validPositions[f];
          for (f = e; f <= r();) {
            var d = b.validPositions[f], k = b.validPositions[c];
            void 0 != d && void 0 == k ? (ea(c, d.match.def) && !1 !== P(c, d.input, !0) && (delete b.validPositions[f], f++), c++) : f++;
          }
          for (f = r(); 0 < f && (void 0 == b.validPositions[f] || null == b.validPositions[f].match.fn);)
            delete b.validPositions[f], f--;
          g(!0);
        }
        function G(a, b, e) {
          a = N(a, b, e);
          var c;
          for (b = 0; b < a.length && (c = a[b], !f.greedy && (!c.match || !1 !== c.match.optionality && !1 !== c.match.newBlockMarker || !0 === c.match.optionalQuantifier)); b++);
          return c;
        }
        function x(a) {
          return b.validPositions[a] ? b.validPositions[a].match : N(a)[0].match;
        }
        function ea(a, b) {
          for (var e = !1, f = N(a), c = 0; c < f.length; c++)
            if (f[c].match && f[c].match.def == b) {
              e = !0;
              break;
            }
          return e;
        }
        function N(a, c, d) {
          function g(b, c, d, v) {
            function S(d, v, q) {
              if (h == a && void 0 == d.matches)
                return t.push({
                  match: d,
                  locator: v.reverse()
                }), !0;
              if (void 0 != d.matches)
                if (d.isGroup && !0 !== q) {
                  if (d = S(b.matches[k + 1], v))
                    return !0;
                } else if (d.isOptional) {
                  var m = d;
                  if (d = g(d, c, v, q))
                    d = t[t.length - 1].match, (d = 0 == e.inArray(d, m.matches)) && (l = !0), h = a;
                } else {
                  if (!d.isAlternator)
                    if (d.isQuantifier && !0 !== q)
                      for (m = d, f.greedy = f.greedy && isFinite(m.quantifier.max), q = 0 < c.length && !0 !== q ? c.shift() : 0; q < (isNaN(m.quantifier.max) ? q + 1 : m.quantifier.max) && h <= a; q++) {
                        var r = b.matches[e.inArray(m, b.matches) - 1];
                        if (d = S(r, [q].concat(v), !0))
                          if (d = t[t.length - 1].match, d.optionalQuantifier = q > m.quantifier.min - 1, d = 0 == e.inArray(d, r.matches))
                            if (q > m.quantifier.min - 1) {
                              l = !0;
                              h = a;
                              break;
                            } else
                              return !0;
                          else
                            return !0;
                      }
                    else if (d = g(d, c, v, q))
                      return !0;
                }
              else
                h++;
            }
            for (var k = 0 < c.length ? c.shift() : 0; k < b.matches.length; k++)
              if (!0 !== b.matches[k].isQuantifier) {
                var q = S(b.matches[k], [k].concat(d), v);
                if (q && h == a)
                  return q;
                if (h > a)
                  break;
              }
          }
          var k = b.maskToken, h = c ? d : 0;
          d = c || [0];
          var t = [], l = !1;
          if (void 0 == c) {
            c = a - 1;
            for (var m; void 0 == (m = b.validPositions[c]) && -1 < c;)
              c--;
            if (void 0 != m && -1 < c)
              h = c, d = m.locator.slice();
            else {
              for (c = a - 1; void 0 == (m = b.tests[c]) && -1 < c;)
                c--;
              void 0 != m && -1 < c && (h = c, d = m[0].locator.slice());
            }
          }
          for (c = d.shift(); c < k.length && !(g(k[c], d, [c]) && h == a || h > a); c++);
          (0 == t.length || l) && t.push({
            match: {
              fn: null,
              cardinality: 0,
              optionality: !0,
              casing: null,
              def: ''
            },
            locator: []
          });
          return b.tests[a] = t;
        }
        function D() {
          void 0 == b._buffer && (b._buffer = d(!1, 1));
          return b._buffer;
        }
        function p() {
          void 0 == b.buffer && (b.buffer = d(!0, r(), !0));
          return b.buffer;
        }
        function Z(a, c) {
          var e = p().slice();
          if (!0 === a)
            g(), a = 0, c = e.length;
          else
            for (var d = a; d < c; d++)
              delete b.validPositions[d], delete b.tests[d];
          for (d = a; d < c; d++)
            e[d] != f.skipOptionalPartCharacter && P(d, e[d], !0, !0);
        }
        function la(a, b) {
          switch (b.casing) {
          case 'upper':
            a = a.toUpperCase();
            break;
          case 'lower':
            a = a.toLowerCase();
          }
          return a;
        }
        function P(a, c, d, h) {
          function m(a, c, d, ma) {
            var v = !1;
            e.each(N(a), function (h, S) {
              var l = S.match, w = c ? 1 : 0, m = '';
              p();
              for (var V = l.cardinality; V > w; V--)
                m += void 0 == b.validPositions[a - (V - 1)] ? U(a - (V - 1)) : b.validPositions[a - (V - 1)].input;
              c && (m += c);
              v = null != l.fn ? l.fn.test(m, b, a, d, f) : c != l.def && c != f.skipOptionalPartCharacter || '' == l.def ? !1 : {
                c: l.def,
                pos: a
              };
              if (!1 !== v) {
                w = void 0 != v.c ? v.c : c;
                w = w == f.skipOptionalPartCharacter && null === l.fn ? l.def : w;
                m = a;
                void 0 != v.remove && t(v.remove, v.remove + 1);
                if (v.refreshFromBuffer) {
                  m = v.refreshFromBuffer;
                  d = !0;
                  Z(!0 === m ? m : m.start, m.end);
                  if (void 0 == v.pos && void 0 == v.c)
                    return v.pos = r(), !1;
                  m = void 0 != v.pos ? v.pos : a;
                  if (m != a)
                    return v = e.extend(v, P(m, w, !0)), !1;
                } else if (!0 !== v && void 0 != v.pos && v.pos != a && (m = v.pos, Z(a, m), m != a))
                  return v = e.extend(v, P(m, w, !0)), !1;
                if (!0 != v && void 0 == v.pos && void 0 == v.c)
                  return !1;
                0 < h && g(!0);
                k(m, e.extend({}, S, { input: la(w, l) }), ma) || (v = !1);
                return !1;
              }
            });
            return v;
          }
          d = !0 === d;
          for (var w = p(), l = a - 1; -1 < l && (!b.validPositions[l] || null != b.validPositions[l].fn); l--)
            if ((!M(l) || w[l] != U(l)) && 1 < N(l).length) {
              m(l, w[l], !0);
              break;
            }
          if (a >= Q())
            return !1;
          w = m(a, c, d, h);
          if (!d && !1 === w)
            if ((l = b.validPositions[a]) && null == l.match.fn && (l.match.def == c || c == f.skipOptionalPartCharacter))
              w = { caret: C(a) };
            else if ((f.insertMode || void 0 == b.validPositions[C(a)]) && !M(a))
              for (var l = a + 1, x = C(a); l <= x; l++)
                if (w = m(l, c, d, h), !1 !== w) {
                  a = l;
                  break;
                }
          !0 === w && (w = { pos: a });
          return w;
        }
        function M(a) {
          a = x(a);
          return null != a.fn ? a.fn : !1;
        }
        function Q() {
          var a;
          L = s.prop('maxLength');
          -1 == L && (L = void 0);
          if (!1 == f.greedy) {
            var c;
            c = r();
            a = b.validPositions[c];
            var d = void 0 != a ? a.locator.slice() : void 0;
            for (c += 1; void 0 == a || null != a.match.fn || null == a.match.fn && '' != a.match.def; c++)
              a = G(c, d, c - 1), d = a.locator.slice();
            a = c;
          } else
            a = p().length;
          return void 0 == L || a < L ? a : L;
        }
        function C(a) {
          var b = Q();
          if (a >= b)
            return b;
          for (; ++a < b && !M(a) && (!0 !== f.nojumps || f.nojumpsThreshold > a););
          return a;
        }
        function X(a) {
          if (0 >= a)
            return 0;
          for (; 0 < --a && !M(a););
          return a;
        }
        function F(a, b, c) {
          a._valueSet(b.join(''));
          void 0 != c && y(a, c);
        }
        function U(a, b) {
          b = b || x(a);
          return b.placeholder || (null == b.fn ? b.def : f.placeholder.charAt(a % f.placeholder.length));
        }
        function R(a, c, d, k, h) {
          k = void 0 != k ? k.slice() : ka(a._valueGet()).split('');
          g();
          c && a._valueSet('');
          e.each(k, function (c, f) {
            if (!0 === h) {
              var g = b.p, g = -1 == g ? g : X(g), k = -1 == g ? c : C(g);
              -1 == e.inArray(f, D().slice(g + 1, k)) && $.call(a, void 0, !0, f.charCodeAt(0), !1, d, c);
            } else
              $.call(a, void 0, !0, f.charCodeAt(0), !1, d, c), d = d || 0 < c && c > b.p;
          });
          c && (c = f.onKeyPress.call(this, void 0, p(), 0, f), Y(a, c), F(a, p(), e(a).is(':focus') ? C(r(0)) : void 0));
        }
        function da(a) {
          return e.inputmask.escapeRegex.call(this, a);
        }
        function ka(a) {
          return a.replace(RegExp('(' + da(D().join('')) + ')*$'), '');
        }
        function fa(a) {
          if (a.data('_inputmask') && !a.hasClass('hasDatepicker')) {
            var c = [], d = b.validPositions, g;
            for (g in d)
              d[g].match && null != d[g].match.fn && c.push(d[g].input);
            c = (A ? c.reverse() : c).join('');
            d = (A ? p().reverse() : p()).join('');
            e.isFunction(f.onUnMask) && (c = f.onUnMask.call(a, d, c, f));
            return c;
          }
          return a[0]._valueGet();
        }
        function O(a) {
          !A || 'number' != typeof a || f.greedy && '' == f.placeholder || (a = p().length - a);
          return a;
        }
        function y(a, b, c) {
          a = a.jquery && 0 < a.length ? a[0] : a;
          if ('number' == typeof b) {
            b = O(b);
            c = O(c);
            c = 'number' == typeof c ? c : b;
            var d = e(a).data('_inputmask') || {};
            d.caret = {
              begin: b,
              end: c
            };
            e(a).data('_inputmask', d);
            e(a).is(':visible') && (a.scrollLeft = a.scrollWidth, !1 == f.insertMode && b == c && c++, a.setSelectionRange ? (a.selectionStart = b, a.selectionEnd = c) : a.createTextRange && (a = a.createTextRange(), a.collapse(!0), a.moveEnd('character', c), a.moveStart('character', b), a.select()));
          } else
            return d = e(a).data('_inputmask'), !e(a).is(':visible') && d && void 0 != d.caret ? (b = d.caret.begin, c = d.caret.end) : a.setSelectionRange ? (b = a.selectionStart, c = a.selectionEnd) : document.selection && document.selection.createRange && (a = document.selection.createRange(), b = 0 - a.duplicate().moveStart('character', -100000), c = b + a.text.length), b = O(b), c = O(c), {
              begin: b,
              end: c
            };
        }
        function aa(a) {
          var c = p(), d = c.length, f, g = r(), k = {}, h = void 0 != b.validPositions[g] ? b.validPositions[g].locator.slice() : void 0, l;
          for (f = g + 1; f < c.length; f++)
            l = G(f, h, f - 1), h = l.locator.slice(), k[f] = e.extend(!0, {}, l);
          for (f = d - 1; f > g; f--)
            if (l = k[f].match, (l.optionality || l.optionalQuantifier) && c[f] == U(f, l))
              d--;
            else
              break;
          return a ? {
            l: d,
            def: k[d] ? k[d].match : void 0
          } : d;
        }
        function ba(a) {
          var b = p().slice(), c = aa();
          b.length = c;
          F(a, b);
        }
        function T(a) {
          if (e.isFunction(f.isComplete))
            return f.isComplete.call(s, a, f);
          if ('*' != f.repeat) {
            var b = !1, c = aa(!0), d = X(c.l);
            if (r() == d && (void 0 == c.def || c.def.newBlockMarker || c.def.optionalQuantifier))
              for (b = !0, c = 0; c <= d; c++) {
                var g = M(c);
                if (g && (void 0 == a[c] || a[c] == U(c)) || !g && a[c] != U(c)) {
                  b = !1;
                  break;
                }
              }
            return b;
          }
        }
        function na(a) {
          a = e._data(a).events;
          e.each(a, function (a, b) {
            e.each(b, function (a, b) {
              if ('inputmask' == b.namespace && 'setvalue' != b.type) {
                var c = b.handler;
                b.handler = function (a) {
                  if (this.readOnly || this.disabled)
                    a.preventDefault;
                  else
                    return c.apply(this, arguments);
                };
              }
            });
          });
        }
        function oa(a) {
          function b(a) {
            if (void 0 == e.valHooks[a] || !0 != e.valHooks[a].inputmaskpatch) {
              var c = e.valHooks[a] && e.valHooks[a].get ? e.valHooks[a].get : function (a) {
                  return a.value;
                }, d = e.valHooks[a] && e.valHooks[a].set ? e.valHooks[a].set : function (a, b) {
                  a.value = b;
                  return a;
                };
              e.valHooks[a] = {
                get: function (a) {
                  var b = e(a);
                  if (b.data('_inputmask')) {
                    if (b.data('_inputmask').opts.autoUnmask)
                      return b.inputmask('unmaskedvalue');
                    a = c(a);
                    b = (b = b.data('_inputmask').maskset._buffer) ? b.join('') : '';
                    return a != b ? a : '';
                  }
                  return c(a);
                },
                set: function (a, b) {
                  var c = e(a), f = c.data('_inputmask');
                  f ? (f = d(a, e.isFunction(f.opts.onBeforeMask) ? f.opts.onBeforeMask.call(B, b, f.opts) : b), c.triggerHandler('setvalue.inputmask')) : f = d(a, b);
                  return f;
                },
                inputmaskpatch: !0
              };
            }
          }
          var c;
          Object.getOwnPropertyDescriptor && (c = Object.getOwnPropertyDescriptor(a, 'value'));
          if (c && c.get) {
            if (!a._valueGet) {
              var d = c.get, f = c.set;
              a._valueGet = function () {
                return A ? d.call(this).split('').reverse().join('') : d.call(this);
              };
              a._valueSet = function (a) {
                f.call(this, A ? a.split('').reverse().join('') : a);
              };
              Object.defineProperty(a, 'value', {
                get: function () {
                  var a = e(this), b = e(this).data('_inputmask');
                  return b ? b.opts.autoUnmask ? a.inputmask('unmaskedvalue') : d.call(this) != D().join('') ? d.call(this) : '' : d.call(this);
                },
                set: function (a) {
                  var b = e(this).data('_inputmask');
                  b ? (f.call(this, e.isFunction(b.opts.onBeforeMask) ? b.opts.onBeforeMask.call(B, a, b.opts) : a), e(this).triggerHandler('setvalue.inputmask')) : f.call(this, a);
                }
              });
            }
          } else
            document.__lookupGetter__ && a.__lookupGetter__('value') ? a._valueGet || (d = a.__lookupGetter__('value'), f = a.__lookupSetter__('value'), a._valueGet = function () {
              return A ? d.call(this).split('').reverse().join('') : d.call(this);
            }, a._valueSet = function (a) {
              f.call(this, A ? a.split('').reverse().join('') : a);
            }, a.__defineGetter__('value', function () {
              var a = e(this), b = e(this).data('_inputmask');
              return b ? b.opts.autoUnmask ? a.inputmask('unmaskedvalue') : d.call(this) != D().join('') ? d.call(this) : '' : d.call(this);
            }), a.__defineSetter__('value', function (a) {
              var b = e(this).data('_inputmask');
              b ? (f.call(this, e.isFunction(b.opts.onBeforeMask) ? b.opts.onBeforeMask.call(B, a, b.opts) : a), e(this).triggerHandler('setvalue.inputmask')) : f.call(this, a);
            })) : (a._valueGet || (a._valueGet = function () {
              return A ? this.value.split('').reverse().join('') : this.value;
            }, a._valueSet = function (a) {
              this.value = A ? a.split('').reverse().join('') : a;
            }), b(a.type));
        }
        function ga(a, c, d) {
          if (f.numericInput || A)
            c == f.keyCode.BACKSPACE ? c = f.keyCode.DELETE : c == f.keyCode.DELETE && (c = f.keyCode.BACKSPACE), A && (a = d.end, d.end = d.begin, d.begin = a);
          c == f.keyCode.BACKSPACE && 1 >= d.end - d.begin ? d.begin = X(d.begin) : c == f.keyCode.DELETE && d.begin == d.end && d.end++;
          t(d.begin, d.end);
          c = r(d.begin);
          b.p = c < d.begin ? C(c) : d.begin;
        }
        function Y(a, b, c) {
          if (b && b.refreshFromBuffer) {
            var d = b.refreshFromBuffer;
            Z(!0 === d ? d : d.start, d.end);
            g(!0);
            void 0 != c && (F(a, p()), y(a, b.caret || c.begin, b.caret || c.end));
          }
        }
        function ha(a) {
          ca = !1;
          var c = this, d = e(c), g = a.keyCode, k = y(c);
          g == f.keyCode.BACKSPACE || g == f.keyCode.DELETE || h && 127 == g || a.ctrlKey && 88 == g ? (a.preventDefault(), 88 == g && (H = p().join('')), ga(c, g, k), F(c, p(), b.p), c._valueGet() == D().join('') && d.trigger('cleared'), f.showTooltip && d.prop('title', b.mask)) : g == f.keyCode.END || g == f.keyCode.PAGE_DOWN ? setTimeout(function () {
            var b = C(r());
            f.insertMode || b != Q() || a.shiftKey || b--;
            y(c, a.shiftKey ? k.begin : b, b);
          }, 0) : g == f.keyCode.HOME && !a.shiftKey || g == f.keyCode.PAGE_UP ? y(c, 0, a.shiftKey ? k.begin : 0) : g == f.keyCode.ESCAPE || 90 == g && a.ctrlKey ? (R(c, !0, !1, H.split('')), d.click()) : g != f.keyCode.INSERT || a.shiftKey || a.ctrlKey ? !1 != f.insertMode || a.shiftKey || (g == f.keyCode.RIGHT ? setTimeout(function () {
            var a = y(c);
            y(c, a.begin);
          }, 0) : g == f.keyCode.LEFT && setTimeout(function () {
            var a = y(c);
            y(c, A ? a.begin + 1 : a.begin - 1);
          }, 0)) : (f.insertMode = !f.insertMode, y(c, f.insertMode || k.begin != Q() ? k.begin : k.begin - 1));
          var d = y(c), l = f.onKeyDown.call(this, a, p(), d.begin, f);
          Y(c, l, d);
          ia = -1 != e.inArray(g, f.ignorables);
        }
        function $(a, c, d, h, l, m) {
          if (void 0 == d && ca)
            return !1;
          ca = !0;
          var t = e(this);
          a = a || window.event;
          d = c ? d : a.which || a.charCode || a.keyCode;
          if (!(!0 === c || a.ctrlKey && a.altKey) && (a.ctrlKey || a.metaKey || ia))
            return !0;
          if (d) {
            !0 !== c && 46 == d && !1 == a.shiftKey && ',' == f.radixPoint && (d = 44);
            var x, G;
            d = String.fromCharCode(d);
            c ? (m = l ? m : r() + 1, x = {
              begin: m,
              end: m
            }) : x = y(this);
            if (m = A ? 1 < x.begin - x.end || 1 == x.begin - x.end && f.insertMode : 1 < x.end - x.begin || 1 == x.end - x.begin && f.insertMode)
              b.undoPositions = e.extend(!0, {}, b.validPositions), ga(this, f.keyCode.DELETE, x), f.insertMode || (f.insertMode = !f.insertMode, k(x.begin, l), f.insertMode = !f.insertMode), m = !f.multi;
            b.writeOutBuffer = !0;
            x = A && !m ? x.end : x.begin;
            var n = P(x, d, l);
            !1 !== n && (!0 !== n && (x = void 0 != n.pos ? n.pos : x, d = void 0 != n.c ? n.c : d), g(!0), void 0 != n.caret ? G = n.caret : (l = b.validPositions, G = void 0 != l[x + 1] && 1 < N(x + 1, l[x].locator.slice(), x).length ? x + 1 : C(x)), b.p = G);
            if (!1 !== h) {
              var s = this;
              setTimeout(function () {
                f.onKeyValidation.call(s, n, f);
              }, 0);
              if (b.writeOutBuffer && !1 !== n) {
                var u = p();
                F(this, u, c ? void 0 : f.numericInput ? X(G) : G);
                !0 !== c && setTimeout(function () {
                  !0 === T(u) && t.trigger('complete');
                  W = !0;
                  t.trigger('input');
                }, 0);
              } else
                m && (b.buffer = void 0, b.validPositions = b.undoPositions);
            } else
              m && (b.buffer = void 0, b.validPositions = b.undoPositions);
            f.showTooltip && t.prop('title', b.mask);
            a && !0 != c && (a.preventDefault ? a.preventDefault() : a.returnValue = !1, c = y(this), a = f.onKeyPress.call(this, a, p(), c.begin, f), Y(this, a, c));
            for (var D in b.validPositions);
          }
        }
        function pa(a) {
          var b = e(this), c = a.keyCode, d = p(), k = y(this);
          a = f.onKeyUp.call(this, a, d, k.begin, f);
          Y(this, a, k);
          c == f.keyCode.TAB && f.showMaskOnFocus && (b.hasClass('focus-inputmask') && 0 == this._valueGet().length ? (g(), d = p(), F(this, d), y(this, 0), H = p().join('')) : (F(this, d), y(this, O(0), O(Q()))));
        }
        function ja(a) {
          if (!0 === W && 'input' == a.type)
            return W = !1, !0;
          var b = e(this), c = this._valueGet();
          if ('propertychange' == a.type && this._valueGet().length <= Q())
            return !0;
          'paste' == a.type && (window.clipboardData && window.clipboardData.getData ? c = window.clipboardData.getData('Text') : a.originalEvent && a.originalEvent.clipboardData && a.originalEvent.clipboardData.getData && (c = a.originalEvent.clipboardData.getData('text/plain')));
          a = e.isFunction(f.onBeforePaste) ? f.onBeforePaste.call(this, c, f) : c;
          R(this, !0, !1, a.split(''), !0);
          b.click();
          !0 === T(p()) && b.trigger('complete');
          return !1;
        }
        function qa(a) {
          if (!0 === W && 'input' == a.type)
            return W = !1, !0;
          var b = y(this), c = this._valueGet(), c = c.replace(RegExp('(' + da(D().join('')) + ')*'), '');
          b.begin > c.length && (y(this, c.length), b = y(this));
          1 != p().length - c.length || c.charAt(b.begin) == p()[b.begin] || c.charAt(b.begin + 1) == p()[b.begin] || M(b.begin) || (a.keyCode = f.keyCode.BACKSPACE, ha.call(this, a));
          a.preventDefault();
        }
        function ra(a) {
          s = e(a);
          if (s.is(':input') && 'number' != s.attr('type')) {
            s.data('_inputmask', {
              maskset: b,
              opts: f,
              isRTL: !1
            });
            f.showTooltip && s.prop('title', b.mask);
            oa(a);
            ('rtl' == a.dir || f.rightAlign) && s.css('text-align', 'right');
            if ('rtl' == a.dir || f.numericInput) {
              a.dir = 'ltr';
              s.removeAttr('dir');
              var d = s.data('_inputmask');
              d.isRTL = !0;
              s.data('_inputmask', d);
              A = !0;
            }
            s.unbind('.inputmask');
            s.removeClass('focus-inputmask');
            s.closest('form').bind('submit', function () {
              H != p().join('') && s.change();
              f.autoUnmask && f.removeMaskOnSubmit && s.inputmask('remove');
            }).bind('reset', function () {
              setTimeout(function () {
                s.trigger('setvalue');
              }, 0);
            });
            s.bind('mouseenter.inputmask', function () {
              !e(this).hasClass('focus-inputmask') && f.showMaskOnHover && this._valueGet() != p().join('') && F(this, p());
            }).bind('blur.inputmask', function () {
              var a = e(this);
              if (a.data('_inputmask')) {
                var b = this._valueGet(), c = p();
                a.removeClass('focus-inputmask');
                H != p().join('') && a.change();
                f.clearMaskOnLostFocus && '' != b && (b == D().join('') ? this._valueSet('') : ba(this));
                !1 === T(c) && (a.trigger('incomplete'), f.clearIncomplete && (g(), f.clearMaskOnLostFocus ? this._valueSet('') : (c = D().slice(), F(this, c))));
              }
            }).bind('focus.inputmask', function () {
              var a = e(this), b = this._valueGet();
              f.showMaskOnFocus && !a.hasClass('focus-inputmask') && (!f.showMaskOnHover || f.showMaskOnHover && '' == b) && this._valueGet() != p().join('') && F(this, p(), C(r()));
              a.addClass('focus-inputmask');
              H = p().join('');
            }).bind('mouseleave.inputmask', function () {
              var a = e(this);
              f.clearMaskOnLostFocus && (a.hasClass('focus-inputmask') || this._valueGet() == a.attr('placeholder') || (this._valueGet() == D().join('') || '' == this._valueGet() ? this._valueSet('') : ba(this)));
            }).bind('click.inputmask', function () {
              var a = this;
              e(a).is(':focus') && setTimeout(function () {
                var b = y(a);
                if (b.begin == b.end) {
                  var b = A ? O(b.begin) : b.begin, c = r(b), c = C(c);
                  b < c ? M(b) ? y(a, b) : y(a, C(b)) : y(a, c);
                }
              }, 0);
            }).bind('dblclick.inputmask', function () {
              var a = this;
              setTimeout(function () {
                y(a, 0, C(r()));
              }, 0);
            }).bind(K + '.inputmask dragdrop.inputmask drop.inputmask', ja).bind('setvalue.inputmask', function () {
              R(this, !0);
              H = p().join('');
              this._valueGet() == D().join('') && this._valueSet('');
            }).bind('complete.inputmask', f.oncomplete).bind('incomplete.inputmask', f.onincomplete).bind('cleared.inputmask', f.oncleared);
            s.bind('keydown.inputmask', ha).bind('keypress.inputmask', $).bind('keyup.inputmask', pa);
            if (n || u || z || J)
              'input' == K && s.unbind(K + '.inputmask'), s.bind('input.inputmask', qa);
            c && s.bind('input.inputmask', ja);
            d = e.isFunction(f.onBeforeMask) ? f.onBeforeMask.call(a, a._valueGet(), f) : a._valueGet();
            R(a, !0, !1, d.split(''), !0);
            H = p().join('');
            var k;
            try {
              k = document.activeElement;
            } catch (h) {
            }
            k === a ? (s.addClass('focus-inputmask'), y(a, C(r()))) : (!1 === T(p()) && f.clearIncomplete && g(), f.clearMaskOnLostFocus ? p().join('') == D().join('') ? a._valueSet('') : ba(a) : F(a, p()));
            na(a);
          }
        }
        var A = !1, H, s, ca = !1, W = !1, ia = !1, L;
        if (void 0 != a)
          switch (a.action) {
          case 'isComplete':
            return s = e(a.el), b = s.data('_inputmask').maskset, f = s.data('_inputmask').opts, T(a.buffer);
          case 'unmaskedvalue':
            return s = a.$input, b = s.data('_inputmask').maskset, f = s.data('_inputmask').opts, A = a.$input.data('_inputmask').isRTL, fa(a.$input);
          case 'mask':
            H = p().join('');
            ra(a.el);
            break;
          case 'format':
            s = e({});
            s.data('_inputmask', {
              maskset: b,
              opts: f,
              isRTL: f.numericInput
            });
            f.numericInput && (A = !0);
            var E = a.value.split('');
            R(s, !1, !1, A ? E.reverse() : E, !0);
            return A ? p().reverse().join('') : p().join('');
          case 'isValid':
            s = e({});
            s.data('_inputmask', {
              maskset: b,
              opts: f,
              isRTL: f.numericInput
            });
            f.numericInput && (A = !0);
            E = a.value.split('');
            R(s, !1, !0, A ? E.reverse() : E);
            var E = p(), sa = aa();
            E.length = sa;
            return T(E) && a.value == E.join('');
          case 'getemptymask':
            return s = e(a.el), b = s.data('_inputmask').maskset, f = s.data('_inputmask').opts, D();
          case 'remove':
            var B = a.el;
            s = e(B);
            b = s.data('_inputmask').maskset;
            f = s.data('_inputmask').opts;
            B._valueSet(fa(s));
            s.unbind('.inputmask');
            s.removeClass('focus-inputmask');
            s.removeData('_inputmask');
            Object.getOwnPropertyDescriptor && (E = Object.getOwnPropertyDescriptor(B, 'value'));
            E && E.get ? B._valueGet && Object.defineProperty(B, 'value', {
              get: B._valueGet,
              set: B._valueSet
            }) : document.__lookupGetter__ && B.__lookupGetter__('value') && B._valueGet && (B.__defineGetter__('value', B._valueGet), B.__defineSetter__('value', B._valueSet));
            try {
              delete B._valueGet, delete B._valueSet;
            } catch (ua) {
              B._valueGet = void 0, B._valueSet = void 0;
            }
          }
      };
    e.inputmask = {
      defaults: {
        placeholder: '_',
        optionalmarker: {
          start: '[',
          end: ']'
        },
        quantifiermarker: {
          start: '{',
          end: '}'
        },
        groupmarker: {
          start: '(',
          end: ')'
        },
        alternatormarker: '|',
        escapeChar: '\\',
        mask: null,
        oncomplete: e.noop,
        onincomplete: e.noop,
        oncleared: e.noop,
        repeat: 0,
        greedy: !0,
        autoUnmask: !1,
        removeMaskOnSubmit: !0,
        clearMaskOnLostFocus: !0,
        insertMode: !0,
        clearIncomplete: !1,
        aliases: {},
        alias: null,
        onKeyUp: e.noop,
        onKeyPress: e.noop,
        onKeyDown: e.noop,
        onBeforeMask: void 0,
        onBeforePaste: void 0,
        onUnMask: void 0,
        showMaskOnFocus: !0,
        showMaskOnHover: !0,
        onKeyValidation: e.noop,
        skipOptionalPartCharacter: ' ',
        showTooltip: !1,
        numericInput: !1,
        rightAlign: !1,
        radixPoint: '',
        nojumps: !1,
        nojumpsThreshold: 0,
        definitions: {
          9: {
            validator: '[0-9]',
            cardinality: 1,
            definitionSymbol: '*'
          },
          a: {
            validator: '[A-Za-z\u0410-\u044f\u0401\u0451]',
            cardinality: 1,
            definitionSymbol: '*'
          },
          '*': {
            validator: '[A-Za-z\u0410-\u044f\u0401\u04510-9]',
            cardinality: 1
          }
        },
        keyCode: {
          ALT: 18,
          BACKSPACE: 8,
          CAPS_LOCK: 20,
          COMMA: 188,
          COMMAND: 91,
          COMMAND_LEFT: 91,
          COMMAND_RIGHT: 93,
          CONTROL: 17,
          DELETE: 46,
          DOWN: 40,
          END: 35,
          ENTER: 13,
          ESCAPE: 27,
          HOME: 36,
          INSERT: 45,
          LEFT: 37,
          MENU: 93,
          NUMPAD_ADD: 107,
          NUMPAD_DECIMAL: 110,
          NUMPAD_DIVIDE: 111,
          NUMPAD_ENTER: 108,
          NUMPAD_MULTIPLY: 106,
          NUMPAD_SUBTRACT: 109,
          PAGE_DOWN: 34,
          PAGE_UP: 33,
          PERIOD: 190,
          RIGHT: 39,
          SHIFT: 16,
          SPACE: 32,
          TAB: 9,
          UP: 38,
          WINDOWS: 91
        },
        ignorables: [
          8,
          9,
          13,
          19,
          27,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          45,
          46,
          93,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123
        ],
        isComplete: void 0
      },
      masksCache: {},
      escapeRegex: function (a) {
        return a.replace(RegExp('(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)', 'gim'), '\\$1');
      },
      format: function (a, c) {
        var f = e.extend(!0, {}, e.inputmask.defaults, c);
        b(f.alias, c, f);
        return r({
          action: 'format',
          value: a
        }, d(f), f);
      },
      isValid: function (a, c) {
        var f = e.extend(!0, {}, e.inputmask.defaults, c);
        b(f.alias, c, f);
        return r({
          action: 'isValid',
          value: a
        }, d(f), f);
      }
    };
    e.fn.inputmask = function (a, c, f, g, h) {
      function n(a, b) {
        var c = e(a), d;
        for (d in b) {
          var f = c.data('inputmask-' + d.toLowerCase());
          void 0 != f && (b[d] = f);
        }
        return b;
      }
      f = f || r;
      g = g || '_inputmask';
      var k = e.extend(!0, {}, e.inputmask.defaults, c), t;
      if ('string' === typeof a)
        switch (a) {
        case 'mask':
          return b(k.alias, c, k), t = d(k), 0 == t.length ? this : this.each(function () {
            f({
              action: 'mask',
              el: this
            }, e.extend(!0, {}, e.isArray(t) && f === r ? t[0] : t), n(this, k));
          });
        case 'unmaskedvalue':
          return a = e(this), a.data(g) ? f({
            action: 'unmaskedvalue',
            $input: a
          }) : a.val();
        case 'remove':
          return this.each(function () {
            e(this).data(g) && f({
              action: 'remove',
              el: this
            });
          });
        case 'getemptymask':
          return this.data(g) ? f({
            action: 'getemptymask',
            el: this
          }) : '';
        case 'hasMaskedValue':
          return this.data(g) ? !this.data(g).opts.autoUnmask : !1;
        case 'isComplete':
          return this.data(g) ? f({
            action: 'isComplete',
            buffer: this[0]._valueGet().split(''),
            el: this
          }) : !0;
        case 'getmetadata':
          if (this.data(g))
            return t = this.data(g).maskset, t.metadata;
          break;
        case '_detectScope':
          return b(k.alias, c, k), void 0 == h || b(h, c, k) || -1 != e.inArray(h, 'mask unmaskedvalue remove getemptymask hasMaskedValue isComplete getmetadata _detectScope'.split(' ')) || (k.mask = h), e.isFunction(k.mask) && (k.mask = k.mask.call(this, k)), e.isArray(k.mask);
        default:
          return b(k.alias, c, k), b(a, c, k) || (k.mask = a), t = d(k), void 0 == t ? this : this.each(function () {
            f({
              action: 'mask',
              el: this
            }, e.extend(!0, {}, e.isArray(t) && f === r ? t[0] : t), n(this, k));
          });
        }
      else {
        if ('object' == typeof a)
          return k = e.extend(!0, {}, e.inputmask.defaults, a), b(k.alias, a, k), t = d(k), void 0 == t ? this : this.each(function () {
            f({
              action: 'mask',
              el: this
            }, e.extend(!0, {}, e.isArray(t) && f === r ? t[0] : t), n(this, k));
          });
        if (void 0 == a)
          return this.each(function () {
            var a = e(this).attr('data-inputmask');
            if (a && '' != a)
              try {
                var a = a.replace(RegExp('\'', 'g'), '"'), d = e.parseJSON('{' + a + '}');
                e.extend(!0, d, c);
                k = e.extend(!0, {}, e.inputmask.defaults, d);
                b(k.alias, d, k);
                k.alias = void 0;
                e(this).inputmask('mask', k, f);
              } catch (g) {
              }
          });
      }
    };
  }
}(jQuery));
(function (e) {
  if (void 0 != e.fn.inputmask) {
    var a = function (a, d, c) {
      function g(a) {
        var c = document.createElement('input');
        a = 'on' + a;
        var b = a in c;
        b || (c.setAttribute(a, 'return;'), b = 'function' == typeof c[a]);
        return b;
      }
      function h(a) {
        if (void 0 == e.valHooks[a] || !0 != e.valHooks[a].inputmaskmultipatch) {
          var c = e.valHooks[a] && e.valHooks[a].get ? e.valHooks[a].get : function (a) {
              return a.value;
            }, b = e.valHooks[a] && e.valHooks[a].set ? e.valHooks[a].set : function (a, c) {
              a.value = c;
              return a;
            };
          e.valHooks[a] = {
            get: function (a) {
              var b = e(a);
              return b.data('_inputmask-multi') ? (a = b.data('_inputmask-multi'), c(a.elmasks[a.activeMasksetIndex])) : c(a);
            },
            set: function (a, c) {
              var d = e(a), f = b(a, c);
              d.data('_inputmask-multi') && d.triggerHandler('setvalue');
              return f;
            },
            inputmaskmultipatch: !0
          };
        }
      }
      function n(a, b, d) {
        a = a.jquery && 0 < a.length ? a[0] : a;
        if ('number' == typeof b) {
          b = z(b);
          d = z(d);
          d = 'number' == typeof d ? d : b;
          if (a != l) {
            var f = e(a).data('_inputmask') || {};
            f.caret = {
              begin: b,
              end: d
            };
            e(a).data('_inputmask', f);
          }
          e(a).is(':visible') && (a.scrollLeft = a.scrollWidth, !1 == c.insertMode && b == d && d++, a.setSelectionRange ? (a.selectionStart = b, a.selectionEnd = d) : a.createTextRange && (a = a.createTextRange(), a.collapse(!0), a.moveEnd('character', d), a.moveStart('character', b), a.select()));
        } else
          return f = e(a).data('_inputmask'), !e(a).is(':visible') && f && void 0 != f.caret ? (b = f.caret.begin, d = f.caret.end) : a.setSelectionRange ? (b = a.selectionStart, d = a.selectionEnd) : document.selection && document.selection.createRange && (a = document.selection.createRange(), b = 0 - a.duplicate().moveStart('character', -100000), d = b + a.text.length), b = z(b), d = z(d), {
            begin: b,
            end: d
          };
      }
      function z(a) {
        !r || 'number' != typeof a || c.greedy && '' == c.placeholder || (a = l.value.length - a);
        return a;
      }
      function u(a, b) {
        if ('multiMaskScope' != a) {
          if (e.isFunction(c.determineActiveMasksetIndex))
            m = c.determineActiveMasksetIndex.call(q, a, b);
          else {
            var d = -1, f = -1, g = -1;
            e.each(b, function (a, b) {
              var c = e(b).data('_inputmask').maskset, h = -1, l = 0, k = n(b).begin, q;
              for (q in c.validPositions)
                c = parseInt(q), c > h && (h = c), l++;
              if (l > d || l == d && f > k && g > h || l == d && f == k && g < h)
                d = l, f = k, m = a, g = h;
            });
          }
          var h = q.data('_inputmask-multi') || {
              activeMasksetIndex: 0,
              elmasks: b
            };
          h.activeMasksetIndex = m;
          q.data('_inputmask-multi', h);
        }
        -1 == e.inArray(a, ['focus']) && l.value != b[m]._valueGet() && (h = '' == e(b[m]).val() ? b[m]._valueGet() : e(b[m]).val(), l.value = h);
        -1 == e.inArray(a, [
          'blur',
          'focus'
        ]) && e(b[m]).hasClass('focus-inputmask') && (h = n(b[m]), n(l, h.begin, h.end));
      }
      function J(a) {
        l = a;
        q = e(l);
        r = 'rtl' == l.dir || c.numericInput;
        m = 0;
        f = e.map(d, function (a, b) {
          var d = '<input type="text" ';
          q.attr('value') && (d += 'value="' + q.attr('value') + '" ');
          q.attr('dir') && (d += 'dir="' + q.attr('dir') + '" ');
          d = e(d + '/>')[0];
          e(d).inputmask(e.extend({}, c, { mask: a.mask }));
          return d;
        });
        q.data('_inputmask-multi', {
          activeMasksetIndex: 0,
          elmasks: f
        });
        ('rtl' == l.dir || c.rightAlign) && q.css('text-align', 'right');
        l.dir = 'ltr';
        q.removeAttr('dir');
        '' != q.attr('value') && u('init', f);
        q.bind('mouseenter blur focus mouseleave click dblclick keydown keypress keypress', function (a) {
          var b = n(l), d, g = !0;
          if ('keydown' == a.type) {
            d = a.keyCode;
            if (d == c.keyCode.DOWN && m < f.length - 1)
              return m++, u('multiMaskScope', f), !1;
            if (d == c.keyCode.UP && 0 < m)
              return m--, u('multiMaskScope', f), !1;
            if (a.ctrlKey || a.shiftKey || a.altKey)
              return !0;
          } else if ('keypress' == a.type && (a.ctrlKey || a.shiftKey || a.altKey))
            return !0;
          e.each(f, function (f, h) {
            if ('keydown' == a.type) {
              d = a.keyCode;
              if (d == c.keyCode.BACKSPACE && h._valueGet().length < b.begin)
                return;
              if (d == c.keyCode.TAB)
                g = !1;
              else {
                if (d == c.keyCode.RIGHT) {
                  n(h, b.begin + 1, b.end + 1);
                  g = !1;
                  return;
                }
                if (d == c.keyCode.LEFT) {
                  n(h, b.begin - 1, b.end - 1);
                  g = !1;
                  return;
                }
              }
            }
            if (-1 != e.inArray(a.type, ['click']) && (n(h, z(b.begin), z(b.end)), b.begin != b.end)) {
              g = !1;
              return;
            }
            -1 != e.inArray(a.type, ['keydown']) && b.begin != b.end && n(h, b.begin, b.end);
            e(h).triggerHandler(a);
          });
          g && setTimeout(function () {
            u(a.type, f);
          }, 0);
        });
        q.bind(K + ' dragdrop drop setvalue', function (a) {
          n(l);
          setTimeout(function () {
            e.each(f, function (b, c) {
              c._valueSet(l.value);
              e(c).triggerHandler(a);
            });
            setTimeout(function () {
              u(a.type, f);
            }, 0);
          }, 0);
        });
        h(l.type);
      }
      var K = g('paste') ? 'paste' : g('input') ? 'input' : 'propertychange', r, l, q, f, m;
      c.multi = !0;
      if (void 0 != a)
        switch (a.action) {
        case 'isComplete':
          return q = e(a.el), a = q.data('_inputmask-multi'), a = a.elmasks[a.activeMasksetIndex], e(a).inputmask('isComplete');
        case 'unmaskedvalue':
          return q = a.$input, a = q.data('_inputmask-multi'), a = a.elmasks[a.activeMasksetIndex], e(a).inputmask('unmaskedvalue');
        case 'mask':
          J(a.el);
          break;
        case 'format':
          return q = e({}), q.data('_inputmask', {
            maskset: maskset,
            opts: c,
            isRTL: c.numericInput
          }), c.numericInput && (r = !0), a = a.value.split(''), checkVal(q, !1, !1, r ? a.reverse() : a, !0), r ? getBuffer().reverse().join('') : getBuffer().join('');
        case 'isValid':
          return q = e({}), q.data('_inputmask', {
            maskset: maskset,
            opts: c,
            isRTL: c.numericInput
          }), c.numericInput && (r = !0), a = a.value.split(''), checkVal(q, !1, !0, r ? a.reverse() : a), isComplete(getBuffer());
        case 'getemptymask':
          return q = e(a.el), maskset = q.data('_inputmask').maskset, c = q.data('_inputmask').opts, getBufferTemplate();
        case 'remove':
          l = a.el;
          q = e(l);
          maskset = q.data('_inputmask').maskset;
          c = q.data('_inputmask').opts;
          l._valueSet(unmaskedvalue(q));
          q.unbind('.inputmask');
          q.removeClass('focus-inputmask');
          q.removeData('_inputmask');
          var I;
          Object.getOwnPropertyDescriptor && (I = Object.getOwnPropertyDescriptor(l, 'value'));
          I && I.get ? l._valueGet && Object.defineProperty(l, 'value', {
            get: l._valueGet,
            set: l._valueSet
          }) : document.__lookupGetter__ && l.__lookupGetter__('value') && l._valueGet && (l.__defineGetter__('value', l._valueGet), l.__defineSetter__('value', l._valueSet));
          try {
            delete l._valueGet, delete l._valueSet;
          } catch (ta) {
            l._valueGet = void 0, l._valueSet = void 0;
          }
        }
    };
    e.extend(e.inputmask.defaults, {
      multi: !1,
      determineActiveMasksetIndex: void 0
    });
    e.inputmask._fn = e.fn.inputmask;
    e.fn.inputmask = function (b, d) {
      if ('string' === typeof b)
        return e.inputmask._fn('_detectScope', d, void 0, void 0, b) ? e.inputmask._fn.call(this, b, d, a, '_inputmask-multi') : e.inputmask._fn.call(this, b, d);
      if ('object' == typeof b)
        return e.inputmask._fn('_detectScope', b) ? e.inputmask._fn.call(this, b, d, a, '_inputmask-multi') : e.inputmask._fn.call(this, b, d);
      if (void 0 == b)
        return e.inputmask._fn.call(this, b, d);
    };
  }
}(jQuery));
(function (e) {
  e.extend(e.inputmask.defaults.definitions, {
    A: {
      validator: '[A-Za-z]',
      cardinality: 1,
      casing: 'upper'
    },
    '#': {
      validator: '[A-Za-z\u0410-\u044f\u0401\u04510-9]',
      cardinality: 1,
      casing: 'upper'
    }
  });
  e.extend(e.inputmask.defaults.aliases, {
    url: {
      mask: 'ir',
      placeholder: '',
      separator: '',
      defaultPrefix: 'http://',
      regex: {
        urlpre1: /[fh]/,
        urlpre2: /(ft|ht)/,
        urlpre3: /(ftp|htt)/,
        urlpre4: /(ftp:|http|ftps)/,
        urlpre5: /(ftp:\/|ftps:|http:|https)/,
        urlpre6: /(ftp:\/\/|ftps:\/|http:\/|https:)/,
        urlpre7: /(ftp:\/\/|ftps:\/\/|http:\/\/|https:\/)/,
        urlpre8: /(ftp:\/\/|ftps:\/\/|http:\/\/|https:\/\/)/
      },
      definitions: {
        i: {
          validator: function (a, b, d, c, g) {
            return !0;
          },
          cardinality: 8,
          prevalidator: function () {
            for (var a = [], b = 0; 8 > b; b++)
              a[b] = function () {
                var a = b;
                return {
                  validator: function (b, g, e, n, z) {
                    if (z.regex['urlpre' + (a + 1)]) {
                      var u = b;
                      0 < a + 1 - b.length && (u = g.buffer.join('').substring(0, a + 1 - b.length) + '' + u);
                      b = z.regex['urlpre' + (a + 1)].test(u);
                      if (!n && !b) {
                        e -= a;
                        for (n = 0; n < z.defaultPrefix.length; n++)
                          g.buffer[e] = z.defaultPrefix[n], e++;
                        for (n = 0; n < u.length - 1; n++)
                          g.buffer[e] = u[n], e++;
                        return { pos: e };
                      }
                      return b;
                    }
                    return !1;
                  },
                  cardinality: a
                };
              }();
            return a;
          }()
        },
        r: {
          validator: '.',
          cardinality: 50
        }
      },
      insertMode: !1,
      autoUnmask: !1
    },
    ip: {
      mask: 'i[i[i]].i[i[i]].i[i[i]].i[i[i]]',
      definitions: {
        i: {
          validator: function (a, b, d, c, g) {
            -1 < d - 1 && '.' != b.buffer[d - 1] ? (a = b.buffer[d - 1] + a, a = -1 < d - 2 && '.' != b.buffer[d - 2] ? b.buffer[d - 2] + a : '0' + a) : a = '00' + a;
            return /25[0-5]|2[0-4][0-9]|[01][0-9][0-9]/.test(a);
          },
          cardinality: 1
        }
      }
    },
    email: {
      mask: '*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}.*{2,6}[.*{1,2}]',
      greedy: !1,
      onBeforePaste: function (a, b) {
        a = a.toLowerCase();
        return a.replace('mailto:', '');
      },
      definitions: {
        '*': {
          validator: '[A-Za-z\u0410-\u044f\u0401\u04510-9]',
          cardinality: 1,
          casing: 'lower'
        }
      }
    }
  });
}(jQuery));
(function (e) {
  e.extend(e.inputmask.defaults.definitions, {
    h: {
      validator: '[01][0-9]|2[0-3]',
      cardinality: 2,
      prevalidator: [{
          validator: '[0-2]',
          cardinality: 1
        }]
    },
    s: {
      validator: '[0-5][0-9]',
      cardinality: 2,
      prevalidator: [{
          validator: '[0-5]',
          cardinality: 1
        }]
    },
    d: {
      validator: '0[1-9]|[12][0-9]|3[01]',
      cardinality: 2,
      prevalidator: [{
          validator: '[0-3]',
          cardinality: 1
        }]
    },
    m: {
      validator: '0[1-9]|1[012]',
      cardinality: 2,
      prevalidator: [{
          validator: '[01]',
          cardinality: 1
        }]
    },
    y: {
      validator: '(19|20)\\d{2}',
      cardinality: 4,
      prevalidator: [
        {
          validator: '[12]',
          cardinality: 1
        },
        {
          validator: '(19|20)',
          cardinality: 2
        },
        {
          validator: '(19|20)\\d',
          cardinality: 3
        }
      ]
    }
  });
  e.extend(e.inputmask.defaults.aliases, {
    'dd/mm/yyyy': {
      mask: '1/2/y',
      placeholder: 'dd/mm/yyyy',
      regex: {
        val1pre: /[0-3]/,
        val1: /0[1-9]|[12][0-9]|3[01]/,
        val2pre: function (a) {
          a = e.inputmask.escapeRegex.call(this, a);
          return RegExp('((0[1-9]|[12][0-9]|3[01])' + a + '[01])');
        },
        val2: function (a) {
          a = e.inputmask.escapeRegex.call(this, a);
          return RegExp('((0[1-9]|[12][0-9])' + a + '(0[1-9]|1[012]))|(30' + a + '(0[13-9]|1[012]))|(31' + a + '(0[13578]|1[02]))');
        }
      },
      leapday: '29/02/',
      separator: '/',
      yearrange: {
        minyear: 1900,
        maxyear: 2099
      },
      isInYearRange: function (a, b, d) {
        if (isNaN(a))
          return !1;
        var c = parseInt(a.concat(b.toString().slice(a.length)));
        a = parseInt(a.concat(d.toString().slice(a.length)));
        return (isNaN(c) ? !1 : b <= c && c <= d) || (isNaN(a) ? !1 : b <= a && a <= d);
      },
      determinebaseyear: function (a, b, d) {
        var c = new Date().getFullYear();
        if (a > c)
          return a;
        if (b < c) {
          for (var c = b.toString().slice(0, 2), g = b.toString().slice(2, 4); b < c + d;)
            c--;
          b = c + g;
          return a > b ? a : b;
        }
        return c;
      },
      onKeyUp: function (a, b, d, c) {
        b = e(this);
        a.ctrlKey && a.keyCode == c.keyCode.RIGHT && (a = new Date(), b.val(a.getDate().toString() + (a.getMonth() + 1).toString() + a.getFullYear().toString()));
      },
      definitions: {
        1: {
          validator: function (a, b, d, c, g) {
            var e = g.regex.val1.test(a);
            return c || e || a.charAt(1) != g.separator && -1 == '-./'.indexOf(a.charAt(1)) || !(e = g.regex.val1.test('0' + a.charAt(0))) ? e : (b.buffer[d - 1] = '0', {
              refreshFromBuffer: {
                start: d - 1,
                end: d
              },
              pos: d,
              c: a.charAt(0)
            });
          },
          cardinality: 2,
          prevalidator: [{
              validator: function (a, b, d, c, e) {
                isNaN(b.buffer[d + 1]) || (a += b.buffer[d + 1]);
                var h = 1 == a.length ? e.regex.val1pre.test(a) : e.regex.val1.test(a);
                return c || h || !(h = e.regex.val1.test('0' + a)) ? h : (b.buffer[d] = '0', d++, { pos: d });
              },
              cardinality: 1
            }]
        },
        2: {
          validator: function (a, b, d, c, e) {
            var h = e.mask.indexOf('2') == e.mask.length - 1 ? b.buffer.join('').substr(5, 3) : b.buffer.join('').substr(0, 3);
            -1 != h.indexOf(e.placeholder[0]) && (h = '01' + e.separator);
            var n = e.regex.val2(e.separator).test(h + a);
            if (!(c || n || a.charAt(1) != e.separator && -1 == '-./'.indexOf(a.charAt(1))) && (n = e.regex.val2(e.separator).test(h + '0' + a.charAt(0))))
              return b.buffer[d - 1] = '0', {
                refreshFromBuffer: {
                  start: d - 1,
                  end: d
                },
                pos: d,
                c: a.charAt(0)
              };
            if (e.mask.indexOf('2') == e.mask.length - 1 && n) {
              if (b.buffer.join('').substr(4, 4) + a != e.leapday)
                return !0;
              a = parseInt(b.buffer.join('').substr(0, 4), 10);
              return 0 === a % 4 ? 0 === a % 100 ? 0 === a % 400 ? !0 : !1 : !0 : !1;
            }
            return n;
          },
          cardinality: 2,
          prevalidator: [{
              validator: function (a, b, d, c, e) {
                isNaN(b.buffer[d + 1]) || (a += b.buffer[d + 1]);
                var h = e.mask.indexOf('2') == e.mask.length - 1 ? b.buffer.join('').substr(5, 3) : b.buffer.join('').substr(0, 3);
                -1 != h.indexOf(e.placeholder[0]) && (h = '01' + e.separator);
                var n = 1 == a.length ? e.regex.val2pre(e.separator).test(h + a) : e.regex.val2(e.separator).test(h + a);
                return c || n || !(n = e.regex.val2(e.separator).test(h + '0' + a)) ? n : (b.buffer[d] = '0', d++, { pos: d });
              },
              cardinality: 1
            }]
        },
        y: {
          validator: function (a, b, d, c, e) {
            if (e.isInYearRange(a, e.yearrange.minyear, e.yearrange.maxyear)) {
              if (b.buffer.join('').substr(0, 6) != e.leapday)
                return !0;
              a = parseInt(a, 10);
              return 0 === a % 4 ? 0 === a % 100 ? 0 === a % 400 ? !0 : !1 : !0 : !1;
            }
            return !1;
          },
          cardinality: 4,
          prevalidator: [
            {
              validator: function (a, b, d, c, e) {
                var h = e.isInYearRange(a, e.yearrange.minyear, e.yearrange.maxyear);
                if (!c && !h) {
                  c = e.determinebaseyear(e.yearrange.minyear, e.yearrange.maxyear, a + '0').toString().slice(0, 1);
                  if (h = e.isInYearRange(c + a, e.yearrange.minyear, e.yearrange.maxyear))
                    return b.buffer[d++] = c[0], { pos: d };
                  c = e.determinebaseyear(e.yearrange.minyear, e.yearrange.maxyear, a + '0').toString().slice(0, 2);
                  if (h = e.isInYearRange(c + a, e.yearrange.minyear, e.yearrange.maxyear))
                    return b.buffer[d++] = c[0], b.buffer[d++] = c[1], { pos: d };
                }
                return h;
              },
              cardinality: 1
            },
            {
              validator: function (a, b, d, c, e) {
                var h = e.isInYearRange(a, e.yearrange.minyear, e.yearrange.maxyear);
                if (!c && !h) {
                  c = e.determinebaseyear(e.yearrange.minyear, e.yearrange.maxyear, a).toString().slice(0, 2);
                  if (h = e.isInYearRange(a[0] + c[1] + a[1], e.yearrange.minyear, e.yearrange.maxyear))
                    return b.buffer[d++] = c[1], { pos: d };
                  c = e.determinebaseyear(e.yearrange.minyear, e.yearrange.maxyear, a).toString().slice(0, 2);
                  e.isInYearRange(c + a, e.yearrange.minyear, e.yearrange.maxyear) ? b.buffer.join('').substr(0, 6) != e.leapday ? h = !0 : (e = parseInt(a, 10), h = 0 === e % 4 ? 0 === e % 100 ? 0 === e % 400 ? !0 : !1 : !0 : !1) : h = !1;
                  if (h)
                    return b.buffer[d - 1] = c[0], b.buffer[d++] = c[1], b.buffer[d++] = a[0], {
                      refreshFromBuffer: {
                        start: d - 3,
                        end: d
                      },
                      pos: d
                    };
                }
                return h;
              },
              cardinality: 2
            },
            {
              validator: function (a, b, d, c, e) {
                return e.isInYearRange(a, e.yearrange.minyear, e.yearrange.maxyear);
              },
              cardinality: 3
            }
          ]
        }
      },
      insertMode: !1,
      autoUnmask: !1
    },
    'mm/dd/yyyy': {
      placeholder: 'mm/dd/yyyy',
      alias: 'dd/mm/yyyy',
      regex: {
        val2pre: function (a) {
          a = e.inputmask.escapeRegex.call(this, a);
          return RegExp('((0[13-9]|1[012])' + a + '[0-3])|(02' + a + '[0-2])');
        },
        val2: function (a) {
          a = e.inputmask.escapeRegex.call(this, a);
          return RegExp('((0[1-9]|1[012])' + a + '(0[1-9]|[12][0-9]))|((0[13-9]|1[012])' + a + '30)|((0[13578]|1[02])' + a + '31)');
        },
        val1pre: /[01]/,
        val1: /0[1-9]|1[012]/
      },
      leapday: '02/29/',
      onKeyUp: function (a, b, d, c) {
        b = e(this);
        a.ctrlKey && a.keyCode == c.keyCode.RIGHT && (a = new Date(), b.val((a.getMonth() + 1).toString() + a.getDate().toString() + a.getFullYear().toString()));
      }
    },
    'yyyy/mm/dd': {
      mask: 'y/1/2',
      placeholder: 'yyyy/mm/dd',
      alias: 'mm/dd/yyyy',
      leapday: '/02/29',
      onKeyUp: function (a, b, d, c) {
        b = e(this);
        a.ctrlKey && a.keyCode == c.keyCode.RIGHT && (a = new Date(), b.val(a.getFullYear().toString() + (a.getMonth() + 1).toString() + a.getDate().toString()));
      }
    },
    'dd.mm.yyyy': {
      mask: '1.2.y',
      placeholder: 'dd.mm.yyyy',
      leapday: '29.02.',
      separator: '.',
      alias: 'dd/mm/yyyy'
    },
    'dd-mm-yyyy': {
      mask: '1-2-y',
      placeholder: 'dd-mm-yyyy',
      leapday: '29-02-',
      separator: '-',
      alias: 'dd/mm/yyyy'
    },
    'mm.dd.yyyy': {
      mask: '1.2.y',
      placeholder: 'mm.dd.yyyy',
      leapday: '02.29.',
      separator: '.',
      alias: 'mm/dd/yyyy'
    },
    'mm-dd-yyyy': {
      mask: '1-2-y',
      placeholder: 'mm-dd-yyyy',
      leapday: '02-29-',
      separator: '-',
      alias: 'mm/dd/yyyy'
    },
    'yyyy.mm.dd': {
      mask: 'y.1.2',
      placeholder: 'yyyy.mm.dd',
      leapday: '.02.29',
      separator: '.',
      alias: 'yyyy/mm/dd'
    },
    'yyyy-mm-dd': {
      mask: 'y-1-2',
      placeholder: 'yyyy-mm-dd',
      leapday: '-02-29',
      separator: '-',
      alias: 'yyyy/mm/dd'
    },
    datetime: {
      mask: '1/2/y h:s',
      placeholder: 'dd/mm/yyyy hh:mm',
      alias: 'dd/mm/yyyy',
      regex: {
        hrspre: /[012]/,
        hrs24: /2[0-4]|1[3-9]/,
        hrs: /[01][0-9]|2[0-4]/,
        ampm: /^[a|p|A|P][m|M]/,
        mspre: /[0-5]/,
        ms: /[0-5][0-9]/
      },
      timeseparator: ':',
      hourFormat: '24',
      definitions: {
        h: {
          validator: function (a, b, d, c, e) {
            if ('24' == e.hourFormat && 24 == parseInt(a, 10))
              return b.buffer[d - 1] = '0', b.buffer[d] = '0', {
                refreshFromBuffer: {
                  start: d - 1,
                  end: d
                },
                c: '0'
              };
            var h = e.regex.hrs.test(a);
            return c || h || a.charAt(1) != e.timeseparator && -1 == '-.:'.indexOf(a.charAt(1)) || !(h = e.regex.hrs.test('0' + a.charAt(0))) ? h && '24' !== e.hourFormat && e.regex.hrs24.test(a) ? (a = parseInt(a, 10), b.buffer[d + 5] = 24 == a ? 'a' : 'p', b.buffer[d + 6] = 'm', a -= 12, 10 > a ? (b.buffer[d] = a.toString(), b.buffer[d - 1] = '0') : (b.buffer[d] = a.toString().charAt(1), b.buffer[d - 1] = a.toString().charAt(0)), {
              refreshFromBuffer: {
                start: d - 1,
                end: d + 6
              },
              c: b.buffer[d]
            }) : h : (b.buffer[d - 1] = '0', b.buffer[d] = a.charAt(0), d++, {
              refreshFromBuffer: {
                start: d - 2,
                end: d
              },
              pos: d,
              c: e.timeseparator
            });
          },
          cardinality: 2,
          prevalidator: [{
              validator: function (a, b, d, c, e) {
                var h = e.regex.hrspre.test(a);
                return c || h || !(h = e.regex.hrs.test('0' + a)) ? h : (b.buffer[d] = '0', d++, { pos: d });
              },
              cardinality: 1
            }]
        },
        s: {
          validator: '[0-5][0-9]',
          cardinality: 2,
          prevalidator: [{
              validator: function (a, b, d, c, e) {
                var h = e.regex.mspre.test(a);
                return c || h || !(h = e.regex.ms.test('0' + a)) ? h : (b.buffer[d] = '0', d++, { pos: d });
              },
              cardinality: 1
            }]
        },
        t: {
          validator: function (a, b, d, c, e) {
            return e.regex.ampm.test(a + 'm');
          },
          casing: 'lower',
          cardinality: 1
        }
      },
      insertMode: !1,
      autoUnmask: !1
    },
    datetime12: {
      mask: '1/2/y h:s t\\m',
      placeholder: 'dd/mm/yyyy hh:mm xm',
      alias: 'datetime',
      hourFormat: '12'
    },
    'hh:mm t': {
      mask: 'h:s t\\m',
      placeholder: 'hh:mm xm',
      alias: 'datetime',
      hourFormat: '12'
    },
    'h:s t': {
      mask: 'h:s t\\m',
      placeholder: 'hh:mm xm',
      alias: 'datetime',
      hourFormat: '12'
    },
    'hh:mm:ss': {
      mask: 'h:s:s',
      placeholder: 'hh:mm:ss',
      alias: 'datetime',
      autoUnmask: !1
    },
    'hh:mm': {
      mask: 'h:s',
      placeholder: 'hh:mm',
      alias: 'datetime',
      autoUnmask: !1
    },
    date: { alias: 'dd/mm/yyyy' },
    'mm/yyyy': {
      mask: '1/y',
      placeholder: 'mm/yyyy',
      leapday: 'donotuse',
      separator: '/',
      alias: 'mm/dd/yyyy'
    }
  });
}(jQuery));
(function (e) {
  e.extend(e.inputmask.defaults.aliases, {
    numeric: {
      mask: function (a) {
        0 !== a.repeat && isNaN(a.integerDigits) && (a.integerDigits = a.repeat);
        a.repeat = 0;
        a.autoGroup = a.autoGroup && '' != a.groupSeparator;
        if (a.autoGroup && isFinite(a.integerDigits)) {
          var b = Math.floor(a.integerDigits / a.groupSize);
          a.integerDigits += 0 == a.integerDigits % a.groupSize ? b - 1 : b;
        }
        a.definitions[':'].placeholder = a.radixPoint;
        b = a.prefix;
        b = b + '[+]' + ('~{1,' + a.integerDigits + '}');
        void 0 != a.digits && (isNaN(a.digits) || 0 < parseInt(a.digits)) && (b = a.digitsOptional ? b + ('[:~{' + a.digits + '}]') : b + (':~{' + a.digits + '}'));
        return b += a.suffix;
      },
      placeholder: '',
      greedy: !1,
      digits: '*',
      digitsOptional: !0,
      groupSeparator: '',
      radixPoint: '.',
      groupSize: 3,
      autoGroup: !1,
      allowPlus: !0,
      allowMinus: !0,
      integerDigits: '+',
      prefix: '',
      suffix: '',
      rightAlign: !0,
      postFormat: function (a, b, d, c) {
        var g = !1, h = a[b];
        if ('' == c.groupSeparator || -1 != e.inArray(c.radixPoint, a) && b >= e.inArray(c.radixPoint, a) || /[-+]/.test(h))
          return { pos: b };
        var n = a.slice();
        h == c.groupSeparator && (n.splice(b--, 1), h = n[b]);
        d ? n[b] = '?' : n.splice(b, 0, '?');
        b = n.join('');
        if (c.autoGroup || d && -1 != b.indexOf(c.groupSeparator)) {
          n = e.inputmask.escapeRegex.call(this, c.groupSeparator);
          g = 0 == b.indexOf(c.groupSeparator);
          b = b.replace(RegExp(n, 'g'), '');
          n = b.split(c.radixPoint);
          b = n[0];
          if (b != c.prefix + '?0' && b.length > c.groupSize + c.prefix.length)
            for (var g = !0, z = RegExp('([-+]?[\\d?]+)([\\d?]{' + c.groupSize + '})'); z.test(b);)
              b = b.replace(z, '$1' + c.groupSeparator + '$2'), b = b.replace(c.groupSeparator + c.groupSeparator, c.groupSeparator);
          1 < n.length && (b += c.radixPoint + n[1]);
        }
        a.length = b.length;
        c = 0;
        for (n = b.length; c < n; c++)
          a[c] = b.charAt(c);
        c = e.inArray('?', a);
        d ? a[c] = h : a.splice(c, 1);
        return {
          pos: c,
          refreshFromBuffer: g
        };
      },
      onKeyDown: function (a, b, d, c) {
        if (c.autoGroup && (a.keyCode == c.keyCode.DELETE || a.keyCode == c.keyCode.BACKSPACE))
          return a = c.postFormat(b, d - 1, !0, c), a.caret = a.pos + 1, a;
      },
      onKeyPress: function (a, b, d, c) {
        if (c.autoGroup)
          return a = c.postFormat(b, d - 1, !0, c), a.caret = a.pos + 1, a;
      },
      regex: {
        integerPart: function (a) {
          return /[-+]?\d+/;
        }
      },
      negationhandler: function (a, b, d, c, e) {
        return !c && e.allowMinus && '-' === a && (a = b.join('').match(e.regex.integerPart(e)), 0 < a.length) ? '+' == b[a.index] ? {
          pos: a.index,
          c: '-',
          remove: a.index,
          caret: d
        } : '-' == b[a.index] ? {
          remove: a.index,
          caret: d - 1
        } : {
          pos: a.index,
          c: '-',
          caret: d + 1
        } : !1;
      },
      definitions: {
        '~': {
          validator: function (a, b, d, c, g) {
            var h = g.negationhandler(a, b.buffer, d, c, g);
            if (!h && (h = c ? RegExp('[0-9' + e.inputmask.escapeRegex.call(this, g.groupSeparator) + ']').test(a) : /[0-9]/.test(a), !0 === h && (h = { pos: d }), !1 != h && !c)) {
              c = b.buffer.join('').match(g.regex.integerPart(g));
              var n = e.inArray(g.radixPoint, b.buffer);
              if (c)
                if (0 == c['0'][0].indexOf('0') && d >= g.prefix.length)
                  -1 == n || d <= n && void 0 == b.validPositions[n] ? (b.buffer.splice(c.index, 1), d = d > c.index ? d - 1 : c.index, e.extend(h, {
                    pos: d,
                    remove: c.index
                  })) : d > c.index && d <= n && (b.buffer.splice(c.index, 1), d = d > c.index ? d - 1 : c.index, e.extend(h, {
                    pos: d,
                    remove: c.index
                  }));
                else if ('0' == a && d <= c.index)
                  return !1;
              if (!1 === g.digitsOptional && d > n)
                return {
                  pos: d,
                  remove: d
                };
            }
            return h;
          },
          cardinality: 1,
          prevalidator: null
        },
        '+': {
          validator: function (a, b, d, c, e) {
            b = '[';
            !0 === e.allowMinus && (b += '-');
            !0 === e.allowPlus && (b += '+');
            return RegExp(b + ']').test(a);
          },
          cardinality: 1,
          prevalidator: null
        },
        ':': {
          validator: function (a, b, d, c, g) {
            c = g.negationhandler(a, b.buffer, d, c, g);
            c || (c = '[' + e.inputmask.escapeRegex.call(this, g.radixPoint) + ']', (c = RegExp(c).test(a)) && b.validPositions[d] && b.validPositions[d].match.placeholder == g.radixPoint && (c = {
              pos: d,
              remove: d
            }));
            return c;
          },
          cardinality: 1,
          prevalidator: null,
          placeholder: ''
        }
      },
      insertMode: !0,
      autoUnmask: !1,
      onUnMask: function (a, b, d) {
        a = a.replace(d.prefix, '');
        a = a.replace(d.suffix, '');
        return a = a.replace(RegExp(e.inputmask.escapeRegex.call(this, d.groupSeparator), 'g'), '');
      },
      isComplete: function (a, b) {
        var d = a.join(''), c = a.slice();
        b.postFormat(c, 0, !0, b);
        if (c.join('') != d)
          return !1;
        d = d.replace(b.prefix, '');
        d = d.replace(b.suffix, '');
        d = d.replace(RegExp(e.inputmask.escapeRegex.call(this, b.groupSeparator), 'g'), '');
        d = d.replace(e.inputmask.escapeRegex.call(this, b.radixPoint), '.');
        return isFinite(d);
      },
      onBeforeMask: function (a, b) {
        if (isFinite(a))
          return a.toString().replace('.', b.radixPoint);
        var d = a.match(/,/g), c = a.match(/\./g);
        c && d ? c.length > d.length ? (a = a.replace(/\./g, ''), a = a.replace(',', b.radixPoint)) : d.length > c.length && (a = a.replace(/,/g, ''), a = a.replace('.', b.radixPoint)) : a = a.replace(RegExp(e.inputmask.escapeRegex.call(this, b.groupSeparator), 'g'), '');
        return a;
      }
    },
    decimal: { alias: 'numeric' },
    integer: {
      alias: 'numeric',
      digits: '0'
    }
  });
}(jQuery));
(function (e) {
  e.extend(e.inputmask.defaults.aliases, {
    Regex: {
      mask: 'r',
      greedy: !1,
      repeat: '*',
      regex: null,
      regexTokens: null,
      tokenizer: /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,
      quantifierFilter: /[0-9]+[^,]/,
      isComplete: function (a, b) {
        return RegExp(b.regex).test(a.join(''));
      },
      definitions: {
        r: {
          validator: function (a, b, d, c, g) {
            function h(a, b) {
              this.matches = [];
              this.isGroup = a || !1;
              this.isQuantifier = b || !1;
              this.quantifier = {
                min: 1,
                max: 1
              };
              this.repeaterPart = void 0;
            }
            function n() {
              var a = new h(), b, c = [];
              for (g.regexTokens = []; b = g.tokenizer.exec(g.regex);)
                switch (b = b[0], b.charAt(0)) {
                case '(':
                  c.push(new h(!0));
                  break;
                case ')':
                  var d = c.pop();
                  0 < c.length ? c[c.length - 1].matches.push(d) : a.matches.push(d);
                  break;
                case '{':
                case '+':
                case '*':
                  var e = new h(!1, !0);
                  b = b.replace(/[{}]/g, '');
                  d = b.split(',');
                  b = isNaN(d[0]) ? d[0] : parseInt(d[0]);
                  d = 1 == d.length ? b : isNaN(d[1]) ? d[1] : parseInt(d[1]);
                  e.quantifier = {
                    min: b,
                    max: d
                  };
                  if (0 < c.length) {
                    var n = c[c.length - 1].matches;
                    b = n.pop();
                    b.isGroup || (d = new h(!0), d.matches.push(b), b = d);
                    n.push(b);
                    n.push(e);
                  } else
                    b = a.matches.pop(), b.isGroup || (d = new h(!0), d.matches.push(b), b = d), a.matches.push(b), a.matches.push(e);
                  break;
                default:
                  0 < c.length ? c[c.length - 1].matches.push(b) : a.matches.push(b);
                }
              0 < a.matches.length && g.regexTokens.push(a);
            }
            function z(a, b) {
              var c = !1;
              b && (u += '(', J++);
              for (var d = 0; d < a.matches.length; d++) {
                var g = a.matches[d];
                if (!0 == g.isGroup)
                  c = z(g, !0);
                else if (!0 == g.isQuantifier) {
                  var h = e.inArray(g, a.matches), h = a.matches[h - 1], n = u;
                  if (isNaN(g.quantifier.max)) {
                    for (; g.repeaterPart && g.repeaterPart != u && g.repeaterPart.length > u.length && !(c = z(h, !0)););
                    (c = c || z(h, !0)) && (g.repeaterPart = u);
                    u = n + g.quantifier.max;
                  } else {
                    for (var k = 0, t = g.quantifier.max - 1; k < t && !(c = z(h, !0)); k++);
                    u = n + '{' + g.quantifier.min + ',' + g.quantifier.max + '}';
                  }
                } else if (void 0 != g.matches)
                  for (h = 0; h < g.length && !(c = z(g[h], b)); h++);
                else {
                  if ('[' == g[0]) {
                    c = u;
                    c += g;
                    for (k = 0; k < J; k++)
                      c += ')';
                    c = RegExp('^(' + c + ')$');
                    c = c.test(K);
                  } else
                    for (h = 0, n = g.length; h < n; h++)
                      if ('\\' != g[h]) {
                        c = u;
                        c += g.substr(0, h + 1);
                        c = c.replace(/\|$/, '');
                        for (k = 0; k < J; k++)
                          c += ')';
                        c = RegExp('^(' + c + ')$');
                        if (c = c.test(K))
                          break;
                      }
                  u += g;
                }
                if (c)
                  break;
              }
              b && (u += ')', J--);
              return c;
            }
            null == g.regexTokens && n();
            c = b.buffer.slice();
            var u = '';
            b = !1;
            var J = 0;
            c.splice(d, 0, a);
            var K = c.join('');
            for (a = 0; a < g.regexTokens.length && !(h = g.regexTokens[a], b = z(h, h.isGroup)); a++);
            return b;
          },
          cardinality: 1
        }
      }
    }
  });
}(jQuery));
(function (e) {
  e.extend(e.inputmask.defaults.aliases, {
    phone: {
      url: 'phone-codes/phone-codes.json',
      mask: function (a) {
        a.definitions = {
          p: {
            validator: function () {
              return !1;
            },
            cardinality: 1
          },
          '#': {
            validator: '[0-9]',
            cardinality: 1
          }
        };
        var b = [];
        e.ajax({
          url: a.url,
          async: !1,
          dataType: 'json',
          success: function (a) {
            b = a;
          }
        });
        b.splice(0, 0, '+p(ppp)ppp-pppp');
        return b;
      },
      nojumps: !0,
      nojumpsThreshold: 1
    },
    phonebe: {
      url: 'phone-codes/phone-be.json',
      mask: function (a) {
        a.definitions = {
          p: {
            validator: function () {
              return !1;
            },
            cardinality: 1
          },
          '#': {
            validator: '[0-9]',
            cardinality: 1
          }
        };
        var b = [];
        e.ajax({
          url: a.url,
          async: !1,
          dataType: 'json',
          success: function (a) {
            b = a;
          }
        });
        b.splice(0, 0, '+32(ppp)ppp-pppp');
        return b;
      },
      nojumps: !0,
      nojumpsThreshold: 4
    }
  });
}(jQuery));
/**
 * @author zhixin wen <wenzhixin2010@gmail.com>
 * @version 1.1.0
 *
 * http://wenzhixin.net.cn/p/multiple-select/
 */
(function ($) {
  'use strict';
  function MultipleSelect($el, options) {
    var that = this, name = $el.attr('name') || options.name || '';
    $el.parent().hide();
    var elWidth = $el.css('width');
    $el.parent().show();
    if (elWidth == '0px') {
      elWidth = $el.outerWidth() + 20;
    }
    this.$el = $el.hide();
    this.options = options;
    this.$parent = $('<div' + $.map([
      'class',
      'title'
    ], function (att) {
      var attValue = that.$el.attr(att) || '';
      attValue = (att === 'class' ? 'ms-parent' + (attValue ? ' ' : '') : '') + attValue;
      return attValue ? ' ' + att + '="' + attValue + '"' : '';
    }).join('') + ' />');
    this.$choice = $('<button type="button" class="ms-choice"><span class="placeholder">' + options.placeholder + '</span><div></div></button>');
    this.$drop = $('<div class="ms-drop ' + options.position + '"></div>');
    this.$el.after(this.$parent);
    this.$parent.append(this.$choice);
    this.$parent.append(this.$drop);
    if (this.$el.prop('disabled')) {
      this.$choice.addClass('disabled');
    }
    this.$parent.css('width', options.width || elWidth);
    if (!this.options.keepOpen) {
      $('body').click(function (e) {
        if ($(e.target)[0] === that.$choice[0] || $(e.target).parents('.ms-choice')[0] === that.$choice[0]) {
          return;
        }
        if (($(e.target)[0] === that.$drop[0] || $(e.target).parents('.ms-drop')[0] !== that.$drop[0]) && that.options.isOpen) {
          that.close();
        }
      });
    }
    this.selectAllName = 'name="selectAll' + name + '"';
    this.selectGroupName = 'name="selectGroup' + name + '"';
    this.selectItemName = 'name="selectItem' + name + '"';
  }
  MultipleSelect.prototype = {
    constructor: MultipleSelect,
    init: function () {
      var that = this, html = [];
      if (this.options.filter) {
        html.push('<div class="ms-search">', '<input type="text" autocomplete="off" autocorrect="off" autocapitilize="off" spellcheck="false">', '</div>');
      }
      html.push('<ul>');
      if (this.options.selectAll && !this.options.single) {
        html.push('<li class="ms-select-all">', '<label>', '<input type="checkbox" ' + this.selectAllName + ' /> ', this.options.selectAllDelimiter[0] + this.options.selectAllText + this.options.selectAllDelimiter[1], '</label>', '</li>');
      }
      $.each(this.$el.children(), function (i, elm) {
        html.push(that.optionToHtml(i, elm));
      });
      html.push('<li class="ms-no-results">' + this.options.noMatchesFound + '</li>');
      html.push('</ul>');
      this.$drop.html(html.join(''));
      this.$drop.find('ul').css('max-height', this.options.maxHeight + 'px');
      this.$drop.find('.multiple').css('width', this.options.multipleWidth + 'px');
      this.$searchInput = this.$drop.find('.ms-search input');
      this.$selectAll = this.$drop.find('input[' + this.selectAllName + ']');
      this.$selectGroups = this.$drop.find('input[' + this.selectGroupName + ']');
      this.$selectItems = this.$drop.find('input[' + this.selectItemName + ']:enabled');
      this.$disableItems = this.$drop.find('input[' + this.selectItemName + ']:disabled');
      this.$noResults = this.$drop.find('.ms-no-results');
      this.events();
      this.updateSelectAll(true);
      this.update(true);
      if (this.options.isOpen) {
        this.open();
      }
    },
    optionToHtml: function (i, elm, group, groupDisabled) {
      var that = this, $elm = $(elm), html = [], multiple = this.options.multiple, optAttributesToCopy = [
          'class',
          'title'
        ], clss = $.map(optAttributesToCopy, function (att, i) {
          var isMultiple = att === 'class' && multiple;
          var attValue = $elm.attr(att) || '';
          return isMultiple || attValue ? ' ' + att + '="' + (isMultiple ? 'multiple' + (attValue ? ' ' : '') : '') + attValue + '"' : '';
        }).join(''), disabled, type = this.options.single ? 'radio' : 'checkbox';
      if ($elm.is('option')) {
        var value = $elm.val(), text = that.options.textTemplate($elm), selected = that.$el.attr('multiple') != undefined ? $elm.prop('selected') : $elm.attr('selected') == 'selected', style = this.options.styler(value) ? ' style="' + this.options.styler(value) + '"' : '';
        disabled = groupDisabled || $elm.prop('disabled');
        if (this.options.blockSeparator > '' && this.options.blockSeparator == $elm.val()) {
          html.push('<li' + clss + style + '>', '<label class="' + this.options.blockSeparator + (disabled ? 'disabled' : '') + '">', text, '</label>', '</li>');
        } else {
          html.push('<li' + clss + style + '>', '<label' + (disabled ? ' class="disabled"' : '') + '>', '<input type="' + type + '" ' + this.selectItemName + ' value="' + value + '"' + (selected ? ' checked="checked"' : '') + (disabled ? ' disabled="disabled"' : '') + (group ? ' data-group="' + group + '"' : '') + '/> ', text, '</label>', '</li>');
        }
      } else if (!group && $elm.is('optgroup')) {
        var _group = 'group_' + i, label = $elm.attr('label');
        disabled = $elm.prop('disabled');
        html.push('<li class="group">', '<label class="optgroup' + (disabled ? ' disabled' : '') + '" data-group="' + _group + '">', this.options.hideOptgroupCheckboxes ? '' : '<input type="checkbox" ' + this.selectGroupName + (disabled ? ' disabled="disabled"' : '') + ' /> ', label, '</label>', '</li>');
        $.each($elm.children(), function (i, elm) {
          html.push(that.optionToHtml(i, elm, _group, disabled));
        });
      }
      return html.join('');
    },
    events: function () {
      var that = this;
      function toggleOpen(e) {
        e.preventDefault();
        that[that.options.isOpen ? 'close' : 'open']();
      }
      var label = this.$el.parent().closest('label')[0] || $('label[for=' + this.$el.attr('id') + ']')[0];
      if (label) {
        $(label).off('click').on('click', function (e) {
          if (e.target.nodeName.toLowerCase() !== 'label' || e.target !== this) {
            return;
          }
          toggleOpen(e);
          if (!that.options.filter || !that.options.isOpen) {
            that.focus();
          }
          e.stopPropagation();  // Causes lost focus otherwise
        });
      }
      this.$choice.off('click').on('click', toggleOpen).off('focus').on('focus', this.options.onFocus).off('blur').on('blur', this.options.onBlur);
      this.$parent.off('keydown').on('keydown', function (e) {
        switch (e.which) {
        case 27:
          // esc key
          that.close();
          that.$choice.focus();
          break;
        }
      });
      this.$searchInput.off('keydown').on('keydown', function (e) {
        if (e.keyCode === 9 && e.shiftKey) {
          // Ensure shift-tab causes lost focus from filter as with clicking away
          that.close();
        }
      }).off('keyup').on('keyup', function (e) {
        if (that.options.filterAcceptOnEnter && (e.which === 13 || e.which == 32) && that.$searchInput.val()) {
          that.$selectAll.click();
          that.close();
          that.focus();
          return;
        }
        that.filter();
      });
      this.$selectAll.off('click').on('click', function () {
        var checked = $(this).prop('checked'), $items = that.$selectItems.filter(':visible');
        if ($items.length === that.$selectItems.length) {
          that[checked ? 'checkAll' : 'uncheckAll']();
        } else {
          // when the filter option is true
          that.$selectGroups.prop('checked', checked);
          $items.prop('checked', checked);
          that.options[checked ? 'onCheckAll' : 'onUncheckAll']();
          that.update();
        }
      });
      this.$selectGroups.off('click').on('click', function () {
        var group = $(this).parent().attr('data-group'), $items = that.$selectItems.filter(':visible'), $children = $items.filter('[data-group="' + group + '"]'), checked = $children.length !== $children.filter(':checked').length;
        $children.prop('checked', checked);
        that.updateSelectAll();
        that.update();
        that.options.onOptgroupClick({
          label: $(this).parent().text(),
          checked: checked,
          children: $children.get()
        });
      });
      this.$selectItems.off('click').on('click', function () {
        that.updateSelectAll();
        that.update();
        that.updateOptGroupSelect();
        that.options.onClick({
          label: $(this).parent().text(),
          value: $(this).val(),
          checked: $(this).prop('checked')
        });
        if (that.options.single && that.options.isOpen && !that.options.keepOpen) {
          that.close();
        }
      });
    },
    open: function () {
      if (this.$choice.hasClass('disabled')) {
        return;
      }
      this.options.isOpen = true;
      this.$choice.find('>div').addClass('open');
      this.$drop.show();
      // fix filter bug: no results show
      this.$selectAll.parent().show();
      this.$noResults.hide();
      // Fix #77: 'All selected' when no options
      if (this.$el.children().length === 0) {
        this.$selectAll.parent().hide();
        this.$noResults.show();
      }
      if (this.options.container) {
        var offset = this.$drop.offset();
        this.$drop.appendTo($(this.options.container));
        this.$drop.offset({
          top: offset.top,
          left: offset.left
        });
      }
      if (this.options.filter) {
        this.$searchInput.val('');
        this.$searchInput.focus();
        this.filter();
      }
      this.options.onOpen();
    },
    close: function () {
      this.options.isOpen = false;
      this.$choice.find('>div').removeClass('open');
      this.$drop.hide();
      if (this.options.container) {
        this.$parent.append(this.$drop);
        this.$drop.css({
          'top': 'auto',
          'left': 'auto'
        });
      }
      this.options.onClose();
    },
    update: function (isInit) {
      var selects = this.getSelects(), $span = this.$choice.find('>span');
      if (selects.length === 0) {
        $span.addClass('placeholder').html(this.options.placeholder);
      } else if (this.options.countSelected && selects.length < this.options.minimumCountSelected) {
        $span.removeClass('placeholder').html((this.options.displayValues ? selects : this.getSelects('text')).join(this.options.delimiter));
      } else if (this.options.allSelected && selects.length === this.$selectItems.length + this.$disableItems.length) {
        $span.removeClass('placeholder').html(this.options.allSelected);
      } else if ((this.options.countSelected || this.options.etcaetera) && selects.length > this.options.minimumCountSelected) {
        if (this.options.etcaetera) {
          $span.removeClass('placeholder').html((this.options.displayValues ? selects : this.getSelects('text').slice(0, this.options.minimumCountSelected)).join(this.options.delimiter) + '...');
        } else {
          $span.html(this.options.placeholder + this.options.countSelected.replace('#', selects.length).replace('%', this.$selectItems.length + this.$disableItems.length));
        }
      } else {
        $span.removeClass('placeholder').html((this.options.displayValues ? selects : this.getSelects('text')).join(this.options.delimiter));
      }
      // set selects to select
      this.$el.val(this.getSelects());
      // add selected class to selected li
      this.$drop.find('li').removeClass('selected');
      this.$drop.find('input[' + this.selectItemName + ']:checked').each(function () {
        $(this).parents('li').first().addClass('selected');
      });
      // trigger <select> change event
      if (!isInit) {
        this.$el.trigger('change');
      }
    },
    updateSelectAll: function (Init) {
      var $items = this.$selectItems;
      if (!Init) {
        $items = $items.filter(':visible');
      }
      this.$selectAll.prop('checked', $items.length && $items.length === $items.filter(':checked').length);
      if (this.$selectAll.prop('checked')) {
        this.options.onCheckAll();
      }
    },
    updateOptGroupSelect: function () {
      var $items = this.$selectItems.filter(':visible');
      $.each(this.$selectGroups, function (i, val) {
        var group = $(val).parent().attr('data-group'), $children = $items.filter('[data-group="' + group + '"]');
        $(val).prop('checked', $children.length && $children.length === $children.filter(':checked').length);
      });
    },
    getSelects: function (type) {
      var that = this, texts = [], values = [];
      this.$drop.find('input[' + this.selectItemName + ']:checked').each(function () {
        texts.push($(this).parents('li').first().text());
        values.push($(this).val());
      });
      if (type === 'text' && this.$selectGroups.length) {
        texts = [];
        this.$selectGroups.each(function () {
          var html = [], text = $.trim($(this).parent().text()), group = $(this).parent().data('group'), $children = that.$drop.find('[' + that.selectItemName + '][data-group="' + group + '"]'), $selected = $children.filter(':checked');
          if ($selected.length === 0) {
            return;
          }
          html.push('[');
          html.push(text);
          if ($children.length > $selected.length) {
            var list = [];
            $selected.each(function () {
              list.push($(this).parent().text());
            });
            html.push(': ' + list.join(', '));
          }
          html.push(']');
          texts.push(html.join(''));
        });
      }
      return type === 'text' ? texts : values;
    },
    setSelects: function (values) {
      var that = this;
      this.$selectItems.prop('checked', false);
      $.each(values, function (i, value) {
        that.$selectItems.filter('[value="' + value + '"]').prop('checked', true);
      });
      this.$selectAll.prop('checked', this.$selectItems.length === this.$selectItems.filter(':checked').length);
      this.update();
    },
    enable: function () {
      this.$choice.removeClass('disabled');
    },
    disable: function () {
      this.$choice.addClass('disabled');
    },
    checkAll: function () {
      this.$selectItems.prop('checked', true);
      this.$selectGroups.prop('checked', true);
      this.$selectAll.prop('checked', true);
      this.update();
      this.options.onCheckAll();
    },
    uncheckAll: function () {
      this.$selectItems.prop('checked', false);
      this.$selectGroups.prop('checked', false);
      this.$selectAll.prop('checked', false);
      this.update();
      this.options.onUncheckAll();
    },
    focus: function () {
      this.$choice.focus();
      this.options.onFocus();
    },
    blur: function () {
      this.$choice.blur();
      this.options.onBlur();
    },
    refresh: function () {
      this.init();
    },
    filter: function () {
      var that = this, text = $.trim(this.$searchInput.val()).toLowerCase();
      if (text.length === 0) {
        this.$selectItems.parent().show();
        this.$disableItems.parent().show();
        this.$selectGroups.parent().show();
      } else {
        this.$selectItems.each(function () {
          var $parent = $(this).parent();
          $parent[$parent.text().toLowerCase().indexOf(text) < 0 ? 'hide' : 'show']();
        });
        this.$disableItems.parent().hide();
        this.$selectGroups.each(function () {
          var $parent = $(this).parent();
          var group = $parent.attr('data-group'), $items = that.$selectItems.filter(':visible');
          $parent[$items.filter('[data-group="' + group + '"]').length === 0 ? 'hide' : 'show']();
        });
        //Check if no matches found
        if (this.$selectItems.filter(':visible').length) {
          this.$selectAll.parent().show();
          this.$noResults.hide();
        } else {
          this.$selectAll.parent().hide();
          this.$noResults.show();
        }
      }
      this.updateOptGroupSelect();
      this.updateSelectAll();
    }
  };
  $.fn.multipleSelect = function () {
    var option = arguments[0], args = arguments, value, allowedMethods = [
        'getSelects',
        'setSelects',
        'enable',
        'disable',
        'checkAll',
        'uncheckAll',
        'focus',
        'blur',
        'refresh'
      ];
    this.each(function () {
      var $this = $(this), data = $this.data('multipleSelect'), options = $.extend({}, $.fn.multipleSelect.defaults, $this.data(), typeof option === 'object' && option);
      if (!data) {
        data = new MultipleSelect($this, options);
        $this.data('multipleSelect', data);
      }
      if (typeof option === 'string') {
        if ($.inArray(option, allowedMethods) < 0) {
          throw 'Unknown method: ' + option;
        }
        value = data[option](args[1]);
      } else {
        data.init();
        if (args[1]) {
          value = data[args[1]].apply(data, [].slice.call(args, 2));
        }
      }
    });
    return value ? value : this;
  };
  $.fn.multipleSelect.defaults = {
    name: '',
    isOpen: false,
    placeholder: '',
    selectAll: true,
    selectAllText: 'Select all',
    selectAllDelimiter: [
      '[',
      ']'
    ],
    allSelected: 'All selected',
    minimumCountSelected: 0,
    countSelected: '&nbsp;&nbsp;(#)',
    noMatchesFound: 'No matches found',
    multiple: false,
    multipleWidth: 80,
    single: false,
    filter: false,
    width: undefined,
    maxHeight: 250,
    container: null,
    position: 'bottom',
    keepOpen: false,
    blockSeparator: '',
    displayValues: false,
    delimiter: ', ',
    styler: function () {
      return false;
    },
    textTemplate: function ($elm) {
      return $elm.text();
    },
    onOpen: function () {
      return false;
    },
    onClose: function () {
      return false;
    },
    onCheckAll: function () {
      return false;
    },
    onUncheckAll: function () {
      return false;
    },
    onFocus: function () {
      return false;
    },
    onBlur: function () {
      return false;
    },
    onOptgroupClick: function () {
      return false;
    },
    onClick: function () {
      return false;
    }
  };
}(jQuery));
/*
 _ _      _       _
 ___| (_) ___| | __  (_)___
 / __| | |/ __| |/ /  | / __|
 \__ \ | | (__|   < _ | \__ \
 |___/_|_|\___|_|\_(_)/ |___/
 |__/

 Version: 1.5.0
 Author: Ken Wheeler
 Website: http://kenwheeler.github.io
 Docs: http://kenwheeler.github.io/slick
 Repo: http://github.com/kenwheeler/slick
 Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function (factory) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports !== 'undefined') {
    module.exports = factory(require('jquery'));
  } else {
    factory(jQuery);
  }
}(function ($) {
  'use strict';
  var Slick = window.Slick || {};
  Slick = function () {
    var instanceUid = 0;
    function Slick(element, settings) {
      var _ = this, dataSettings, responsiveSettings, breakpoint;
      _.defaults = {
        accessibility: true,
        adaptiveHeight: false,
        appendArrows: $(element),
        appendDots: $(element),
        arrows: true,
        asNavFor: null,
        prevArrow: '<button type="button" data-role="none" class="carousel-control left" aria-label="previous"></button>',
        nextArrow: '<button type="button" data-role="none" class="carousel-control right" aria-label="next"></button>',
        autoplay: false,
        autoplaySpeed: 3000,
        centerMode: false,
        centerPadding: '50px',
        cssEase: 'ease',
        customPaging: function (slider, i) {
          return '<button type="button" data-role="none"></button>';
        },
        dots: true,
        dotsClass: 'slick-dots',
        draggable: true,
        easing: 'linear',
        edgeFriction: 0.35,
        fade: false,
        focusOnSelect: false,
        infinite: true,
        initialSlide: 0,
        lazyLoad: 'ondemand',
        mobileFirst: false,
        pauseOnHover: true,
        pauseOnDotsHover: false,
        respondTo: 'window',
        responsive: null,
        rows: 1,
        rtl: false,
        slide: '',
        slidesPerRow: 1,
        slidesToShow: 1,
        slidesToScroll: 1,
        speed: 500,
        swipe: true,
        swipeToSlide: false,
        touchMove: true,
        touchThreshold: 5,
        useCSS: true,
        variableWidth: false,
        vertical: false,
        verticalSwiping: false,
        waitForAnimate: true
      };
      _.initials = {
        animating: false,
        dragging: false,
        autoPlayTimer: null,
        currentDirection: 0,
        currentLeft: null,
        currentSlide: 0,
        direction: 1,
        $dots: null,
        listWidth: null,
        listHeight: null,
        loadIndex: 0,
        $nextArrow: null,
        $prevArrow: null,
        slideCount: null,
        slideWidth: null,
        $slideTrack: null,
        $slides: null,
        sliding: false,
        slideOffset: 0,
        swipeLeft: null,
        $list: null,
        touchObject: {},
        transformsEnabled: false
      };
      $.extend(_, _.initials);
      _.activeBreakpoint = null;
      _.animType = null;
      _.animProp = null;
      _.breakpoints = [];
      _.breakpointSettings = [];
      _.cssTransitions = false;
      _.hidden = 'hidden';
      _.paused = false;
      _.positionProp = null;
      _.respondTo = null;
      _.rowCount = 1;
      _.shouldClick = true;
      _.$slider = $(element);
      _.$slidesCache = null;
      _.transformType = null;
      _.transitionType = null;
      _.visibilityChange = 'visibilitychange';
      _.windowWidth = 0;
      _.windowTimer = null;
      dataSettings = $(element).data('slick') || {};
      _.options = $.extend({}, _.defaults, dataSettings, settings);
      _.currentSlide = _.options.initialSlide;
      _.originalSettings = _.options;
      responsiveSettings = _.options.responsive || null;
      if (responsiveSettings && responsiveSettings.length > -1) {
        _.respondTo = _.options.respondTo || 'window';
        for (breakpoint in responsiveSettings) {
          if (responsiveSettings.hasOwnProperty(breakpoint)) {
            _.breakpoints.push(responsiveSettings[breakpoint].breakpoint);
            _.breakpointSettings[responsiveSettings[breakpoint].breakpoint] = responsiveSettings[breakpoint].settings;
          }
        }
        _.breakpoints.sort(function (a, b) {
          if (_.options.mobileFirst === true) {
            return a - b;
          } else {
            return b - a;
          }
        });
      }
      if (typeof document.mozHidden !== 'undefined') {
        _.hidden = 'mozHidden';
        _.visibilityChange = 'mozvisibilitychange';
      } else if (typeof document.msHidden !== 'undefined') {
        _.hidden = 'msHidden';
        _.visibilityChange = 'msvisibilitychange';
      } else if (typeof document.webkitHidden !== 'undefined') {
        _.hidden = 'webkitHidden';
        _.visibilityChange = 'webkitvisibilitychange';
      }
      _.autoPlay = $.proxy(_.autoPlay, _);
      _.autoPlayClear = $.proxy(_.autoPlayClear, _);
      _.changeSlide = $.proxy(_.changeSlide, _);
      _.clickHandler = $.proxy(_.clickHandler, _);
      _.selectHandler = $.proxy(_.selectHandler, _);
      _.setPosition = $.proxy(_.setPosition, _);
      _.swipeHandler = $.proxy(_.swipeHandler, _);
      _.dragHandler = $.proxy(_.dragHandler, _);
      _.keyHandler = $.proxy(_.keyHandler, _);
      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
      _.instanceUid = instanceUid++;
      // A simple way to check for HTML strings
      // Strict HTML recognition (must start with <)
      // Extracted from jQuery v1.11 source
      _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
      _.init();
      _.checkResponsive(true);
    }
    return Slick;
  }();
  Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {
    var _ = this;
    if (typeof index === 'boolean') {
      addBefore = index;
      index = null;
    } else if (index < 0 || index >= _.slideCount) {
      return false;
    }
    _.unload();
    if (typeof index === 'number') {
      if (index === 0 && _.$slides.length === 0) {
        $(markup).appendTo(_.$slideTrack);
      } else if (addBefore) {
        $(markup).insertBefore(_.$slides.eq(index));
      } else {
        $(markup).insertAfter(_.$slides.eq(index));
      }
    } else {
      if (addBefore === true) {
        $(markup).prependTo(_.$slideTrack);
      } else {
        $(markup).appendTo(_.$slideTrack);
      }
    }
    _.$slides = _.$slideTrack.children(this.options.slide);
    _.$slideTrack.children(this.options.slide).detach();
    _.$slideTrack.append(_.$slides);
    _.$slides.each(function (index, element) {
      $(element).attr('data-slick-index', index);
    });
    _.$slidesCache = _.$slides;
    _.reinit();
  };
  Slick.prototype.animateHeight = function () {
    var _ = this;
    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
      _.$list.animate({ height: targetHeight }, _.options.speed);
    }
  };
  Slick.prototype.animateSlide = function (targetLeft, callback) {
    var animProps = {}, _ = this;
    _.animateHeight();
    if (_.options.rtl === true && _.options.vertical === false) {
      targetLeft = -targetLeft;
    }
    if (_.transformsEnabled === false) {
      if (_.options.vertical === false) {
        _.$slideTrack.animate({ left: targetLeft }, _.options.speed, _.options.easing, callback);
      } else {
        _.$slideTrack.animate({ top: targetLeft }, _.options.speed, _.options.easing, callback);
      }
    } else {
      if (_.cssTransitions === false) {
        if (_.options.rtl === true) {
          _.currentLeft = -_.currentLeft;
        }
        $({ animStart: _.currentLeft }).animate({ animStart: targetLeft }, {
          duration: _.options.speed,
          easing: _.options.easing,
          step: function (now) {
            now = Math.ceil(now);
            if (_.options.vertical === false) {
              animProps[_.animType] = 'translate(' + now + 'px, 0px)';
              _.$slideTrack.css(animProps);
            } else {
              animProps[_.animType] = 'translate(0px,' + now + 'px)';
              _.$slideTrack.css(animProps);
            }
          },
          complete: function () {
            if (callback) {
              callback.call();
            }
          }
        });
      } else {
        _.applyTransition();
        targetLeft = Math.ceil(targetLeft);
        if (_.options.vertical === false) {
          animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
        } else {
          animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
        }
        _.$slideTrack.css(animProps);
        if (callback) {
          setTimeout(function () {
            _.disableTransition();
            callback.call();
          }, _.options.speed);
        }
      }
    }
  };
  Slick.prototype.asNavFor = function (index) {
    var _ = this, asNavFor = _.options.asNavFor !== null ? $(_.options.asNavFor).slick('getSlick') : null;
    if (asNavFor !== null)
      asNavFor.slideHandler(index, true);
  };
  Slick.prototype.applyTransition = function (slide) {
    var _ = this, transition = {};
    if (_.options.fade === false) {
      transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
    } else {
      transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
    }
    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };
  Slick.prototype.autoPlay = function () {
    var _ = this;
    if (_.autoPlayTimer) {
      clearInterval(_.autoPlayTimer);
    }
    if (_.slideCount > _.options.slidesToShow && _.paused !== true) {
      _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
    }
  };
  Slick.prototype.autoPlayClear = function () {
    var _ = this;
    if (_.autoPlayTimer) {
      clearInterval(_.autoPlayTimer);
    }
  };
  Slick.prototype.autoPlayIterator = function () {
    var _ = this;
    if (_.options.infinite === false) {
      if (_.direction === 1) {
        if (_.currentSlide + 1 === _.slideCount - 1) {
          _.direction = 0;
        }
        _.slideHandler(_.currentSlide + _.options.slidesToScroll);
      } else {
        if (_.currentSlide - 1 === 0) {
          _.direction = 1;
        }
        _.slideHandler(_.currentSlide - _.options.slidesToScroll);
      }
    } else {
      _.slideHandler(_.currentSlide + _.options.slidesToScroll);
    }
  };
  Slick.prototype.buildArrows = function () {
    var _ = this;
    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow = $(_.options.prevArrow);
      _.$nextArrow = $(_.options.nextArrow);
      if (_.htmlExpr.test(_.options.prevArrow)) {
        _.$prevArrow.appendTo(_.options.appendArrows);
      }
      if (_.htmlExpr.test(_.options.nextArrow)) {
        _.$nextArrow.appendTo(_.options.appendArrows);
      }
      if (_.options.infinite !== true) {
        _.$prevArrow.addClass('slick-disabled');
      }
    }
  };
  Slick.prototype.buildDots = function () {
    var _ = this, i, dotString;
    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      dotString = '<ul class="' + _.options.dotsClass + '">';
      for (i = 0; i <= _.getDotCount(); i += 1) {
        dotString += '<li>' + _.options.customPaging.call(this, _, i) + '</li>';
      }
      dotString += '</ul>';
      _.$dots = $(dotString).appendTo(_.options.appendDots);
      _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');
    }
  };
  Slick.prototype.buildOut = function () {
    var _ = this;
    _.$slides = _.$slider.children(':not(.slick-cloned)').addClass('slick-slide');
    _.slideCount = _.$slides.length;
    _.$slides.each(function (index, element) {
      $(element).attr('data-slick-index', index);
    });
    _.$slidesCache = _.$slides;
    _.$slider.addClass('slick-slider');
    _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();
    _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
    _.$slideTrack.css('opacity', 0);
    if (_.options.centerMode === true || _.options.swipeToSlide === true) {
      _.options.slidesToScroll = 1;
    }
    $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');
    _.setupInfinite();
    _.buildArrows();
    _.buildDots();
    _.updateDots();
    if (_.options.accessibility === true) {
      _.$list.prop('tabIndex', 0);
    }
    _.setSlideClasses(typeof this.currentSlide === 'number' ? this.currentSlide : 0);
    if (_.options.draggable === true) {
      _.$list.addClass('draggable');
    }
  };
  Slick.prototype.buildRows = function () {
    var _ = this, a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection;
    newSlides = document.createDocumentFragment();
    originalSlides = _.$slider.children();
    if (_.options.rows > 1) {
      slidesPerSection = _.options.slidesPerRow * _.options.rows;
      numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);
      for (a = 0; a < numOfSlides; a++) {
        var slide = document.createElement('div');
        for (b = 0; b < _.options.rows; b++) {
          var row = document.createElement('div');
          for (c = 0; c < _.options.slidesPerRow; c++) {
            var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
            if (originalSlides.get(target)) {
              row.appendChild(originalSlides.get(target));
            }
          }
          slide.appendChild(row);
        }
        newSlides.appendChild(slide);
      }
      _.$slider.html(newSlides);
      _.$slider.children().children().children().width(100 / _.options.slidesPerRow + '%').css({ 'display': 'inline-block' });
    }
  };
  Slick.prototype.checkResponsive = function (initial) {
    var _ = this, breakpoint, targetBreakpoint, respondToWidth;
    var sliderWidth = _.$slider.width();
    var windowWidth = window.innerWidth || $(window).width();
    if (_.respondTo === 'window') {
      respondToWidth = windowWidth;
    } else if (_.respondTo === 'slider') {
      respondToWidth = sliderWidth;
    } else if (_.respondTo === 'min') {
      respondToWidth = Math.min(windowWidth, sliderWidth);
    }
    if (_.originalSettings.responsive && _.originalSettings.responsive.length > -1 && _.originalSettings.responsive !== null) {
      targetBreakpoint = null;
      for (breakpoint in _.breakpoints) {
        if (_.breakpoints.hasOwnProperty(breakpoint)) {
          if (_.originalSettings.mobileFirst === false) {
            if (respondToWidth < _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          } else {
            if (respondToWidth > _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          }
        }
      }
      if (targetBreakpoint !== null) {
        if (_.activeBreakpoint !== null) {
          if (targetBreakpoint !== _.activeBreakpoint) {
            _.activeBreakpoint = targetBreakpoint;
            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
              _.unslick();
            } else {
              _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
              if (initial === true)
                _.currentSlide = _.options.initialSlide;
              _.refresh();
            }
          }
        } else {
          _.activeBreakpoint = targetBreakpoint;
          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
            _.unslick();
          } else {
            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
            if (initial === true)
              _.currentSlide = _.options.initialSlide;
            _.refresh();
          }
        }
      } else {
        if (_.activeBreakpoint !== null) {
          _.activeBreakpoint = null;
          _.options = _.originalSettings;
          if (initial === true)
            _.currentSlide = _.options.initialSlide;
          _.refresh();
        }
      }
    }
  };
  Slick.prototype.changeSlide = function (event, dontAnimate) {
    var _ = this, $target = $(event.target), indexOffset, slideOffset, unevenOffset;
    // If target is a link, prevent default action.
    $target.is('a') && event.preventDefault();
    unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
    indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
    switch (event.data.message) {
    case 'previous':
      slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
      if (_.slideCount > _.options.slidesToShow) {
        _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
      }
      break;
    case 'next':
      slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
      if (_.slideCount > _.options.slidesToShow) {
        _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
      }
      break;
    case 'index':
      var index = event.data.index === 0 ? 0 : event.data.index || $(event.target).parent().index() * _.options.slidesToScroll;
      _.slideHandler(_.checkNavigable(index), false, dontAnimate);
      break;
    default:
      return;
    }
  };
  Slick.prototype.checkNavigable = function (index) {
    var _ = this, navigables, prevNavigable;
    navigables = _.getNavigableIndexes();
    prevNavigable = 0;
    if (index > navigables[navigables.length - 1]) {
      index = navigables[navigables.length - 1];
    } else {
      for (var n in navigables) {
        if (index < navigables[n]) {
          index = prevNavigable;
          break;
        }
        prevNavigable = navigables[n];
      }
    }
    return index;
  };
  Slick.prototype.cleanUpEvents = function () {
    var _ = this;
    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      $('li', _.$dots).off('click.slick', _.changeSlide);
    }
    if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.options.autoplay === true) {
      $('li', _.$dots).off('mouseenter.slick', _.setPaused.bind(_, true)).off('mouseleave.slick', _.setPaused.bind(_, false));
    }
    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
      _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
    }
    _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
    _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
    _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
    _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);
    _.$list.off('click.slick', _.clickHandler);
    if (_.options.autoplay === true) {
      $(document).off(_.visibilityChange, _.visibility);
    }
    _.$list.off('mouseenter.slick', _.setPaused.bind(_, true));
    _.$list.off('mouseleave.slick', _.setPaused.bind(_, false));
    if (_.options.accessibility === true) {
      _.$list.off('keydown.slick', _.keyHandler);
    }
    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().off('click.slick', _.selectHandler);
    }
    $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);
    $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);
    $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
    $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
    $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);
  };
  Slick.prototype.cleanUpRows = function () {
    var _ = this, originalSlides;
    if (_.options.rows > 1) {
      originalSlides = _.$slides.children().children();
      originalSlides.removeAttr('style');
      _.$slider.html(originalSlides);
    }
  };
  Slick.prototype.clickHandler = function (event) {
    var _ = this;
    if (_.shouldClick === false) {
      event.stopImmediatePropagation();
      event.stopPropagation();
      event.preventDefault();
    }
  };
  Slick.prototype.destroy = function () {
    var _ = this;
    _.autoPlayClear();
    _.touchObject = {};
    _.cleanUpEvents();
    $('.slick-cloned', _.$slider).remove();
    if (_.$dots) {
      _.$dots.remove();
    }
    if (_.$prevArrow && typeof _.options.prevArrow !== 'object') {
      _.$prevArrow.remove();
    }
    if (_.$nextArrow && typeof _.options.nextArrow !== 'object') {
      _.$nextArrow.remove();
    }
    if (_.$slides) {
      _.$slides.removeClass('slick-slide slick-active slick-center slick-visible').attr('aria-hidden', 'true').removeAttr('data-slick-index').css({
        position: '',
        left: '',
        top: '',
        zIndex: '',
        opacity: '',
        width: ''
      });
      _.$slider.html(_.$slides);
    }
    _.cleanUpRows();
    _.$slider.removeClass('slick-slider');
    _.$slider.removeClass('slick-initialized');
  };
  Slick.prototype.disableTransition = function (slide) {
    var _ = this, transition = {};
    transition[_.transitionType] = '';
    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };
  Slick.prototype.fadeSlide = function (slideIndex, callback) {
    var _ = this;
    if (_.cssTransitions === false) {
      _.$slides.eq(slideIndex).css({ zIndex: 1000 });
      _.$slides.eq(slideIndex).animate({ opacity: 1 }, _.options.speed, _.options.easing, callback);
    } else {
      _.applyTransition(slideIndex);
      _.$slides.eq(slideIndex).css({
        opacity: 1,
        zIndex: 1000
      });
      if (callback) {
        setTimeout(function () {
          _.disableTransition(slideIndex);
          callback.call();
        }, _.options.speed);
      }
    }
  };
  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {
    var _ = this;
    if (filter !== null) {
      _.unload();
      _.$slideTrack.children(this.options.slide).detach();
      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
      _.reinit();
    }
  };
  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {
    var _ = this;
    return _.currentSlide;
  };
  Slick.prototype.getDotCount = function () {
    var _ = this;
    var breakPoint = 0;
    var counter = 0;
    var pagerQty = 0;
    if (_.options.infinite === true) {
      pagerQty = Math.ceil(_.slideCount / _.options.slidesToScroll);
    } else if (_.options.centerMode === true) {
      pagerQty = _.slideCount;
    } else {
      while (breakPoint < _.slideCount) {
        ++pagerQty;
        breakPoint = counter + _.options.slidesToShow;
        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
      }
    }
    return pagerQty - 1;
  };
  Slick.prototype.getLeft = function (slideIndex) {
    var _ = this, targetLeft, verticalHeight, verticalOffset = 0, targetSlide;
    _.slideOffset = 0;
    verticalHeight = _.$slides.first().outerHeight();
    if (_.options.infinite === true) {
      if (_.slideCount > _.options.slidesToShow) {
        _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
        verticalOffset = verticalHeight * _.options.slidesToShow * -1;
      }
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
          if (slideIndex > _.slideCount) {
            _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
            verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
          } else {
            _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
            verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
          }
        }
      }
    } else {
      if (slideIndex + _.options.slidesToShow > _.slideCount) {
        _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
      }
    }
    if (_.slideCount <= _.options.slidesToShow) {
      _.slideOffset = 0;
      verticalOffset = 0;
    }
    if (_.options.centerMode === true && _.options.infinite === true) {
      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
    } else if (_.options.centerMode === true) {
      _.slideOffset = 0;
      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
    }
    if (_.options.vertical === false) {
      targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
    } else {
      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
    }
    if (_.options.variableWidth === true) {
      if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
      } else {
        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
      }
      targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
      if (_.options.centerMode === true) {
        if (_.options.infinite === false) {
          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
        } else {
          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
        }
        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
        targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
      }
    }
    return targetLeft;
  };
  Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {
    var _ = this;
    return _.options[option];
  };
  Slick.prototype.getNavigableIndexes = function () {
    var _ = this, breakPoint = 0, counter = 0, indexes = [], max;
    if (_.options.infinite === false) {
      max = _.slideCount - _.options.slidesToShow + 1;
      if (_.options.centerMode === true)
        max = _.slideCount;
    } else {
      breakPoint = _.options.slidesToScroll * -1;
      counter = _.options.slidesToScroll * -1;
      max = _.slideCount * 2;
    }
    while (breakPoint < max) {
      indexes.push(breakPoint);
      breakPoint = counter + _.options.slidesToScroll;
      counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
    }
    return indexes;
  };
  Slick.prototype.getSlick = function () {
    return this;
  };
  Slick.prototype.getSlideCount = function () {
    var _ = this, slidesTraversed, swipedSlide, centerOffset;
    centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;
    if (_.options.swipeToSlide === true) {
      _.$slideTrack.find('.slick-slide').each(function (index, slide) {
        if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      });
      slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;
      return slidesTraversed;
    } else {
      return _.options.slidesToScroll;
    }
  };
  Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {
    var _ = this;
    _.changeSlide({
      data: {
        message: 'index',
        index: parseInt(slide)
      }
    }, dontAnimate);
  };
  Slick.prototype.init = function () {
    var _ = this;
    if (!$(_.$slider).hasClass('slick-initialized')) {
      $(_.$slider).addClass('slick-initialized');
      _.buildRows();
      _.buildOut();
      _.setProps();
      _.startLoad();
      _.loadSlider();
      _.initializeEvents();
      _.updateArrows();
      _.updateDots();
    }
    _.$slider.trigger('init', [_]);
  };
  Slick.prototype.initArrowEvents = function () {
    var _ = this;
    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.on('click.slick', { message: 'previous' }, _.changeSlide);
      _.$nextArrow.on('click.slick', { message: 'next' }, _.changeSlide);
    }
  };
  Slick.prototype.initDotEvents = function () {
    var _ = this;
    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      $('li', _.$dots).on('click.slick', { message: 'index' }, _.changeSlide);
    }
    if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.options.autoplay === true) {
      $('li', _.$dots).on('mouseenter.slick', _.setPaused.bind(_, true)).on('mouseleave.slick', _.setPaused.bind(_, false));
    }
  };
  Slick.prototype.initializeEvents = function () {
    var _ = this;
    _.initArrowEvents();
    _.initDotEvents();
    _.$list.on('touchstart.slick mousedown.slick', { action: 'start' }, _.swipeHandler);
    _.$list.on('touchmove.slick mousemove.slick', { action: 'move' }, _.swipeHandler);
    _.$list.on('touchend.slick mouseup.slick', { action: 'end' }, _.swipeHandler);
    _.$list.on('touchcancel.slick mouseleave.slick', { action: 'end' }, _.swipeHandler);
    _.$list.on('click.slick', _.clickHandler);
    if (_.options.autoplay === true) {
      $(document).on(_.visibilityChange, _.visibility.bind(_));
    }
    _.$list.on('mouseenter.slick', _.setPaused.bind(_, true));
    _.$list.on('mouseleave.slick', _.setPaused.bind(_, false));
    if (_.options.accessibility === true) {
      _.$list.on('keydown.slick', _.keyHandler);
    }
    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on('click.slick', _.selectHandler);
    }
    $(window).on('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange.bind(_));
    $(window).on('resize.slick.slick-' + _.instanceUid, _.resize.bind(_));
    $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
    $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
    $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);
  };
  Slick.prototype.initUI = function () {
    var _ = this;
    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.show();
      _.$nextArrow.show();
    }
    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.show();
    }
    if (_.options.autoplay === true) {
      _.autoPlay();
    }
  };
  Slick.prototype.keyHandler = function (event) {
    var _ = this;
    if (event.keyCode === 37 && _.options.accessibility === true) {
      _.changeSlide({ data: { message: 'previous' } });
    } else if (event.keyCode === 39 && _.options.accessibility === true) {
      _.changeSlide({ data: { message: 'next' } });
    }
  };
  Slick.prototype.lazyLoad = function () {
    var _ = this, loadRange, cloneRange, rangeStart, rangeEnd;
    function loadImages(imagesScope) {
      $('img[data-lazy]', imagesScope).each(function () {
        var image = $(this), imageSource = $(this).attr('data-lazy'), imageToLoad = document.createElement('img');
        imageToLoad.onload = function () {
          image.animate({ opacity: 1 }, 200);
        };
        imageToLoad.src = imageSource;
        image.css({ opacity: 0 }).attr('src', imageSource).removeAttr('data-lazy').removeClass('slick-loading');
      });
    }
    if (_.options.centerMode === true) {
      if (_.options.infinite === true) {
        rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
        rangeEnd = rangeStart + _.options.slidesToShow + 2;
      } else {
        rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
      }
    } else {
      rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
      rangeEnd = rangeStart + _.options.slidesToShow;
      if (_.options.fade === true) {
        if (rangeStart > 0)
          rangeStart--;
        if (rangeEnd <= _.slideCount)
          rangeEnd++;
      }
    }
    loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
    loadImages(loadRange);
    if (_.slideCount <= _.options.slidesToShow) {
      cloneRange = _.$slider.find('.slick-slide');
      loadImages(cloneRange);
    } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
      cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
      loadImages(cloneRange);
    } else if (_.currentSlide === 0) {
      cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
      loadImages(cloneRange);
    }
  };
  Slick.prototype.loadSlider = function () {
    var _ = this;
    _.setPosition();
    _.$slideTrack.css({ opacity: 1 });
    _.$slider.removeClass('slick-loading');
    _.initUI();
    if (_.options.lazyLoad === 'progressive') {
      _.progressiveLazyLoad();
    }
  };
  Slick.prototype.next = Slick.prototype.slickNext = function () {
    var _ = this;
    _.changeSlide({ data: { message: 'next' } });
  };
  Slick.prototype.orientationChange = function () {
    var _ = this;
    _.checkResponsive();
    _.setPosition();
  };
  Slick.prototype.pause = Slick.prototype.slickPause = function () {
    var _ = this;
    _.autoPlayClear();
    _.paused = true;
  };
  Slick.prototype.play = Slick.prototype.slickPlay = function () {
    var _ = this;
    _.paused = false;
    _.autoPlay();
  };
  Slick.prototype.postSlide = function (index) {
    var _ = this;
    _.$slider.trigger('afterChange', [
      _,
      index
    ]);
    _.animating = false;
    _.setPosition();
    _.swipeLeft = null;
    if (_.options.autoplay === true && _.paused === false) {
      _.autoPlay();
    }
  };
  Slick.prototype.prev = Slick.prototype.slickPrev = function () {
    var _ = this;
    _.changeSlide({ data: { message: 'previous' } });
  };
  Slick.prototype.preventDefault = function (e) {
    e.preventDefault();
  };
  Slick.prototype.progressiveLazyLoad = function () {
    var _ = this, imgCount, targetImage;
    imgCount = $('img[data-lazy]', _.$slider).length;
    if (imgCount > 0) {
      targetImage = $('img[data-lazy]', _.$slider).first();
      targetImage.attr('src', targetImage.attr('data-lazy')).removeClass('slick-loading').load(function () {
        targetImage.removeAttr('data-lazy');
        _.progressiveLazyLoad();
        if (_.options.adaptiveHeight === true) {
          _.setPosition();
        }
      }).error(function () {
        targetImage.removeAttr('data-lazy');
        _.progressiveLazyLoad();
      });
    }
  };
  Slick.prototype.refresh = function () {
    var _ = this, currentSlide = _.currentSlide;
    _.destroy();
    $.extend(_, _.initials);
    _.init();
    _.changeSlide({
      data: {
        message: 'index',
        index: currentSlide
      }
    }, false);
  };
  Slick.prototype.reinit = function () {
    var _ = this;
    _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');
    _.slideCount = _.$slides.length;
    if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
      _.currentSlide = _.currentSlide - _.options.slidesToScroll;
    }
    if (_.slideCount <= _.options.slidesToShow) {
      _.currentSlide = 0;
    }
    _.setProps();
    _.setupInfinite();
    _.buildArrows();
    _.updateArrows();
    _.initArrowEvents();
    _.buildDots();
    _.updateDots();
    _.initDotEvents();
    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on('click.slick', _.selectHandler);
    }
    _.setSlideClasses(0);
    _.setPosition();
    _.$slider.trigger('reInit', [_]);
  };
  Slick.prototype.resize = function () {
    var _ = this;
    if ($(window).width() !== _.windowWidth) {
      clearTimeout(_.windowDelay);
      _.windowDelay = window.setTimeout(function () {
        _.windowWidth = $(window).width();
        _.checkResponsive();
        _.setPosition();
      }, 50);
    }
  };
  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {
    var _ = this;
    if (typeof index === 'boolean') {
      removeBefore = index;
      index = removeBefore === true ? 0 : _.slideCount - 1;
    } else {
      index = removeBefore === true ? --index : index;
    }
    if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
      return false;
    }
    _.unload();
    if (removeAll === true) {
      _.$slideTrack.children().remove();
    } else {
      _.$slideTrack.children(this.options.slide).eq(index).remove();
    }
    _.$slides = _.$slideTrack.children(this.options.slide);
    _.$slideTrack.children(this.options.slide).detach();
    _.$slideTrack.append(_.$slides);
    _.$slidesCache = _.$slides;
    _.reinit();
  };
  Slick.prototype.setCSS = function (position) {
    var _ = this, positionProps = {}, x, y;
    if (_.options.rtl === true) {
      position = -position;
    }
    x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
    y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';
    positionProps[_.positionProp] = position;
    if (_.transformsEnabled === false) {
      _.$slideTrack.css(positionProps);
    } else {
      positionProps = {};
      if (_.cssTransitions === false) {
        positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
        _.$slideTrack.css(positionProps);
      } else {
        positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
        _.$slideTrack.css(positionProps);
      }
    }
  };
  Slick.prototype.setDimensions = function () {
    var _ = this;
    if (_.options.vertical === false) {
      if (_.options.centerMode === true) {
        _.$list.css({ padding: '0px ' + _.options.centerPadding });
      }
    } else {
      _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
      if (_.options.centerMode === true) {
        _.$list.css({ padding: _.options.centerPadding + ' 0px' });
      }
    }
    _.listWidth = _.$list.width();
    _.listHeight = _.$list.height();
    if (_.options.vertical === false && _.options.variableWidth === false) {
      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
      _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
    } else if (_.options.variableWidth === true) {
      _.$slideTrack.width(5000 * _.slideCount);
    } else {
      _.slideWidth = Math.ceil(_.listWidth);
      _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
    }
    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
    if (_.options.variableWidth === false)
      _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
  };
  Slick.prototype.setFade = function () {
    var _ = this, targetLeft;
    _.$slides.each(function (index, element) {
      targetLeft = _.slideWidth * index * -1;
      if (_.options.rtl === true) {
        $(element).css({
          position: 'relative',
          right: targetLeft,
          top: 0,
          zIndex: 800,
          opacity: 0
        });
      } else {
        $(element).css({
          position: 'relative',
          left: targetLeft,
          top: 0,
          zIndex: 800,
          opacity: 0
        });
      }
    });
    _.$slides.eq(_.currentSlide).css({
      zIndex: 900,
      opacity: 1
    });
  };
  Slick.prototype.setHeight = function () {
    var _ = this;
    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
      _.$list.css('height', targetHeight);
    }
  };
  Slick.prototype.setOption = Slick.prototype.slickSetOption = function (option, value, refresh) {
    var _ = this;
    _.options[option] = value;
    if (refresh === true) {
      _.unload();
      _.reinit();
    }
  };
  Slick.prototype.setPosition = function () {
    var _ = this;
    _.setDimensions();
    _.setHeight();
    if (_.options.fade === false) {
      _.setCSS(_.getLeft(_.currentSlide));
    } else {
      _.setFade();
    }
    _.$slider.trigger('setPosition', [_]);
  };
  Slick.prototype.setProps = function () {
    var _ = this, bodyStyle = document.body.style;
    _.positionProp = _.options.vertical === true ? 'top' : 'left';
    if (_.positionProp === 'top') {
      _.$slider.addClass('slick-vertical');
    } else {
      _.$slider.removeClass('slick-vertical');
    }
    if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
      if (_.options.useCSS === true) {
        _.cssTransitions = true;
      }
    }
    if (bodyStyle.OTransform !== undefined) {
      _.animType = 'OTransform';
      _.transformType = '-o-transform';
      _.transitionType = 'OTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined)
        _.animType = false;
    }
    if (bodyStyle.MozTransform !== undefined) {
      _.animType = 'MozTransform';
      _.transformType = '-moz-transform';
      _.transitionType = 'MozTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined)
        _.animType = false;
    }
    if (bodyStyle.webkitTransform !== undefined) {
      _.animType = 'webkitTransform';
      _.transformType = '-webkit-transform';
      _.transitionType = 'webkitTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined)
        _.animType = false;
    }
    if (bodyStyle.msTransform !== undefined) {
      _.animType = 'msTransform';
      _.transformType = '-ms-transform';
      _.transitionType = 'msTransition';
      if (bodyStyle.msTransform === undefined)
        _.animType = false;
    }
    if (bodyStyle.transform !== undefined && _.animType !== false) {
      _.animType = 'transform';
      _.transformType = 'transform';
      _.transitionType = 'transition';
    }
    _.transformsEnabled = _.animType !== null && _.animType !== false;
  };
  Slick.prototype.setSlideClasses = function (index) {
    var _ = this, centerOffset, allSlides, indexOffset, remainder;
    _.$slider.find('.slick-slide').removeClass('slick-active').attr('aria-hidden', 'true').removeClass('slick-center');
    allSlides = _.$slider.find('.slick-slide');
    if (_.options.centerMode === true) {
      centerOffset = Math.floor(_.options.slidesToShow / 2);
      if (_.options.infinite === true) {
        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
          _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
        } else {
          indexOffset = _.options.slidesToShow + index;
          allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
        }
        if (index === 0) {
          allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
        } else if (index === _.slideCount - 1) {
          allSlides.eq(_.options.slidesToShow).addClass('slick-center');
        }
      }
      _.$slides.eq(index).addClass('slick-center');
    } else {
      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {
        _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
      } else if (allSlides.length <= _.options.slidesToShow) {
        allSlides.addClass('slick-active').attr('aria-hidden', 'false');
      } else {
        remainder = _.slideCount % _.options.slidesToShow;
        indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;
        if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {
          allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
        } else {
          allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
        }
      }
    }
    if (_.options.lazyLoad === 'ondemand') {
      _.lazyLoad();
    }
  };
  Slick.prototype.setupInfinite = function () {
    var _ = this, i, slideIndex, infiniteCount;
    if (_.options.fade === true) {
      _.options.centerMode = false;
    }
    if (_.options.infinite === true && _.options.fade === false) {
      slideIndex = null;
      if (_.slideCount > _.options.slidesToShow) {
        if (_.options.centerMode === true) {
          infiniteCount = _.options.slidesToShow + 1;
        } else {
          infiniteCount = _.options.slidesToShow;
        }
        for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
          slideIndex = i - 1;
          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
        }
        for (i = 0; i < infiniteCount; i += 1) {
          slideIndex = i;
          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
        }
        _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
          $(this).attr('id', '');
        });
      }
    }
  };
  Slick.prototype.setPaused = function (paused) {
    var _ = this;
    if (_.options.autoplay === true && _.options.pauseOnHover === true) {
      _.paused = paused;
      _.autoPlayClear();
    }
  };
  Slick.prototype.selectHandler = function (event) {
    var _ = this;
    var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');
    var index = parseInt(targetElement.attr('data-slick-index'));
    if (!index)
      index = 0;
    if (_.slideCount <= _.options.slidesToShow) {
      _.$slider.find('.slick-slide').removeClass('slick-active').attr('aria-hidden', 'true');
      _.$slides.eq(index).addClass('slick-active').attr('aria-hidden', 'false');
      if (_.options.centerMode === true) {
        _.$slider.find('.slick-slide').removeClass('slick-center');
        _.$slides.eq(index).addClass('slick-center');
      }
      _.asNavFor(index);
      return;
    }
    _.slideHandler(index);
  };
  Slick.prototype.slideHandler = function (index, sync, dontAnimate) {
    var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null, _ = this;
    sync = sync || false;
    if (_.animating === true && _.options.waitForAnimate === true) {
      return;
    }
    if (_.options.fade === true && _.currentSlide === index) {
      return;
    }
    if (_.slideCount <= _.options.slidesToShow) {
      return;
    }
    if (sync === false) {
      _.asNavFor(index);
    }
    targetSlide = index;
    targetLeft = _.getLeft(targetSlide);
    slideLeft = _.getLeft(_.currentSlide);
    _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
    if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;
        if (dontAnimate !== true) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }
      return;
    } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;
        if (dontAnimate !== true) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }
      return;
    }
    if (_.options.autoplay === true) {
      clearInterval(_.autoPlayTimer);
    }
    if (targetSlide < 0) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
      } else {
        animSlide = _.slideCount + targetSlide;
      }
    } else if (targetSlide >= _.slideCount) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = 0;
      } else {
        animSlide = targetSlide - _.slideCount;
      }
    } else {
      animSlide = targetSlide;
    }
    _.animating = true;
    _.$slider.trigger('beforeChange', [
      _,
      _.currentSlide,
      animSlide
    ]);
    oldSlide = _.currentSlide;
    _.currentSlide = animSlide;
    _.setSlideClasses(_.currentSlide);
    _.updateDots();
    _.updateArrows();
    if (_.options.fade === true) {
      if (dontAnimate !== true) {
        _.fadeSlide(animSlide, function () {
          _.postSlide(animSlide);
        });
      } else {
        _.postSlide(animSlide);
      }
      _.animateHeight();
      return;
    }
    if (dontAnimate !== true) {
      _.animateSlide(targetLeft, function () {
        _.postSlide(animSlide);
      });
    } else {
      _.postSlide(animSlide);
    }
  };
  Slick.prototype.startLoad = function () {
    var _ = this;
    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.hide();
      _.$nextArrow.hide();
    }
    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.hide();
    }
    _.$slider.addClass('slick-loading');
  };
  Slick.prototype.swipeDirection = function () {
    var xDist, yDist, r, swipeAngle, _ = this;
    xDist = _.touchObject.startX - _.touchObject.curX;
    yDist = _.touchObject.startY - _.touchObject.curY;
    r = Math.atan2(yDist, xDist);
    swipeAngle = Math.round(r * 180 / Math.PI);
    if (swipeAngle < 0) {
      swipeAngle = 360 - Math.abs(swipeAngle);
    }
    if (swipeAngle <= 45 && swipeAngle >= 0) {
      return _.options.rtl === false ? 'left' : 'right';
    }
    if (swipeAngle <= 360 && swipeAngle >= 315) {
      return _.options.rtl === false ? 'left' : 'right';
    }
    if (swipeAngle >= 135 && swipeAngle <= 225) {
      return _.options.rtl === false ? 'right' : 'left';
    }
    if (_.options.verticalSwiping === true) {
      if (swipeAngle >= 35 && swipeAngle <= 135) {
        return 'left';
      } else {
        return 'right';
      }
    }
    return 'vertical';
  };
  Slick.prototype.swipeEnd = function (event) {
    var _ = this, slideCount;
    _.dragging = false;
    _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;
    if (_.touchObject.curX === undefined) {
      return false;
    }
    if (_.touchObject.edgeHit === true) {
      _.$slider.trigger('edge', [
        _,
        _.swipeDirection()
      ]);
    }
    if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {
      switch (_.swipeDirection()) {
      case 'left':
        slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();
        _.slideHandler(slideCount);
        _.currentDirection = 0;
        _.touchObject = {};
        _.$slider.trigger('swipe', [
          _,
          'left'
        ]);
        break;
      case 'right':
        slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();
        _.slideHandler(slideCount);
        _.currentDirection = 1;
        _.touchObject = {};
        _.$slider.trigger('swipe', [
          _,
          'right'
        ]);
        break;
      }
    } else {
      if (_.touchObject.startX !== _.touchObject.curX) {
        _.slideHandler(_.currentSlide);
        _.touchObject = {};
      }
    }
  };
  Slick.prototype.swipeHandler = function (event) {
    var _ = this;
    if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
      return;
    } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
      return;
    }
    _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;
    _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;
    if (_.options.verticalSwiping === true) {
      _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
    }
    switch (event.data.action) {
    case 'start':
      _.swipeStart(event);
      break;
    case 'move':
      _.swipeMove(event);
      break;
    case 'end':
      _.swipeEnd(event);
      break;
    }
  };
  Slick.prototype.swipeMove = function (event) {
    var _ = this, edgeWasHit = false, curLeft, swipeDirection, swipeLength, positionOffset, touches;
    touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;
    if (!_.dragging || touches && touches.length !== 1) {
      return false;
    }
    curLeft = _.getLeft(_.currentSlide);
    _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
    _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
    _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
    if (_.options.verticalSwiping === true) {
      _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
    }
    swipeDirection = _.swipeDirection();
    if (swipeDirection === 'vertical') {
      return;
    }
    if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
      event.preventDefault();
    }
    positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
    if (_.options.verticalSwiping === true) {
      positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
    }
    swipeLength = _.touchObject.swipeLength;
    _.touchObject.edgeHit = false;
    if (_.options.infinite === false) {
      if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
        swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
        _.touchObject.edgeHit = true;
      }
    }
    if (_.options.vertical === false) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    } else {
      _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
    }
    if (_.options.verticalSwiping === true) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    }
    if (_.options.fade === true || _.options.touchMove === false) {
      return false;
    }
    if (_.animating === true) {
      _.swipeLeft = null;
      return false;
    }
    _.setCSS(_.swipeLeft);
  };
  Slick.prototype.swipeStart = function (event) {
    var _ = this, touches;
    if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
      _.touchObject = {};
      return false;
    }
    if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
      touches = event.originalEvent.touches[0];
    }
    _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
    _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
    _.dragging = true;
  };
  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {
    var _ = this;
    if (_.$slidesCache !== null) {
      _.unload();
      _.$slideTrack.children(this.options.slide).detach();
      _.$slidesCache.appendTo(_.$slideTrack);
      _.reinit();
    }
  };
  Slick.prototype.unload = function () {
    var _ = this;
    $('.slick-cloned', _.$slider).remove();
    if (_.$dots) {
      _.$dots.remove();
    }
    if (_.$prevArrow && typeof _.options.prevArrow !== 'object') {
      _.$prevArrow.remove();
    }
    if (_.$nextArrow && typeof _.options.nextArrow !== 'object') {
      _.$nextArrow.remove();
    }
    _.$slides.removeClass('slick-slide slick-active slick-visible').attr('aria-hidden', 'true').css('width', '');
  };
  Slick.prototype.unslick = function () {
    var _ = this;
    _.destroy();
  };
  Slick.prototype.updateArrows = function () {
    var _ = this, centerOffset;
    centerOffset = Math.floor(_.options.slidesToShow / 2);
    if (_.options.arrows === true && _.options.infinite !== true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.removeClass('slick-disabled');
      _.$nextArrow.removeClass('slick-disabled');
      if (_.currentSlide === 0) {
        _.$prevArrow.addClass('slick-disabled');
        _.$nextArrow.removeClass('slick-disabled');
      } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
        _.$nextArrow.addClass('slick-disabled');
        _.$prevArrow.removeClass('slick-disabled');
      } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
        _.$nextArrow.addClass('slick-disabled');
        _.$prevArrow.removeClass('slick-disabled');
      }
    }
  };
  Slick.prototype.updateDots = function () {
    var _ = this;
    if (_.$dots !== null) {
      _.$dots.find('li').removeClass('slick-active').attr('aria-hidden', 'true');
      _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active').attr('aria-hidden', 'false');
    }
  };
  Slick.prototype.visibility = function () {
    var _ = this;
    if (document[_.hidden]) {
      _.paused = true;
      _.autoPlayClear();
    } else {
      _.paused = false;
      _.autoPlay();
    }
  };
  $.fn.slick = function () {
    var _ = this, opt = arguments[0], args = Array.prototype.slice.call(arguments, 1), l = _.length, i = 0, ret;
    for (i; i < l; i++) {
      if (typeof opt == 'object' || typeof opt == 'undefined')
        _[i].slick = new Slick(_[i], opt);
      else
        ret = _[i].slick[opt].apply(_[i].slick, args);
      if (typeof ret != 'undefined')
        return ret;
    }
    return _;
  };
}));
/**
* jquery.matchHeight.js master
* http://brm.io/jquery-match-height/
* License: MIT
*/
;
(function ($) {
  /*
    *  internal
    */
  var _previousResizeWidth = -1, _updateTimeout = -1;
  /*
    *  _parse
    *  value parse utility function
    */
  var _parse = function (value) {
    // parse value and convert NaN to 0
    return parseFloat(value) || 0;
  };
  /*
    *  _rows
    *  utility function returns array of jQuery selections representing each row
    *  (as displayed after float wrapping applied by browser)
    */
  var _rows = function (elements) {
    var tolerance = 1, $elements = $(elements), lastTop = null, rows = [];
    // group elements by their top position
    $elements.each(function () {
      var $that = $(this), top = $that.offset().top - _parse($that.css('margin-top')), lastRow = rows.length > 0 ? rows[rows.length - 1] : null;
      if (lastRow === null) {
        // first item on the row, so just push it
        rows.push($that);
      } else {
        // if the row top is the same, add to the row group
        if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {
          rows[rows.length - 1] = lastRow.add($that);
        } else {
          // otherwise start a new row group
          rows.push($that);
        }
      }
      // keep track of the last row top
      lastTop = top;
    });
    return rows;
  };
  /*
    *  _parseOptions
    *  handle plugin options
    */
  var _parseOptions = function (options) {
    var opts = {
        byRow: true,
        property: 'height',
        target: null,
        remove: false
      };
    if (typeof options === 'object') {
      return $.extend(opts, options);
    }
    if (typeof options === 'boolean') {
      opts.byRow = options;
    } else if (options === 'remove') {
      opts.remove = true;
    }
    return opts;
  };
  /*
    *  matchHeight
    *  plugin definition
    */
  var matchHeight = $.fn.matchHeight = function (options) {
      var opts = _parseOptions(options);
      // handle remove
      if (opts.remove) {
        var that = this;
        // remove fixed height from all selected elements
        this.css(opts.property, '');
        // remove selected elements from all groups
        $.each(matchHeight._groups, function (key, group) {
          group.elements = group.elements.not(that);
        });
        // TODO: cleanup empty groups
        return this;
      }
      if (this.length <= 1 && !opts.target) {
        return this;
      }
      // keep track of this group so we can re-apply later on load and resize events
      matchHeight._groups.push({
        elements: this,
        options: opts
      });
      // match each element's height to the tallest element in the selection
      matchHeight._apply(this, opts);
      return this;
    };
  /*
    *  plugin global options
    */
  matchHeight._groups = [];
  matchHeight._throttle = 80;
  matchHeight._maintainScroll = false;
  matchHeight._beforeUpdate = null;
  matchHeight._afterUpdate = null;
  /*
    *  matchHeight._apply
    *  apply matchHeight to given elements
    */
  matchHeight._apply = function (elements, options) {
    var opts = _parseOptions(options), $elements = $(elements), rows = [$elements];
    // take note of scroll position
    var scrollTop = $(window).scrollTop(), htmlHeight = $('html').outerHeight(true);
    // get hidden parents
    var $hiddenParents = $elements.parents().filter(':hidden');
    // cache the original inline style
    $hiddenParents.each(function () {
      var $that = $(this);
      $that.data('style-cache', $that.attr('style'));
    });
    // temporarily must force hidden parents visible
    $hiddenParents.css('display', 'block');
    // get rows if using byRow, otherwise assume one row
    if (opts.byRow && !opts.target) {
      // must first force an arbitrary equal height so floating elements break evenly
      $elements.each(function () {
        var $that = $(this), display = $that.css('display') === 'inline-block' ? 'inline-block' : 'block';
        // cache the original inline style
        $that.data('style-cache', $that.attr('style'));
        $that.css({
          'display': display,
          'padding-top': '0',
          'padding-bottom': '0',
          'margin-top': '0',
          'margin-bottom': '0',
          'border-top-width': '0',
          'border-bottom-width': '0',
          'height': '100px'
        });
      });
      // get the array of rows (based on element top position)
      rows = _rows($elements);
      // revert original inline styles
      $elements.each(function () {
        var $that = $(this);
        $that.attr('style', $that.data('style-cache') || '');
      });
    }
    $.each(rows, function (key, row) {
      var $row = $(row), targetHeight = 0;
      if (!opts.target) {
        // skip apply to rows with only one item
        if (opts.byRow && $row.length <= 1) {
          $row.css(opts.property, '');
          return;
        }
        // iterate the row and find the max height
        $row.each(function () {
          var $that = $(this), display = $that.css('display') === 'inline-block' ? 'inline-block' : 'block';
          // ensure we get the correct actual height (and not a previously set height value)
          var css = { 'display': display };
          css[opts.property] = '';
          $that.css(css);
          // find the max height (including padding, but not margin)
          if ($that.outerHeight(false) > targetHeight) {
            targetHeight = $that.outerHeight(false);
          }
          // revert display block
          $that.css('display', '');
        });
      } else {
        // if target set, use the height of the target element
        targetHeight = opts.target.outerHeight(false);
      }
      // iterate the row and apply the height to all elements
      $row.each(function () {
        var $that = $(this), verticalPadding = 0;
        // don't apply to a target
        if (opts.target && $that.is(opts.target)) {
          return;
        }
        // handle padding and border correctly (required when not using border-box)
        if ($that.css('box-sizing') !== 'border-box') {
          verticalPadding += _parse($that.css('border-top-width')) + _parse($that.css('border-bottom-width'));
          verticalPadding += _parse($that.css('padding-top')) + _parse($that.css('padding-bottom'));
        }
        // set the height (accounting for padding and border)
        $that.css(opts.property, targetHeight - verticalPadding);
      });
    });
    // revert hidden parents
    $hiddenParents.each(function () {
      var $that = $(this);
      $that.attr('style', $that.data('style-cache') || null);
    });
    // restore scroll position if enabled
    if (matchHeight._maintainScroll) {
      $(window).scrollTop(scrollTop / htmlHeight * $('html').outerHeight(true));
    }
    return this;
  };
  /*
    *  matchHeight._applyDataApi
    *  applies matchHeight to all elements with a data-match-height attribute
    */
  matchHeight._applyDataApi = function () {
    var groups = {};
    // generate groups by their groupId set by elements using data-match-height
    $('[data-match-height], [data-mh]').each(function () {
      var $this = $(this), groupId = $this.attr('data-mh') || $this.attr('data-match-height');
      if (groupId in groups) {
        groups[groupId] = groups[groupId].add($this);
      } else {
        groups[groupId] = $this;
      }
    });
    // apply matchHeight to each group
    $.each(groups, function () {
      this.matchHeight(true);
    });
  };
  /*
    *  matchHeight._update
    *  updates matchHeight on all current groups with their correct options
    */
  var _update = function (event) {
    if (matchHeight._beforeUpdate) {
      matchHeight._beforeUpdate(event, matchHeight._groups);
    }
    $.each(matchHeight._groups, function () {
      matchHeight._apply(this.elements, this.options);
    });
    if (matchHeight._afterUpdate) {
      matchHeight._afterUpdate(event, matchHeight._groups);
    }
  };
  matchHeight._update = function (throttle, event) {
    // prevent update if fired from a resize event
    // where the viewport width hasn't actually changed
    // fixes an event looping bug in IE8
    if (event && event.type === 'resize') {
      var windowWidth = $(window).width();
      if (windowWidth === _previousResizeWidth) {
        return;
      }
      _previousResizeWidth = windowWidth;
    }
    // throttle updates
    if (!throttle) {
      _update(event);
    } else if (_updateTimeout === -1) {
      _updateTimeout = setTimeout(function () {
        _update(event);
        _updateTimeout = -1;
      }, matchHeight._throttle);
    }
  };
  /*
    *  bind events
    */
  // apply on DOM ready event
  $(matchHeight._applyDataApi);
  // update heights on load and resize events
  $(window).bind('load', function (event) {
    matchHeight._update(false, event);
  });
  // throttled update heights on resize events
  $(window).bind('resize orientationchange', function (event) {
    matchHeight._update(true, event);
  });
}(jQuery));
/*! =========================================================
 * bootstrap-slider.js
 *
 * Maintainers:
 *		Kyle Kemp
 *			- Twitter: @seiyria
 *			- Github:  seiyria
 *		Rohit Kalkur
 *			- Twitter: @Rovolutionary
 *			- Github:  rovolution
 *
 * =========================================================
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */
/**
 * Bridget makes jQuery widgets
 * v1.0.1
 * MIT license
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['../../../../jquery/jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    var jQuery;
    try {
      jQuery = require('jquery');
    } catch (err) {
      jQuery = null;
    }
    module.exports = factory(jQuery);
  } else {
    root.Slider = factory(root.jQuery);
  }
}(this, function ($) {
  // Reference to Slider constructor
  var Slider;
  (function ($) {
    'use strict';
    // -------------------------- utils -------------------------- //
    var slice = Array.prototype.slice;
    function noop() {
    }
    // -------------------------- definition -------------------------- //
    function defineBridget($) {
      // bail if no jQuery
      if (!$) {
        return;
      }
      // -------------------------- addOptionMethod -------------------------- //
      /**
			 * adds option method -> $().plugin('option', {...})
			 * @param {Function} PluginClass - constructor class
			 */
      function addOptionMethod(PluginClass) {
        // don't overwrite original option method
        if (PluginClass.prototype.option) {
          return;
        }
        // option setter
        PluginClass.prototype.option = function (opts) {
          // bail out if not an object
          if (!$.isPlainObject(opts)) {
            return;
          }
          this.options = $.extend(true, this.options, opts);
        };
      }
      // -------------------------- plugin bridge -------------------------- //
      // helper function for logging errors
      // $.error breaks jQuery chaining
      var logError = typeof console === 'undefined' ? noop : function (message) {
          console.error(message);
        };
      /**
			 * jQuery plugin bridge, access methods like $elem.plugin('method')
			 * @param {String} namespace - plugin name
			 * @param {Function} PluginClass - constructor class
			 */
      function bridge(namespace, PluginClass) {
        // add to jQuery fn namespace
        $.fn[namespace] = function (options) {
          if (typeof options === 'string') {
            // call plugin method when first argument is a string
            // get arguments for method
            var args = slice.call(arguments, 1);
            for (var i = 0, len = this.length; i < len; i++) {
              var elem = this[i];
              var instance = $.data(elem, namespace);
              if (!instance) {
                logError('cannot call methods on ' + namespace + ' prior to initialization; ' + 'attempted to call \'' + options + '\'');
                continue;
              }
              if (!$.isFunction(instance[options]) || options.charAt(0) === '_') {
                logError('no such method \'' + options + '\' for ' + namespace + ' instance');
                continue;
              }
              // trigger method with arguments
              var returnValue = instance[options].apply(instance, args);
              // break look and return first value if provided
              if (returnValue !== undefined && returnValue !== instance) {
                return returnValue;
              }
            }
            // return this if no return value
            return this;
          } else {
            var objects = this.map(function () {
                var instance = $.data(this, namespace);
                if (instance) {
                  // apply options & init
                  instance.option(options);
                  instance._init();
                } else {
                  // initialize new instance
                  instance = new PluginClass(this, options);
                  $.data(this, namespace, instance);
                }
                return $(this);
              });
            if (!objects || objects.length > 1) {
              return objects;
            } else {
              return objects[0];
            }
          }
        };
      }
      // -------------------------- bridget -------------------------- //
      /**
			 * converts a Prototypical class into a proper jQuery plugin
			 *   the class must have a ._init method
			 * @param {String} namespace - plugin name, used in $().pluginName
			 * @param {Function} PluginClass - constructor class
			 */
      $.bridget = function (namespace, PluginClass) {
        addOptionMethod(PluginClass);
        bridge(namespace, PluginClass);
      };
      return $.bridget;
    }
    // get jquery from browser global
    defineBridget($);
  }($));
  /*************************************************

			BOOTSTRAP-SLIDER SOURCE CODE

	**************************************************/
  (function ($) {
    var ErrorMsgs = {
        formatInvalidInputErrorMsg: function (input) {
          return 'Invalid input value \'' + input + '\' passed in';
        },
        callingContextNotSliderInstance: 'Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method'
      };
    var SliderScale = {
        linear: {
          toValue: function (percentage) {
            var rawValue = percentage / 100 * (this.options.max - this.options.min);
            if (this.options.ticks_positions.length > 0) {
              var minv, maxv, minp, maxp = 0;
              for (var i = 0; i < this.options.ticks_positions.length; i++) {
                if (percentage <= this.options.ticks_positions[i]) {
                  minv = i > 0 ? this.options.ticks[i - 1] : 0;
                  minp = i > 0 ? this.options.ticks_positions[i - 1] : 0;
                  maxv = this.options.ticks[i];
                  maxp = this.options.ticks_positions[i];
                  break;
                }
              }
              if (i > 0) {
                var partialPercentage = (percentage - minp) / (maxp - minp);
                rawValue = minv + partialPercentage * (maxv - minv);
              }
            }
            var value = this.options.min + Math.round(rawValue / this.options.step) * this.options.step;
            if (value < this.options.min) {
              return this.options.min;
            } else if (value > this.options.max) {
              return this.options.max;
            } else {
              return value;
            }
          },
          toPercentage: function (value) {
            if (this.options.max === this.options.min) {
              return 0;
            }
            if (this.options.ticks_positions.length > 0) {
              var minv, maxv, minp, maxp = 0;
              for (var i = 0; i < this.options.ticks.length; i++) {
                if (value <= this.options.ticks[i]) {
                  minv = i > 0 ? this.options.ticks[i - 1] : 0;
                  minp = i > 0 ? this.options.ticks_positions[i - 1] : 0;
                  maxv = this.options.ticks[i];
                  maxp = this.options.ticks_positions[i];
                  break;
                }
              }
              if (i > 0) {
                var partialPercentage = (value - minv) / (maxv - minv);
                return minp + partialPercentage * (maxp - minp);
              }
            }
            return 100 * (value - this.options.min) / (this.options.max - this.options.min);
          }
        },
        logarithmic: {
          toValue: function (percentage) {
            var min = this.options.min === 0 ? 0 : Math.log(this.options.min);
            var max = Math.log(this.options.max);
            var value = Math.exp(min + (max - min) * percentage / 100);
            value = this.options.min + Math.round((value - this.options.min) / this.options.step) * this.options.step;
            /* Rounding to the nearest step could exceed the min or
					 * max, so clip to those values. */
            if (value < this.options.min) {
              return this.options.min;
            } else if (value > this.options.max) {
              return this.options.max;
            } else {
              return value;
            }
          },
          toPercentage: function (value) {
            if (this.options.max === this.options.min) {
              return 0;
            } else {
              var max = Math.log(this.options.max);
              var min = this.options.min === 0 ? 0 : Math.log(this.options.min);
              var v = value === 0 ? 0 : Math.log(value);
              return 100 * (v - min) / (max - min);
            }
          }
        }
      };
    /*************************************************

							CONSTRUCTOR

		**************************************************/
    Slider = function (element, options) {
      createNewSlider.call(this, element, options);
      return this;
    };
    function createNewSlider(element, options) {
      if (typeof element === 'string') {
        this.element = document.querySelector(element);
      } else if (element instanceof HTMLElement) {
        this.element = element;
      }
      /*************************************************

							Process Options

			**************************************************/
      options = options ? options : {};
      var optionTypes = Object.keys(this.defaultOptions);
      for (var i = 0; i < optionTypes.length; i++) {
        var optName = optionTypes[i];
        // First check if an option was passed in via the constructor
        var val = options[optName];
        // If no data attrib, then check data atrributes
        val = typeof val !== 'undefined' ? val : getDataAttrib(this.element, optName);
        // Finally, if nothing was specified, use the defaults
        val = val !== null ? val : this.defaultOptions[optName];
        // Set all options on the instance of the Slider
        if (!this.options) {
          this.options = {};
        }
        this.options[optName] = val;
      }
      function getDataAttrib(element, optName) {
        var dataName = 'data-slider-' + optName.replace(/_/g, '-');
        var dataValString = element.getAttribute(dataName);
        try {
          return JSON.parse(dataValString);
        } catch (err) {
          return dataValString;
        }
      }
      /*************************************************

							Create Markup

			**************************************************/
      var origWidth = this.element.style.width;
      var updateSlider = false;
      var parent = this.element.parentNode;
      var sliderTrackSelection;
      var sliderTrackLow, sliderTrackHigh;
      var sliderMinHandle;
      var sliderMaxHandle;
      if (this.sliderElem) {
        updateSlider = true;
      } else {
        /* Create elements needed for slider */
        this.sliderElem = document.createElement('div');
        this.sliderElem.className = 'slider';
        /* Create slider track elements */
        var sliderTrack = document.createElement('div');
        sliderTrack.className = 'slider-track';
        sliderTrackLow = document.createElement('div');
        sliderTrackLow.className = 'slider-track-low';
        sliderTrackSelection = document.createElement('div');
        sliderTrackSelection.className = 'slider-selection';
        sliderTrackHigh = document.createElement('div');
        sliderTrackHigh.className = 'slider-track-high';
        sliderMinHandle = document.createElement('div');
        sliderMinHandle.className = 'slider-handle min-slider-handle';
        sliderMaxHandle = document.createElement('div');
        sliderMaxHandle.className = 'slider-handle max-slider-handle';
        sliderTrack.appendChild(sliderTrackLow);
        sliderTrack.appendChild(sliderTrackSelection);
        sliderTrack.appendChild(sliderTrackHigh);
        /* Create ticks */
        this.ticks = [];
        if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
          for (i = 0; i < this.options.ticks.length; i++) {
            var tick = document.createElement('div');
            tick.className = 'slider-tick';
            this.ticks.push(tick);
            sliderTrack.appendChild(tick);
          }
          sliderTrackSelection.className += ' tick-slider-selection';
        }
        sliderTrack.appendChild(sliderMinHandle);
        sliderTrack.appendChild(sliderMaxHandle);
        this.tickLabels = [];
        if (Array.isArray(this.options.ticks_labels) && this.options.ticks_labels.length > 0) {
          this.tickLabelContainer = document.createElement('div');
          this.tickLabelContainer.className = 'slider-tick-label-container';
          for (i = 0; i < this.options.ticks_labels.length; i++) {
            var label = document.createElement('div');
            label.className = 'slider-tick-label';
            label.innerHTML = this.options.ticks_labels[i];
            this.tickLabels.push(label);
            this.tickLabelContainer.appendChild(label);
          }
        }
        var createAndAppendTooltipSubElements = function (tooltipElem) {
          var arrow = document.createElement('div');
          arrow.className = 'tooltip-arrow';
          var inner = document.createElement('div');
          inner.className = 'tooltip-inner';
          tooltipElem.appendChild(arrow);
          tooltipElem.appendChild(inner);
        };
        /* Create tooltip elements */
        var sliderTooltip = document.createElement('div');
        sliderTooltip.className = 'tooltip tooltip-main';
        createAndAppendTooltipSubElements(sliderTooltip);
        var sliderTooltipMin = document.createElement('div');
        sliderTooltipMin.className = 'tooltip tooltip-min';
        createAndAppendTooltipSubElements(sliderTooltipMin);
        var sliderTooltipMax = document.createElement('div');
        sliderTooltipMax.className = 'tooltip tooltip-max';
        createAndAppendTooltipSubElements(sliderTooltipMax);
        /* Append components to sliderElem */
        this.sliderElem.appendChild(sliderTrack);
        this.sliderElem.appendChild(sliderTooltip);
        this.sliderElem.appendChild(sliderTooltipMin);
        this.sliderElem.appendChild(sliderTooltipMax);
        if (this.tickLabelContainer) {
          this.sliderElem.appendChild(this.tickLabelContainer);
        }
        /* Append slider element to parent container, right before the original <input> element */
        parent.insertBefore(this.sliderElem, this.element);
        /* Hide original <input> element */
        this.element.style.display = 'none';
      }
      /* If JQuery exists, cache JQ references */
      if ($) {
        this.$element = $(this.element);
        this.$sliderElem = $(this.sliderElem);
      }
      /*************************************************

								Setup

			**************************************************/
      this.eventToCallbackMap = {};
      this.sliderElem.id = this.options.id;
      this.touchCapable = 'ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch;
      this.tooltip = this.sliderElem.querySelector('.tooltip-main');
      this.tooltipInner = this.tooltip.querySelector('.tooltip-inner');
      this.tooltip_min = this.sliderElem.querySelector('.tooltip-min');
      this.tooltipInner_min = this.tooltip_min.querySelector('.tooltip-inner');
      this.tooltip_max = this.sliderElem.querySelector('.tooltip-max');
      this.tooltipInner_max = this.tooltip_max.querySelector('.tooltip-inner');
      if (SliderScale[this.options.scale]) {
        this.options.scale = SliderScale[this.options.scale];
      }
      if (updateSlider === true) {
        // Reset classes
        this._removeClass(this.sliderElem, 'slider-horizontal');
        this._removeClass(this.sliderElem, 'slider-vertical');
        this._removeClass(this.tooltip, 'hide');
        this._removeClass(this.tooltip_min, 'hide');
        this._removeClass(this.tooltip_max, 'hide');
        // Undo existing inline styles for track
        [
          'left',
          'top',
          'width',
          'height'
        ].forEach(function (prop) {
          this._removeProperty(this.trackLow, prop);
          this._removeProperty(this.trackSelection, prop);
          this._removeProperty(this.trackHigh, prop);
        }, this);
        // Undo inline styles on handles
        [
          this.handle1,
          this.handle2
        ].forEach(function (handle) {
          this._removeProperty(handle, 'left');
          this._removeProperty(handle, 'top');
        }, this);
        // Undo inline styles and classes on tooltips
        [
          this.tooltip,
          this.tooltip_min,
          this.tooltip_max
        ].forEach(function (tooltip) {
          this._removeProperty(tooltip, 'left');
          this._removeProperty(tooltip, 'top');
          this._removeProperty(tooltip, 'margin-left');
          this._removeProperty(tooltip, 'margin-top');
          this._removeClass(tooltip, 'right');
          this._removeClass(tooltip, 'top');
        }, this);
      }
      if (this.options.orientation === 'vertical') {
        this._addClass(this.sliderElem, 'slider-vertical');
        this.stylePos = 'top';
        this.mousePos = 'pageY';
        this.sizePos = 'offsetHeight';
        this._addClass(this.tooltip, 'right');
        this.tooltip.style.left = '100%';
        this._addClass(this.tooltip_min, 'right');
        this.tooltip_min.style.left = '100%';
        this._addClass(this.tooltip_max, 'right');
        this.tooltip_max.style.left = '100%';
      } else {
        this._addClass(this.sliderElem, 'slider-horizontal');
        this.sliderElem.style.width = origWidth;
        this.options.orientation = 'horizontal';
        this.stylePos = 'left';
        this.mousePos = 'pageX';
        this.sizePos = 'offsetWidth';
        this._addClass(this.tooltip, 'top');
        this.tooltip.style.top = -this.tooltip.outerHeight - 14 + 'px';
        this._addClass(this.tooltip_min, 'top');
        this.tooltip_min.style.top = -this.tooltip_min.outerHeight - 14 + 'px';
        this._addClass(this.tooltip_max, 'top');
        this.tooltip_max.style.top = -this.tooltip_max.outerHeight - 14 + 'px';
      }
      /* In case ticks are specified, overwrite the min and max bounds */
      if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
        this.options.max = Math.max.apply(Math, this.options.ticks);
        this.options.min = Math.min.apply(Math, this.options.ticks);
      }
      if (Array.isArray(this.options.value)) {
        this.options.range = true;
      } else if (this.options.range) {
        // User wants a range, but value is not an array
        this.options.value = [
          this.options.value,
          this.options.max
        ];
      }
      this.trackLow = sliderTrackLow || this.trackLow;
      this.trackSelection = sliderTrackSelection || this.trackSelection;
      this.trackHigh = sliderTrackHigh || this.trackHigh;
      if (this.options.selection === 'none') {
        this._addClass(this.trackLow, 'hide');
        this._addClass(this.trackSelection, 'hide');
        this._addClass(this.trackHigh, 'hide');
      }
      this.handle1 = sliderMinHandle || this.handle1;
      this.handle2 = sliderMaxHandle || this.handle2;
      if (updateSlider === true) {
        // Reset classes
        this._removeClass(this.handle1, 'square triangle');
        this._removeClass(this.handle2, 'square triangle hide');
        for (i = 0; i < this.ticks.length; i++) {
          this._removeClass(this.ticks[i], 'square triangle hide');
        }
      }
      var availableHandleModifiers = [
          'square',
          'triangle',
          'custom'
        ];
      var isValidHandleType = availableHandleModifiers.indexOf(this.options.handle) !== -1;
      if (isValidHandleType) {
        this._addClass(this.handle1, this.options.handle);
        this._addClass(this.handle2, this.options.handle);
        for (i = 0; i < this.ticks.length; i++) {
          this._addClass(this.ticks[i], this.options.handle);
        }
      }
      this.offset = this._offset(this.sliderElem);
      this.size = this.sliderElem[this.sizePos];
      this.setValue(this.options.value);
      /******************************************

						Bind Event Listeners

			******************************************/
      // Bind keyboard handlers
      this.handle1Keydown = this._keydown.bind(this, 0);
      this.handle1.addEventListener('keydown', this.handle1Keydown, false);
      this.handle2Keydown = this._keydown.bind(this, 1);
      this.handle2.addEventListener('keydown', this.handle2Keydown, false);
      this.mousedown = this._mousedown.bind(this);
      if (this.touchCapable) {
        // Bind touch handlers
        this.sliderElem.addEventListener('touchstart', this.mousedown, false);
      }
      this.sliderElem.addEventListener('mousedown', this.mousedown, false);
      // Bind tooltip-related handlers
      if (this.options.tooltip === 'hide') {
        this._addClass(this.tooltip, 'hide');
        this._addClass(this.tooltip_min, 'hide');
        this._addClass(this.tooltip_max, 'hide');
      } else if (this.options.tooltip === 'always') {
        this._showTooltip();
        this._alwaysShowTooltip = true;
      } else {
        this.showTooltip = this._showTooltip.bind(this);
        this.hideTooltip = this._hideTooltip.bind(this);
        this.sliderElem.addEventListener('mouseenter', this.showTooltip, false);
        this.sliderElem.addEventListener('mouseleave', this.hideTooltip, false);
        this.handle1.addEventListener('focus', this.showTooltip, false);
        this.handle1.addEventListener('blur', this.hideTooltip, false);
        this.handle2.addEventListener('focus', this.showTooltip, false);
        this.handle2.addEventListener('blur', this.hideTooltip, false);
      }
      if (this.options.enabled) {
        this.enable();
      } else {
        this.disable();
      }
    }
    /*************************************************

					INSTANCE PROPERTIES/METHODS

		- Any methods bound to the prototype are considered
		part of the plugin's `public` interface

		**************************************************/
    Slider.prototype = {
      _init: function () {
      },
      constructor: Slider,
      defaultOptions: {
        id: '',
        min: 0,
        max: 10,
        step: 1,
        precision: 0,
        orientation: 'horizontal',
        value: 5,
        range: false,
        selection: 'before',
        tooltip: 'show',
        tooltip_split: false,
        handle: 'square',
        reversed: false,
        enabled: true,
        formatter: function (val) {
          if (Array.isArray(val)) {
            return val[0] + ' : ' + val[1];
          } else {
            return val;
          }
        },
        natural_arrow_keys: false,
        ticks: [],
        ticks_positions: [],
        ticks_labels: [],
        ticks_snap_bounds: 0,
        scale: 'linear',
        focus: false
      },
      over: false,
      inDrag: false,
      getValue: function () {
        if (this.options.range) {
          return this.options.value;
        }
        return this.options.value[0];
      },
      setValue: function (val, triggerSlideEvent, triggerChangeEvent) {
        if (!val) {
          val = 0;
        }
        var oldValue = this.getValue();
        this.options.value = this._validateInputValue(val);
        var applyPrecision = this._applyPrecision.bind(this);
        if (this.options.range) {
          this.options.value[0] = applyPrecision(this.options.value[0]);
          this.options.value[1] = applyPrecision(this.options.value[1]);
          this.options.value[0] = Math.max(this.options.min, Math.min(this.options.max, this.options.value[0]));
          this.options.value[1] = Math.max(this.options.min, Math.min(this.options.max, this.options.value[1]));
        } else {
          this.options.value = applyPrecision(this.options.value);
          this.options.value = [Math.max(this.options.min, Math.min(this.options.max, this.options.value))];
          this._addClass(this.handle2, 'hide');
          if (this.options.selection === 'after') {
            this.options.value[1] = this.options.max;
          } else {
            this.options.value[1] = this.options.min;
          }
        }
        if (this.options.max > this.options.min) {
          this.percentage = [
            this._toPercentage(this.options.value[0]),
            this._toPercentage(this.options.value[1]),
            this.options.step * 100 / (this.options.max - this.options.min)
          ];
        } else {
          this.percentage = [
            0,
            0,
            100
          ];
        }
        this._layout();
        var newValue = this.options.range ? this.options.value : this.options.value[0];
        if (triggerSlideEvent === true) {
          this._trigger('slide', newValue);
        }
        if (oldValue !== newValue && triggerChangeEvent === true) {
          this._trigger('change', {
            oldValue: oldValue,
            newValue: newValue
          });
        }
        this._setDataVal(newValue);
        return this;
      },
      destroy: function () {
        // Remove event handlers on slider elements
        this._removeSliderEventHandlers();
        // Remove the slider from the DOM
        this.sliderElem.parentNode.removeChild(this.sliderElem);
        /* Show original <input> element */
        this.element.style.display = '';
        // Clear out custom event bindings
        this._cleanUpEventCallbacksMap();
        // Remove data values
        this.element.removeAttribute('data');
        // Remove JQuery handlers/data
        if ($) {
          this._unbindJQueryEventHandlers();
          this.$element.removeData('slider');
        }
      },
      disable: function () {
        this.options.enabled = false;
        this.handle1.removeAttribute('tabindex');
        this.handle2.removeAttribute('tabindex');
        this._addClass(this.sliderElem, 'slider-disabled');
        this._trigger('slideDisabled');
        return this;
      },
      enable: function () {
        this.options.enabled = true;
        this.handle1.setAttribute('tabindex', 0);
        this.handle2.setAttribute('tabindex', 0);
        this._removeClass(this.sliderElem, 'slider-disabled');
        this._trigger('slideEnabled');
        return this;
      },
      toggle: function () {
        if (this.options.enabled) {
          this.disable();
        } else {
          this.enable();
        }
        return this;
      },
      isEnabled: function () {
        return this.options.enabled;
      },
      on: function (evt, callback) {
        this._bindNonQueryEventHandler(evt, callback);
        return this;
      },
      getAttribute: function (attribute) {
        if (attribute) {
          return this.options[attribute];
        } else {
          return this.options;
        }
      },
      setAttribute: function (attribute, value) {
        this.options[attribute] = value;
        return this;
      },
      refresh: function () {
        this._removeSliderEventHandlers();
        createNewSlider.call(this, this.element, this.options);
        if ($) {
          // Bind new instance of slider to the element
          $.data(this.element, 'slider', this);
        }
        return this;
      },
      relayout: function () {
        this._layout();
        return this;
      },
      _removeSliderEventHandlers: function () {
        // Remove event listeners from handle1
        this.handle1.removeEventListener('keydown', this.handle1Keydown, false);
        this.handle1.removeEventListener('focus', this.showTooltip, false);
        this.handle1.removeEventListener('blur', this.hideTooltip, false);
        // Remove event listeners from handle2
        this.handle2.removeEventListener('keydown', this.handle2Keydown, false);
        this.handle2.removeEventListener('focus', this.handle2Keydown, false);
        this.handle2.removeEventListener('blur', this.handle2Keydown, false);
        // Remove event listeners from sliderElem
        this.sliderElem.removeEventListener('mouseenter', this.showTooltip, false);
        this.sliderElem.removeEventListener('mouseleave', this.hideTooltip, false);
        this.sliderElem.removeEventListener('touchstart', this.mousedown, false);
        this.sliderElem.removeEventListener('mousedown', this.mousedown, false);
      },
      _bindNonQueryEventHandler: function (evt, callback) {
        if (this.eventToCallbackMap[evt] === undefined) {
          this.eventToCallbackMap[evt] = [];
        }
        this.eventToCallbackMap[evt].push(callback);
      },
      _cleanUpEventCallbacksMap: function () {
        var eventNames = Object.keys(this.eventToCallbackMap);
        for (var i = 0; i < eventNames.length; i++) {
          var eventName = eventNames[i];
          this.eventToCallbackMap[eventName] = null;
        }
      },
      _showTooltip: function () {
        if (this.options.tooltip_split === false) {
          this._addClass(this.tooltip, 'in');
          this.tooltip_min.style.display = 'none';
          this.tooltip_max.style.display = 'none';
        } else {
          this._addClass(this.tooltip_min, 'in');
          this._addClass(this.tooltip_max, 'in');
          this.tooltip.style.display = 'none';
        }
        this.over = true;
      },
      _hideTooltip: function () {
        if (this.inDrag === false && this.alwaysShowTooltip !== true) {
          this._removeClass(this.tooltip, 'in');
          this._removeClass(this.tooltip_min, 'in');
          this._removeClass(this.tooltip_max, 'in');
        }
        this.over = false;
      },
      _layout: function () {
        var positionPercentages;
        if (this.options.reversed) {
          positionPercentages = [
            100 - this.percentage[0],
            this.percentage[1]
          ];
        } else {
          positionPercentages = [
            this.percentage[0],
            this.percentage[1]
          ];
        }
        this.handle1.style[this.stylePos] = positionPercentages[0] + '%';
        this.handle2.style[this.stylePos] = positionPercentages[1] + '%';
        /* Position ticks and labels */
        if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
          var maxTickValue = Math.max.apply(Math, this.options.ticks);
          var minTickValue = Math.min.apply(Math, this.options.ticks);
          var styleSize = this.options.orientation === 'vertical' ? 'height' : 'width';
          var styleMargin = this.options.orientation === 'vertical' ? 'marginTop' : 'marginLeft';
          var labelSize = this.size / (this.options.ticks.length - 1);
          if (this.tickLabelContainer) {
            var extraMargin = 0;
            if (this.options.ticks_positions.length === 0) {
              this.tickLabelContainer.style[styleMargin] = -labelSize / 2 + 'px';
              extraMargin = this.tickLabelContainer.offsetHeight;
            } else {
              /* Chidren are position absolute, calculate height by finding the max offsetHeight of a child */
              for (i = 0; i < this.tickLabelContainer.childNodes.length; i++) {
                if (this.tickLabelContainer.childNodes[i].offsetHeight > extraMargin) {
                  extraMargin = this.tickLabelContainer.childNodes[i].offsetHeight;
                }
              }
            }
            if (this.options.orientation === 'horizontal') {
              this.sliderElem.style.marginBottom = extraMargin + 'px';
            }
          }
          for (var i = 0; i < this.options.ticks.length; i++) {
            var percentage = this.options.ticks_positions[i] || 100 * (this.options.ticks[i] - minTickValue) / (maxTickValue - minTickValue);
            this.ticks[i].style[this.stylePos] = percentage + '%';
            /* Set class labels to denote whether ticks are in the selection */
            this._removeClass(this.ticks[i], 'in-selection');
            if (!this.options.range) {
              if (this.options.selection === 'after' && percentage >= positionPercentages[0]) {
                this._addClass(this.ticks[i], 'in-selection');
              } else if (this.options.selection === 'before' && percentage <= positionPercentages[0]) {
                this._addClass(this.ticks[i], 'in-selection');
              }
            } else if (percentage >= positionPercentages[0] && percentage <= positionPercentages[1]) {
              this._addClass(this.ticks[i], 'in-selection');
            }
            if (this.tickLabels[i]) {
              this.tickLabels[i].style[styleSize] = labelSize + 'px';
              if (this.options.ticks_positions[i] !== undefined) {
                this.tickLabels[i].style.position = 'absolute';
                this.tickLabels[i].style[this.stylePos] = this.options.ticks_positions[i] + '%';
                this.tickLabels[i].style[styleMargin] = -labelSize / 2 + 'px';
              }
            }
          }
        }
        if (this.options.orientation === 'vertical') {
          this.trackLow.style.top = '0';
          this.trackLow.style.height = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
          this.trackSelection.style.top = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
          this.trackSelection.style.height = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
          this.trackHigh.style.bottom = '0';
          this.trackHigh.style.height = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
        } else {
          this.trackLow.style.left = '0';
          this.trackLow.style.width = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
          this.trackSelection.style.left = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
          this.trackSelection.style.width = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
          this.trackHigh.style.right = '0';
          this.trackHigh.style.width = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
          var offset_min = this.tooltip_min.getBoundingClientRect();
          var offset_max = this.tooltip_max.getBoundingClientRect();
          if (offset_min.right > offset_max.left) {
            this._removeClass(this.tooltip_max, 'top');
            this._addClass(this.tooltip_max, 'bottom');
            this.tooltip_max.style.top = 18 + 'px';
          } else {
            this._removeClass(this.tooltip_max, 'bottom');
            this._addClass(this.tooltip_max, 'top');
            this.tooltip_max.style.top = this.tooltip_min.style.top;
          }
        }
        var formattedTooltipVal;
        if (this.options.range) {
          formattedTooltipVal = this.options.formatter(this.options.value);
          this._setText(this.tooltipInner, formattedTooltipVal);
          this.tooltip.style[this.stylePos] = (positionPercentages[1] + positionPercentages[0]) / 2 + '%';
          if (this.options.orientation === 'vertical') {
            this._css(this.tooltip, 'margin-top', -this.tooltip.offsetHeight / 2 + 'px');
          } else {
            this._css(this.tooltip, 'margin-left', -this.tooltip.offsetWidth / 2 + 'px');
          }
          if (this.options.orientation === 'vertical') {
            this._css(this.tooltip, 'margin-top', -this.tooltip.offsetHeight / 2 + 'px');
          } else {
            this._css(this.tooltip, 'margin-left', -this.tooltip.offsetWidth / 2 + 'px');
          }
          var innerTooltipMinText = this.options.formatter(this.options.value[0]);
          this._setText(this.tooltipInner_min, innerTooltipMinText);
          var innerTooltipMaxText = this.options.formatter(this.options.value[1]);
          this._setText(this.tooltipInner_max, innerTooltipMaxText);
          this.tooltip_min.style[this.stylePos] = positionPercentages[0] + '%';
          if (this.options.orientation === 'vertical') {
            this._css(this.tooltip_min, 'margin-top', -this.tooltip_min.offsetHeight / 2 + 'px');
          } else {
            this._css(this.tooltip_min, 'margin-left', -this.tooltip_min.offsetWidth / 2 + 'px');
          }
          this.tooltip_max.style[this.stylePos] = positionPercentages[1] + '%';
          if (this.options.orientation === 'vertical') {
            this._css(this.tooltip_max, 'margin-top', -this.tooltip_max.offsetHeight / 2 + 'px');
          } else {
            this._css(this.tooltip_max, 'margin-left', -this.tooltip_max.offsetWidth / 2 + 'px');
          }
        } else {
          formattedTooltipVal = this.options.formatter(this.options.value[0]);
          this._setText(this.tooltipInner, formattedTooltipVal);
          this.tooltip.style[this.stylePos] = positionPercentages[0] + '%';
          if (this.options.orientation === 'vertical') {
            this._css(this.tooltip, 'margin-top', -this.tooltip.offsetHeight / 2 + 'px');
          } else {
            this._css(this.tooltip, 'margin-left', -this.tooltip.offsetWidth / 2 + 'px');
          }
        }
      },
      _removeProperty: function (element, prop) {
        if (element.style.removeProperty) {
          element.style.removeProperty(prop);
        } else {
          element.style.removeAttribute(prop);
        }
      },
      _mousedown: function (ev) {
        if (!this.options.enabled) {
          return false;
        }
        this.offset = this._offset(this.sliderElem);
        this.size = this.sliderElem[this.sizePos];
        var percentage = this._getPercentage(ev);
        if (this.options.range) {
          var diff1 = Math.abs(this.percentage[0] - percentage);
          var diff2 = Math.abs(this.percentage[1] - percentage);
          this.dragged = diff1 < diff2 ? 0 : 1;
        } else {
          this.dragged = 0;
        }
        this.percentage[this.dragged] = this.options.reversed ? 100 - percentage : percentage;
        this._layout();
        if (this.touchCapable) {
          document.removeEventListener('touchmove', this.mousemove, false);
          document.removeEventListener('touchend', this.mouseup, false);
        }
        if (this.mousemove) {
          document.removeEventListener('mousemove', this.mousemove, false);
        }
        if (this.mouseup) {
          document.removeEventListener('mouseup', this.mouseup, false);
        }
        this.mousemove = this._mousemove.bind(this);
        this.mouseup = this._mouseup.bind(this);
        if (this.touchCapable) {
          // Touch: Bind touch events:
          document.addEventListener('touchmove', this.mousemove, false);
          document.addEventListener('touchend', this.mouseup, false);
        }
        // Bind mouse events:
        document.addEventListener('mousemove', this.mousemove, false);
        document.addEventListener('mouseup', this.mouseup, false);
        this.inDrag = true;
        var newValue = this._calculateValue();
        this._trigger('slideStart', newValue);
        this._setDataVal(newValue);
        this.setValue(newValue, false, true);
        this._pauseEvent(ev);
        if (this.options.focus) {
          this._triggerFocusOnHandle(this.dragged);
        }
        return true;
      },
      _triggerFocusOnHandle: function (handleIdx) {
        if (handleIdx === 0) {
          this.handle1.focus();
        }
        if (handleIdx === 1) {
          this.handle2.focus();
        }
      },
      _keydown: function (handleIdx, ev) {
        if (!this.options.enabled) {
          return false;
        }
        var dir;
        switch (ev.keyCode) {
        case 37:
        // left
        case 40:
          // down
          dir = -1;
          break;
        case 39:
        // right
        case 38:
          // up
          dir = 1;
          break;
        }
        if (!dir) {
          return;
        }
        // use natural arrow keys instead of from min to max
        if (this.options.natural_arrow_keys) {
          var ifVerticalAndNotReversed = this.options.orientation === 'vertical' && !this.options.reversed;
          var ifHorizontalAndReversed = this.options.orientation === 'horizontal' && this.options.reversed;
          if (ifVerticalAndNotReversed || ifHorizontalAndReversed) {
            dir = -dir;
          }
        }
        var val = this.options.value[handleIdx] + dir * this.options.step;
        if (this.options.range) {
          val = [
            !handleIdx ? val : this.options.value[0],
            handleIdx ? val : this.options.value[1]
          ];
        }
        this._trigger('slideStart', val);
        this._setDataVal(val);
        this.setValue(val, true, true);
        this._trigger('slideStop', val);
        this._setDataVal(val);
        this._layout();
        this._pauseEvent(ev);
        return false;
      },
      _pauseEvent: function (ev) {
        if (ev.stopPropagation) {
          ev.stopPropagation();
        }
        if (ev.preventDefault) {
          ev.preventDefault();
        }
        ev.cancelBubble = true;
        ev.returnValue = false;
      },
      _mousemove: function (ev) {
        if (!this.options.enabled) {
          return false;
        }
        var percentage = this._getPercentage(ev);
        this._adjustPercentageForRangeSliders(percentage);
        this.percentage[this.dragged] = this.options.reversed ? 100 - percentage : percentage;
        this._layout();
        var val = this._calculateValue(true);
        this.setValue(val, true, true);
        return false;
      },
      _adjustPercentageForRangeSliders: function (percentage) {
        if (this.options.range) {
          if (this.dragged === 0 && this.percentage[1] < percentage) {
            this.percentage[0] = this.percentage[1];
            this.dragged = 1;
          } else if (this.dragged === 1 && this.percentage[0] > percentage) {
            this.percentage[1] = this.percentage[0];
            this.dragged = 0;
          }
        }
      },
      _mouseup: function () {
        if (!this.options.enabled) {
          return false;
        }
        if (this.touchCapable) {
          // Touch: Unbind touch event handlers:
          document.removeEventListener('touchmove', this.mousemove, false);
          document.removeEventListener('touchend', this.mouseup, false);
        }
        // Unbind mouse event handlers:
        document.removeEventListener('mousemove', this.mousemove, false);
        document.removeEventListener('mouseup', this.mouseup, false);
        this.inDrag = false;
        if (this.over === false) {
          this._hideTooltip();
        }
        var val = this._calculateValue(true);
        this._layout();
        this._trigger('slideStop', val);
        this._setDataVal(val);
        return false;
      },
      _calculateValue: function (snapToClosestTick) {
        var val;
        if (this.options.range) {
          val = [
            this.options.min,
            this.options.max
          ];
          if (this.percentage[0] !== 0) {
            val[0] = this._toValue(this.percentage[0]);
            val[0] = this._applyPrecision(val[0]);
          }
          if (this.percentage[1] !== 100) {
            val[1] = this._toValue(this.percentage[1]);
            val[1] = this._applyPrecision(val[1]);
          }
        } else {
          val = this._toValue(this.percentage[0]);
          val = parseFloat(val);
          val = this._applyPrecision(val);
        }
        if (snapToClosestTick) {
          var min = [
              val,
              Infinity
            ];
          for (var i = 0; i < this.options.ticks.length; i++) {
            var diff = Math.abs(this.options.ticks[i] - val);
            if (diff <= min[1]) {
              min = [
                this.options.ticks[i],
                diff
              ];
            }
          }
          if (min[1] <= this.options.ticks_snap_bounds) {
            return min[0];
          }
        }
        return val;
      },
      _applyPrecision: function (val) {
        var precision = this.options.precision || this._getNumDigitsAfterDecimalPlace(this.options.step);
        return this._applyToFixedAndParseFloat(val, precision);
      },
      _getNumDigitsAfterDecimalPlace: function (num) {
        var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
        if (!match) {
          return 0;
        }
        return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
      },
      _applyToFixedAndParseFloat: function (num, toFixedInput) {
        var truncatedNum = num.toFixed(toFixedInput);
        return parseFloat(truncatedNum);
      },
      _getPercentage: function (ev) {
        if (this.touchCapable && (ev.type === 'touchstart' || ev.type === 'touchmove')) {
          ev = ev.touches[0];
        }
        var eventPosition = ev[this.mousePos];
        var sliderOffset = this.offset[this.stylePos];
        var distanceToSlide = eventPosition - sliderOffset;
        // Calculate what percent of the length the slider handle has slid
        var percentage = distanceToSlide / this.size * 100;
        percentage = Math.round(percentage / this.percentage[2]) * this.percentage[2];
        // Make sure the percent is within the bounds of the slider.
        // 0% corresponds to the 'min' value of the slide
        // 100% corresponds to the 'max' value of the slide
        return Math.max(0, Math.min(100, percentage));
      },
      _validateInputValue: function (val) {
        if (typeof val === 'number') {
          return val;
        } else if (Array.isArray(val)) {
          this._validateArray(val);
          return val;
        } else {
          throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(val));
        }
      },
      _validateArray: function (val) {
        for (var i = 0; i < val.length; i++) {
          var input = val[i];
          if (typeof input !== 'number') {
            throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(input));
          }
        }
      },
      _setDataVal: function (val) {
        var value = 'value: \'' + val + '\'';
        this.element.setAttribute('data', value);
        this.element.setAttribute('value', val);
        this.element.value = val;
      },
      _trigger: function (evt, val) {
        val = val || val === 0 ? val : undefined;
        var callbackFnArray = this.eventToCallbackMap[evt];
        if (callbackFnArray && callbackFnArray.length) {
          for (var i = 0; i < callbackFnArray.length; i++) {
            var callbackFn = callbackFnArray[i];
            callbackFn(val);
          }
        }
        /* If JQuery exists, trigger JQuery events */
        if ($) {
          this._triggerJQueryEvent(evt, val);
        }
      },
      _triggerJQueryEvent: function (evt, val) {
        var eventData = {
            type: evt,
            value: val
          };
        this.$element.trigger(eventData);
        this.$sliderElem.trigger(eventData);
      },
      _unbindJQueryEventHandlers: function () {
        this.$element.off();
        this.$sliderElem.off();
      },
      _setText: function (element, text) {
        if (typeof element.innerText !== 'undefined') {
          element.innerText = text;
        } else if (typeof element.textContent !== 'undefined') {
          element.textContent = text;
        }
      },
      _removeClass: function (element, classString) {
        var classes = classString.split(' ');
        var newClasses = element.className;
        for (var i = 0; i < classes.length; i++) {
          var classTag = classes[i];
          var regex = new RegExp('(?:\\s|^)' + classTag + '(?:\\s|$)');
          newClasses = newClasses.replace(regex, ' ');
        }
        element.className = newClasses.trim();
      },
      _addClass: function (element, classString) {
        var classes = classString.split(' ');
        var newClasses = element.className;
        for (var i = 0; i < classes.length; i++) {
          var classTag = classes[i];
          var regex = new RegExp('(?:\\s|^)' + classTag + '(?:\\s|$)');
          var ifClassExists = regex.test(newClasses);
          if (!ifClassExists) {
            newClasses += ' ' + classTag;
          }
        }
        element.className = newClasses.trim();
      },
      _offsetLeft: function (obj) {
        var offsetLeft = obj.offsetLeft;
        while ((obj = obj.offsetParent) && !isNaN(obj.offsetLeft)) {
          offsetLeft += obj.offsetLeft;
        }
        return offsetLeft;
      },
      _offsetTop: function (obj) {
        var offsetTop = obj.offsetTop;
        while ((obj = obj.offsetParent) && !isNaN(obj.offsetTop)) {
          offsetTop += obj.offsetTop;
        }
        return offsetTop;
      },
      _offset: function (obj) {
        return {
          left: this._offsetLeft(obj),
          top: this._offsetTop(obj)
        };
      },
      _css: function (elementRef, styleName, value) {
        if ($) {
          $.style(elementRef, styleName, value);
        } else {
          var style = styleName.replace(/^-ms-/, 'ms-').replace(/-([\da-z])/gi, function (all, letter) {
              return letter.toUpperCase();
            });
          elementRef.style[style] = value;
        }
      },
      _toValue: function (percentage) {
        return this.options.scale.toValue.apply(this, [percentage]);
      },
      _toPercentage: function (value) {
        return this.options.scale.toPercentage.apply(this, [value]);
      }
    };
    /*********************************

			Attach to global namespace

		*********************************/
    if ($) {
      var namespace = $.fn.slider ? 'bootstrapSlider' : 'slider';
      $.bridget(namespace, Slider);
    }
  }($));
  return Slider;
}));
/* jQuery rt Responsive Tables - v1.0.2 - 2014-07-07
* https://github.com/stazna01/jQuery-rt-Responsive-Tables
*
* This plugin is built heavily upon the work by Chris Coyier
* found at http://css-tricks.com/responsive-data-tables/
*
* Copyright (c) 2014 Nathan Stazewski; Licensed MIT */
(function ($) {
  $.fn.rtResponsiveTables = function (options) {
    // This is the easiest way to have default options.
    var settings = $.extend({ containerBreakPoint: 0 }, options);
    rtStartingOuterWidth = $(window).width();
    //used later to detect orientation change across all mobile browsers (other methods don't always work on Android)
    is_iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
    //needed due to the fact that iOS scrolling causes false resizes
    rt_responsive_table_object = this;
    function isEmpty(el) {
      return !$.trim(el.html());
    }
    function rt_write_css(rt_class_identifier) {
      rt_css_code = '<style type="text/css">';
      $(rt_class_identifier).find('th').each(function (index, element) {
        rt_css_code += rt_class_identifier + '.rt-vertical-table td:nth-of-type(' + (index + 1) + '):before { content: "' + $(this).text() + '"; }';
      });
      rt_css_code += '</style>';
      $(rt_css_code).appendTo('head');
    }
    function determine_table_width(rt_table_object) {
      //outerWidth doesn't work properly in Safari if the table is overflowing its container
      rt_table_width = 0;
      if (rt_table_object.hasClass('rt-vertical-table')) {
        rt_table_width = rt_table_object.outerWidth();
      } else {
        rt_table_object.find('th').each(function (index, element) {
          rt_table_width += $(this).outerWidth();
        });
        rt_table_width = rt_table_width;  //this seems to fix a rounding bug in firefox
      }
      return rt_table_width;
    }
    function fix_responsive_tables() {
      if ($('table.rt-responsive-table').length) {
        $('table.rt-responsive-table').each(function (index) {
          rt_containers_width = $(this).parent().width();
          rt_current_width = determine_table_width($(this)) - 1;
          //this "-1" seems to fix an issue in firefox without harming any other browsers
          rt_max_width = $(this).attr('data-rt-max-width');
          rt_has_class_rt_vertical_table = $(this).hasClass('rt-vertical-table');
          if ($(this).attr('data-rtContainerBreakPoint')) {
            rt_user_defined_container_breakpoint = $(this).attr('data-rtContainerBreakPoint');
          } else {
            rt_user_defined_container_breakpoint = settings.containerBreakPoint;
          }
          if (rt_containers_width < rt_current_width || rt_containers_width <= rt_user_defined_container_breakpoint) {
            //the parent element is less than the current width of the table or the parent element is less than or equal to a user supplied breakpoint
            $(this).addClass('rt-vertical-table');
            //switch to vertical orientation (or at least keep it that orientation)
            if (rt_max_width > rt_current_width && rt_max_width > rt_user_defined_container_breakpoint) {
              //the max width was set too high and needs to be adjusted to this lower number
              $(this).attr('data-rt-max-width', rt_current_width);
            } else if (rt_max_width > rt_current_width && rt_max_width <= rt_user_defined_container_breakpoint) {
              //same as above but in this case the breakpoint is larger or equal so it needs to be set as the max width
              $(this).attr('data-rt-max-width', rt_user_defined_container_breakpoint);
            }
          } else if (rt_containers_width > rt_max_width && rt_containers_width > rt_user_defined_container_breakpoint) {
            //the parent element is bigger than the max width and user supplied breakpoint
            $(this).removeClass('rt-vertical-table');
            //switch to horizontal orientation (or at least keep it that orientation)
            if (rt_max_width > rt_current_width && !rt_has_class_rt_vertical_table && (rt_max_width > rt_user_defined_container_breakpoint && !rt_has_class_rt_vertical_table)) {
              //max width is greater than the table's current width and it's in horizontal mode currently...so the max width was set to low and needs to be adjusted to a higher number
              $(this).attr('data-rt-max-width', rt_current_width);
            } else if (rt_max_width > rt_current_width && !rt_has_class_rt_vertical_table && (rt_max_width <= rt_user_defined_container_breakpoint && !rt_has_class_rt_vertical_table)) {
              //same as above but in this case the user supplied breakpoint is larger or equal so it needs to be set as the max width
              $(this).attr('data-rt-max-width', rt_user_defined_container_breakpoint);
            }
          } else {
          }
        });
      }
    }
    rt_responsive_table_object.each(function (index, element) {
      $(this).addClass('rt-responsive-table-' + index).addClass('rt-responsive-table');
      if (index == rt_responsive_table_object.length - 1) {
        $(window).resize(function () {
          if (!is_iOS || is_iOS && rtStartingOuterWidth !== $(window).width()) {
            rtStartingOuterWidth = $(window).width();
            //MUST update the starting width so future orientation changes will be noticed
            fix_responsive_tables();
          }
        });
        rt_responsive_table_count = $('table.rt-responsive-table').length;
        $('table.rt-responsive-table').each(function (index2, element2) {
          rt_write_css('table.rt-responsive-table-' + index2);
          $('table.rt-responsive-table-' + index2).attr('data-rt-max-width', determine_table_width($(this)));
          $(this).find('td,th').each(function (index3, element3) {
            //empty td tags made them disappear
            if (isEmpty($(this))) {
              $(this).html('&#160;');
            }
          });
          if (rt_responsive_table_count - 1 == index2) {
            fix_responsive_tables();
          }
        });
      }
    });
    return this;
  };
}(jQuery));
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function (a, b) {
  'object' == typeof exports && 'undefined' != typeof module ? module.exports = b() : 'function' == typeof define && define.amd ? define(b) : a.moment = b();
}(this, function () {
  'use strict';
  function a() {
    return Hc.apply(null, arguments);
  }
  function b(a) {
    Hc = a;
  }
  function c(a) {
    return '[object Array]' === Object.prototype.toString.call(a);
  }
  function d(a) {
    return a instanceof Date || '[object Date]' === Object.prototype.toString.call(a);
  }
  function e(a, b) {
    var c, d = [];
    for (c = 0; c < a.length; ++c)
      d.push(b(a[c], c));
    return d;
  }
  function f(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  function g(a, b) {
    for (var c in b)
      f(b, c) && (a[c] = b[c]);
    return f(b, 'toString') && (a.toString = b.toString), f(b, 'valueOf') && (a.valueOf = b.valueOf), a;
  }
  function h(a, b, c, d) {
    return Ca(a, b, c, d, !0).utc();
  }
  function i() {
    return {
      empty: !1,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: !1,
      invalidMonth: null,
      invalidFormat: !1,
      userInvalidated: !1,
      iso: !1
    };
  }
  function j(a) {
    return null == a._pf && (a._pf = i()), a._pf;
  }
  function k(a) {
    if (null == a._isValid) {
      var b = j(a);
      a._isValid = !(isNaN(a._d.getTime()) || !(b.overflow < 0) || b.empty || b.invalidMonth || b.invalidWeekday || b.nullInput || b.invalidFormat || b.userInvalidated), a._strict && (a._isValid = a._isValid && 0 === b.charsLeftOver && 0 === b.unusedTokens.length && void 0 === b.bigHour);
    }
    return a._isValid;
  }
  function l(a) {
    var b = h(NaN);
    return null != a ? g(j(b), a) : j(b).userInvalidated = !0, b;
  }
  function m(a, b) {
    var c, d, e;
    if ('undefined' != typeof b._isAMomentObject && (a._isAMomentObject = b._isAMomentObject), 'undefined' != typeof b._i && (a._i = b._i), 'undefined' != typeof b._f && (a._f = b._f), 'undefined' != typeof b._l && (a._l = b._l), 'undefined' != typeof b._strict && (a._strict = b._strict), 'undefined' != typeof b._tzm && (a._tzm = b._tzm), 'undefined' != typeof b._isUTC && (a._isUTC = b._isUTC), 'undefined' != typeof b._offset && (a._offset = b._offset), 'undefined' != typeof b._pf && (a._pf = j(b)), 'undefined' != typeof b._locale && (a._locale = b._locale), Jc.length > 0)
      for (c in Jc)
        d = Jc[c], e = b[d], 'undefined' != typeof e && (a[d] = e);
    return a;
  }
  function n(b) {
    m(this, b), this._d = new Date(null != b._d ? b._d.getTime() : NaN), Kc === !1 && (Kc = !0, a.updateOffset(this), Kc = !1);
  }
  function o(a) {
    return a instanceof n || null != a && null != a._isAMomentObject;
  }
  function p(a) {
    return 0 > a ? Math.ceil(a) : Math.floor(a);
  }
  function q(a) {
    var b = +a, c = 0;
    return 0 !== b && isFinite(b) && (c = p(b)), c;
  }
  function r(a, b, c) {
    var d, e = Math.min(a.length, b.length), f = Math.abs(a.length - b.length), g = 0;
    for (d = 0; e > d; d++)
      (c && a[d] !== b[d] || !c && q(a[d]) !== q(b[d])) && g++;
    return g + f;
  }
  function s() {
  }
  function t(a) {
    return a ? a.toLowerCase().replace('_', '-') : a;
  }
  function u(a) {
    for (var b, c, d, e, f = 0; f < a.length;) {
      for (e = t(a[f]).split('-'), b = e.length, c = t(a[f + 1]), c = c ? c.split('-') : null; b > 0;) {
        if (d = v(e.slice(0, b).join('-')))
          return d;
        if (c && c.length >= b && r(e, c, !0) >= b - 1)
          break;
        b--;
      }
      f++;
    }
    return null;
  }
  function v(a) {
    var b = null;
    if (!Lc[a] && 'undefined' != typeof module && module && module.exports)
      try {
        b = Ic._abbr, require('./locale/' + a), w(b);
      } catch (c) {
      }
    return Lc[a];
  }
  function w(a, b) {
    var c;
    return a && (c = 'undefined' == typeof b ? y(a) : x(a, b), c && (Ic = c)), Ic._abbr;
  }
  function x(a, b) {
    return null !== b ? (b.abbr = a, Lc[a] = Lc[a] || new s(), Lc[a].set(b), w(a), Lc[a]) : (delete Lc[a], null);
  }
  function y(a) {
    var b;
    if (a && a._locale && a._locale._abbr && (a = a._locale._abbr), !a)
      return Ic;
    if (!c(a)) {
      if (b = v(a))
        return b;
      a = [a];
    }
    return u(a);
  }
  function z(a, b) {
    var c = a.toLowerCase();
    Mc[c] = Mc[c + 's'] = Mc[b] = a;
  }
  function A(a) {
    return 'string' == typeof a ? Mc[a] || Mc[a.toLowerCase()] : void 0;
  }
  function B(a) {
    var b, c, d = {};
    for (c in a)
      f(a, c) && (b = A(c), b && (d[b] = a[c]));
    return d;
  }
  function C(b, c) {
    return function (d) {
      return null != d ? (E(this, b, d), a.updateOffset(this, c), this) : D(this, b);
    };
  }
  function D(a, b) {
    return a._d['get' + (a._isUTC ? 'UTC' : '') + b]();
  }
  function E(a, b, c) {
    return a._d['set' + (a._isUTC ? 'UTC' : '') + b](c);
  }
  function F(a, b) {
    var c;
    if ('object' == typeof a)
      for (c in a)
        this.set(c, a[c]);
    else if (a = A(a), 'function' == typeof this[a])
      return this[a](b);
    return this;
  }
  function G(a, b, c) {
    var d = '' + Math.abs(a), e = b - d.length, f = a >= 0;
    return (f ? c ? '+' : '' : '-') + Math.pow(10, Math.max(0, e)).toString().substr(1) + d;
  }
  function H(a, b, c, d) {
    var e = d;
    'string' == typeof d && (e = function () {
      return this[d]();
    }), a && (Qc[a] = e), b && (Qc[b[0]] = function () {
      return G(e.apply(this, arguments), b[1], b[2]);
    }), c && (Qc[c] = function () {
      return this.localeData().ordinal(e.apply(this, arguments), a);
    });
  }
  function I(a) {
    return a.match(/\[[\s\S]/) ? a.replace(/^\[|\]$/g, '') : a.replace(/\\/g, '');
  }
  function J(a) {
    var b, c, d = a.match(Nc);
    for (b = 0, c = d.length; c > b; b++)
      Qc[d[b]] ? d[b] = Qc[d[b]] : d[b] = I(d[b]);
    return function (e) {
      var f = '';
      for (b = 0; c > b; b++)
        f += d[b] instanceof Function ? d[b].call(e, a) : d[b];
      return f;
    };
  }
  function K(a, b) {
    return a.isValid() ? (b = L(b, a.localeData()), Pc[b] = Pc[b] || J(b), Pc[b](a)) : a.localeData().invalidDate();
  }
  function L(a, b) {
    function c(a) {
      return b.longDateFormat(a) || a;
    }
    var d = 5;
    for (Oc.lastIndex = 0; d >= 0 && Oc.test(a);)
      a = a.replace(Oc, c), Oc.lastIndex = 0, d -= 1;
    return a;
  }
  function M(a) {
    return 'function' == typeof a && '[object Function]' === Object.prototype.toString.call(a);
  }
  function N(a, b, c) {
    dd[a] = M(b) ? b : function (a) {
      return a && c ? c : b;
    };
  }
  function O(a, b) {
    return f(dd, a) ? dd[a](b._strict, b._locale) : new RegExp(P(a));
  }
  function P(a) {
    return a.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (a, b, c, d, e) {
      return b || c || d || e;
    }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  function Q(a, b) {
    var c, d = b;
    for ('string' == typeof a && (a = [a]), 'number' == typeof b && (d = function (a, c) {
        c[b] = q(a);
      }), c = 0; c < a.length; c++)
      ed[a[c]] = d;
  }
  function R(a, b) {
    Q(a, function (a, c, d, e) {
      d._w = d._w || {}, b(a, d._w, d, e);
    });
  }
  function S(a, b, c) {
    null != b && f(ed, a) && ed[a](b, c._a, c, a);
  }
  function T(a, b) {
    return new Date(Date.UTC(a, b + 1, 0)).getUTCDate();
  }
  function U(a) {
    return this._months[a.month()];
  }
  function V(a) {
    return this._monthsShort[a.month()];
  }
  function W(a, b, c) {
    var d, e, f;
    for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), d = 0; 12 > d; d++) {
      if (e = h([
          2000,
          d
        ]), c && !this._longMonthsParse[d] && (this._longMonthsParse[d] = new RegExp('^' + this.months(e, '').replace('.', '') + '$', 'i'), this._shortMonthsParse[d] = new RegExp('^' + this.monthsShort(e, '').replace('.', '') + '$', 'i')), c || this._monthsParse[d] || (f = '^' + this.months(e, '') + '|^' + this.monthsShort(e, ''), this._monthsParse[d] = new RegExp(f.replace('.', ''), 'i')), c && 'MMMM' === b && this._longMonthsParse[d].test(a))
        return d;
      if (c && 'MMM' === b && this._shortMonthsParse[d].test(a))
        return d;
      if (!c && this._monthsParse[d].test(a))
        return d;
    }
  }
  function X(a, b) {
    var c;
    return 'string' == typeof b && (b = a.localeData().monthsParse(b), 'number' != typeof b) ? a : (c = Math.min(a.date(), T(a.year(), b)), a._d['set' + (a._isUTC ? 'UTC' : '') + 'Month'](b, c), a);
  }
  function Y(b) {
    return null != b ? (X(this, b), a.updateOffset(this, !0), this) : D(this, 'Month');
  }
  function Z() {
    return T(this.year(), this.month());
  }
  function $(a) {
    var b, c = a._a;
    return c && -2 === j(a).overflow && (b = c[gd] < 0 || c[gd] > 11 ? gd : c[hd] < 1 || c[hd] > T(c[fd], c[gd]) ? hd : c[id] < 0 || c[id] > 24 || 24 === c[id] && (0 !== c[jd] || 0 !== c[kd] || 0 !== c[ld]) ? id : c[jd] < 0 || c[jd] > 59 ? jd : c[kd] < 0 || c[kd] > 59 ? kd : c[ld] < 0 || c[ld] > 999 ? ld : -1, j(a)._overflowDayOfYear && (fd > b || b > hd) && (b = hd), j(a).overflow = b), a;
  }
  function _(b) {
    a.suppressDeprecationWarnings === !1 && 'undefined' != typeof console && console.warn && console.warn('Deprecation warning: ' + b);
  }
  function aa(a, b) {
    var c = !0;
    return g(function () {
      return c && (_(a + '\n' + new Error().stack), c = !1), b.apply(this, arguments);
    }, b);
  }
  function ba(a, b) {
    od[a] || (_(b), od[a] = !0);
  }
  function ca(a) {
    var b, c, d = a._i, e = pd.exec(d);
    if (e) {
      for (j(a).iso = !0, b = 0, c = qd.length; c > b; b++)
        if (qd[b][1].exec(d)) {
          a._f = qd[b][0];
          break;
        }
      for (b = 0, c = rd.length; c > b; b++)
        if (rd[b][1].exec(d)) {
          a._f += (e[6] || ' ') + rd[b][0];
          break;
        }
      d.match(ad) && (a._f += 'Z'), va(a);
    } else
      a._isValid = !1;
  }
  function da(b) {
    var c = sd.exec(b._i);
    return null !== c ? void (b._d = new Date(+c[1])) : (ca(b), void (b._isValid === !1 && (delete b._isValid, a.createFromInputFallback(b))));
  }
  function ea(a, b, c, d, e, f, g) {
    var h = new Date(a, b, c, d, e, f, g);
    return 1970 > a && h.setFullYear(a), h;
  }
  function fa(a) {
    var b = new Date(Date.UTC.apply(null, arguments));
    return 1970 > a && b.setUTCFullYear(a), b;
  }
  function ga(a) {
    return ha(a) ? 366 : 365;
  }
  function ha(a) {
    return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0;
  }
  function ia() {
    return ha(this.year());
  }
  function ja(a, b, c) {
    var d, e = c - b, f = c - a.day();
    return f > e && (f -= 7), e - 7 > f && (f += 7), d = Da(a).add(f, 'd'), {
      week: Math.ceil(d.dayOfYear() / 7),
      year: d.year()
    };
  }
  function ka(a) {
    return ja(a, this._week.dow, this._week.doy).week;
  }
  function la() {
    return this._week.dow;
  }
  function ma() {
    return this._week.doy;
  }
  function na(a) {
    var b = this.localeData().week(this);
    return null == a ? b : this.add(7 * (a - b), 'd');
  }
  function oa(a) {
    var b = ja(this, 1, 4).week;
    return null == a ? b : this.add(7 * (a - b), 'd');
  }
  function pa(a, b, c, d, e) {
    var f, g = 6 + e - d, h = fa(a, 0, 1 + g), i = h.getUTCDay();
    return e > i && (i += 7), c = null != c ? 1 * c : e, f = 1 + g + 7 * (b - 1) - i + c, {
      year: f > 0 ? a : a - 1,
      dayOfYear: f > 0 ? f : ga(a - 1) + f
    };
  }
  function qa(a) {
    var b = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
    return null == a ? b : this.add(a - b, 'd');
  }
  function ra(a, b, c) {
    return null != a ? a : null != b ? b : c;
  }
  function sa(a) {
    var b = new Date();
    return a._useUTC ? [
      b.getUTCFullYear(),
      b.getUTCMonth(),
      b.getUTCDate()
    ] : [
      b.getFullYear(),
      b.getMonth(),
      b.getDate()
    ];
  }
  function ta(a) {
    var b, c, d, e, f = [];
    if (!a._d) {
      for (d = sa(a), a._w && null == a._a[hd] && null == a._a[gd] && ua(a), a._dayOfYear && (e = ra(a._a[fd], d[fd]), a._dayOfYear > ga(e) && (j(a)._overflowDayOfYear = !0), c = fa(e, 0, a._dayOfYear), a._a[gd] = c.getUTCMonth(), a._a[hd] = c.getUTCDate()), b = 0; 3 > b && null == a._a[b]; ++b)
        a._a[b] = f[b] = d[b];
      for (; 7 > b; b++)
        a._a[b] = f[b] = null == a._a[b] ? 2 === b ? 1 : 0 : a._a[b];
      24 === a._a[id] && 0 === a._a[jd] && 0 === a._a[kd] && 0 === a._a[ld] && (a._nextDay = !0, a._a[id] = 0), a._d = (a._useUTC ? fa : ea).apply(null, f), null != a._tzm && a._d.setUTCMinutes(a._d.getUTCMinutes() - a._tzm), a._nextDay && (a._a[id] = 24);
    }
  }
  function ua(a) {
    var b, c, d, e, f, g, h;
    b = a._w, null != b.GG || null != b.W || null != b.E ? (f = 1, g = 4, c = ra(b.GG, a._a[fd], ja(Da(), 1, 4).year), d = ra(b.W, 1), e = ra(b.E, 1)) : (f = a._locale._week.dow, g = a._locale._week.doy, c = ra(b.gg, a._a[fd], ja(Da(), f, g).year), d = ra(b.w, 1), null != b.d ? (e = b.d, f > e && ++d) : e = null != b.e ? b.e + f : f), h = pa(c, d, e, g, f), a._a[fd] = h.year, a._dayOfYear = h.dayOfYear;
  }
  function va(b) {
    if (b._f === a.ISO_8601)
      return void ca(b);
    b._a = [], j(b).empty = !0;
    var c, d, e, f, g, h = '' + b._i, i = h.length, k = 0;
    for (e = L(b._f, b._locale).match(Nc) || [], c = 0; c < e.length; c++)
      f = e[c], d = (h.match(O(f, b)) || [])[0], d && (g = h.substr(0, h.indexOf(d)), g.length > 0 && j(b).unusedInput.push(g), h = h.slice(h.indexOf(d) + d.length), k += d.length), Qc[f] ? (d ? j(b).empty = !1 : j(b).unusedTokens.push(f), S(f, d, b)) : b._strict && !d && j(b).unusedTokens.push(f);
    j(b).charsLeftOver = i - k, h.length > 0 && j(b).unusedInput.push(h), j(b).bigHour === !0 && b._a[id] <= 12 && b._a[id] > 0 && (j(b).bigHour = void 0), b._a[id] = wa(b._locale, b._a[id], b._meridiem), ta(b), $(b);
  }
  function wa(a, b, c) {
    var d;
    return null == c ? b : null != a.meridiemHour ? a.meridiemHour(b, c) : null != a.isPM ? (d = a.isPM(c), d && 12 > b && (b += 12), d || 12 !== b || (b = 0), b) : b;
  }
  function xa(a) {
    var b, c, d, e, f;
    if (0 === a._f.length)
      return j(a).invalidFormat = !0, void (a._d = new Date(NaN));
    for (e = 0; e < a._f.length; e++)
      f = 0, b = m({}, a), null != a._useUTC && (b._useUTC = a._useUTC), b._f = a._f[e], va(b), k(b) && (f += j(b).charsLeftOver, f += 10 * j(b).unusedTokens.length, j(b).score = f, (null == d || d > f) && (d = f, c = b));
    g(a, c || b);
  }
  function ya(a) {
    if (!a._d) {
      var b = B(a._i);
      a._a = [
        b.year,
        b.month,
        b.day || b.date,
        b.hour,
        b.minute,
        b.second,
        b.millisecond
      ], ta(a);
    }
  }
  function za(a) {
    var b = new n($(Aa(a)));
    return b._nextDay && (b.add(1, 'd'), b._nextDay = void 0), b;
  }
  function Aa(a) {
    var b = a._i, e = a._f;
    return a._locale = a._locale || y(a._l), null === b || void 0 === e && '' === b ? l({ nullInput: !0 }) : ('string' == typeof b && (a._i = b = a._locale.preparse(b)), o(b) ? new n($(b)) : (c(e) ? xa(a) : e ? va(a) : d(b) ? a._d = b : Ba(a), a));
  }
  function Ba(b) {
    var f = b._i;
    void 0 === f ? b._d = new Date() : d(f) ? b._d = new Date(+f) : 'string' == typeof f ? da(b) : c(f) ? (b._a = e(f.slice(0), function (a) {
      return parseInt(a, 10);
    }), ta(b)) : 'object' == typeof f ? ya(b) : 'number' == typeof f ? b._d = new Date(f) : a.createFromInputFallback(b);
  }
  function Ca(a, b, c, d, e) {
    var f = {};
    return 'boolean' == typeof c && (d = c, c = void 0), f._isAMomentObject = !0, f._useUTC = f._isUTC = e, f._l = c, f._i = a, f._f = b, f._strict = d, za(f);
  }
  function Da(a, b, c, d) {
    return Ca(a, b, c, d, !1);
  }
  function Ea(a, b) {
    var d, e;
    if (1 === b.length && c(b[0]) && (b = b[0]), !b.length)
      return Da();
    for (d = b[0], e = 1; e < b.length; ++e)
      (!b[e].isValid() || b[e][a](d)) && (d = b[e]);
    return d;
  }
  function Fa() {
    var a = [].slice.call(arguments, 0);
    return Ea('isBefore', a);
  }
  function Ga() {
    var a = [].slice.call(arguments, 0);
    return Ea('isAfter', a);
  }
  function Ha(a) {
    var b = B(a), c = b.year || 0, d = b.quarter || 0, e = b.month || 0, f = b.week || 0, g = b.day || 0, h = b.hour || 0, i = b.minute || 0, j = b.second || 0, k = b.millisecond || 0;
    this._milliseconds = +k + 1000 * j + 60000 * i + 3600000 * h, this._days = +g + 7 * f, this._months = +e + 3 * d + 12 * c, this._data = {}, this._locale = y(), this._bubble();
  }
  function Ia(a) {
    return a instanceof Ha;
  }
  function Ja(a, b) {
    H(a, 0, 0, function () {
      var a = this.utcOffset(), c = '+';
      return 0 > a && (a = -a, c = '-'), c + G(~~(a / 60), 2) + b + G(~~a % 60, 2);
    });
  }
  function Ka(a) {
    var b = (a || '').match(ad) || [], c = b[b.length - 1] || [], d = (c + '').match(xd) || [
        '-',
        0,
        0
      ], e = +(60 * d[1]) + q(d[2]);
    return '+' === d[0] ? e : -e;
  }
  function La(b, c) {
    var e, f;
    return c._isUTC ? (e = c.clone(), f = (o(b) || d(b) ? +b : +Da(b)) - +e, e._d.setTime(+e._d + f), a.updateOffset(e, !1), e) : Da(b).local();
  }
  function Ma(a) {
    return 15 * -Math.round(a._d.getTimezoneOffset() / 15);
  }
  function Na(b, c) {
    var d, e = this._offset || 0;
    return null != b ? ('string' == typeof b && (b = Ka(b)), Math.abs(b) < 16 && (b = 60 * b), !this._isUTC && c && (d = Ma(this)), this._offset = b, this._isUTC = !0, null != d && this.add(d, 'm'), e !== b && (!c || this._changeInProgress ? bb(this, Ya(b - e, 'm'), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, a.updateOffset(this, !0), this._changeInProgress = null)), this) : this._isUTC ? e : Ma(this);
  }
  function Oa(a, b) {
    return null != a ? ('string' != typeof a && (a = -a), this.utcOffset(a, b), this) : -this.utcOffset();
  }
  function Pa(a) {
    return this.utcOffset(0, a);
  }
  function Qa(a) {
    return this._isUTC && (this.utcOffset(0, a), this._isUTC = !1, a && this.subtract(Ma(this), 'm')), this;
  }
  function Ra() {
    return this._tzm ? this.utcOffset(this._tzm) : 'string' == typeof this._i && this.utcOffset(Ka(this._i)), this;
  }
  function Sa(a) {
    return a = a ? Da(a).utcOffset() : 0, (this.utcOffset() - a) % 60 === 0;
  }
  function Ta() {
    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
  }
  function Ua() {
    if ('undefined' != typeof this._isDSTShifted)
      return this._isDSTShifted;
    var a = {};
    if (m(a, this), a = Aa(a), a._a) {
      var b = a._isUTC ? h(a._a) : Da(a._a);
      this._isDSTShifted = this.isValid() && r(a._a, b.toArray()) > 0;
    } else
      this._isDSTShifted = !1;
    return this._isDSTShifted;
  }
  function Va() {
    return !this._isUTC;
  }
  function Wa() {
    return this._isUTC;
  }
  function Xa() {
    return this._isUTC && 0 === this._offset;
  }
  function Ya(a, b) {
    var c, d, e, g = a, h = null;
    return Ia(a) ? g = {
      ms: a._milliseconds,
      d: a._days,
      M: a._months
    } : 'number' == typeof a ? (g = {}, b ? g[b] = a : g.milliseconds = a) : (h = yd.exec(a)) ? (c = '-' === h[1] ? -1 : 1, g = {
      y: 0,
      d: q(h[hd]) * c,
      h: q(h[id]) * c,
      m: q(h[jd]) * c,
      s: q(h[kd]) * c,
      ms: q(h[ld]) * c
    }) : (h = zd.exec(a)) ? (c = '-' === h[1] ? -1 : 1, g = {
      y: Za(h[2], c),
      M: Za(h[3], c),
      d: Za(h[4], c),
      h: Za(h[5], c),
      m: Za(h[6], c),
      s: Za(h[7], c),
      w: Za(h[8], c)
    }) : null == g ? g = {} : 'object' == typeof g && ('from' in g || 'to' in g) && (e = _a(Da(g.from), Da(g.to)), g = {}, g.ms = e.milliseconds, g.M = e.months), d = new Ha(g), Ia(a) && f(a, '_locale') && (d._locale = a._locale), d;
  }
  function Za(a, b) {
    var c = a && parseFloat(a.replace(',', '.'));
    return (isNaN(c) ? 0 : c) * b;
  }
  function $a(a, b) {
    var c = {
        milliseconds: 0,
        months: 0
      };
    return c.months = b.month() - a.month() + 12 * (b.year() - a.year()), a.clone().add(c.months, 'M').isAfter(b) && --c.months, c.milliseconds = +b - +a.clone().add(c.months, 'M'), c;
  }
  function _a(a, b) {
    var c;
    return b = La(b, a), a.isBefore(b) ? c = $a(a, b) : (c = $a(b, a), c.milliseconds = -c.milliseconds, c.months = -c.months), c;
  }
  function ab(a, b) {
    return function (c, d) {
      var e, f;
      return null === d || isNaN(+d) || (ba(b, 'moment().' + b + '(period, number) is deprecated. Please use moment().' + b + '(number, period).'), f = c, c = d, d = f), c = 'string' == typeof c ? +c : c, e = Ya(c, d), bb(this, e, a), this;
    };
  }
  function bb(b, c, d, e) {
    var f = c._milliseconds, g = c._days, h = c._months;
    e = null == e ? !0 : e, f && b._d.setTime(+b._d + f * d), g && E(b, 'Date', D(b, 'Date') + g * d), h && X(b, D(b, 'Month') + h * d), e && a.updateOffset(b, g || h);
  }
  function cb(a, b) {
    var c = a || Da(), d = La(c, this).startOf('day'), e = this.diff(d, 'days', !0), f = -6 > e ? 'sameElse' : -1 > e ? 'lastWeek' : 0 > e ? 'lastDay' : 1 > e ? 'sameDay' : 2 > e ? 'nextDay' : 7 > e ? 'nextWeek' : 'sameElse';
    return this.format(b && b[f] || this.localeData().calendar(f, this, Da(c)));
  }
  function db() {
    return new n(this);
  }
  function eb(a, b) {
    var c;
    return b = A('undefined' != typeof b ? b : 'millisecond'), 'millisecond' === b ? (a = o(a) ? a : Da(a), +this > +a) : (c = o(a) ? +a : +Da(a), c < +this.clone().startOf(b));
  }
  function fb(a, b) {
    var c;
    return b = A('undefined' != typeof b ? b : 'millisecond'), 'millisecond' === b ? (a = o(a) ? a : Da(a), +a > +this) : (c = o(a) ? +a : +Da(a), +this.clone().endOf(b) < c);
  }
  function gb(a, b, c) {
    return this.isAfter(a, c) && this.isBefore(b, c);
  }
  function hb(a, b) {
    var c;
    return b = A(b || 'millisecond'), 'millisecond' === b ? (a = o(a) ? a : Da(a), +this === +a) : (c = +Da(a), +this.clone().startOf(b) <= c && c <= +this.clone().endOf(b));
  }
  function ib(a, b, c) {
    var d, e, f = La(a, this), g = 60000 * (f.utcOffset() - this.utcOffset());
    return b = A(b), 'year' === b || 'month' === b || 'quarter' === b ? (e = jb(this, f), 'quarter' === b ? e /= 3 : 'year' === b && (e /= 12)) : (d = this - f, e = 'second' === b ? d / 1000 : 'minute' === b ? d / 60000 : 'hour' === b ? d / 3600000 : 'day' === b ? (d - g) / 86400000 : 'week' === b ? (d - g) / 604800000 : d), c ? e : p(e);
  }
  function jb(a, b) {
    var c, d, e = 12 * (b.year() - a.year()) + (b.month() - a.month()), f = a.clone().add(e, 'months');
    return 0 > b - f ? (c = a.clone().add(e - 1, 'months'), d = (b - f) / (f - c)) : (c = a.clone().add(e + 1, 'months'), d = (b - f) / (c - f)), -(e + d);
  }
  function kb() {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }
  function lb() {
    var a = this.clone().utc();
    return 0 < a.year() && a.year() <= 9999 ? 'function' == typeof Date.prototype.toISOString ? this.toDate().toISOString() : K(a, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]') : K(a, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
  }
  function mb(b) {
    var c = K(this, b || a.defaultFormat);
    return this.localeData().postformat(c);
  }
  function nb(a, b) {
    return this.isValid() ? Ya({
      to: this,
      from: a
    }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();
  }
  function ob(a) {
    return this.from(Da(), a);
  }
  function pb(a, b) {
    return this.isValid() ? Ya({
      from: this,
      to: a
    }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();
  }
  function qb(a) {
    return this.to(Da(), a);
  }
  function rb(a) {
    var b;
    return void 0 === a ? this._locale._abbr : (b = y(a), null != b && (this._locale = b), this);
  }
  function sb() {
    return this._locale;
  }
  function tb(a) {
    switch (a = A(a)) {
    case 'year':
      this.month(0);
    case 'quarter':
    case 'month':
      this.date(1);
    case 'week':
    case 'isoWeek':
    case 'day':
      this.hours(0);
    case 'hour':
      this.minutes(0);
    case 'minute':
      this.seconds(0);
    case 'second':
      this.milliseconds(0);
    }
    return 'week' === a && this.weekday(0), 'isoWeek' === a && this.isoWeekday(1), 'quarter' === a && this.month(3 * Math.floor(this.month() / 3)), this;
  }
  function ub(a) {
    return a = A(a), void 0 === a || 'millisecond' === a ? this : this.startOf(a).add(1, 'isoWeek' === a ? 'week' : a).subtract(1, 'ms');
  }
  function vb() {
    return +this._d - 60000 * (this._offset || 0);
  }
  function wb() {
    return Math.floor(+this / 1000);
  }
  function xb() {
    return this._offset ? new Date(+this) : this._d;
  }
  function yb() {
    var a = this;
    return [
      a.year(),
      a.month(),
      a.date(),
      a.hour(),
      a.minute(),
      a.second(),
      a.millisecond()
    ];
  }
  function zb() {
    var a = this;
    return {
      years: a.year(),
      months: a.month(),
      date: a.date(),
      hours: a.hours(),
      minutes: a.minutes(),
      seconds: a.seconds(),
      milliseconds: a.milliseconds()
    };
  }
  function Ab() {
    return k(this);
  }
  function Bb() {
    return g({}, j(this));
  }
  function Cb() {
    return j(this).overflow;
  }
  function Db(a, b) {
    H(0, [
      a,
      a.length
    ], 0, b);
  }
  function Eb(a, b, c) {
    return ja(Da([
      a,
      11,
      31 + b - c
    ]), b, c).week;
  }
  function Fb(a) {
    var b = ja(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
    return null == a ? b : this.add(a - b, 'y');
  }
  function Gb(a) {
    var b = ja(this, 1, 4).year;
    return null == a ? b : this.add(a - b, 'y');
  }
  function Hb() {
    return Eb(this.year(), 1, 4);
  }
  function Ib() {
    var a = this.localeData()._week;
    return Eb(this.year(), a.dow, a.doy);
  }
  function Jb(a) {
    return null == a ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a - 1) + this.month() % 3);
  }
  function Kb(a, b) {
    return 'string' != typeof a ? a : isNaN(a) ? (a = b.weekdaysParse(a), 'number' == typeof a ? a : null) : parseInt(a, 10);
  }
  function Lb(a) {
    return this._weekdays[a.day()];
  }
  function Mb(a) {
    return this._weekdaysShort[a.day()];
  }
  function Nb(a) {
    return this._weekdaysMin[a.day()];
  }
  function Ob(a) {
    var b, c, d;
    for (this._weekdaysParse = this._weekdaysParse || [], b = 0; 7 > b; b++)
      if (this._weekdaysParse[b] || (c = Da([
          2000,
          1
        ]).day(b), d = '^' + this.weekdays(c, '') + '|^' + this.weekdaysShort(c, '') + '|^' + this.weekdaysMin(c, ''), this._weekdaysParse[b] = new RegExp(d.replace('.', ''), 'i')), this._weekdaysParse[b].test(a))
        return b;
  }
  function Pb(a) {
    var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    return null != a ? (a = Kb(a, this.localeData()), this.add(a - b, 'd')) : b;
  }
  function Qb(a) {
    var b = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return null == a ? b : this.add(a - b, 'd');
  }
  function Rb(a) {
    return null == a ? this.day() || 7 : this.day(this.day() % 7 ? a : a - 7);
  }
  function Sb(a, b) {
    H(a, 0, 0, function () {
      return this.localeData().meridiem(this.hours(), this.minutes(), b);
    });
  }
  function Tb(a, b) {
    return b._meridiemParse;
  }
  function Ub(a) {
    return 'p' === (a + '').toLowerCase().charAt(0);
  }
  function Vb(a, b, c) {
    return a > 11 ? c ? 'pm' : 'PM' : c ? 'am' : 'AM';
  }
  function Wb(a, b) {
    b[ld] = q(1000 * ('0.' + a));
  }
  function Xb() {
    return this._isUTC ? 'UTC' : '';
  }
  function Yb() {
    return this._isUTC ? 'Coordinated Universal Time' : '';
  }
  function Zb(a) {
    return Da(1000 * a);
  }
  function $b() {
    return Da.apply(null, arguments).parseZone();
  }
  function _b(a, b, c) {
    var d = this._calendar[a];
    return 'function' == typeof d ? d.call(b, c) : d;
  }
  function ac(a) {
    var b = this._longDateFormat[a], c = this._longDateFormat[a.toUpperCase()];
    return b || !c ? b : (this._longDateFormat[a] = c.replace(/MMMM|MM|DD|dddd/g, function (a) {
      return a.slice(1);
    }), this._longDateFormat[a]);
  }
  function bc() {
    return this._invalidDate;
  }
  function cc(a) {
    return this._ordinal.replace('%d', a);
  }
  function dc(a) {
    return a;
  }
  function ec(a, b, c, d) {
    var e = this._relativeTime[c];
    return 'function' == typeof e ? e(a, b, c, d) : e.replace(/%d/i, a);
  }
  function fc(a, b) {
    var c = this._relativeTime[a > 0 ? 'future' : 'past'];
    return 'function' == typeof c ? c(b) : c.replace(/%s/i, b);
  }
  function gc(a) {
    var b, c;
    for (c in a)
      b = a[c], 'function' == typeof b ? this[c] = b : this['_' + c] = b;
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
  }
  function hc(a, b, c, d) {
    var e = y(), f = h().set(d, b);
    return e[c](f, a);
  }
  function ic(a, b, c, d, e) {
    if ('number' == typeof a && (b = a, a = void 0), a = a || '', null != b)
      return hc(a, b, c, e);
    var f, g = [];
    for (f = 0; d > f; f++)
      g[f] = hc(a, f, c, e);
    return g;
  }
  function jc(a, b) {
    return ic(a, b, 'months', 12, 'month');
  }
  function kc(a, b) {
    return ic(a, b, 'monthsShort', 12, 'month');
  }
  function lc(a, b) {
    return ic(a, b, 'weekdays', 7, 'day');
  }
  function mc(a, b) {
    return ic(a, b, 'weekdaysShort', 7, 'day');
  }
  function nc(a, b) {
    return ic(a, b, 'weekdaysMin', 7, 'day');
  }
  function oc() {
    var a = this._data;
    return this._milliseconds = Wd(this._milliseconds), this._days = Wd(this._days), this._months = Wd(this._months), a.milliseconds = Wd(a.milliseconds), a.seconds = Wd(a.seconds), a.minutes = Wd(a.minutes), a.hours = Wd(a.hours), a.months = Wd(a.months), a.years = Wd(a.years), this;
  }
  function pc(a, b, c, d) {
    var e = Ya(b, c);
    return a._milliseconds += d * e._milliseconds, a._days += d * e._days, a._months += d * e._months, a._bubble();
  }
  function qc(a, b) {
    return pc(this, a, b, 1);
  }
  function rc(a, b) {
    return pc(this, a, b, -1);
  }
  function sc(a) {
    return 0 > a ? Math.floor(a) : Math.ceil(a);
  }
  function tc() {
    var a, b, c, d, e, f = this._milliseconds, g = this._days, h = this._months, i = this._data;
    return f >= 0 && g >= 0 && h >= 0 || 0 >= f && 0 >= g && 0 >= h || (f += 86400000 * sc(vc(h) + g), g = 0, h = 0), i.milliseconds = f % 1000, a = p(f / 1000), i.seconds = a % 60, b = p(a / 60), i.minutes = b % 60, c = p(b / 60), i.hours = c % 24, g += p(c / 24), e = p(uc(g)), h += e, g -= sc(vc(e)), d = p(h / 12), h %= 12, i.days = g, i.months = h, i.years = d, this;
  }
  function uc(a) {
    return 4800 * a / 146097;
  }
  function vc(a) {
    return 146097 * a / 4800;
  }
  function wc(a) {
    var b, c, d = this._milliseconds;
    if (a = A(a), 'month' === a || 'year' === a)
      return b = this._days + d / 86400000, c = this._months + uc(b), 'month' === a ? c : c / 12;
    switch (b = this._days + Math.round(vc(this._months)), a) {
    case 'week':
      return b / 7 + d / 604800000;
    case 'day':
      return b + d / 86400000;
    case 'hour':
      return 24 * b + d / 3600000;
    case 'minute':
      return 1440 * b + d / 60000;
    case 'second':
      return 86400 * b + d / 1000;
    case 'millisecond':
      return Math.floor(86400000 * b) + d;
    default:
      throw new Error('Unknown unit ' + a);
    }
  }
  function xc() {
    return this._milliseconds + 86400000 * this._days + this._months % 12 * 2592000000 + 31536000000 * q(this._months / 12);
  }
  function yc(a) {
    return function () {
      return this.as(a);
    };
  }
  function zc(a) {
    return a = A(a), this[a + 's']();
  }
  function Ac(a) {
    return function () {
      return this._data[a];
    };
  }
  function Bc() {
    return p(this.days() / 7);
  }
  function Cc(a, b, c, d, e) {
    return e.relativeTime(b || 1, !!c, a, d);
  }
  function Dc(a, b, c) {
    var d = Ya(a).abs(), e = ke(d.as('s')), f = ke(d.as('m')), g = ke(d.as('h')), h = ke(d.as('d')), i = ke(d.as('M')), j = ke(d.as('y')), k = e < le.s && [
        's',
        e
      ] || 1 === f && ['m'] || f < le.m && [
        'mm',
        f
      ] || 1 === g && ['h'] || g < le.h && [
        'hh',
        g
      ] || 1 === h && ['d'] || h < le.d && [
        'dd',
        h
      ] || 1 === i && ['M'] || i < le.M && [
        'MM',
        i
      ] || 1 === j && ['y'] || [
        'yy',
        j
      ];
    return k[2] = b, k[3] = +a > 0, k[4] = c, Cc.apply(null, k);
  }
  function Ec(a, b) {
    return void 0 === le[a] ? !1 : void 0 === b ? le[a] : (le[a] = b, !0);
  }
  function Fc(a) {
    var b = this.localeData(), c = Dc(this, !a, b);
    return a && (c = b.pastFuture(+this, c)), b.postformat(c);
  }
  function Gc() {
    var a, b, c, d = me(this._milliseconds) / 1000, e = me(this._days), f = me(this._months);
    a = p(d / 60), b = p(a / 60), d %= 60, a %= 60, c = p(f / 12), f %= 12;
    var g = c, h = f, i = e, j = b, k = a, l = d, m = this.asSeconds();
    return m ? (0 > m ? '-' : '') + 'P' + (g ? g + 'Y' : '') + (h ? h + 'M' : '') + (i ? i + 'D' : '') + (j || k || l ? 'T' : '') + (j ? j + 'H' : '') + (k ? k + 'M' : '') + (l ? l + 'S' : '') : 'P0D';
  }
  var Hc, Ic, Jc = a.momentProperties = [], Kc = !1, Lc = {}, Mc = {}, Nc = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, Oc = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, Pc = {}, Qc = {}, Rc = /\d/, Sc = /\d\d/, Tc = /\d{3}/, Uc = /\d{4}/, Vc = /[+-]?\d{6}/, Wc = /\d\d?/, Xc = /\d{1,3}/, Yc = /\d{1,4}/, Zc = /[+-]?\d{1,6}/, $c = /\d+/, _c = /[+-]?\d+/, ad = /Z|[+-]\d\d:?\d\d/gi, bd = /[+-]?\d+(\.\d{1,3})?/, cd = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, dd = {}, ed = {}, fd = 0, gd = 1, hd = 2, id = 3, jd = 4, kd = 5, ld = 6;
  H('M', [
    'MM',
    2
  ], 'Mo', function () {
    return this.month() + 1;
  }), H('MMM', 0, 0, function (a) {
    return this.localeData().monthsShort(this, a);
  }), H('MMMM', 0, 0, function (a) {
    return this.localeData().months(this, a);
  }), z('month', 'M'), N('M', Wc), N('MM', Wc, Sc), N('MMM', cd), N('MMMM', cd), Q([
    'M',
    'MM'
  ], function (a, b) {
    b[gd] = q(a) - 1;
  }), Q([
    'MMM',
    'MMMM'
  ], function (a, b, c, d) {
    var e = c._locale.monthsParse(a, d, c._strict);
    null != e ? b[gd] = e : j(c).invalidMonth = a;
  });
  var md = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'), nd = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'), od = {};
  a.suppressDeprecationWarnings = !1;
  var pd = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, qd = [
      [
        'YYYYYY-MM-DD',
        /[+-]\d{6}-\d{2}-\d{2}/
      ],
      [
        'YYYY-MM-DD',
        /\d{4}-\d{2}-\d{2}/
      ],
      [
        'GGGG-[W]WW-E',
        /\d{4}-W\d{2}-\d/
      ],
      [
        'GGGG-[W]WW',
        /\d{4}-W\d{2}/
      ],
      [
        'YYYY-DDD',
        /\d{4}-\d{3}/
      ]
    ], rd = [
      [
        'HH:mm:ss.SSSS',
        /(T| )\d\d:\d\d:\d\d\.\d+/
      ],
      [
        'HH:mm:ss',
        /(T| )\d\d:\d\d:\d\d/
      ],
      [
        'HH:mm',
        /(T| )\d\d:\d\d/
      ],
      [
        'HH',
        /(T| )\d\d/
      ]
    ], sd = /^\/?Date\((\-?\d+)/i;
  a.createFromInputFallback = aa('moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.', function (a) {
    a._d = new Date(a._i + (a._useUTC ? ' UTC' : ''));
  }), H(0, [
    'YY',
    2
  ], 0, function () {
    return this.year() % 100;
  }), H(0, [
    'YYYY',
    4
  ], 0, 'year'), H(0, [
    'YYYYY',
    5
  ], 0, 'year'), H(0, [
    'YYYYYY',
    6,
    !0
  ], 0, 'year'), z('year', 'y'), N('Y', _c), N('YY', Wc, Sc), N('YYYY', Yc, Uc), N('YYYYY', Zc, Vc), N('YYYYYY', Zc, Vc), Q([
    'YYYYY',
    'YYYYYY'
  ], fd), Q('YYYY', function (b, c) {
    c[fd] = 2 === b.length ? a.parseTwoDigitYear(b) : q(b);
  }), Q('YY', function (b, c) {
    c[fd] = a.parseTwoDigitYear(b);
  }), a.parseTwoDigitYear = function (a) {
    return q(a) + (q(a) > 68 ? 1900 : 2000);
  };
  var td = C('FullYear', !1);
  H('w', [
    'ww',
    2
  ], 'wo', 'week'), H('W', [
    'WW',
    2
  ], 'Wo', 'isoWeek'), z('week', 'w'), z('isoWeek', 'W'), N('w', Wc), N('ww', Wc, Sc), N('W', Wc), N('WW', Wc, Sc), R([
    'w',
    'ww',
    'W',
    'WW'
  ], function (a, b, c, d) {
    b[d.substr(0, 1)] = q(a);
  });
  var ud = {
      dow: 0,
      doy: 6
    };
  H('DDD', [
    'DDDD',
    3
  ], 'DDDo', 'dayOfYear'), z('dayOfYear', 'DDD'), N('DDD', Xc), N('DDDD', Tc), Q([
    'DDD',
    'DDDD'
  ], function (a, b, c) {
    c._dayOfYear = q(a);
  }), a.ISO_8601 = function () {
  };
  var vd = aa('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function () {
      var a = Da.apply(null, arguments);
      return this > a ? this : a;
    }), wd = aa('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function () {
      var a = Da.apply(null, arguments);
      return a > this ? this : a;
    });
  Ja('Z', ':'), Ja('ZZ', ''), N('Z', ad), N('ZZ', ad), Q([
    'Z',
    'ZZ'
  ], function (a, b, c) {
    c._useUTC = !0, c._tzm = Ka(a);
  });
  var xd = /([\+\-]|\d\d)/gi;
  a.updateOffset = function () {
  };
  var yd = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, zd = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;
  Ya.fn = Ha.prototype;
  var Ad = ab(1, 'add'), Bd = ab(-1, 'subtract');
  a.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  var Cd = aa('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (a) {
      return void 0 === a ? this.localeData() : this.locale(a);
    });
  H(0, [
    'gg',
    2
  ], 0, function () {
    return this.weekYear() % 100;
  }), H(0, [
    'GG',
    2
  ], 0, function () {
    return this.isoWeekYear() % 100;
  }), Db('gggg', 'weekYear'), Db('ggggg', 'weekYear'), Db('GGGG', 'isoWeekYear'), Db('GGGGG', 'isoWeekYear'), z('weekYear', 'gg'), z('isoWeekYear', 'GG'), N('G', _c), N('g', _c), N('GG', Wc, Sc), N('gg', Wc, Sc), N('GGGG', Yc, Uc), N('gggg', Yc, Uc), N('GGGGG', Zc, Vc), N('ggggg', Zc, Vc), R([
    'gggg',
    'ggggg',
    'GGGG',
    'GGGGG'
  ], function (a, b, c, d) {
    b[d.substr(0, 2)] = q(a);
  }), R([
    'gg',
    'GG'
  ], function (b, c, d, e) {
    c[e] = a.parseTwoDigitYear(b);
  }), H('Q', 0, 0, 'quarter'), z('quarter', 'Q'), N('Q', Rc), Q('Q', function (a, b) {
    b[gd] = 3 * (q(a) - 1);
  }), H('D', [
    'DD',
    2
  ], 'Do', 'date'), z('date', 'D'), N('D', Wc), N('DD', Wc, Sc), N('Do', function (a, b) {
    return a ? b._ordinalParse : b._ordinalParseLenient;
  }), Q([
    'D',
    'DD'
  ], hd), Q('Do', function (a, b) {
    b[hd] = q(a.match(Wc)[0], 10);
  });
  var Dd = C('Date', !0);
  H('d', 0, 'do', 'day'), H('dd', 0, 0, function (a) {
    return this.localeData().weekdaysMin(this, a);
  }), H('ddd', 0, 0, function (a) {
    return this.localeData().weekdaysShort(this, a);
  }), H('dddd', 0, 0, function (a) {
    return this.localeData().weekdays(this, a);
  }), H('e', 0, 0, 'weekday'), H('E', 0, 0, 'isoWeekday'), z('day', 'd'), z('weekday', 'e'), z('isoWeekday', 'E'), N('d', Wc), N('e', Wc), N('E', Wc), N('dd', cd), N('ddd', cd), N('dddd', cd), R([
    'dd',
    'ddd',
    'dddd'
  ], function (a, b, c) {
    var d = c._locale.weekdaysParse(a);
    null != d ? b.d = d : j(c).invalidWeekday = a;
  }), R([
    'd',
    'e',
    'E'
  ], function (a, b, c, d) {
    b[d] = q(a);
  });
  var Ed = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'), Fd = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'), Gd = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
  H('H', [
    'HH',
    2
  ], 0, 'hour'), H('h', [
    'hh',
    2
  ], 0, function () {
    return this.hours() % 12 || 12;
  }), Sb('a', !0), Sb('A', !1), z('hour', 'h'), N('a', Tb), N('A', Tb), N('H', Wc), N('h', Wc), N('HH', Wc, Sc), N('hh', Wc, Sc), Q([
    'H',
    'HH'
  ], id), Q([
    'a',
    'A'
  ], function (a, b, c) {
    c._isPm = c._locale.isPM(a), c._meridiem = a;
  }), Q([
    'h',
    'hh'
  ], function (a, b, c) {
    b[id] = q(a), j(c).bigHour = !0;
  });
  var Hd = /[ap]\.?m?\.?/i, Id = C('Hours', !0);
  H('m', [
    'mm',
    2
  ], 0, 'minute'), z('minute', 'm'), N('m', Wc), N('mm', Wc, Sc), Q([
    'm',
    'mm'
  ], jd);
  var Jd = C('Minutes', !1);
  H('s', [
    'ss',
    2
  ], 0, 'second'), z('second', 's'), N('s', Wc), N('ss', Wc, Sc), Q([
    's',
    'ss'
  ], kd);
  var Kd = C('Seconds', !1);
  H('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
  }), H(0, [
    'SS',
    2
  ], 0, function () {
    return ~~(this.millisecond() / 10);
  }), H(0, [
    'SSS',
    3
  ], 0, 'millisecond'), H(0, [
    'SSSS',
    4
  ], 0, function () {
    return 10 * this.millisecond();
  }), H(0, [
    'SSSSS',
    5
  ], 0, function () {
    return 100 * this.millisecond();
  }), H(0, [
    'SSSSSS',
    6
  ], 0, function () {
    return 1000 * this.millisecond();
  }), H(0, [
    'SSSSSSS',
    7
  ], 0, function () {
    return 10000 * this.millisecond();
  }), H(0, [
    'SSSSSSSS',
    8
  ], 0, function () {
    return 100000 * this.millisecond();
  }), H(0, [
    'SSSSSSSSS',
    9
  ], 0, function () {
    return 1000000 * this.millisecond();
  }), z('millisecond', 'ms'), N('S', Xc, Rc), N('SS', Xc, Sc), N('SSS', Xc, Tc);
  var Ld;
  for (Ld = 'SSSS'; Ld.length <= 9; Ld += 'S')
    N(Ld, $c);
  for (Ld = 'S'; Ld.length <= 9; Ld += 'S')
    Q(Ld, Wb);
  var Md = C('Milliseconds', !1);
  H('z', 0, 0, 'zoneAbbr'), H('zz', 0, 0, 'zoneName');
  var Nd = n.prototype;
  Nd.add = Ad, Nd.calendar = cb, Nd.clone = db, Nd.diff = ib, Nd.endOf = ub, Nd.format = mb, Nd.from = nb, Nd.fromNow = ob, Nd.to = pb, Nd.toNow = qb, Nd.get = F, Nd.invalidAt = Cb, Nd.isAfter = eb, Nd.isBefore = fb, Nd.isBetween = gb, Nd.isSame = hb, Nd.isValid = Ab, Nd.lang = Cd, Nd.locale = rb, Nd.localeData = sb, Nd.max = wd, Nd.min = vd, Nd.parsingFlags = Bb, Nd.set = F, Nd.startOf = tb, Nd.subtract = Bd, Nd.toArray = yb, Nd.toObject = zb, Nd.toDate = xb, Nd.toISOString = lb, Nd.toJSON = lb, Nd.toString = kb, Nd.unix = wb, Nd.valueOf = vb, Nd.year = td, Nd.isLeapYear = ia, Nd.weekYear = Fb, Nd.isoWeekYear = Gb, Nd.quarter = Nd.quarters = Jb, Nd.month = Y, Nd.daysInMonth = Z, Nd.week = Nd.weeks = na, Nd.isoWeek = Nd.isoWeeks = oa, Nd.weeksInYear = Ib, Nd.isoWeeksInYear = Hb, Nd.date = Dd, Nd.day = Nd.days = Pb, Nd.weekday = Qb, Nd.isoWeekday = Rb, Nd.dayOfYear = qa, Nd.hour = Nd.hours = Id, Nd.minute = Nd.minutes = Jd, Nd.second = Nd.seconds = Kd, Nd.millisecond = Nd.milliseconds = Md, Nd.utcOffset = Na, Nd.utc = Pa, Nd.local = Qa, Nd.parseZone = Ra, Nd.hasAlignedHourOffset = Sa, Nd.isDST = Ta, Nd.isDSTShifted = Ua, Nd.isLocal = Va, Nd.isUtcOffset = Wa, Nd.isUtc = Xa, Nd.isUTC = Xa, Nd.zoneAbbr = Xb, Nd.zoneName = Yb, Nd.dates = aa('dates accessor is deprecated. Use date instead.', Dd), Nd.months = aa('months accessor is deprecated. Use month instead', Y), Nd.years = aa('years accessor is deprecated. Use year instead', td), Nd.zone = aa('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', Oa);
  var Od = Nd, Pd = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    }, Qd = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A'
    }, Rd = 'Invalid date', Sd = '%d', Td = /\d{1,2}/, Ud = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    }, Vd = s.prototype;
  Vd._calendar = Pd, Vd.calendar = _b, Vd._longDateFormat = Qd, Vd.longDateFormat = ac, Vd._invalidDate = Rd, Vd.invalidDate = bc, Vd._ordinal = Sd, Vd.ordinal = cc, Vd._ordinalParse = Td, Vd.preparse = dc, Vd.postformat = dc, Vd._relativeTime = Ud, Vd.relativeTime = ec, Vd.pastFuture = fc, Vd.set = gc, Vd.months = U, Vd._months = md, Vd.monthsShort = V, Vd._monthsShort = nd, Vd.monthsParse = W, Vd.week = ka, Vd._week = ud, Vd.firstDayOfYear = ma, Vd.firstDayOfWeek = la, Vd.weekdays = Lb, Vd._weekdays = Ed, Vd.weekdaysMin = Nb, Vd._weekdaysMin = Gd, Vd.weekdaysShort = Mb, Vd._weekdaysShort = Fd, Vd.weekdaysParse = Ob, Vd.isPM = Ub, Vd._meridiemParse = Hd, Vd.meridiem = Vb, w('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal: function (a) {
      var b = a % 10, c = 1 === q(a % 100 / 10) ? 'th' : 1 === b ? 'st' : 2 === b ? 'nd' : 3 === b ? 'rd' : 'th';
      return a + c;
    }
  }), a.lang = aa('moment.lang is deprecated. Use moment.locale instead.', w), a.langData = aa('moment.langData is deprecated. Use moment.localeData instead.', y);
  var Wd = Math.abs, Xd = yc('ms'), Yd = yc('s'), Zd = yc('m'), $d = yc('h'), _d = yc('d'), ae = yc('w'), be = yc('M'), ce = yc('y'), de = Ac('milliseconds'), ee = Ac('seconds'), fe = Ac('minutes'), ge = Ac('hours'), he = Ac('days'), ie = Ac('months'), je = Ac('years'), ke = Math.round, le = {
      s: 45,
      m: 45,
      h: 22,
      d: 26,
      M: 11
    }, me = Math.abs, ne = Ha.prototype;
  ne.abs = oc, ne.add = qc, ne.subtract = rc, ne.as = wc, ne.asMilliseconds = Xd, ne.asSeconds = Yd, ne.asMinutes = Zd, ne.asHours = $d, ne.asDays = _d, ne.asWeeks = ae, ne.asMonths = be, ne.asYears = ce, ne.valueOf = xc, ne._bubble = tc, ne.get = zc, ne.milliseconds = de, ne.seconds = ee, ne.minutes = fe, ne.hours = ge, ne.days = he, ne.weeks = Bc, ne.months = ie, ne.years = je, ne.humanize = Fc, ne.toISOString = Gc, ne.toString = Gc, ne.toJSON = Gc, ne.locale = rb, ne.localeData = sb, ne.toIsoString = aa('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', Gc), ne.lang = Cd, H('X', 0, 0, 'unix'), H('x', 0, 0, 'valueOf'), N('x', _c), N('X', bd), Q('X', function (a, b, c) {
    c._d = new Date(1000 * parseFloat(a, 10));
  }), Q('x', function (a, b, c) {
    c._d = new Date(q(a));
  }), a.version = '2.10.6', b(Da), a.fn = Od, a.min = Fa, a.max = Ga, a.utc = h, a.unix = Zb, a.months = jc, a.isDate = d, a.locale = w, a.invalid = l, a.duration = Ya, a.isMoment = o, a.weekdays = lc, a.parseZone = $b, a.localeData = y, a.isDuration = Ia, a.monthsShort = kc, a.weekdaysMin = nc, a.defineLocale = x, a.weekdaysShort = mc, a.normalizeUnits = A, a.relativeTimeThreshold = Ec;
  var oe = a;
  return oe;
});
/*! version : 4.17.37
 =========================================================
 bootstrap-datetimejs
 https://github.com/Eonasdan/bootstrap-datetimepicker
 Copyright (c) 2015 Jonathan Peterson
 =========================================================
 */
!function (a) {
  'use strict';
  if ('function' == typeof define && define.amd)
    define([
      'jquery',
      'moment'
    ], a);
  else if ('object' == typeof exports)
    a(require('jquery'), require('moment'));
  else {
    if ('undefined' == typeof jQuery)
      throw 'bootstrap-datetimepicker requires jQuery to be loaded first';
    if ('undefined' == typeof moment)
      throw 'bootstrap-datetimepicker requires Moment.js to be loaded first';
    a(jQuery, moment);
  }
}(function (a, b) {
  'use strict';
  if (!b)
    throw new Error('bootstrap-datetimepicker requires Moment.js to be loaded first');
  var c = function (c, d) {
    var e, f, g, h, i, j, k, l = {}, m = !0, n = !1, o = !1, p = 0, q = [
        {
          clsName: 'days',
          navFnc: 'M',
          navStep: 1
        },
        {
          clsName: 'months',
          navFnc: 'y',
          navStep: 1
        },
        {
          clsName: 'years',
          navFnc: 'y',
          navStep: 10
        },
        {
          clsName: 'decades',
          navFnc: 'y',
          navStep: 100
        }
      ], r = [
        'days',
        'months',
        'years',
        'decades'
      ], s = [
        'top',
        'bottom',
        'auto'
      ], t = [
        'left',
        'right',
        'auto'
      ], u = [
        'default',
        'top',
        'bottom'
      ], v = {
        up: 38,
        38: 'up',
        down: 40,
        40: 'down',
        left: 37,
        37: 'left',
        right: 39,
        39: 'right',
        tab: 9,
        9: 'tab',
        escape: 27,
        27: 'escape',
        enter: 13,
        13: 'enter',
        pageUp: 33,
        33: 'pageUp',
        pageDown: 34,
        34: 'pageDown',
        shift: 16,
        16: 'shift',
        control: 17,
        17: 'control',
        space: 32,
        32: 'space',
        t: 84,
        84: 't',
        'delete': 46,
        46: 'delete'
      }, w = {}, x = function (a) {
        var c, e, f, g, h, i = !1;
        return void 0 !== b.tz && void 0 !== d.timeZone && null !== d.timeZone && '' !== d.timeZone && (i = !0), void 0 === a || null === a ? c = i ? b().tz(d.timeZone).startOf('d') : b().startOf('d') : i ? (e = b().tz(d.timeZone).utcOffset(), f = b(a, j, d.useStrict).utcOffset(), f !== e ? (g = b().tz(d.timeZone).format('Z'), h = b(a, j, d.useStrict).format('YYYY-MM-DD[T]HH:mm:ss') + g, c = b(h, j, d.useStrict).tz(d.timeZone)) : c = b(a, j, d.useStrict).tz(d.timeZone)) : c = b(a, j, d.useStrict), c;
      }, y = function (a) {
        if ('string' != typeof a || a.length > 1)
          throw new TypeError('isEnabled expects a single character string parameter');
        switch (a) {
        case 'y':
          return -1 !== i.indexOf('Y');
        case 'M':
          return -1 !== i.indexOf('M');
        case 'd':
          return -1 !== i.toLowerCase().indexOf('d');
        case 'h':
        case 'H':
          return -1 !== i.toLowerCase().indexOf('h');
        case 'm':
          return -1 !== i.indexOf('m');
        case 's':
          return -1 !== i.indexOf('s');
        default:
          return !1;
        }
      }, z = function () {
        return y('h') || y('m') || y('s');
      }, A = function () {
        return y('y') || y('M') || y('d');
      }, B = function () {
        var b = a('<thead>').append(a('<tr>').append(a('<th>').addClass('prev').attr('data-action', 'previous').append(a('<span>').addClass(d.icons.previous))).append(a('<th>').addClass('picker-switch').attr('data-action', 'pickerSwitch').attr('colspan', d.calendarWeeks ? '6' : '5')).append(a('<th>').addClass('next').attr('data-action', 'next').append(a('<span>').addClass(d.icons.next)))), c = a('<tbody>').append(a('<tr>').append(a('<td>').attr('colspan', d.calendarWeeks ? '8' : '7')));
        return [
          a('<div>').addClass('datepicker-days').append(a('<table>').addClass('table-condensed').append(b).append(a('<tbody>'))),
          a('<div>').addClass('datepicker-months').append(a('<table>').addClass('table-condensed').append(b.clone()).append(c.clone())),
          a('<div>').addClass('datepicker-years').append(a('<table>').addClass('table-condensed').append(b.clone()).append(c.clone())),
          a('<div>').addClass('datepicker-decades').append(a('<table>').addClass('table-condensed').append(b.clone()).append(c.clone()))
        ];
      }, C = function () {
        var b = a('<tr>'), c = a('<tr>'), e = a('<tr>');
        return y('h') && (b.append(a('<td>').append(a('<a>').attr({
          href: '#',
          tabindex: '-1',
          title: d.tooltips.incrementHour
        }).addClass('btn').attr('data-action', 'incrementHours').append(a('<span>').addClass(d.icons.up)))), c.append(a('<td>').append(a('<span>').addClass('timepicker-hour').attr({
          'data-time-component': 'hours',
          title: d.tooltips.pickHour
        }).attr('data-action', 'showHours'))), e.append(a('<td>').append(a('<a>').attr({
          href: '#',
          tabindex: '-1',
          title: d.tooltips.decrementHour
        }).addClass('btn').attr('data-action', 'decrementHours').append(a('<span>').addClass(d.icons.down))))), y('m') && (y('h') && (b.append(a('<td>').addClass('separator')), c.append(a('<td>').addClass('separator').html(':')), e.append(a('<td>').addClass('separator'))), b.append(a('<td>').append(a('<a>').attr({
          href: '#',
          tabindex: '-1',
          title: d.tooltips.incrementMinute
        }).addClass('btn').attr('data-action', 'incrementMinutes').append(a('<span>').addClass(d.icons.up)))), c.append(a('<td>').append(a('<span>').addClass('timepicker-minute').attr({
          'data-time-component': 'minutes',
          title: d.tooltips.pickMinute
        }).attr('data-action', 'showMinutes'))), e.append(a('<td>').append(a('<a>').attr({
          href: '#',
          tabindex: '-1',
          title: d.tooltips.decrementMinute
        }).addClass('btn').attr('data-action', 'decrementMinutes').append(a('<span>').addClass(d.icons.down))))), y('s') && (y('m') && (b.append(a('<td>').addClass('separator')), c.append(a('<td>').addClass('separator').html(':')), e.append(a('<td>').addClass('separator'))), b.append(a('<td>').append(a('<a>').attr({
          href: '#',
          tabindex: '-1',
          title: d.tooltips.incrementSecond
        }).addClass('btn').attr('data-action', 'incrementSeconds').append(a('<span>').addClass(d.icons.up)))), c.append(a('<td>').append(a('<span>').addClass('timepicker-second').attr({
          'data-time-component': 'seconds',
          title: d.tooltips.pickSecond
        }).attr('data-action', 'showSeconds'))), e.append(a('<td>').append(a('<a>').attr({
          href: '#',
          tabindex: '-1',
          title: d.tooltips.decrementSecond
        }).addClass('btn').attr('data-action', 'decrementSeconds').append(a('<span>').addClass(d.icons.down))))), h || (b.append(a('<td>').addClass('separator')), c.append(a('<td>').append(a('<button>').addClass('btn btn-primary').attr({
          'data-action': 'togglePeriod',
          tabindex: '-1',
          title: d.tooltips.togglePeriod
        }))), e.append(a('<td>').addClass('separator'))), a('<div>').addClass('timepicker-picker').append(a('<table>').addClass('table-condensed').append([
          b,
          c,
          e
        ]));
      }, D = function () {
        var b = a('<div>').addClass('timepicker-hours').append(a('<table>').addClass('table-condensed')), c = a('<div>').addClass('timepicker-minutes').append(a('<table>').addClass('table-condensed')), d = a('<div>').addClass('timepicker-seconds').append(a('<table>').addClass('table-condensed')), e = [C()];
        return y('h') && e.push(b), y('m') && e.push(c), y('s') && e.push(d), e;
      }, E = function () {
        var b = [];
        return d.showTodayButton && b.push(a('<td>').append(a('<a>').attr({
          'data-action': 'today',
          title: d.tooltips.today
        }).append(a('<span>').addClass(d.icons.today)))), !d.sideBySide && A() && z() && b.push(a('<td>').append(a('<a>').attr({
          'data-action': 'togglePicker',
          title: d.tooltips.selectTime
        }).append(a('<span>').addClass(d.icons.time)))), d.showClear && b.push(a('<td>').append(a('<a>').attr({
          'data-action': 'clear',
          title: d.tooltips.clear
        }).append(a('<span>').addClass(d.icons.clear)))), d.showClose && b.push(a('<td>').append(a('<a>').attr({
          'data-action': 'close',
          title: d.tooltips.close
        }).append(a('<span>').addClass(d.icons.close)))), a('<table>').addClass('table-condensed').append(a('<tbody>').append(a('<tr>').append(b)));
      }, F = function () {
        var b = a('<div>').addClass('bootstrap-datetimepicker-widget dropdown-menu'), c = a('<div>').addClass('datepicker').append(B()), e = a('<div>').addClass('timepicker').append(D()), f = a('<ul>').addClass('list-unstyled'), g = a('<li>').addClass('picker-switch' + (d.collapse ? ' accordion-toggle' : '')).append(E());
        return d.inline && b.removeClass('dropdown-menu'), h && b.addClass('usetwentyfour'), y('s') && !h && b.addClass('wider'), d.sideBySide && A() && z() ? (b.addClass('timepicker-sbs'), 'top' === d.toolbarPlacement && b.append(g), b.append(a('<div>').addClass('row').append(c.addClass('col-md-6')).append(e.addClass('col-md-6'))), 'bottom' === d.toolbarPlacement && b.append(g), b) : ('top' === d.toolbarPlacement && f.append(g), A() && f.append(a('<li>').addClass(d.collapse && z() ? 'collapse in' : '').append(c)), 'default' === d.toolbarPlacement && f.append(g), z() && f.append(a('<li>').addClass(d.collapse && A() ? 'collapse' : '').append(e)), 'bottom' === d.toolbarPlacement && f.append(g), b.append(f));
      }, G = function () {
        var b, e = {};
        return b = c.is('input') || d.inline ? c.data() : c.find('input').data(), b.dateOptions && b.dateOptions instanceof Object && (e = a.extend(!0, e, b.dateOptions)), a.each(d, function (a) {
          var c = 'date' + a.charAt(0).toUpperCase() + a.slice(1);
          void 0 !== b[c] && (e[a] = b[c]);
        }), e;
      }, H = function () {
        var b, e = (n || c).position(), f = (n || c).offset(), g = d.widgetPositioning.vertical, h = d.widgetPositioning.horizontal;
        if (d.widgetParent)
          b = d.widgetParent.append(o);
        else if (c.is('input'))
          b = c.after(o).parent();
        else {
          if (d.inline)
            return void (b = c.append(o));
          b = c, c.children().first().after(o);
        }
        if ('auto' === g && (g = f.top + 1.5 * o.height() >= a(window).height() + a(window).scrollTop() && o.height() + c.outerHeight() < f.top ? 'top' : 'bottom'), 'auto' === h && (h = b.width() < f.left + o.outerWidth() / 2 && f.left + o.outerWidth() > a(window).width() ? 'right' : 'left'), 'top' === g ? o.addClass('top').removeClass('bottom') : o.addClass('bottom').removeClass('top'), 'right' === h ? o.addClass('pull-right') : o.removeClass('pull-right'), 'relative' !== b.css('position') && (b = b.parents().filter(function () {
            return 'relative' === a(this).css('position');
          }).first()), 0 === b.length)
          throw new Error('datetimepicker component should be placed within a relative positioned container');
        o.css({
          top: 'top' === g ? 'auto' : e.top + c.outerHeight(),
          bottom: 'top' === g ? e.top + c.outerHeight() : 'auto',
          left: 'left' === h ? b === c ? 0 : e.left : 'auto',
          right: 'left' === h ? 'auto' : b.outerWidth() - c.outerWidth() - (b === c ? 0 : e.left)
        });
      }, I = function (a) {
        'dp.change' === a.type && (a.date && a.date.isSame(a.oldDate) || !a.date && !a.oldDate) || c.trigger(a);
      }, J = function (a) {
        'y' === a && (a = 'YYYY'), I({
          type: 'dp.update',
          change: a,
          viewDate: f.clone()
        });
      }, K = function (a) {
        o && (a && (k = Math.max(p, Math.min(3, k + a))), o.find('.datepicker > div').hide().filter('.datepicker-' + q[k].clsName).show());
      }, L = function () {
        var b = a('<tr>'), c = f.clone().startOf('w').startOf('d');
        for (d.calendarWeeks === !0 && b.append(a('<th>').addClass('cw').text('#')); c.isBefore(f.clone().endOf('w'));)
          b.append(a('<th>').addClass('dow').text(c.format('dd'))), c.add(1, 'd');
        o.find('.datepicker-days thead').append(b);
      }, M = function (a) {
        return d.disabledDates[a.format('YYYY-MM-DD')] === !0;
      }, N = function (a) {
        return d.enabledDates[a.format('YYYY-MM-DD')] === !0;
      }, O = function (a) {
        return d.disabledHours[a.format('H')] === !0;
      }, P = function (a) {
        return d.enabledHours[a.format('H')] === !0;
      }, Q = function (b, c) {
        if (!b.isValid())
          return !1;
        if (d.disabledDates && 'd' === c && M(b))
          return !1;
        if (d.enabledDates && 'd' === c && !N(b))
          return !1;
        if (d.minDate && b.isBefore(d.minDate, c))
          return !1;
        if (d.maxDate && b.isAfter(d.maxDate, c))
          return !1;
        if (d.daysOfWeekDisabled && 'd' === c && -1 !== d.daysOfWeekDisabled.indexOf(b.day()))
          return !1;
        if (d.disabledHours && ('h' === c || 'm' === c || 's' === c) && O(b))
          return !1;
        if (d.enabledHours && ('h' === c || 'm' === c || 's' === c) && !P(b))
          return !1;
        if (d.disabledTimeIntervals && ('h' === c || 'm' === c || 's' === c)) {
          var e = !1;
          if (a.each(d.disabledTimeIntervals, function () {
              return b.isBetween(this[0], this[1]) ? (e = !0, !1) : void 0;
            }), e)
            return !1;
        }
        return !0;
      }, R = function () {
        for (var b = [], c = f.clone().startOf('y').startOf('d'); c.isSame(f, 'y');)
          b.push(a('<span>').attr('data-action', 'selectMonth').addClass('month').text(c.format('MMM'))), c.add(1, 'M');
        o.find('.datepicker-months td').empty().append(b);
      }, S = function () {
        var b = o.find('.datepicker-months'), c = b.find('th'), g = b.find('tbody').find('span');
        c.eq(0).find('span').attr('title', d.tooltips.prevYear), c.eq(1).attr('title', d.tooltips.selectYear), c.eq(2).find('span').attr('title', d.tooltips.nextYear), b.find('.disabled').removeClass('disabled'), Q(f.clone().subtract(1, 'y'), 'y') || c.eq(0).addClass('disabled'), c.eq(1).text(f.year()), Q(f.clone().add(1, 'y'), 'y') || c.eq(2).addClass('disabled'), g.removeClass('active'), e.isSame(f, 'y') && !m && g.eq(e.month()).addClass('active'), g.each(function (b) {
          Q(f.clone().month(b), 'M') || a(this).addClass('disabled');
        });
      }, T = function () {
        var a = o.find('.datepicker-years'), b = a.find('th'), c = f.clone().subtract(5, 'y'), g = f.clone().add(6, 'y'), h = '';
        for (b.eq(0).find('span').attr('title', d.tooltips.prevDecade), b.eq(1).attr('title', d.tooltips.selectDecade), b.eq(2).find('span').attr('title', d.tooltips.nextDecade), a.find('.disabled').removeClass('disabled'), d.minDate && d.minDate.isAfter(c, 'y') && b.eq(0).addClass('disabled'), b.eq(1).text(c.year() + '-' + g.year()), d.maxDate && d.maxDate.isBefore(g, 'y') && b.eq(2).addClass('disabled'); !c.isAfter(g, 'y');)
          h += '<span data-action="selectYear" class="year' + (c.isSame(e, 'y') && !m ? ' active' : '') + (Q(c, 'y') ? '' : ' disabled') + '">' + c.year() + '</span>', c.add(1, 'y');
        a.find('td').html(h);
      }, U = function () {
        var a = o.find('.datepicker-decades'), c = a.find('th'), g = b({ y: f.year() - f.year() % 100 - 1 }), h = g.clone().add(100, 'y'), i = g.clone(), j = '';
        for (c.eq(0).find('span').attr('title', d.tooltips.prevCentury), c.eq(2).find('span').attr('title', d.tooltips.nextCentury), a.find('.disabled').removeClass('disabled'), (g.isSame(b({ y: 1900 })) || d.minDate && d.minDate.isAfter(g, 'y')) && c.eq(0).addClass('disabled'), c.eq(1).text(g.year() + '-' + h.year()), (g.isSame(b({ y: 2000 })) || d.maxDate && d.maxDate.isBefore(h, 'y')) && c.eq(2).addClass('disabled'); !g.isAfter(h, 'y');)
          j += '<span data-action="selectDecade" class="decade' + (g.isSame(e, 'y') ? ' active' : '') + (Q(g, 'y') ? '' : ' disabled') + '" data-selection="' + (g.year() + 6) + '">' + (g.year() + 1) + ' - ' + (g.year() + 12) + '</span>', g.add(12, 'y');
        j += '<span></span><span></span><span></span>', a.find('td').html(j), c.eq(1).text(i.year() + 1 + '-' + g.year());
      }, V = function () {
        var b, c, g, h, i = o.find('.datepicker-days'), j = i.find('th'), k = [];
        if (A()) {
          for (j.eq(0).find('span').attr('title', d.tooltips.prevMonth), j.eq(1).attr('title', d.tooltips.selectMonth), j.eq(2).find('span').attr('title', d.tooltips.nextMonth), i.find('.disabled').removeClass('disabled'), j.eq(1).text(f.format(d.dayViewHeaderFormat)), Q(f.clone().subtract(1, 'M'), 'M') || j.eq(0).addClass('disabled'), Q(f.clone().add(1, 'M'), 'M') || j.eq(2).addClass('disabled'), b = f.clone().startOf('M').startOf('w').startOf('d'), h = 0; 42 > h; h++)
            0 === b.weekday() && (c = a('<tr>'), d.calendarWeeks && c.append('<td class="cw">' + b.week() + '</td>'), k.push(c)), g = '', b.isBefore(f, 'M') && (g += ' old'), b.isAfter(f, 'M') && (g += ' new'), b.isSame(e, 'd') && !m && (g += ' active'), Q(b, 'd') || (g += ' disabled'), b.isSame(x(), 'd') && (g += ' today'), (0 === b.day() || 6 === b.day()) && (g += ' weekend'), c.append('<td data-action="selectDay" data-day="' + b.format('L') + '" class="day' + g + '">' + b.date() + '</td>'), b.add(1, 'd');
          i.find('tbody').empty().append(k), S(), T(), U();
        }
      }, W = function () {
        var b = o.find('.timepicker-hours table'), c = f.clone().startOf('d'), d = [], e = a('<tr>');
        for (f.hour() > 11 && !h && c.hour(12); c.isSame(f, 'd') && (h || f.hour() < 12 && c.hour() < 12 || f.hour() > 11);)
          c.hour() % 4 === 0 && (e = a('<tr>'), d.push(e)), e.append('<td data-action="selectHour" class="hour' + (Q(c, 'h') ? '' : ' disabled') + '">' + c.format(h ? 'HH' : 'hh') + '</td>'), c.add(1, 'h');
        b.empty().append(d);
      }, X = function () {
        for (var b = o.find('.timepicker-minutes table'), c = f.clone().startOf('h'), e = [], g = a('<tr>'), h = 1 === d.stepping ? 5 : d.stepping; f.isSame(c, 'h');)
          c.minute() % (4 * h) === 0 && (g = a('<tr>'), e.push(g)), g.append('<td data-action="selectMinute" class="minute' + (Q(c, 'm') ? '' : ' disabled') + '">' + c.format('mm') + '</td>'), c.add(h, 'm');
        b.empty().append(e);
      }, Y = function () {
        for (var b = o.find('.timepicker-seconds table'), c = f.clone().startOf('m'), d = [], e = a('<tr>'); f.isSame(c, 'm');)
          c.second() % 20 === 0 && (e = a('<tr>'), d.push(e)), e.append('<td data-action="selectSecond" class="second' + (Q(c, 's') ? '' : ' disabled') + '">' + c.format('ss') + '</td>'), c.add(5, 's');
        b.empty().append(d);
      }, Z = function () {
        var a, b, c = o.find('.timepicker span[data-time-component]');
        h || (a = o.find('.timepicker [data-action=togglePeriod]'), b = e.clone().add(e.hours() >= 12 ? -12 : 12, 'h'), a.text(e.format('A')), Q(b, 'h') ? a.removeClass('disabled') : a.addClass('disabled')), c.filter('[data-time-component=hours]').text(e.format(h ? 'HH' : 'hh')), c.filter('[data-time-component=minutes]').text(e.format('mm')), c.filter('[data-time-component=seconds]').text(e.format('ss')), W(), X(), Y();
      }, $ = function () {
        o && (V(), Z());
      }, _ = function (a) {
        var b = m ? null : e;
        return a ? (a = a.clone().locale(d.locale), 1 !== d.stepping && a.minutes(Math.round(a.minutes() / d.stepping) * d.stepping % 60).seconds(0), void (Q(a) ? (e = a, f = e.clone(), g.val(e.format(i)), c.data('date', e.format(i)), m = !1, $(), I({
          type: 'dp.change',
          date: e.clone(),
          oldDate: b
        })) : (d.keepInvalid || g.val(m ? '' : e.format(i)), I({
          type: 'dp.error',
          date: a
        })))) : (m = !0, g.val(''), c.data('date', ''), I({
          type: 'dp.change',
          date: !1,
          oldDate: b
        }), void $());
      }, aa = function () {
        var b = !1;
        return o ? (o.find('.collapse').each(function () {
          var c = a(this).data('collapse');
          return c && c.transitioning ? (b = !0, !1) : !0;
        }), b ? l : (n && n.hasClass('btn') && n.toggleClass('active'), o.hide(), a(window).off('resize', H), o.off('click', '[data-action]'), o.off('mousedown', !1), o.remove(), o = !1, I({
          type: 'dp.hide',
          date: e.clone()
        }), g.blur(), l)) : l;
      }, ba = function () {
        _(null);
      }, ca = {
        next: function () {
          var a = q[k].navFnc;
          f.add(q[k].navStep, a), V(), J(a);
        },
        previous: function () {
          var a = q[k].navFnc;
          f.subtract(q[k].navStep, a), V(), J(a);
        },
        pickerSwitch: function () {
          K(1);
        },
        selectMonth: function (b) {
          var c = a(b.target).closest('tbody').find('span').index(a(b.target));
          f.month(c), k === p ? (_(e.clone().year(f.year()).month(f.month())), d.inline || aa()) : (K(-1), V()), J('M');
        },
        selectYear: function (b) {
          var c = parseInt(a(b.target).text(), 10) || 0;
          f.year(c), k === p ? (_(e.clone().year(f.year())), d.inline || aa()) : (K(-1), V()), J('YYYY');
        },
        selectDecade: function (b) {
          var c = parseInt(a(b.target).data('selection'), 10) || 0;
          f.year(c), k === p ? (_(e.clone().year(f.year())), d.inline || aa()) : (K(-1), V()), J('YYYY');
        },
        selectDay: function (b) {
          var c = f.clone();
          a(b.target).is('.old') && c.subtract(1, 'M'), a(b.target).is('.new') && c.add(1, 'M'), _(c.date(parseInt(a(b.target).text(), 10))), z() || d.keepOpen || d.inline || aa();
        },
        incrementHours: function () {
          var a = e.clone().add(1, 'h');
          Q(a, 'h') && _(a);
        },
        incrementMinutes: function () {
          var a = e.clone().add(d.stepping, 'm');
          Q(a, 'm') && _(a);
        },
        incrementSeconds: function () {
          var a = e.clone().add(1, 's');
          Q(a, 's') && _(a);
        },
        decrementHours: function () {
          var a = e.clone().subtract(1, 'h');
          Q(a, 'h') && _(a);
        },
        decrementMinutes: function () {
          var a = e.clone().subtract(d.stepping, 'm');
          Q(a, 'm') && _(a);
        },
        decrementSeconds: function () {
          var a = e.clone().subtract(1, 's');
          Q(a, 's') && _(a);
        },
        togglePeriod: function () {
          _(e.clone().add(e.hours() >= 12 ? -12 : 12, 'h'));
        },
        togglePicker: function (b) {
          var c, e = a(b.target), f = e.closest('ul'), g = f.find('.in'), h = f.find('.collapse:not(.in)');
          if (g && g.length) {
            if (c = g.data('collapse'), c && c.transitioning)
              return;
            g.collapse ? (g.collapse('hide'), h.collapse('show')) : (g.removeClass('in'), h.addClass('in')), e.is('span') ? e.toggleClass(d.icons.time + ' ' + d.icons.date) : e.find('span').toggleClass(d.icons.time + ' ' + d.icons.date);
          }
        },
        showPicker: function () {
          o.find('.timepicker > div:not(.timepicker-picker)').hide(), o.find('.timepicker .timepicker-picker').show();
        },
        showHours: function () {
          o.find('.timepicker .timepicker-picker').hide(), o.find('.timepicker .timepicker-hours').show();
        },
        showMinutes: function () {
          o.find('.timepicker .timepicker-picker').hide(), o.find('.timepicker .timepicker-minutes').show();
        },
        showSeconds: function () {
          o.find('.timepicker .timepicker-picker').hide(), o.find('.timepicker .timepicker-seconds').show();
        },
        selectHour: function (b) {
          var c = parseInt(a(b.target).text(), 10);
          h || (e.hours() >= 12 ? 12 !== c && (c += 12) : 12 === c && (c = 0)), _(e.clone().hours(c)), ca.showPicker.call(l);
        },
        selectMinute: function (b) {
          _(e.clone().minutes(parseInt(a(b.target).text(), 10))), ca.showPicker.call(l);
        },
        selectSecond: function (b) {
          _(e.clone().seconds(parseInt(a(b.target).text(), 10))), ca.showPicker.call(l);
        },
        clear: ba,
        today: function () {
          var a = x();
          Q(a, 'd') && _(a);
        },
        close: aa
      }, da = function (b) {
        return a(b.currentTarget).is('.disabled') ? !1 : (ca[a(b.currentTarget).data('action')].apply(l, arguments), !1);
      }, ea = function () {
        var b, c = {
            year: function (a) {
              return a.month(0).date(1).hours(0).seconds(0).minutes(0);
            },
            month: function (a) {
              return a.date(1).hours(0).seconds(0).minutes(0);
            },
            day: function (a) {
              return a.hours(0).seconds(0).minutes(0);
            },
            hour: function (a) {
              return a.seconds(0).minutes(0);
            },
            minute: function (a) {
              return a.seconds(0);
            }
          };
        return g.prop('disabled') || !d.ignoreReadonly && g.prop('readonly') || o ? l : (void 0 !== g.val() && 0 !== g.val().trim().length ? _(ga(g.val().trim())) : d.useCurrent && m && (g.is('input') && 0 === g.val().trim().length || d.inline) && (b = x(), 'string' == typeof d.useCurrent && (b = c[d.useCurrent](b)), _(b)), o = F(), L(), R(), o.find('.timepicker-hours').hide(), o.find('.timepicker-minutes').hide(), o.find('.timepicker-seconds').hide(), $(), K(), a(window).on('resize', H), o.on('click', '[data-action]', da), o.on('mousedown', !1), n && n.hasClass('btn') && n.toggleClass('active'), o.show(), H(), d.focusOnShow && !g.is(':focus') && g.focus(), I({ type: 'dp.show' }), l);
      }, fa = function () {
        return o ? aa() : ea();
      }, ga = function (a) {
        return a = void 0 === d.parseInputDate ? b.isMoment(a) || a instanceof Date ? b(a) : x(a) : d.parseInputDate(a), a.locale(d.locale), a;
      }, ha = function (a) {
        var b, c, e, f, g = null, h = [], i = {}, j = a.which, k = 'p';
        w[j] = k;
        for (b in w)
          w.hasOwnProperty(b) && w[b] === k && (h.push(b), parseInt(b, 10) !== j && (i[b] = !0));
        for (b in d.keyBinds)
          if (d.keyBinds.hasOwnProperty(b) && 'function' == typeof d.keyBinds[b] && (e = b.split(' '), e.length === h.length && v[j] === e[e.length - 1])) {
            for (f = !0, c = e.length - 2; c >= 0; c--)
              if (!(v[e[c]] in i)) {
                f = !1;
                break;
              }
            if (f) {
              g = d.keyBinds[b];
              break;
            }
          }
        g && (g.call(l, o), a.stopPropagation(), a.preventDefault());
      }, ia = function (a) {
        w[a.which] = 'r', a.stopPropagation(), a.preventDefault();
      }, ja = function (b) {
        var c = a(b.target).val().trim(), d = c ? ga(c) : null;
        return _(d), b.stopImmediatePropagation(), !1;
      }, ka = function () {
        g.on({
          change: ja,
          blur: d.debug ? '' : aa,
          keydown: ha,
          keyup: ia,
          focus: d.allowInputToggle ? ea : ''
        }), c.is('input') ? g.on({ focus: ea }) : n && (n.on('click', fa), n.on('mousedown', !1));
      }, la = function () {
        g.off({
          change: ja,
          blur: blur,
          keydown: ha,
          keyup: ia,
          focus: d.allowInputToggle ? aa : ''
        }), c.is('input') ? g.off({ focus: ea }) : n && (n.off('click', fa), n.off('mousedown', !1));
      }, ma = function (b) {
        var c = {};
        return a.each(b, function () {
          var a = ga(this);
          a.isValid() && (c[a.format('YYYY-MM-DD')] = !0);
        }), Object.keys(c).length ? c : !1;
      }, na = function (b) {
        var c = {};
        return a.each(b, function () {
          c[this] = !0;
        }), Object.keys(c).length ? c : !1;
      }, oa = function () {
        var a = d.format || 'L LT';
        i = a.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (a) {
          var b = e.localeData().longDateFormat(a) || a;
          return b.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (a) {
            return e.localeData().longDateFormat(a) || a;
          });
        }), j = d.extraFormats ? d.extraFormats.slice() : [], j.indexOf(a) < 0 && j.indexOf(i) < 0 && j.push(i), h = i.toLowerCase().indexOf('a') < 1 && i.replace(/\[.*?\]/g, '').indexOf('h') < 1, y('y') && (p = 2), y('M') && (p = 1), y('d') && (p = 0), k = Math.max(p, k), m || _(e);
      };
    if (l.destroy = function () {
        aa(), la(), c.removeData('DateTimePicker'), c.removeData('date');
      }, l.toggle = fa, l.show = ea, l.hide = aa, l.disable = function () {
        return aa(), n && n.hasClass('btn') && n.addClass('disabled'), g.prop('disabled', !0), l;
      }, l.enable = function () {
        return n && n.hasClass('btn') && n.removeClass('disabled'), g.prop('disabled', !1), l;
      }, l.ignoreReadonly = function (a) {
        if (0 === arguments.length)
          return d.ignoreReadonly;
        if ('boolean' != typeof a)
          throw new TypeError('ignoreReadonly () expects a boolean parameter');
        return d.ignoreReadonly = a, l;
      }, l.options = function (b) {
        if (0 === arguments.length)
          return a.extend(!0, {}, d);
        if (!(b instanceof Object))
          throw new TypeError('options() options parameter should be an object');
        return a.extend(!0, d, b), a.each(d, function (a, b) {
          if (void 0 === l[a])
            throw new TypeError('option ' + a + ' is not recognized!');
          l[a](b);
        }), l;
      }, l.date = function (a) {
        if (0 === arguments.length)
          return m ? null : e.clone();
        if (!(null === a || 'string' == typeof a || b.isMoment(a) || a instanceof Date))
          throw new TypeError('date() parameter must be one of [null, string, moment or Date]');
        return _(null === a ? null : ga(a)), l;
      }, l.format = function (a) {
        if (0 === arguments.length)
          return d.format;
        if ('string' != typeof a && ('boolean' != typeof a || a !== !1))
          throw new TypeError('format() expects a sting or boolean:false parameter ' + a);
        return d.format = a, i && oa(), l;
      }, l.timeZone = function (a) {
        return 0 === arguments.length ? d.timeZone : (d.timeZone = a, l);
      }, l.dayViewHeaderFormat = function (a) {
        if (0 === arguments.length)
          return d.dayViewHeaderFormat;
        if ('string' != typeof a)
          throw new TypeError('dayViewHeaderFormat() expects a string parameter');
        return d.dayViewHeaderFormat = a, l;
      }, l.extraFormats = function (a) {
        if (0 === arguments.length)
          return d.extraFormats;
        if (a !== !1 && !(a instanceof Array))
          throw new TypeError('extraFormats() expects an array or false parameter');
        return d.extraFormats = a, j && oa(), l;
      }, l.disabledDates = function (b) {
        if (0 === arguments.length)
          return d.disabledDates ? a.extend({}, d.disabledDates) : d.disabledDates;
        if (!b)
          return d.disabledDates = !1, $(), l;
        if (!(b instanceof Array))
          throw new TypeError('disabledDates() expects an array parameter');
        return d.disabledDates = ma(b), d.enabledDates = !1, $(), l;
      }, l.enabledDates = function (b) {
        if (0 === arguments.length)
          return d.enabledDates ? a.extend({}, d.enabledDates) : d.enabledDates;
        if (!b)
          return d.enabledDates = !1, $(), l;
        if (!(b instanceof Array))
          throw new TypeError('enabledDates() expects an array parameter');
        return d.enabledDates = ma(b), d.disabledDates = !1, $(), l;
      }, l.daysOfWeekDisabled = function (a) {
        if (0 === arguments.length)
          return d.daysOfWeekDisabled.splice(0);
        if ('boolean' == typeof a && !a)
          return d.daysOfWeekDisabled = !1, $(), l;
        if (!(a instanceof Array))
          throw new TypeError('daysOfWeekDisabled() expects an array parameter');
        if (d.daysOfWeekDisabled = a.reduce(function (a, b) {
            return b = parseInt(b, 10), b > 6 || 0 > b || isNaN(b) ? a : (-1 === a.indexOf(b) && a.push(b), a);
          }, []).sort(), d.useCurrent && !d.keepInvalid) {
          for (var b = 0; !Q(e, 'd');) {
            if (e.add(1, 'd'), 7 === b)
              throw 'Tried 7 times to find a valid date';
            b++;
          }
          _(e);
        }
        return $(), l;
      }, l.maxDate = function (a) {
        if (0 === arguments.length)
          return d.maxDate ? d.maxDate.clone() : d.maxDate;
        if ('boolean' == typeof a && a === !1)
          return d.maxDate = !1, $(), l;
        'string' == typeof a && ('now' === a || 'moment' === a) && (a = x());
        var b = ga(a);
        if (!b.isValid())
          throw new TypeError('maxDate() Could not parse date parameter: ' + a);
        if (d.minDate && b.isBefore(d.minDate))
          throw new TypeError('maxDate() date parameter is before options.minDate: ' + b.format(i));
        return d.maxDate = b, d.useCurrent && !d.keepInvalid && e.isAfter(a) && _(d.maxDate), f.isAfter(b) && (f = b.clone().subtract(d.stepping, 'm')), $(), l;
      }, l.minDate = function (a) {
        if (0 === arguments.length)
          return d.minDate ? d.minDate.clone() : d.minDate;
        if ('boolean' == typeof a && a === !1)
          return d.minDate = !1, $(), l;
        'string' == typeof a && ('now' === a || 'moment' === a) && (a = x());
        var b = ga(a);
        if (!b.isValid())
          throw new TypeError('minDate() Could not parse date parameter: ' + a);
        if (d.maxDate && b.isAfter(d.maxDate))
          throw new TypeError('minDate() date parameter is after options.maxDate: ' + b.format(i));
        return d.minDate = b, d.useCurrent && !d.keepInvalid && e.isBefore(a) && _(d.minDate), f.isBefore(b) && (f = b.clone().add(d.stepping, 'm')), $(), l;
      }, l.defaultDate = function (a) {
        if (0 === arguments.length)
          return d.defaultDate ? d.defaultDate.clone() : d.defaultDate;
        if (!a)
          return d.defaultDate = !1, l;
        'string' == typeof a && ('now' === a || 'moment' === a) && (a = x());
        var b = ga(a);
        if (!b.isValid())
          throw new TypeError('defaultDate() Could not parse date parameter: ' + a);
        if (!Q(b))
          throw new TypeError('defaultDate() date passed is invalid according to component setup validations');
        return d.defaultDate = b, (d.defaultDate && d.inline || '' === g.val().trim()) && _(d.defaultDate), l;
      }, l.locale = function (a) {
        if (0 === arguments.length)
          return d.locale;
        if (!b.localeData(a))
          throw new TypeError('locale() locale ' + a + ' is not loaded from moment locales!');
        return d.locale = a, e.locale(d.locale), f.locale(d.locale), i && oa(), o && (aa(), ea()), l;
      }, l.stepping = function (a) {
        return 0 === arguments.length ? d.stepping : (a = parseInt(a, 10), (isNaN(a) || 1 > a) && (a = 1), d.stepping = a, l);
      }, l.useCurrent = function (a) {
        var b = [
            'year',
            'month',
            'day',
            'hour',
            'minute'
          ];
        if (0 === arguments.length)
          return d.useCurrent;
        if ('boolean' != typeof a && 'string' != typeof a)
          throw new TypeError('useCurrent() expects a boolean or string parameter');
        if ('string' == typeof a && -1 === b.indexOf(a.toLowerCase()))
          throw new TypeError('useCurrent() expects a string parameter of ' + b.join(', '));
        return d.useCurrent = a, l;
      }, l.collapse = function (a) {
        if (0 === arguments.length)
          return d.collapse;
        if ('boolean' != typeof a)
          throw new TypeError('collapse() expects a boolean parameter');
        return d.collapse === a ? l : (d.collapse = a, o && (aa(), ea()), l);
      }, l.icons = function (b) {
        if (0 === arguments.length)
          return a.extend({}, d.icons);
        if (!(b instanceof Object))
          throw new TypeError('icons() expects parameter to be an Object');
        return a.extend(d.icons, b), o && (aa(), ea()), l;
      }, l.tooltips = function (b) {
        if (0 === arguments.length)
          return a.extend({}, d.tooltips);
        if (!(b instanceof Object))
          throw new TypeError('tooltips() expects parameter to be an Object');
        return a.extend(d.tooltips, b), o && (aa(), ea()), l;
      }, l.useStrict = function (a) {
        if (0 === arguments.length)
          return d.useStrict;
        if ('boolean' != typeof a)
          throw new TypeError('useStrict() expects a boolean parameter');
        return d.useStrict = a, l;
      }, l.sideBySide = function (a) {
        if (0 === arguments.length)
          return d.sideBySide;
        if ('boolean' != typeof a)
          throw new TypeError('sideBySide() expects a boolean parameter');
        return d.sideBySide = a, o && (aa(), ea()), l;
      }, l.viewMode = function (a) {
        if (0 === arguments.length)
          return d.viewMode;
        if ('string' != typeof a)
          throw new TypeError('viewMode() expects a string parameter');
        if (-1 === r.indexOf(a))
          throw new TypeError('viewMode() parameter must be one of (' + r.join(', ') + ') value');
        return d.viewMode = a, k = Math.max(r.indexOf(a), p), K(), l;
      }, l.toolbarPlacement = function (a) {
        if (0 === arguments.length)
          return d.toolbarPlacement;
        if ('string' != typeof a)
          throw new TypeError('toolbarPlacement() expects a string parameter');
        if (-1 === u.indexOf(a))
          throw new TypeError('toolbarPlacement() parameter must be one of (' + u.join(', ') + ') value');
        return d.toolbarPlacement = a, o && (aa(), ea()), l;
      }, l.widgetPositioning = function (b) {
        if (0 === arguments.length)
          return a.extend({}, d.widgetPositioning);
        if ('[object Object]' !== {}.toString.call(b))
          throw new TypeError('widgetPositioning() expects an object variable');
        if (b.horizontal) {
          if ('string' != typeof b.horizontal)
            throw new TypeError('widgetPositioning() horizontal variable must be a string');
          if (b.horizontal = b.horizontal.toLowerCase(), -1 === t.indexOf(b.horizontal))
            throw new TypeError('widgetPositioning() expects horizontal parameter to be one of (' + t.join(', ') + ')');
          d.widgetPositioning.horizontal = b.horizontal;
        }
        if (b.vertical) {
          if ('string' != typeof b.vertical)
            throw new TypeError('widgetPositioning() vertical variable must be a string');
          if (b.vertical = b.vertical.toLowerCase(), -1 === s.indexOf(b.vertical))
            throw new TypeError('widgetPositioning() expects vertical parameter to be one of (' + s.join(', ') + ')');
          d.widgetPositioning.vertical = b.vertical;
        }
        return $(), l;
      }, l.calendarWeeks = function (a) {
        if (0 === arguments.length)
          return d.calendarWeeks;
        if ('boolean' != typeof a)
          throw new TypeError('calendarWeeks() expects parameter to be a boolean value');
        return d.calendarWeeks = a, $(), l;
      }, l.showTodayButton = function (a) {
        if (0 === arguments.length)
          return d.showTodayButton;
        if ('boolean' != typeof a)
          throw new TypeError('showTodayButton() expects a boolean parameter');
        return d.showTodayButton = a, o && (aa(), ea()), l;
      }, l.showClear = function (a) {
        if (0 === arguments.length)
          return d.showClear;
        if ('boolean' != typeof a)
          throw new TypeError('showClear() expects a boolean parameter');
        return d.showClear = a, o && (aa(), ea()), l;
      }, l.widgetParent = function (b) {
        if (0 === arguments.length)
          return d.widgetParent;
        if ('string' == typeof b && (b = a(b)), null !== b && 'string' != typeof b && !(b instanceof a))
          throw new TypeError('widgetParent() expects a string or a jQuery object parameter');
        return d.widgetParent = b, o && (aa(), ea()), l;
      }, l.keepOpen = function (a) {
        if (0 === arguments.length)
          return d.keepOpen;
        if ('boolean' != typeof a)
          throw new TypeError('keepOpen() expects a boolean parameter');
        return d.keepOpen = a, l;
      }, l.focusOnShow = function (a) {
        if (0 === arguments.length)
          return d.focusOnShow;
        if ('boolean' != typeof a)
          throw new TypeError('focusOnShow() expects a boolean parameter');
        return d.focusOnShow = a, l;
      }, l.inline = function (a) {
        if (0 === arguments.length)
          return d.inline;
        if ('boolean' != typeof a)
          throw new TypeError('inline() expects a boolean parameter');
        return d.inline = a, l;
      }, l.clear = function () {
        return ba(), l;
      }, l.keyBinds = function (a) {
        return d.keyBinds = a, l;
      }, l.getMoment = function (a) {
        return x(a);
      }, l.debug = function (a) {
        if ('boolean' != typeof a)
          throw new TypeError('debug() expects a boolean parameter');
        return d.debug = a, l;
      }, l.allowInputToggle = function (a) {
        if (0 === arguments.length)
          return d.allowInputToggle;
        if ('boolean' != typeof a)
          throw new TypeError('allowInputToggle() expects a boolean parameter');
        return d.allowInputToggle = a, l;
      }, l.showClose = function (a) {
        if (0 === arguments.length)
          return d.showClose;
        if ('boolean' != typeof a)
          throw new TypeError('showClose() expects a boolean parameter');
        return d.showClose = a, l;
      }, l.keepInvalid = function (a) {
        if (0 === arguments.length)
          return d.keepInvalid;
        if ('boolean' != typeof a)
          throw new TypeError('keepInvalid() expects a boolean parameter');
        return d.keepInvalid = a, l;
      }, l.datepickerInput = function (a) {
        if (0 === arguments.length)
          return d.datepickerInput;
        if ('string' != typeof a)
          throw new TypeError('datepickerInput() expects a string parameter');
        return d.datepickerInput = a, l;
      }, l.parseInputDate = function (a) {
        if (0 === arguments.length)
          return d.parseInputDate;
        if ('function' != typeof a)
          throw new TypeError('parseInputDate() sholud be as function');
        return d.parseInputDate = a, l;
      }, l.disabledTimeIntervals = function (b) {
        if (0 === arguments.length)
          return d.disabledTimeIntervals ? a.extend({}, d.disabledTimeIntervals) : d.disabledTimeIntervals;
        if (!b)
          return d.disabledTimeIntervals = !1, $(), l;
        if (!(b instanceof Array))
          throw new TypeError('disabledTimeIntervals() expects an array parameter');
        return d.disabledTimeIntervals = b, $(), l;
      }, l.disabledHours = function (b) {
        if (0 === arguments.length)
          return d.disabledHours ? a.extend({}, d.disabledHours) : d.disabledHours;
        if (!b)
          return d.disabledHours = !1, $(), l;
        if (!(b instanceof Array))
          throw new TypeError('disabledHours() expects an array parameter');
        if (d.disabledHours = na(b), d.enabledHours = !1, d.useCurrent && !d.keepInvalid) {
          for (var c = 0; !Q(e, 'h');) {
            if (e.add(1, 'h'), 24 === c)
              throw 'Tried 24 times to find a valid date';
            c++;
          }
          _(e);
        }
        return $(), l;
      }, l.enabledHours = function (b) {
        if (0 === arguments.length)
          return d.enabledHours ? a.extend({}, d.enabledHours) : d.enabledHours;
        if (!b)
          return d.enabledHours = !1, $(), l;
        if (!(b instanceof Array))
          throw new TypeError('enabledHours() expects an array parameter');
        if (d.enabledHours = na(b), d.disabledHours = !1, d.useCurrent && !d.keepInvalid) {
          for (var c = 0; !Q(e, 'h');) {
            if (e.add(1, 'h'), 24 === c)
              throw 'Tried 24 times to find a valid date';
            c++;
          }
          _(e);
        }
        return $(), l;
      }, l.viewDate = function (a) {
        if (0 === arguments.length)
          return f.clone();
        if (!a)
          return f = e.clone(), l;
        if (!('string' == typeof a || b.isMoment(a) || a instanceof Date))
          throw new TypeError('viewDate() parameter must be one of [string, moment or Date]');
        return f = ga(a), J(), l;
      }, c.is('input'))
      g = c;
    else if (g = c.find(d.datepickerInput), 0 === g.size())
      g = c.find('input');
    else if (!g.is('input'))
      throw new Error('CSS class "' + d.datepickerInput + '" cannot be applied to non input element');
    if (c.hasClass('input-group') && (n = 0 === c.find('.datepickerbutton').size() ? c.find('.input-group-addon') : c.find('.datepickerbutton')), !d.inline && !g.is('input'))
      throw new Error('Could not initialize DateTimePicker without an input element');
    return e = x(), f = e.clone(), a.extend(!0, d, G()), l.options(d), oa(), ka(), g.prop('disabled') && l.disable(), g.is('input') && 0 !== g.val().trim().length ? _(ga(g.val().trim())) : d.defaultDate && void 0 === g.attr('placeholder') && _(d.defaultDate), d.inline && ea(), l;
  };
  a.fn.datetimepicker = function (b) {
    return this.each(function () {
      var d = a(this);
      d.data('DateTimePicker') || (b = a.extend(!0, {}, a.fn.datetimepicker.defaults, b), d.data('DateTimePicker', c(d, b)));
    });
  }, a.fn.datetimepicker.defaults = {
    timeZone: 'Etc/UTC',
    format: !1,
    dayViewHeaderFormat: 'MMMM YYYY',
    extraFormats: !1,
    stepping: 1,
    minDate: !1,
    maxDate: !1,
    useCurrent: !0,
    collapse: !0,
    locale: b.locale(),
    defaultDate: !1,
    disabledDates: !1,
    enabledDates: !1,
    icons: {
      time: 'glyphicon glyphicon-time',
      date: 'glyphicon glyphicon-calendar',
      up: 'glyphicon glyphicon-chevron-up',
      down: 'glyphicon glyphicon-chevron-down',
      previous: 'glyphicon glyphicon-chevron-left',
      next: 'glyphicon glyphicon-chevron-right',
      today: 'glyphicon glyphicon-screenshot',
      clear: 'glyphicon glyphicon-trash',
      close: 'glyphicon glyphicon-remove'
    },
    tooltips: {
      today: 'Go to today',
      clear: 'Clear selection',
      close: 'Close the picker',
      selectMonth: 'Select Month',
      prevMonth: 'Previous Month',
      nextMonth: 'Next Month',
      selectYear: 'Select Year',
      prevYear: 'Previous Year',
      nextYear: 'Next Year',
      selectDecade: 'Select Decade',
      prevDecade: 'Previous Decade',
      nextDecade: 'Next Decade',
      prevCentury: 'Previous Century',
      nextCentury: 'Next Century',
      pickHour: 'Pick Hour',
      incrementHour: 'Increment Hour',
      decrementHour: 'Decrement Hour',
      pickMinute: 'Pick Minute',
      incrementMinute: 'Increment Minute',
      decrementMinute: 'Decrement Minute',
      pickSecond: 'Pick Second',
      incrementSecond: 'Increment Second',
      decrementSecond: 'Decrement Second',
      togglePeriod: 'Toggle Period',
      selectTime: 'Select Time'
    },
    useStrict: !1,
    sideBySide: !1,
    daysOfWeekDisabled: !1,
    calendarWeeks: !1,
    viewMode: 'days',
    toolbarPlacement: 'default',
    showTodayButton: !1,
    showClear: !1,
    showClose: !1,
    widgetPositioning: {
      horizontal: 'auto',
      vertical: 'auto'
    },
    widgetParent: null,
    ignoreReadonly: !1,
    keepOpen: !1,
    focusOnShow: !0,
    inline: !1,
    keepInvalid: !1,
    datepickerInput: '.datepickerinput',
    keyBinds: {
      up: function (a) {
        if (a) {
          var b = this.date() || this.getMoment();
          a.find('.datepicker').is(':visible') ? this.date(b.clone().subtract(7, 'd')) : this.date(b.clone().add(this.stepping(), 'm'));
        }
      },
      down: function (a) {
        if (!a)
          return void this.show();
        var b = this.date() || this.getMoment();
        a.find('.datepicker').is(':visible') ? this.date(b.clone().add(7, 'd')) : this.date(b.clone().subtract(this.stepping(), 'm'));
      },
      'control up': function (a) {
        if (a) {
          var b = this.date() || this.getMoment();
          a.find('.datepicker').is(':visible') ? this.date(b.clone().subtract(1, 'y')) : this.date(b.clone().add(1, 'h'));
        }
      },
      'control down': function (a) {
        if (a) {
          var b = this.date() || this.getMoment();
          a.find('.datepicker').is(':visible') ? this.date(b.clone().add(1, 'y')) : this.date(b.clone().subtract(1, 'h'));
        }
      },
      left: function (a) {
        if (a) {
          var b = this.date() || this.getMoment();
          a.find('.datepicker').is(':visible') && this.date(b.clone().subtract(1, 'd'));
        }
      },
      right: function (a) {
        if (a) {
          var b = this.date() || this.getMoment();
          a.find('.datepicker').is(':visible') && this.date(b.clone().add(1, 'd'));
        }
      },
      pageUp: function (a) {
        if (a) {
          var b = this.date() || this.getMoment();
          a.find('.datepicker').is(':visible') && this.date(b.clone().subtract(1, 'M'));
        }
      },
      pageDown: function (a) {
        if (a) {
          var b = this.date() || this.getMoment();
          a.find('.datepicker').is(':visible') && this.date(b.clone().add(1, 'M'));
        }
      },
      enter: function () {
        this.hide();
      },
      escape: function () {
        this.hide();
      },
      'control space': function (a) {
        a.find('.timepicker').is(':visible') && a.find('.btn[data-action="togglePeriod"]').click();
      },
      t: function () {
        this.date(this.getMoment());
      },
      'delete': function () {
        this.clear();
      }
    },
    debug: !1,
    allowInputToggle: !1,
    disabledTimeIntervals: !1,
    disabledHours: !1,
    enabledHours: !1,
    viewDate: !1
  };
});
/*!
Waypoints - 4.0.0
Copyright © 2011-2015 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blog/master/licenses.txt
*/
!function () {
  'use strict';
  function t(o) {
    if (!o)
      throw new Error('No options passed to Waypoint constructor');
    if (!o.element)
      throw new Error('No element option passed to Waypoint constructor');
    if (!o.handler)
      throw new Error('No handler option passed to Waypoint constructor');
    this.key = 'waypoint-' + e, this.options = t.Adapter.extend({}, t.defaults, o), this.element = this.options.element, this.adapter = new t.Adapter(this.element), this.callback = o.handler, this.axis = this.options.horizontal ? 'horizontal' : 'vertical', this.enabled = this.options.enabled, this.triggerPoint = null, this.group = t.Group.findOrCreate({
      name: this.options.group,
      axis: this.axis
    }), this.context = t.Context.findOrCreateByElement(this.options.context), t.offsetAliases[this.options.offset] && (this.options.offset = t.offsetAliases[this.options.offset]), this.group.add(this), this.context.add(this), i[this.key] = this, e += 1;
  }
  var e = 0, i = {};
  t.prototype.queueTrigger = function (t) {
    this.group.queueTrigger(this, t);
  }, t.prototype.trigger = function (t) {
    this.enabled && this.callback && this.callback.apply(this, t);
  }, t.prototype.destroy = function () {
    this.context.remove(this), this.group.remove(this), delete i[this.key];
  }, t.prototype.disable = function () {
    return this.enabled = !1, this;
  }, t.prototype.enable = function () {
    return this.context.refresh(), this.enabled = !0, this;
  }, t.prototype.next = function () {
    return this.group.next(this);
  }, t.prototype.previous = function () {
    return this.group.previous(this);
  }, t.invokeAll = function (t) {
    var e = [];
    for (var o in i)
      e.push(i[o]);
    for (var n = 0, r = e.length; r > n; n++)
      e[n][t]();
  }, t.destroyAll = function () {
    t.invokeAll('destroy');
  }, t.disableAll = function () {
    t.invokeAll('disable');
  }, t.enableAll = function () {
    t.invokeAll('enable');
  }, t.refreshAll = function () {
    t.Context.refreshAll();
  }, t.viewportHeight = function () {
    return window.innerHeight || document.documentElement.clientHeight;
  }, t.viewportWidth = function () {
    return document.documentElement.clientWidth;
  }, t.adapters = [], t.defaults = {
    context: window,
    continuous: !0,
    enabled: !0,
    group: 'default',
    horizontal: !1,
    offset: 0
  }, t.offsetAliases = {
    'bottom-in-view': function () {
      return this.context.innerHeight() - this.adapter.outerHeight();
    },
    'right-in-view': function () {
      return this.context.innerWidth() - this.adapter.outerWidth();
    }
  }, window.Waypoint = t;
}(), function () {
  'use strict';
  function t(t) {
    window.setTimeout(t, 1000 / 60);
  }
  function e(t) {
    this.element = t, this.Adapter = n.Adapter, this.adapter = new this.Adapter(t), this.key = 'waypoint-context-' + i, this.didScroll = !1, this.didResize = !1, this.oldScroll = {
      x: this.adapter.scrollLeft(),
      y: this.adapter.scrollTop()
    }, this.waypoints = {
      vertical: {},
      horizontal: {}
    }, t.waypointContextKey = this.key, o[t.waypointContextKey] = this, i += 1, this.createThrottledScrollHandler(), this.createThrottledResizeHandler();
  }
  var i = 0, o = {}, n = window.Waypoint, r = window.onload;
  e.prototype.add = function (t) {
    var e = t.options.horizontal ? 'horizontal' : 'vertical';
    this.waypoints[e][t.key] = t, this.refresh();
  }, e.prototype.checkEmpty = function () {
    var t = this.Adapter.isEmptyObject(this.waypoints.horizontal), e = this.Adapter.isEmptyObject(this.waypoints.vertical);
    t && e && (this.adapter.off('.waypoints'), delete o[this.key]);
  }, e.prototype.createThrottledResizeHandler = function () {
    function t() {
      e.handleResize(), e.didResize = !1;
    }
    var e = this;
    this.adapter.on('resize.waypoints', function () {
      e.didResize || (e.didResize = !0, n.requestAnimationFrame(t));
    });
  }, e.prototype.createThrottledScrollHandler = function () {
    function t() {
      e.handleScroll(), e.didScroll = !1;
    }
    var e = this;
    this.adapter.on('scroll.waypoints', function () {
      (!e.didScroll || n.isTouch) && (e.didScroll = !0, n.requestAnimationFrame(t));
    });
  }, e.prototype.handleResize = function () {
    n.Context.refreshAll();
  }, e.prototype.handleScroll = function () {
    var t = {}, e = {
        horizontal: {
          newScroll: this.adapter.scrollLeft(),
          oldScroll: this.oldScroll.x,
          forward: 'right',
          backward: 'left'
        },
        vertical: {
          newScroll: this.adapter.scrollTop(),
          oldScroll: this.oldScroll.y,
          forward: 'down',
          backward: 'up'
        }
      };
    for (var i in e) {
      var o = e[i], n = o.newScroll > o.oldScroll, r = n ? o.forward : o.backward;
      for (var s in this.waypoints[i]) {
        var a = this.waypoints[i][s], l = o.oldScroll < a.triggerPoint, h = o.newScroll >= a.triggerPoint, p = l && h, u = !l && !h;
        (p || u) && (a.queueTrigger(r), t[a.group.id] = a.group);
      }
    }
    for (var c in t)
      t[c].flushTriggers();
    this.oldScroll = {
      x: e.horizontal.newScroll,
      y: e.vertical.newScroll
    };
  }, e.prototype.innerHeight = function () {
    return this.element == this.element.window ? n.viewportHeight() : this.adapter.innerHeight();
  }, e.prototype.remove = function (t) {
    delete this.waypoints[t.axis][t.key], this.checkEmpty();
  }, e.prototype.innerWidth = function () {
    return this.element == this.element.window ? n.viewportWidth() : this.adapter.innerWidth();
  }, e.prototype.destroy = function () {
    var t = [];
    for (var e in this.waypoints)
      for (var i in this.waypoints[e])
        t.push(this.waypoints[e][i]);
    for (var o = 0, n = t.length; n > o; o++)
      t[o].destroy();
  }, e.prototype.refresh = function () {
    var t, e = this.element == this.element.window, i = e ? void 0 : this.adapter.offset(), o = {};
    this.handleScroll(), t = {
      horizontal: {
        contextOffset: e ? 0 : i.left,
        contextScroll: e ? 0 : this.oldScroll.x,
        contextDimension: this.innerWidth(),
        oldScroll: this.oldScroll.x,
        forward: 'right',
        backward: 'left',
        offsetProp: 'left'
      },
      vertical: {
        contextOffset: e ? 0 : i.top,
        contextScroll: e ? 0 : this.oldScroll.y,
        contextDimension: this.innerHeight(),
        oldScroll: this.oldScroll.y,
        forward: 'down',
        backward: 'up',
        offsetProp: 'top'
      }
    };
    for (var r in t) {
      var s = t[r];
      for (var a in this.waypoints[r]) {
        var l, h, p, u, c, d = this.waypoints[r][a], f = d.options.offset, w = d.triggerPoint, y = 0, g = null == w;
        d.element !== d.element.window && (y = d.adapter.offset()[s.offsetProp]), 'function' == typeof f ? f = f.apply(d) : 'string' == typeof f && (f = parseFloat(f), d.options.offset.indexOf('%') > -1 && (f = Math.ceil(s.contextDimension * f / 100))), l = s.contextScroll - s.contextOffset, d.triggerPoint = y + l - f, h = w < s.oldScroll, p = d.triggerPoint >= s.oldScroll, u = h && p, c = !h && !p, !g && u ? (d.queueTrigger(s.backward), o[d.group.id] = d.group) : !g && c ? (d.queueTrigger(s.forward), o[d.group.id] = d.group) : g && s.oldScroll >= d.triggerPoint && (d.queueTrigger(s.forward), o[d.group.id] = d.group);
      }
    }
    return n.requestAnimationFrame(function () {
      for (var t in o)
        o[t].flushTriggers();
    }), this;
  }, e.findOrCreateByElement = function (t) {
    return e.findByElement(t) || new e(t);
  }, e.refreshAll = function () {
    for (var t in o)
      o[t].refresh();
  }, e.findByElement = function (t) {
    return o[t.waypointContextKey];
  }, window.onload = function () {
    r && r(), e.refreshAll();
  }, n.requestAnimationFrame = function (e) {
    var i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || t;
    i.call(window, e);
  }, n.Context = e;
}(), function () {
  'use strict';
  function t(t, e) {
    return t.triggerPoint - e.triggerPoint;
  }
  function e(t, e) {
    return e.triggerPoint - t.triggerPoint;
  }
  function i(t) {
    this.name = t.name, this.axis = t.axis, this.id = this.name + '-' + this.axis, this.waypoints = [], this.clearTriggerQueues(), o[this.axis][this.name] = this;
  }
  var o = {
      vertical: {},
      horizontal: {}
    }, n = window.Waypoint;
  i.prototype.add = function (t) {
    this.waypoints.push(t);
  }, i.prototype.clearTriggerQueues = function () {
    this.triggerQueues = {
      up: [],
      down: [],
      left: [],
      right: []
    };
  }, i.prototype.flushTriggers = function () {
    for (var i in this.triggerQueues) {
      var o = this.triggerQueues[i], n = 'up' === i || 'left' === i;
      o.sort(n ? e : t);
      for (var r = 0, s = o.length; s > r; r += 1) {
        var a = o[r];
        (a.options.continuous || r === o.length - 1) && a.trigger([i]);
      }
    }
    this.clearTriggerQueues();
  }, i.prototype.next = function (e) {
    this.waypoints.sort(t);
    var i = n.Adapter.inArray(e, this.waypoints), o = i === this.waypoints.length - 1;
    return o ? null : this.waypoints[i + 1];
  }, i.prototype.previous = function (e) {
    this.waypoints.sort(t);
    var i = n.Adapter.inArray(e, this.waypoints);
    return i ? this.waypoints[i - 1] : null;
  }, i.prototype.queueTrigger = function (t, e) {
    this.triggerQueues[e].push(t);
  }, i.prototype.remove = function (t) {
    var e = n.Adapter.inArray(t, this.waypoints);
    e > -1 && this.waypoints.splice(e, 1);
  }, i.prototype.first = function () {
    return this.waypoints[0];
  }, i.prototype.last = function () {
    return this.waypoints[this.waypoints.length - 1];
  }, i.findOrCreate = function (t) {
    return o[t.axis][t.name] || new i(t);
  }, n.Group = i;
}(), function () {
  'use strict';
  function t(t) {
    this.$element = e(t);
  }
  var e = window.jQuery, i = window.Waypoint;
  e.each([
    'innerHeight',
    'innerWidth',
    'off',
    'offset',
    'on',
    'outerHeight',
    'outerWidth',
    'scrollLeft',
    'scrollTop'
  ], function (e, i) {
    t.prototype[i] = function () {
      var t = Array.prototype.slice.call(arguments);
      return this.$element[i].apply(this.$element, t);
    };
  }), e.each([
    'extend',
    'inArray',
    'isEmptyObject'
  ], function (i, o) {
    t[o] = e[o];
  }), i.adapters.push({
    name: 'jquery',
    Adapter: t
  }), i.Adapter = t;
}(), function () {
  'use strict';
  function t(t) {
    return function () {
      var i = [], o = arguments[0];
      return t.isFunction(arguments[0]) && (o = t.extend({}, arguments[1]), o.handler = arguments[0]), this.each(function () {
        var n = t.extend({}, o, { element: this });
        'string' == typeof n.context && (n.context = t(this).closest(n.context)[0]), i.push(new e(n));
      }), i;
    };
  }
  var e = window.Waypoint;
  window.jQuery && (window.jQuery.fn.waypoint = t(window.jQuery)), window.Zepto && (window.Zepto.fn.waypoint = t(window.Zepto));
}();
/*!
Waypoints Sticky Element Shortcut - 4.0.0
Copyright © 2011-2015 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blog/master/licenses.txt
*/
!function () {
  'use strict';
  function t(s) {
    this.options = e.extend({}, i.defaults, t.defaults, s), this.element = this.options.element, this.$element = e(this.element), this.createWrapper(), this.createWaypoint();
  }
  var e = window.jQuery, i = window.Waypoint;
  t.prototype.createWaypoint = function () {
    var t = this.options.handler;
    this.waypoint = new i(e.extend({}, this.options, {
      element: this.wrapper,
      handler: e.proxy(function (e) {
        var i = this.options.direction.indexOf(e) > -1, s = i ? this.$element.outerHeight(!0) : '';
        this.$wrapper.height(s), this.$element.toggleClass(this.options.stuckClass, i), t && t.call(this, e);
      }, this)
    }));
  }, t.prototype.createWrapper = function () {
    this.options.wrapper && this.$element.wrap(this.options.wrapper), this.$wrapper = this.$element.parent(), this.wrapper = this.$wrapper[0];
  }, t.prototype.destroy = function () {
    this.$element.parent()[0] === this.wrapper && (this.waypoint.destroy(), this.$element.removeClass(this.options.stuckClass), this.options.wrapper && this.$element.unwrap());
  }, t.defaults = {
    wrapper: '<div class="sticky-wrapper" />',
    stuckClass: 'stuck',
    direction: 'down right'
  }, i.Sticky = t;
}();
/*!
Waypoints Inview Shortcut - 4.0.0
Copyright © 2011-2015 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blog/master/licenses.txt
*/
!function () {
  'use strict';
  function t() {
  }
  function e(t) {
    this.options = i.Adapter.extend({}, e.defaults, t), this.axis = this.options.horizontal ? 'horizontal' : 'vertical', this.waypoints = [], this.element = this.options.element, this.createWaypoints();
  }
  var i = window.Waypoint;
  e.prototype.createWaypoints = function () {
    for (var t = {
          vertical: [
            {
              down: 'enter',
              up: 'exited',
              offset: '100%'
            },
            {
              down: 'entered',
              up: 'exit',
              offset: 'bottom-in-view'
            },
            {
              down: 'exit',
              up: 'entered',
              offset: 0
            },
            {
              down: 'exited',
              up: 'enter',
              offset: function () {
                return -this.adapter.outerHeight();
              }
            }
          ],
          horizontal: [
            {
              right: 'enter',
              left: 'exited',
              offset: '100%'
            },
            {
              right: 'entered',
              left: 'exit',
              offset: 'right-in-view'
            },
            {
              right: 'exit',
              left: 'entered',
              offset: 0
            },
            {
              right: 'exited',
              left: 'enter',
              offset: function () {
                return -this.adapter.outerWidth();
              }
            }
          ]
        }, e = 0, i = t[this.axis].length; i > e; e++) {
      var n = t[this.axis][e];
      this.createWaypoint(n);
    }
  }, e.prototype.createWaypoint = function (t) {
    var e = this;
    this.waypoints.push(new i({
      context: this.options.context,
      element: this.options.element,
      enabled: this.options.enabled,
      handler: function (t) {
        return function (i) {
          e.options[t[i]].call(e, i);
        };
      }(t),
      offset: t.offset,
      horizontal: this.options.horizontal
    }));
  }, e.prototype.destroy = function () {
    for (var t = 0, e = this.waypoints.length; e > t; t++)
      this.waypoints[t].destroy();
    this.waypoints = [];
  }, e.prototype.disable = function () {
    for (var t = 0, e = this.waypoints.length; e > t; t++)
      this.waypoints[t].disable();
  }, e.prototype.enable = function () {
    for (var t = 0, e = this.waypoints.length; e > t; t++)
      this.waypoints[t].enable();
  }, e.defaults = {
    context: window,
    enabled: !0,
    enter: t,
    entered: t,
    exit: t,
    exited: t
  }, i.Inview = e;
}();
/*! DataTables 1.10.12
 * ©2008-2015 SpryMedia Ltd - datatables.net/license
 */
/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.12
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2008-2015 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/
(function (factory) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
    // AMD
    define(['jquery'], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        // CommonJS environments without a window global must pass a
        // root. This will give an error otherwise
        root = window;
      }
      if (!$) {
        $ = typeof window !== 'undefined' ? require('jquery') : require('jquery')(root);
      }
      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
}(function ($, window, document, undefined) {
  'use strict';
  /**
	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	 * flexible tool, based upon the foundations of progressive enhancement,
	 * which will add advanced interaction controls to any HTML table. For a
	 * full list of features please refer to
	 * [DataTables.net](href="http://datatables.net).
	 *
	 * Note that the `DataTable` object is not a global variable but is aliased
	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	 * be  accessed.
	 *
	 *  @class
	 *  @param {object} [init={}] Configuration object for DataTables. Options
	 *    are defined by {@link DataTable.defaults}
	 *  @requires jQuery 1.7+
	 *
	 *  @example
	 *    // Basic initialisation
	 *    $(document).ready( function {
	 *      $('#example').dataTable();
	 *    } );
	 *
	 *  @example
	 *    // Initialisation with configuration options - in this case, disable
	 *    // pagination and sorting.
	 *    $(document).ready( function {
	 *      $('#example').dataTable( {
	 *        "paginate": false,
	 *        "sort": false
	 *      } );
	 *    } );
	 */
  var DataTable = function (options) {
    /**
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
		 * return the resulting jQuery object.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
		 *    criterion ("applied") or all TR elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {object} jQuery object, filtered by the given selector.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Highlight every second row
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.
		 *      oTable.fnFilter('Webkit');
		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
		 *      oTable.fnFilter('');
		 *    } );
		 */
    this.$ = function (sSelector, oOpts) {
      return this.api(true).$(sSelector, oOpts);
    };
    /**
		 * Almost identical to $ in operation, but in this case returns the data for the matched
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching
		 * rows are found, the data returned is the original data array/object that was used to
		 * create the row (or a generated array if from a DOM source).
		 *
		 * This method is often useful in-combination with $ where both functions are given the
		 * same parameters and the array indexes will match identically.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
		 *    criterion ("applied") or all elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
		 *    entry in the array.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the data from the first row in the table
		 *      var data = oTable._('tr:first');
		 *
		 *      // Do something useful with the data
		 *      alert( "First cell is: "+data[0] );
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to 'Webkit' and get all data for
		 *      oTable.fnFilter('Webkit');
		 *      var data = oTable._('tr', {"search": "applied"});
		 *
		 *      // Do something with the data
		 *      alert( data.length+" rows matched the search" );
		 *    } );
		 */
    this._ = function (sSelector, oOpts) {
      return this.api(true).rows(sSelector, oOpts).data();
    };
    /**
		 * Create a DataTables Api instance, with the currently selected tables for
		 * the Api's context.
		 * @param {boolean} [traditional=false] Set the API instance's context to be
		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
		 *   or if all tables captured in the jQuery object should be used.
		 * @return {DataTables.Api}
		 */
    this.api = function (traditional) {
      return traditional ? new _Api(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api(this);
    };
    /**
		 * Add a single new row or multiple rows of data to the table. Please note
		 * that this is suitable for client-side processing only - if you are using
		 * server-side processing (i.e. "bServerSide": true), then to add data, you
		 * must add it to the data source, i.e. the server-side, through an Ajax call.
		 *  @param {array|object} data The data to be added to the table. This can be:
		 *    <ul>
		 *      <li>1D array of data - add a single row with the data provided</li>
		 *      <li>2D array of arrays - add multiple rows in a single call</li>
		 *      <li>object - data object when using <i>mData</i></li>
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
		 *    </ul>
		 *  @param {bool} [redraw=true] redraw the table or not
		 *  @returns {array} An array of integers, representing the list of indexes in
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
		 *    the table.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Global var for counter
		 *    var giCount = 2;
		 *
		 *    $(document).ready(function() {
		 *      $('#example').dataTable();
		 *    } );
		 *
		 *    function fnClickAddRow() {
		 *      $('#example').dataTable().fnAddData( [
		 *        giCount+".1",
		 *        giCount+".2",
		 *        giCount+".3",
		 *        giCount+".4" ]
		 *      );
		 *
		 *      giCount++;
		 *    }
		 */
    this.fnAddData = function (data, redraw) {
      var api = this.api(true);
      /* Check if we want to add multiple rows or not */
      var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);
      if (redraw === undefined || redraw) {
        api.draw();
      }
      return rows.flatten().toArray();
    };
    /**
		 * This function will make DataTables recalculate the column sizes, based on the data
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
		 * through the sWidth parameter). This can be useful when the width of the table's
		 * parent element changes (for example a window resize).
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable( {
		 *        "sScrollY": "200px",
		 *        "bPaginate": false
		 *      } );
		 *
		 *      $(window).bind('resize', function () {
		 *        oTable.fnAdjustColumnSizing();
		 *      } );
		 *    } );
		 */
    this.fnAdjustColumnSizing = function (bRedraw) {
      var api = this.api(true).columns.adjust();
      var settings = api.settings()[0];
      var scroll = settings.oScroll;
      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      } else if (scroll.sX !== '' || scroll.sY !== '') {
        /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
        _fnScrollDraw(settings);
      }
    };
    /**
		 * Quickly and simply clear a table
		 *  @param {bool} [bRedraw=true] redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
		 *      oTable.fnClearTable();
		 *    } );
		 */
    this.fnClearTable = function (bRedraw) {
      var api = this.api(true).clear();
      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }
    };
    /**
		 * The exact opposite of 'opening' a row, this function will close any rows which
		 * are currently 'open'.
		 *  @param {node} nTr the table row to 'close'
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
    this.fnClose = function (nTr) {
      this.api(true).row(nTr).child.hide();
    };
    /**
		 * Remove a row for the table
		 *  @param {mixed} target The index of the row from aoData to be deleted, or
		 *    the TR element you want to delete
		 *  @param {function|null} [callBack] Callback function
		 *  @param {bool} [redraw=true] Redraw the table or not
		 *  @returns {array} The row that was deleted
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately remove the first row
		 *      oTable.fnDeleteRow( 0 );
		 *    } );
		 */
    this.fnDeleteRow = function (target, callback, redraw) {
      var api = this.api(true);
      var rows = api.rows(target);
      var settings = rows.settings()[0];
      var data = settings.aoData[rows[0][0]];
      rows.remove();
      if (callback) {
        callback.call(this, settings, data);
      }
      if (redraw === undefined || redraw) {
        api.draw();
      }
      return data;
    };
    /**
		 * Restore the table to it's original state in the DOM by removing all of DataTables
		 * enhancements, alterations to the DOM structure of the table and event listeners.
		 *  @param {boolean} [remove=false] Completely remove the table from the DOM
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnDestroy();
		 *    } );
		 */
    this.fnDestroy = function (remove) {
      this.api(true).destroy(remove);
    };
    /**
		 * Redraw the table
		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
		 *      oTable.fnDraw();
		 *    } );
		 */
    this.fnDraw = function (complete) {
      // Note that this isn't an exact match to the old call to _fnDraw - it takes
      // into account the new data, but can hold position.
      this.api(true).draw(complete);
    };
    /**
		 * Filter the input based on data
		 *  @param {string} sInput String to filter the table on
		 *  @param {int|null} [iColumn] Column to limit filtering to
		 *  @param {bool} [bRegex=false] Treat as regular expression or not
		 *  @param {bool} [bSmart=true] Perform smart filtering or not
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sometime later - filter...
		 *      oTable.fnFilter( 'test string' );
		 *    } );
		 */
    this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
      var api = this.api(true);
      if (iColumn === null || iColumn === undefined) {
        api.search(sInput, bRegex, bSmart, bCaseInsensitive);
      } else {
        api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
      }
      api.draw();
    };
    /**
		 * Get the data for the whole table, an individual row or an individual cell based on the
		 * provided parameters.
		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
		 *    a TR node then the data source for the whole row will be returned. If given as a
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the
		 *    cell returned. If given as an integer, then this is treated as the aoData internal
		 *    data index for the row (see fnGetPosition) and the data for that row used.
		 *  @param {int} [col] Optional column index that you want the data of.
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
		 *    returned. If mRow is defined, just data for that row, and is iCol is
		 *    defined, only data for the designated cell is returned.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Row data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('tr').click( function () {
		 *        var data = oTable.fnGetData( this );
		 *        // ... do something with the array / object of data for the row
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Individual cell data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('td').click( function () {
		 *        var sData = oTable.fnGetData( this );
		 *        alert( 'The cell clicked on had the value of '+sData );
		 *      } );
		 *    } );
		 */
    this.fnGetData = function (src, col) {
      var api = this.api(true);
      if (src !== undefined) {
        var type = src.nodeName ? src.nodeName.toLowerCase() : '';
        return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;
      }
      return api.data().toArray();
    };
    /**
		 * Get an array of the TR nodes that are used in the table's body. Note that you will
		 * typically want to use the '$' API method in preference to this as it is more
		 * flexible.
		 *  @param {int} [iRow] Optional row index for the TR element you want
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
		 *    in the table's body, or iRow is defined, just the TR element requested.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the nodes from the table
		 *      var nNodes = oTable.fnGetNodes( );
		 *    } );
		 */
    this.fnGetNodes = function (iRow) {
      var api = this.api(true);
      return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
    };
    /**
		 * Get the array indexes of a particular cell from it's DOM element
		 * and column index including hidden columns
		 *  @param {node} node this can either be a TR, TD or TH in the table's body
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
		 *    if given as a cell, an array of [row index, column index (visible),
		 *    column index (all)] is given.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      $('#example tbody td').click( function () {
		 *        // Get the position of the current data from the node
		 *        var aPos = oTable.fnGetPosition( this );
		 *
		 *        // Get the data array for this row
		 *        var aData = oTable.fnGetData( aPos[0] );
		 *
		 *        // Update the data array and return the value
		 *        aData[ aPos[1] ] = 'clicked';
		 *        this.innerHTML = 'clicked';
		 *      } );
		 *
		 *      // Init DataTables
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
    this.fnGetPosition = function (node) {
      var api = this.api(true);
      var nodeName = node.nodeName.toUpperCase();
      if (nodeName == 'TR') {
        return api.row(node).index();
      } else if (nodeName == 'TD' || nodeName == 'TH') {
        var cell = api.cell(node).index();
        return [
          cell.row,
          cell.columnVisible,
          cell.column
        ];
      }
      return null;
    };
    /**
		 * Check to see if a row is 'open' or not.
		 *  @param {node} nTr the table row to check
		 *  @returns {boolean} true if the row is currently open, false otherwise
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
    this.fnIsOpen = function (nTr) {
      return this.api(true).row(nTr).child.isShown();
    };
    /**
		 * This function will place a new row directly after a row which is currently
		 * on display on the page, with the HTML contents that is passed into the
		 * function. This can be used, for example, to ask for confirmation that a
		 * particular record should be deleted.
		 *  @param {node} nTr The table row to 'open'
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row
		 *  @param {string} sClass Class to give the new TD cell
		 *  @returns {node} The row opened. Note that if the table row passed in as the
		 *    first parameter, is not found in the table, this method will silently
		 *    return.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
    this.fnOpen = function (nTr, mHtml, sClass) {
      return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
    };
    /**
		 * Change the pagination - provides the internal logic for pagination in a simple API
		 * function. With this function you can have a DataTables table go to the next,
		 * previous, first or last pages.
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
		 *    or page number to jump to (integer), note that page 0 is the first page.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnPageChange( 'next' );
		 *    } );
		 */
    this.fnPageChange = function (mAction, bRedraw) {
      var api = this.api(true).page(mAction);
      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      }
    };
    /**
		 * Show a particular column
		 *  @param {int} iCol The column whose display should be changed
		 *  @param {bool} bShow Show (true) or hide (false) the column
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Hide the second column after initialisation
		 *      oTable.fnSetColumnVis( 1, false );
		 *    } );
		 */
    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
      var api = this.api(true).column(iCol).visible(bShow);
      if (bRedraw === undefined || bRedraw) {
        api.columns.adjust().draw();
      }
    };
    /**
		 * Get the settings for a particular table for external manipulation
		 *  @returns {object} DataTables settings object. See
		 *    {@link DataTable.models.oSettings}
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      var oSettings = oTable.fnSettings();
		 *
		 *      // Show an example parameter from the settings
		 *      alert( oSettings._iDisplayStart );
		 *    } );
		 */
    this.fnSettings = function () {
      return _fnSettingsFromNode(this[_ext.iApiIndex]);
    };
    /**
		 * Sort the table by a particular column
		 *  @param {int} iCol the data index to sort on. Note that this will not match the
		 *    'display index' if you have hidden data entries
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort immediately with columns 0 and 1
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
		 *    } );
		 */
    this.fnSort = function (aaSort) {
      this.api(true).order(aaSort).draw();
    };
    /**
		 * Attach a sort listener to an element for a given column
		 *  @param {node} nNode the element to attach the sort listener to
		 *  @param {int} iColumn the column that a click on this node will sort on
		 *  @param {function} [fnCallback] callback function when sort is run
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort on column 1, when 'sorter' is clicked on
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
		 *    } );
		 */
    this.fnSortListener = function (nNode, iColumn, fnCallback) {
      this.api(true).order.listener(nNode, iColumn, fnCallback);
    };
    /**
		 * Update a table cell or row - this method will accept either a single value to
		 * update the cell with, an array of values with one element for each column or
		 * an object in the same format as the original data source. The function is
		 * self-referencing in order to make the multi column updates easier.
		 *  @param {object|array|string} mData Data to update the cell/row with
		 *  @param {node|int} mRow TR element you want to update or the aoData index
		 *  @param {int} [iColumn] The column to update, give as null or undefined to
		 *    update a whole row.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not
		 *  @returns {int} 0 on success, 1 on error
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
		 *    } );
		 */
    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
      var api = this.api(true);
      if (iColumn === undefined || iColumn === null) {
        api.row(mRow).data(mData);
      } else {
        api.cell(mRow, iColumn).data(mData);
      }
      if (bAction === undefined || bAction) {
        api.columns.adjust();
      }
      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }
      return 0;
    };
    /**
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
		 * to ensure compatibility.
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
		 *    formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
		 *    version, or false if this version of DataTales is not suitable
		 *  @method
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
		 *    } );
		 */
    this.fnVersionCheck = _ext.fnVersionCheck;
    var _that = this;
    var emptyInit = options === undefined;
    var len = this.length;
    if (emptyInit) {
      options = {};
    }
    this.oApi = this.internal = _ext.internal;
    // Extend with old style plug-in API methods
    for (var fn in DataTable.ext.internal) {
      if (fn) {
        this[fn] = _fnExternApiFunc(fn);
      }
    }
    this.each(function () {
      // For each initialisation we want to give it a clean initialisation
      // object that can be bashed around
      var o = {};
      var oInit = len > 1 ? _fnExtend(o, options, true) : options;
      /*global oInit,_that,emptyInit*/
      var i = 0, iLen, j, jLen, k, kLen;
      var sId = this.getAttribute('id');
      var bInitHandedOff = false;
      var defaults = DataTable.defaults;
      var $this = $(this);
      /* Sanity check */
      if (this.nodeName.toLowerCase() != 'table') {
        _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);
        return;
      }
      /* Backwards compatibility for the defaults */
      _fnCompatOpts(defaults);
      _fnCompatCols(defaults.column);
      /* Convert the camel-case defaults to Hungarian */
      _fnCamelToHungarian(defaults, defaults, true);
      _fnCamelToHungarian(defaults.column, defaults.column, true);
      /* Setting up the initialisation object */
      _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));
      /* Check to see if we are re-initialising a table */
      var allSettings = DataTable.settings;
      for (i = 0, iLen = allSettings.length; i < iLen; i++) {
        var s = allSettings[i];
        /* Base check on table node */
        if (s.nTable == this || s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
          var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
          var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
          if (emptyInit || bRetrieve) {
            return s.oInstance;
          } else if (bDestroy) {
            s.oInstance.fnDestroy();
            break;
          } else {
            _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);
            return;
          }
        }
        /* If the element we are initialising has the same ID as a table which was previously
				 * initialised, but the table nodes don't match (from before) then we destroy the old
				 * instance by simply deleting it. This is under the assumption that the table has been
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
				 */
        if (s.sTableId == this.id) {
          allSettings.splice(i, 1);
          break;
        }
      }
      /* Ensure the table has an ID - required for accessibility */
      if (sId === null || sId === '') {
        sId = 'DataTables_Table_' + DataTable.ext._unique++;
        this.id = sId;
      }
      /* Create the settings object for this table and set some of the default parameters */
      var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
          'sDestroyWidth': $this[0].style.width,
          'sInstance': sId,
          'sTableId': sId
        });
      oSettings.nTable = this;
      oSettings.oApi = _that.internal;
      oSettings.oInit = oInit;
      allSettings.push(oSettings);
      // Need to add the instance after the instance after the settings object has been added
      // to the settings array, so we can self reference the table instance if more than one
      oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();
      // Backwards compatibility, before we apply all the defaults
      _fnCompatOpts(oInit);
      if (oInit.oLanguage) {
        _fnLanguageCompat(oInit.oLanguage);
      }
      // If the length menu is given, but the init display length is not, use the length menu
      if (oInit.aLengthMenu && !oInit.iDisplayLength) {
        oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
      }
      // Apply the defaults and init options to make a single init object will all
      // options defined from defaults and instance options.
      oInit = _fnExtend($.extend(true, {}, defaults), oInit);
      // Map the initialisation options onto the settings object
      _fnMap(oSettings.oFeatures, oInit, [
        'bPaginate',
        'bLengthChange',
        'bFilter',
        'bSort',
        'bSortMulti',
        'bInfo',
        'bProcessing',
        'bAutoWidth',
        'bSortClasses',
        'bServerSide',
        'bDeferRender'
      ]);
      _fnMap(oSettings, oInit, [
        'asStripeClasses',
        'ajax',
        'fnServerData',
        'fnFormatNumber',
        'sServerMethod',
        'aaSorting',
        'aaSortingFixed',
        'aLengthMenu',
        'sPaginationType',
        'sAjaxSource',
        'sAjaxDataProp',
        'iStateDuration',
        'sDom',
        'bSortCellsTop',
        'iTabIndex',
        'fnStateLoadCallback',
        'fnStateSaveCallback',
        'renderer',
        'searchDelay',
        'rowId',
        [
          'iCookieDuration',
          'iStateDuration'
        ],
        [
          'oSearch',
          'oPreviousSearch'
        ],
        [
          'aoSearchCols',
          'aoPreSearchCols'
        ],
        [
          'iDisplayLength',
          '_iDisplayLength'
        ],
        [
          'bJQueryUI',
          'bJUI'
        ]
      ]);
      _fnMap(oSettings.oScroll, oInit, [
        [
          'sScrollX',
          'sX'
        ],
        [
          'sScrollXInner',
          'sXInner'
        ],
        [
          'sScrollY',
          'sY'
        ],
        [
          'bScrollCollapse',
          'bCollapse'
        ]
      ]);
      _fnMap(oSettings.oLanguage, oInit, 'fnInfoCallback');
      /* Callback functions which are array driven */
      _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');
      _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');
      _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');
      _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');
      _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');
      _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');
      _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');
      _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');
      _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');
      _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');
      _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');
      oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);
      /* Browser support detection */
      _fnBrowserDetect(oSettings);
      var oClasses = oSettings.oClasses;
      // @todo Remove in 1.11
      if (oInit.bJQueryUI) {
        /* Use the JUI classes object for display. You could clone the oStdClasses object if
				 * you want to have multiple tables with multiple independent classes
				 */
        $.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses);
        if (oInit.sDom === defaults.sDom && defaults.sDom === 'lfrtip') {
          /* Set the DOM to use a layout suitable for jQuery UI's theming */
          oSettings.sDom = '<"H"lfr>t<"F"ip>';
        }
        if (!oSettings.renderer) {
          oSettings.renderer = 'jqueryui';
        } else if ($.isPlainObject(oSettings.renderer) && !oSettings.renderer.header) {
          oSettings.renderer.header = 'jqueryui';
        }
      } else {
        $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
      }
      $this.addClass(oClasses.sTable);
      if (oSettings.iInitDisplayStart === undefined) {
        /* Display start point, taking into account the save saving */
        oSettings.iInitDisplayStart = oInit.iDisplayStart;
        oSettings._iDisplayStart = oInit.iDisplayStart;
      }
      if (oInit.iDeferLoading !== null) {
        oSettings.bDeferLoading = true;
        var tmp = $.isArray(oInit.iDeferLoading);
        oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
        oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
      }
      /* Language definitions */
      var oLanguage = oSettings.oLanguage;
      $.extend(true, oLanguage, oInit.oLanguage);
      if (oLanguage.sUrl !== '') {
        /* Get the language definitions from a file - because this Ajax call makes the language
				 * get async to the remainder of this function we use bInitHandedOff to indicate that
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
				 */
        $.ajax({
          dataType: 'json',
          url: oLanguage.sUrl,
          success: function (json) {
            _fnLanguageCompat(json);
            _fnCamelToHungarian(defaults.oLanguage, json);
            $.extend(true, oLanguage, json);
            _fnInitialise(oSettings);
          },
          error: function () {
            // Error occurred loading language file, continue on as best we can
            _fnInitialise(oSettings);
          }
        });
        bInitHandedOff = true;
      }
      /*
			 * Stripes
			 */
      if (oInit.asStripeClasses === null) {
        oSettings.asStripeClasses = [
          oClasses.sStripeOdd,
          oClasses.sStripeEven
        ];
      }
      /* Remove row stripe classes if they are already on the table row */
      var stripeClasses = oSettings.asStripeClasses;
      var rowOne = $this.children('tbody').find('tr').eq(0);
      if ($.inArray(true, $.map(stripeClasses, function (el, i) {
          return rowOne.hasClass(el);
        })) !== -1) {
        $('tbody tr', this).removeClass(stripeClasses.join(' '));
        oSettings.asDestroyStripes = stripeClasses.slice();
      }
      /*
			 * Columns
			 * See if we should load columns automatically or use defined ones
			 */
      var anThs = [];
      var aoColumnsInit;
      var nThead = this.getElementsByTagName('thead');
      if (nThead.length !== 0) {
        _fnDetectHeader(oSettings.aoHeader, nThead[0]);
        anThs = _fnGetUniqueThs(oSettings);
      }
      /* If not given a column array, generate one with nulls */
      if (oInit.aoColumns === null) {
        aoColumnsInit = [];
        for (i = 0, iLen = anThs.length; i < iLen; i++) {
          aoColumnsInit.push(null);
        }
      } else {
        aoColumnsInit = oInit.aoColumns;
      }
      /* Add the columns */
      for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
        _fnAddColumn(oSettings, anThs ? anThs[i] : null);
      }
      /* Apply the column definitions */
      _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
        _fnColumnOptions(oSettings, iCol, oDef);
      });
      /* HTML5 attribute detection - build an mData object automatically if the
			 * attributes are found
			 */
      if (rowOne.length) {
        var a = function (cell, name) {
          return cell.getAttribute('data-' + name) !== null ? name : null;
        };
        $(rowOne[0]).children('th, td').each(function (i, cell) {
          var col = oSettings.aoColumns[i];
          if (col.mData === i) {
            var sort = a(cell, 'sort') || a(cell, 'order');
            var filter = a(cell, 'filter') || a(cell, 'search');
            if (sort !== null || filter !== null) {
              col.mData = {
                _: i + '.display',
                sort: sort !== null ? i + '.@data-' + sort : undefined,
                type: sort !== null ? i + '.@data-' + sort : undefined,
                filter: filter !== null ? i + '.@data-' + filter : undefined
              };
              _fnColumnOptions(oSettings, i);
            }
          }
        });
      }
      var features = oSettings.oFeatures;
      /* Must be done after everything which can be overridden by the state saving! */
      if (oInit.bStateSave) {
        features.bStateSave = true;
        _fnLoadState(oSettings, oInit);
        _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');
      }
      /*
			 * Sorting
			 * @todo For modularisation (1.11) this needs to do into a sort start up handler
			 */
      // If aaSorting is not defined, then we use the first indicator in asSorting
      // in case that has been altered, so the default sort reflects that option
      if (oInit.aaSorting === undefined) {
        var sorting = oSettings.aaSorting;
        for (i = 0, iLen = sorting.length; i < iLen; i++) {
          sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
        }
      }
      /* Do a first pass on the sorting classes (allows any size changes to be taken into
			 * account, and also will apply sorting disabled classes if disabled
			 */
      _fnSortingClasses(oSettings);
      if (features.bSort) {
        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
          if (oSettings.bSorted) {
            var aSort = _fnSortFlatten(oSettings);
            var sortedColumns = {};
            $.each(aSort, function (i, val) {
              sortedColumns[val.src] = val.dir;
            });
            _fnCallbackFire(oSettings, null, 'order', [
              oSettings,
              aSort,
              sortedColumns
            ]);
            _fnSortAria(oSettings);
          }
        });
      }
      _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
        if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
          _fnSortingClasses(oSettings);
        }
      }, 'sc');
      /*
			 * Final init
			 * Cache the header, body and footer as required, creating them if needed
			 */
      // Work around for Webkit bug 83867 - store the caption-side before removing from doc
      var captions = $this.children('caption').each(function () {
          this._captionSide = $this.css('caption-side');
        });
      var thead = $this.children('thead');
      if (thead.length === 0) {
        thead = $('<thead/>').appendTo(this);
      }
      oSettings.nTHead = thead[0];
      var tbody = $this.children('tbody');
      if (tbody.length === 0) {
        tbody = $('<tbody/>').appendTo(this);
      }
      oSettings.nTBody = tbody[0];
      var tfoot = $this.children('tfoot');
      if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== '' || oSettings.oScroll.sY !== '')) {
        // If we are a scrolling table, and no footer has been given, then we need to create
        // a tfoot element for the caption element to be appended to
        tfoot = $('<tfoot/>').appendTo(this);
      }
      if (tfoot.length === 0 || tfoot.children().length === 0) {
        $this.addClass(oClasses.sNoFooter);
      } else if (tfoot.length > 0) {
        oSettings.nTFoot = tfoot[0];
        _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
      }
      /* Check if there is data passing into the constructor */
      if (oInit.aaData) {
        for (i = 0; i < oInit.aaData.length; i++) {
          _fnAddData(oSettings, oInit.aaData[i]);
        }
      } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
        /* Grab the data from the page - only do this when deferred loading or no Ajax
				 * source since there is no point in reading the DOM data if we are then going
				 * to replace it with Ajax data
				 */
        _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
      }
      /* Copy the data index array */
      oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
      /* Initialisation complete - table can be drawn */
      oSettings.bInitialised = true;
      /* Check if we need to initialise the table (it might not have been handed off to the
			 * language processor)
			 */
      if (bInitHandedOff === false) {
        _fnInitialise(oSettings);
      }
    });
    _that = null;
    return this;
  };
  /*
	 * It is useful to have variables which are scoped locally so only the
	 * DataTables functions can access them and they don't leak into global space.
	 * At the same time these functions are often useful over multiple files in the
	 * core and API, so we list, or at least document, all variables which are used
	 * by DataTables as private variables here. This also ensures that there is no
	 * clashing of variable names and that they can easily referenced for reuse.
	 */
  // Defined else where
  //  _selector_run
  //  _selector_opts
  //  _selector_first
  //  _selector_row_indexes
  var _ext;
  // DataTable.ext
  var _Api;
  // DataTable.Api
  var _api_register;
  // DataTable.Api.register
  var _api_registerPlural;
  // DataTable.Api.registerPlural
  var _re_dic = {};
  var _re_new_lines = /[\r\n]/g;
  var _re_html = /<.*?>/g;
  var _re_date_start = /^[\w\+\-]/;
  var _re_date_end = /[\w\+\-]$/;
  // Escape regular expression special characters
  var _re_escape_regex = new RegExp('(\\' + [
      '/',
      '.',
      '*',
      '+',
      '?',
      '|',
      '(',
      ')',
      '[',
      ']',
      '{',
      '}',
      '\\',
      '$',
      '^',
      '-'
    ].join('|\\') + ')', 'g');
  // http://en.wikipedia.org/wiki/Foreign_exchange_market
  // - \u20BD - Russian ruble.
  // - \u20a9 - South Korean Won
  // - \u20BA - Turkish Lira
  // - \u20B9 - Indian Rupee
  // - R - Brazil (R$) and South Africa
  // - fr - Swiss Franc
  // - kr - Swedish krona, Norwegian krone and Danish krone
  // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
  //   standards as thousands separators.
  var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;
  var _empty = function (d) {
    return !d || d === true || d === '-' ? true : false;
  };
  var _intVal = function (s) {
    var integer = parseInt(s, 10);
    return !isNaN(integer) && isFinite(s) ? integer : null;
  };
  // Convert from a formatted number with characters other than `.` as the
  // decimal place, to a Javascript number
  var _numToDecimal = function (num, decimalPoint) {
    // Cache created regular expressions for speed as this function is called often
    if (!_re_dic[decimalPoint]) {
      _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
    }
    return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') : num;
  };
  var _isNumber = function (d, decimalPoint, formatted) {
    var strType = typeof d === 'string';
    // If empty return immediately so there must be a number if it is a
    // formatted string (this stops the string "k", or "kr", etc being detected
    // as a formatted number for currency
    if (_empty(d)) {
      return true;
    }
    if (decimalPoint && strType) {
      d = _numToDecimal(d, decimalPoint);
    }
    if (formatted && strType) {
      d = d.replace(_re_formatted_numeric, '');
    }
    return !isNaN(parseFloat(d)) && isFinite(d);
  };
  // A string without HTML in it can be considered to be HTML still
  var _isHtml = function (d) {
    return _empty(d) || typeof d === 'string';
  };
  var _htmlNumeric = function (d, decimalPoint, formatted) {
    if (_empty(d)) {
      return true;
    }
    var html = _isHtml(d);
    return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
  };
  var _pluck = function (a, prop, prop2) {
    var out = [];
    var i = 0, ien = a.length;
    // Could have the test in the loop for slightly smaller code, but speed
    // is essential here
    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[i] && a[i][prop]) {
          out.push(a[i][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        if (a[i]) {
          out.push(a[i][prop]);
        }
      }
    }
    return out;
  };
  // Basically the same as _pluck, but rather than looping over `a` we use `order`
  // as the indexes to pick from `a`
  var _pluck_order = function (a, order, prop, prop2) {
    var out = [];
    var i = 0, ien = order.length;
    // Could have the test in the loop for slightly smaller code, but speed
    // is essential here
    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[order[i]][prop]) {
          out.push(a[order[i]][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        out.push(a[order[i]][prop]);
      }
    }
    return out;
  };
  var _range = function (len, start) {
    var out = [];
    var end;
    if (start === undefined) {
      start = 0;
      end = len;
    } else {
      end = start;
      start = len;
    }
    for (var i = start; i < end; i++) {
      out.push(i);
    }
    return out;
  };
  var _removeEmpty = function (a) {
    var out = [];
    for (var i = 0, ien = a.length; i < ien; i++) {
      if (a[i]) {
        // careful - will remove all falsy values!
        out.push(a[i]);
      }
    }
    return out;
  };
  var _stripHtml = function (d) {
    return d.replace(_re_html, '');
  };
  /**
	 * Find the unique elements in a source array.
	 *
	 * @param  {array} src Source array
	 * @return {array} Array of unique items
	 * @ignore
	 */
  var _unique = function (src) {
    // A faster unique method is to use object keys to identify used values,
    // but this doesn't work with arrays or objects, which we must also
    // consider. See jsperf.com/compare-array-unique-versions/4 for more
    // information.
    var out = [], val, i, ien = src.length, j, k = 0;
    again:
      for (i = 0; i < ien; i++) {
        val = src[i];
        for (j = 0; j < k; j++) {
          if (out[j] === val) {
            continue again;
          }
        }
        out.push(val);
        k++;
      }
    return out;
  };
  /**
	 * DataTables utility methods
	 * 
	 * This namespace provides helper methods that DataTables uses internally to
	 * create a DataTable, but which are not exclusively used only for DataTables.
	 * These methods can be used by extension authors to save the duplication of
	 * code.
	 *
	 *  @namespace
	 */
  DataTable.util = {
    throttle: function (fn, freq) {
      var frequency = freq !== undefined ? freq : 200, last, timer;
      return function () {
        var that = this, now = +new Date(), args = arguments;
        if (last && now < last + frequency) {
          clearTimeout(timer);
          timer = setTimeout(function () {
            last = undefined;
            fn.apply(that, args);
          }, frequency);
        } else {
          last = now;
          fn.apply(that, args);
        }
      };
    },
    escapeRegex: function (val) {
      return val.replace(_re_escape_regex, '\\$1');
    }
  };
  /**
	 * Create a mapping object that allows camel case parameters to be looked up
	 * for their Hungarian counterparts. The mapping is stored in a private
	 * parameter called `_hungarianMap` which can be accessed on the source object.
	 *  @param {object} o
	 *  @memberof DataTable#oApi
	 */
  function _fnHungarianMap(o) {
    var hungarian = 'a aa ai ao as b fn i m o s ', match, newKey, map = {};
    $.each(o, function (key, val) {
      match = key.match(/^([^A-Z]+?)([A-Z])/);
      if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
        newKey = key.replace(match[0], match[2].toLowerCase());
        map[newKey] = key;
        if (match[1] === 'o') {
          _fnHungarianMap(o[key]);
        }
      }
    });
    o._hungarianMap = map;
  }
  /**
	 * Convert from camel case parameters to Hungarian, based on a Hungarian map
	 * created by _fnHungarianMap.
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 *  @memberof DataTable#oApi
	 */
  function _fnCamelToHungarian(src, user, force) {
    if (!src._hungarianMap) {
      _fnHungarianMap(src);
    }
    var hungarianKey;
    $.each(user, function (key, val) {
      hungarianKey = src._hungarianMap[key];
      if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
        // For objects, we need to buzz down into the object to copy parameters
        if (hungarianKey.charAt(0) === 'o') {
          // Copy the camelCase options over to the hungarian
          if (!user[hungarianKey]) {
            user[hungarianKey] = {};
          }
          $.extend(true, user[hungarianKey], user[key]);
          _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
        } else {
          user[hungarianKey] = user[key];
        }
      }
    });
  }
  /**
	 * Language compatibility - when certain options are given, and others aren't, we
	 * need to duplicate the values over, in order to provide backwards compatibility
	 * with older language files.
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnLanguageCompat(lang) {
    var defaults = DataTable.defaults.oLanguage;
    var zeroRecords = lang.sZeroRecords;
    /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
		 * sZeroRecords - assuming that is given.
		 */
    if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === 'No data available in table') {
      _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
    }
    /* Likewise with loading records */
    if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === 'Loading...') {
      _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
    }
    // Old parameter name of the thousands separator mapped onto the new
    if (lang.sInfoThousands) {
      lang.sThousands = lang.sInfoThousands;
    }
    var decimal = lang.sDecimal;
    if (decimal) {
      _addNumericSort(decimal);
    }
  }
  /**
	 * Map one parameter onto another
	 *  @param {object} o Object to map
	 *  @param {*} knew The new parameter name
	 *  @param {*} old The old parameter name
	 */
  var _fnCompatMap = function (o, knew, old) {
    if (o[knew] !== undefined) {
      o[old] = o[knew];
    }
  };
  /**
	 * Provide backwards compatibility for the main DT options. Note that the new
	 * options are mapped onto the old parameters, so this is an external interface
	 * change only.
	 *  @param {object} init Object to map
	 */
  function _fnCompatOpts(init) {
    _fnCompatMap(init, 'ordering', 'bSort');
    _fnCompatMap(init, 'orderMulti', 'bSortMulti');
    _fnCompatMap(init, 'orderClasses', 'bSortClasses');
    _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');
    _fnCompatMap(init, 'order', 'aaSorting');
    _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');
    _fnCompatMap(init, 'paging', 'bPaginate');
    _fnCompatMap(init, 'pagingType', 'sPaginationType');
    _fnCompatMap(init, 'pageLength', 'iDisplayLength');
    _fnCompatMap(init, 'searching', 'bFilter');
    // Boolean initialisation of x-scrolling
    if (typeof init.sScrollX === 'boolean') {
      init.sScrollX = init.sScrollX ? '100%' : '';
    }
    if (typeof init.scrollX === 'boolean') {
      init.scrollX = init.scrollX ? '100%' : '';
    }
    // Column search objects are in an array, so it needs to be converted
    // element by element
    var searchCols = init.aoSearchCols;
    if (searchCols) {
      for (var i = 0, ien = searchCols.length; i < ien; i++) {
        if (searchCols[i]) {
          _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
        }
      }
    }
  }
  /**
	 * Provide backwards compatibility for column options. Note that the new options
	 * are mapped onto the old parameters, so this is an external interface change
	 * only.
	 *  @param {object} init Object to map
	 */
  function _fnCompatCols(init) {
    _fnCompatMap(init, 'orderable', 'bSortable');
    _fnCompatMap(init, 'orderData', 'aDataSort');
    _fnCompatMap(init, 'orderSequence', 'asSorting');
    _fnCompatMap(init, 'orderDataType', 'sortDataType');
    // orderData can be given as an integer
    var dataSort = init.aDataSort;
    if (dataSort && !$.isArray(dataSort)) {
      init.aDataSort = [dataSort];
    }
  }
  /**
	 * Browser feature detection for capabilities, quirks
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnBrowserDetect(settings) {
    // We don't need to do this every time DataTables is constructed, the values
    // calculated are specific to the browser and OS configuration which we
    // don't expect to change between initialisations
    if (!DataTable.__browser) {
      var browser = {};
      DataTable.__browser = browser;
      // Scrolling feature / quirks detection
      var n = $('<div/>').css({
          position: 'fixed',
          top: 0,
          left: 0,
          height: 1,
          width: 1,
          overflow: 'hidden'
        }).append($('<div/>').css({
          position: 'absolute',
          top: 1,
          left: 1,
          width: 100,
          overflow: 'scroll'
        }).append($('<div/>').css({
          width: '100%',
          height: 10
        }))).appendTo('body');
      var outer = n.children();
      var inner = outer.children();
      // Numbers below, in order, are:
      // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
      //
      // IE6 XP:                           100 100 100  83
      // IE7 Vista:                        100 100 100  83
      // IE 8+ Windows:                     83  83 100  83
      // Evergreen Windows:                 83  83 100  83
      // Evergreen Mac with scrollbars:     85  85 100  85
      // Evergreen Mac without scrollbars: 100 100 100 100
      // Get scrollbar width
      browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
      // IE6/7 will oversize a width 100% element inside a scrolling element, to
      // include the width of the scrollbar, while other browsers ensure the inner
      // element is contained without forcing scrolling
      browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
      // In rtl text layout, some browsers (most, but not all) will place the
      // scrollbar on the left, rather than the right.
      browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;
      // IE8- don't provide height and width for getBoundingClientRect
      browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
      n.remove();
    }
    $.extend(settings.oBrowser, DataTable.__browser);
    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
  }
  /**
	 * Array.prototype reduce[Right] method, used for browsers which don't support
	 * JS 1.6. Done this way to reduce code size, since we iterate either way
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnReduce(that, fn, init, start, end, inc) {
    var i = start, value, isSet = false;
    if (init !== undefined) {
      value = init;
      isSet = true;
    }
    while (i !== end) {
      if (!that.hasOwnProperty(i)) {
        continue;
      }
      value = isSet ? fn(value, that[i], i, that) : that[i];
      isSet = true;
      i += inc;
    }
    return value;
  }
  /**
	 * Add a column to the list used for the table with default values
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nTh The th element for this column
	 *  @memberof DataTable#oApi
	 */
  function _fnAddColumn(oSettings, nTh) {
    // Add column to aoColumns array
    var oDefaults = DataTable.defaults.column;
    var iCol = oSettings.aoColumns.length;
    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
        'nTh': nTh ? nTh : document.createElement('th'),
        'sTitle': oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
        'aDataSort': oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
        'mData': oDefaults.mData ? oDefaults.mData : iCol,
        idx: iCol
      });
    oSettings.aoColumns.push(oCol);
    // Add search object for column specific search. Note that the `searchCols[ iCol ]`
    // passed into extend can be undefined. This allows the user to give a default
    // with only some of the parameters defined, and also not give a default
    var searchCols = oSettings.aoPreSearchCols;
    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);
    // Use the default column options function to initialise classes etc
    _fnColumnOptions(oSettings, iCol, $(nTh).data());
  }
  /**
	 * Apply options for a column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iCol column index to consider
	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	 *  @memberof DataTable#oApi
	 */
  function _fnColumnOptions(oSettings, iCol, oOptions) {
    var oCol = oSettings.aoColumns[iCol];
    var oClasses = oSettings.oClasses;
    var th = $(oCol.nTh);
    // Try to get width information from the DOM. We can't get it from CSS
    // as we'd need to parse the CSS stylesheet. `width` option can override
    if (!oCol.sWidthOrig) {
      // Width attribute
      oCol.sWidthOrig = th.attr('width') || null;
      // Style attribute
      var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
      if (t) {
        oCol.sWidthOrig = t[1];
      }
    }
    /* User specified column options */
    if (oOptions !== undefined && oOptions !== null) {
      // Backwards compatibility
      _fnCompatCols(oOptions);
      // Map camel case parameters to their Hungarian counterparts
      _fnCamelToHungarian(DataTable.defaults.column, oOptions);
      /* Backwards compatibility for mDataProp */
      if (oOptions.mDataProp !== undefined && !oOptions.mData) {
        oOptions.mData = oOptions.mDataProp;
      }
      if (oOptions.sType) {
        oCol._sManualType = oOptions.sType;
      }
      // `class` is a reserved word in Javascript, so we need to provide
      // the ability to use a valid name for the camel case input
      if (oOptions.className && !oOptions.sClass) {
        oOptions.sClass = oOptions.className;
      }
      $.extend(oCol, oOptions);
      _fnMap(oCol, oOptions, 'sWidth', 'sWidthOrig');
      /* iDataSort to be applied (backwards compatibility), but aDataSort will take
			 * priority if defined
			 */
      if (oOptions.iDataSort !== undefined) {
        oCol.aDataSort = [oOptions.iDataSort];
      }
      _fnMap(oCol, oOptions, 'aDataSort');
    }
    /* Cache the data get and set functions for speed */
    var mDataSrc = oCol.mData;
    var mData = _fnGetObjectDataFn(mDataSrc);
    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;
    var attrTest = function (src) {
      return typeof src === 'string' && src.indexOf('@') !== -1;
    };
    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));
    oCol._setter = null;
    oCol.fnGetData = function (rowData, type, meta) {
      var innerData = mData(rowData, type, undefined, meta);
      return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
    };
    oCol.fnSetData = function (rowData, val, meta) {
      return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
    };
    // Indicate if DataTables should read DOM data as an object or array
    // Used in _fnGetRowElements
    if (typeof mDataSrc !== 'number') {
      oSettings._rowReadObject = true;
    }
    /* Feature sorting overrides column specific when off */
    if (!oSettings.oFeatures.bSort) {
      oCol.bSortable = false;
      th.addClass(oClasses.sSortableNone);  // Have to add class here as order event isn't called
    }
    /* Check that the class assignment is correct for sorting */
    var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
    var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
    if (!oCol.bSortable || !bAsc && !bDesc) {
      oCol.sSortingClass = oClasses.sSortableNone;
      oCol.sSortingClassJUI = '';
    } else if (bAsc && !bDesc) {
      oCol.sSortingClass = oClasses.sSortableAsc;
      oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
    } else if (!bAsc && bDesc) {
      oCol.sSortingClass = oClasses.sSortableDesc;
      oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
    } else {
      oCol.sSortingClass = oClasses.sSortable;
      oCol.sSortingClassJUI = oClasses.sSortJUI;
    }
  }
  /**
	 * Adjust the table column widths for new data. Note: you would probably want to
	 * do a redraw after calling this function!
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnAdjustColumnSizing(settings) {
    /* Not interested in doing column width calculation if auto-width is disabled */
    if (settings.oFeatures.bAutoWidth !== false) {
      var columns = settings.aoColumns;
      _fnCalculateColumnWidths(settings);
      for (var i = 0, iLen = columns.length; i < iLen; i++) {
        columns[i].nTh.style.width = columns[i].sWidth;
      }
    }
    var scroll = settings.oScroll;
    if (scroll.sY !== '' || scroll.sX !== '') {
      _fnScrollDraw(settings);
    }
    _fnCallbackFire(settings, null, 'column-sizing', [settings]);
  }
  /**
	 * Covert the index of a visible column to the index in the data array (take account
	 * of hidden columns)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iMatch Visible column index to lookup
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
  function _fnVisibleToColumnIndex(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, 'bVisible');
    return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;
  }
  /**
	 * Covert the index of an index in the data array and convert it to the visible
	 *   column index (take account of hidden columns)
	 *  @param {int} iMatch Column index to lookup
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
  function _fnColumnIndexToVisible(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, 'bVisible');
    var iPos = $.inArray(iMatch, aiVis);
    return iPos !== -1 ? iPos : null;
  }
  /**
	 * Get the number of visible columns
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the number of visible columns
	 *  @memberof DataTable#oApi
	 */
  function _fnVisbleColumns(oSettings) {
    var vis = 0;
    // No reduce in IE8, use a loop for now
    $.each(oSettings.aoColumns, function (i, col) {
      if (col.bVisible && $(col.nTh).css('display') !== 'none') {
        vis++;
      }
    });
    return vis;
  }
  /**
	 * Get an array of column indexes that match a given property
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sParam Parameter in aoColumns to look for - typically
	 *    bVisible or bSearchable
	 *  @returns {array} Array of indexes with matched properties
	 *  @memberof DataTable#oApi
	 */
  function _fnGetColumns(oSettings, sParam) {
    var a = [];
    $.map(oSettings.aoColumns, function (val, i) {
      if (val[sParam]) {
        a.push(i);
      }
    });
    return a;
  }
  /**
	 * Calculate the 'type' of a column
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnColumnTypes(settings) {
    var columns = settings.aoColumns;
    var data = settings.aoData;
    var types = DataTable.ext.type.detect;
    var i, ien, j, jen, k, ken;
    var col, cell, detectedType, cache;
    // For each column, spin over the 
    for (i = 0, ien = columns.length; i < ien; i++) {
      col = columns[i];
      cache = [];
      if (!col.sType && col._sManualType) {
        col.sType = col._sManualType;
      } else if (!col.sType) {
        for (j = 0, jen = types.length; j < jen; j++) {
          for (k = 0, ken = data.length; k < ken; k++) {
            // Use a cache array so we only need to get the type data
            // from the formatter once (when using multiple detectors)
            if (cache[k] === undefined) {
              cache[k] = _fnGetCellData(settings, k, i, 'type');
            }
            detectedType = types[j](cache[k], settings);
            // If null, then this type can't apply to this column, so
            // rather than testing all cells, break out. There is an
            // exception for the last type which is `html`. We need to
            // scan all rows since it is possible to mix string and HTML
            // types
            if (!detectedType && j !== types.length - 1) {
              break;
            }
            // Only a single match is needed for html type since it is
            // bottom of the pile and very similar to string
            if (detectedType === 'html') {
              break;
            }
          }
          // Type is valid for all data points in the column - use this
          // type
          if (detectedType) {
            col.sType = detectedType;
            break;
          }
        }
        // Fall back - if no type was detected, always use string
        if (!col.sType) {
          col.sType = 'string';
        }
      }
    }
  }
  /**
	 * Take the column definitions and static columns arrays and calculate how
	 * they relate to column indexes. The callback function will then apply the
	 * definition found for a column to a suitable configuration object.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	 *  @param {array} aoCols The aoColumns array that defines columns individually
	 *  @param {function} fn Callback function - takes two parameters, the calculated
	 *    column index and the definition for that column.
	 *  @memberof DataTable#oApi
	 */
  function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
    var i, iLen, j, jLen, k, kLen, def;
    var columns = oSettings.aoColumns;
    // Column definitions with aTargets
    if (aoColDefs) {
      /* Loop over the definitions array - loop in reverse so first instance has priority */
      for (i = aoColDefs.length - 1; i >= 0; i--) {
        def = aoColDefs[i];
        /* Each definition can target multiple columns, as it is an array */
        var aTargets = def.targets !== undefined ? def.targets : def.aTargets;
        if (!$.isArray(aTargets)) {
          aTargets = [aTargets];
        }
        for (j = 0, jLen = aTargets.length; j < jLen; j++) {
          if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
            /* Add columns that we don't yet know about */
            while (columns.length <= aTargets[j]) {
              _fnAddColumn(oSettings);
            }
            /* Integer, basic index */
            fn(aTargets[j], def);
          } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
            /* Negative integer, right to left column counting */
            fn(columns.length + aTargets[j], def);
          } else if (typeof aTargets[j] === 'string') {
            /* Class name matching on TH element */
            for (k = 0, kLen = columns.length; k < kLen; k++) {
              if (aTargets[j] == '_all' || $(columns[k].nTh).hasClass(aTargets[j])) {
                fn(k, def);
              }
            }
          }
        }
      }
    }
    // Statically defined columns array
    if (aoCols) {
      for (i = 0, iLen = aoCols.length; i < iLen; i++) {
        fn(i, aoCols[i]);
      }
    }
  }
  /**
	 * Add a data array to the table, creating DOM node etc. This is the parallel to
	 * _fnGatherData, but for adding rows from a Javascript source, rather than a
	 * DOM source.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aData data array to be added
	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	 *  @memberof DataTable#oApi
	 */
  function _fnAddData(oSettings, aDataIn, nTr, anTds) {
    /* Create the object for storing information about this new row */
    var iRow = oSettings.aoData.length;
    var oData = $.extend(true, {}, DataTable.models.oRow, {
        src: nTr ? 'dom' : 'data',
        idx: iRow
      });
    oData._aData = aDataIn;
    oSettings.aoData.push(oData);
    /* Create the cells */
    var nTd, sThisType;
    var columns = oSettings.aoColumns;
    // Invalidate the column types as the new data needs to be revalidated
    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      columns[i].sType = null;
    }
    /* Add to the display array */
    oSettings.aiDisplayMaster.push(iRow);
    var id = oSettings.rowIdFn(aDataIn);
    if (id !== undefined) {
      oSettings.aIds[id] = oData;
    }
    /* Create the DOM information, or register it if already present */
    if (nTr || !oSettings.oFeatures.bDeferRender) {
      _fnCreateTr(oSettings, iRow, nTr, anTds);
    }
    return iRow;
  }
  /**
	 * Add one or more TR elements to the table. Generally we'd expect to
	 * use this for reading data from a DOM sourced table, but it could be
	 * used for an TR element. Note that if a TR is given, it is used (i.e.
	 * it is not cloned).
	 *  @param {object} settings dataTables settings object
	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	 *  @returns {array} Array of indexes for the added rows
	 *  @memberof DataTable#oApi
	 */
  function _fnAddTr(settings, trs) {
    var row;
    // Allow an individual node to be passed in
    if (!(trs instanceof $)) {
      trs = $(trs);
    }
    return trs.map(function (i, el) {
      row = _fnGetRowElements(settings, el);
      return _fnAddData(settings, row.data, el, row.cells);
    });
  }
  /**
	 * Take a TR element and convert it to an index in aoData
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} n the TR element to find
	 *  @returns {int} index if the node is found, null if not
	 *  @memberof DataTable#oApi
	 */
  function _fnNodeToDataIndex(oSettings, n) {
    return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
  }
  /**
	 * Take a TD element and convert it into a column data index (not the visible index)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow The row number the TD/TH can be found in
	 *  @param {node} n The TD/TH element to find
	 *  @returns {int} index if the node is found, -1 if not
	 *  @memberof DataTable#oApi
	 */
  function _fnNodeToColumnIndex(oSettings, iRow, n) {
    return $.inArray(n, oSettings.aoData[iRow].anCells);
  }
  /**
	 * Get the data for a given cell from the internal cache, taking into account data mapping
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	 *  @returns {*} Cell data
	 *  @memberof DataTable#oApi
	 */
  function _fnGetCellData(settings, rowIdx, colIdx, type) {
    var draw = settings.iDraw;
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;
    var defaultContent = col.sDefaultContent;
    var cellData = col.fnGetData(rowData, type, {
        settings: settings,
        row: rowIdx,
        col: colIdx
      });
    if (cellData === undefined) {
      if (settings.iDrawError != draw && defaultContent === null) {
        _fnLog(settings, 0, 'Requested unknown parameter ' + (typeof col.mData == 'function' ? '{function}' : '\'' + col.mData + '\'') + ' for row ' + rowIdx + ', column ' + colIdx, 4);
        settings.iDrawError = draw;
      }
      return defaultContent;
    }
    // When the data source is null and a specific data type is requested (i.e.
    // not the original data), we can use default column data
    if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {
      cellData = defaultContent;
    } else if (typeof cellData === 'function') {
      // If the data source is a function, then we run it and use the return,
      // executing in the scope of the data object (for instances)
      return cellData.call(rowData);
    }
    if (cellData === null && type == 'display') {
      return '';
    }
    return cellData;
  }
  /**
	 * Set the value for a specific cell, into the internal data cache
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {*} val Value to set
	 *  @memberof DataTable#oApi
	 */
  function _fnSetCellData(settings, rowIdx, colIdx, val) {
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;
    col.fnSetData(rowData, val, {
      settings: settings,
      row: rowIdx,
      col: colIdx
    });
  }
  // Private variable that is used to match action syntax in the data property object
  var __reArray = /\[.*?\]$/;
  var __reFn = /\(\)$/;
  /**
	 * Split string on periods, taking into account escaped periods
	 * @param  {string} str String to split
	 * @return {array} Split string
	 */
  function _fnSplitObjNotation(str) {
    return $.map(str.match(/(\\.|[^\.])+/g) || [''], function (s) {
      return s.replace(/\\./g, '.');
    });
  }
  /**
	 * Return a function that can be used to get data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data get function
	 *  @memberof DataTable#oApi
	 */
  function _fnGetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      /* Build an object of get functions, and wrap them in a single call */
      var o = {};
      $.each(mSource, function (key, val) {
        if (val) {
          o[key] = _fnGetObjectDataFn(val);
        }
      });
      return function (data, type, row, meta) {
        var t = o[type] || o._;
        return t !== undefined ? t(data, type, row, meta) : data;
      };
    } else if (mSource === null) {
      /* Give an empty string for rendering / sorting etc */
      return function (data) {
        // type, row and meta also passed, but not used
        return data;
      };
    } else if (typeof mSource === 'function') {
      return function (data, type, row, meta) {
        return mSource(data, type, row, meta);
      };
    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
      /* If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the next
			 * level down. On each loop we test for undefined, and if found immediately
			 * return. This allows entire objects to be missing and sDefaultContent to
			 * be used if defined, rather than throwing an error
			 */
      var fetchData = function (data, type, src) {
        var arrayNotation, funcNotation, out, innerSrc;
        if (src !== '') {
          var a = _fnSplitObjNotation(src);
          for (var i = 0, iLen = a.length; i < iLen; i++) {
            // Check if we are dealing with special notation
            arrayNotation = a[i].match(__reArray);
            funcNotation = a[i].match(__reFn);
            if (arrayNotation) {
              // Array notation
              a[i] = a[i].replace(__reArray, '');
              // Condition allows simply [] to be passed in
              if (a[i] !== '') {
                data = data[a[i]];
              }
              out = [];
              // Get the remainder of the nested object to get
              a.splice(0, i + 1);
              innerSrc = a.join('.');
              // Traverse each entry in the array getting the properties requested
              if ($.isArray(data)) {
                for (var j = 0, jLen = data.length; j < jLen; j++) {
                  out.push(fetchData(data[j], type, innerSrc));
                }
              }
              // If a string is given in between the array notation indicators, that
              // is used to join the strings together, otherwise an array is returned
              var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
              data = join === '' ? out : out.join(join);
              // The inner call to fetchData has already traversed through the remainder
              // of the source requested, so we exit from the loop
              break;
            } else if (funcNotation) {
              // Function call
              a[i] = a[i].replace(__reFn, '');
              data = data[a[i]]();
              continue;
            }
            if (data === null || data[a[i]] === undefined) {
              return undefined;
            }
            data = data[a[i]];
          }
        }
        return data;
      };
      return function (data, type) {
        // row and meta also passed, but not used
        return fetchData(data, type, mSource);
      };
    } else {
      /* Array or flat object mapping */
      return function (data, type) {
        // row and meta also passed, but not used
        return data[mSource];
      };
    }
  }
  /**
	 * Return a function that can be used to set data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data set function
	 *  @memberof DataTable#oApi
	 */
  function _fnSetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      /* Unlike get, only the underscore (global) option is used for for
			 * setting data since we don't know the type here. This is why an object
			 * option is not documented for `mData` (which is read/write), but it is
			 * for `mRender` which is read only.
			 */
      return _fnSetObjectDataFn(mSource._);
    } else if (mSource === null) {
      /* Nothing to do when the data source is null */
      return function () {
      };
    } else if (typeof mSource === 'function') {
      return function (data, val, meta) {
        mSource(data, 'set', val, meta);
      };
    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
      /* Like the get, we need to get data from a nested object */
      var setData = function (data, val, src) {
        var a = _fnSplitObjNotation(src), b;
        var aLast = a[a.length - 1];
        var arrayNotation, funcNotation, o, innerSrc;
        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
          // Check if we are dealing with an array notation request
          arrayNotation = a[i].match(__reArray);
          funcNotation = a[i].match(__reFn);
          if (arrayNotation) {
            a[i] = a[i].replace(__reArray, '');
            data[a[i]] = [];
            // Get the remainder of the nested object to set so we can recurse
            b = a.slice();
            b.splice(0, i + 1);
            innerSrc = b.join('.');
            // Traverse each entry in the array setting the properties requested
            if ($.isArray(val)) {
              for (var j = 0, jLen = val.length; j < jLen; j++) {
                o = {};
                setData(o, val[j], innerSrc);
                data[a[i]].push(o);
              }
            } else {
              // We've been asked to save data to an array, but it
              // isn't array data to be saved. Best that can be done
              // is to just save the value.
              data[a[i]] = val;
            }
            // The inner call to setData has already traversed through the remainder
            // of the source and has set the data, thus we can exit here
            return;
          } else if (funcNotation) {
            // Function call
            a[i] = a[i].replace(__reFn, '');
            data = data[a[i]](val);
          }
          // If the nested object doesn't currently exist - since we are
          // trying to set the value - create it
          if (data[a[i]] === null || data[a[i]] === undefined) {
            data[a[i]] = {};
          }
          data = data[a[i]];
        }
        // Last item in the input - i.e, the actual set
        if (aLast.match(__reFn)) {
          // Function call
          data = data[aLast.replace(__reFn, '')](val);
        } else {
          // If array notation is used, we just want to strip it and use the property name
          // and assign the value. If it isn't used, then we get the result we want anyway
          data[aLast.replace(__reArray, '')] = val;
        }
      };
      return function (data, val) {
        // meta is also passed in, but not used
        return setData(data, val, mSource);
      };
    } else {
      /* Array or flat object mapping */
      return function (data, val) {
        // meta is also passed in, but not used
        data[mSource] = val;
      };
    }
  }
  /**
	 * Return an array with the full table data
	 *  @param {object} oSettings dataTables settings object
	 *  @returns array {array} aData Master data array
	 *  @memberof DataTable#oApi
	 */
  function _fnGetDataMaster(settings) {
    return _pluck(settings.aoData, '_aData');
  }
  /**
	 * Nuke the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnClearTable(settings) {
    settings.aoData.length = 0;
    settings.aiDisplayMaster.length = 0;
    settings.aiDisplay.length = 0;
    settings.aIds = {};
  }
  /**
	 * Take an array of integers (index array) and remove a target integer (value - not
	 * the key!)
	 *  @param {array} a Index array to target
	 *  @param {int} iTarget value to find
	 *  @memberof DataTable#oApi
	 */
  function _fnDeleteIndex(a, iTarget, splice) {
    var iTargetIndex = -1;
    for (var i = 0, iLen = a.length; i < iLen; i++) {
      if (a[i] == iTarget) {
        iTargetIndex = i;
      } else if (a[i] > iTarget) {
        a[i]--;
      }
    }
    if (iTargetIndex != -1 && splice === undefined) {
      a.splice(iTargetIndex, 1);
    }
  }
  /**
	 * Mark cached data as invalid such that a re-read of the data will occur when
	 * the cached data is next requested. Also update from the data source object.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {int}    rowIdx   Row index to invalidate
	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	 *     or 'data'
	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	 *     row will be invalidated
	 * @memberof DataTable#oApi
	 *
	 * @todo For the modularisation of v1.11 this will need to become a callback, so
	 *   the sort and filter methods can subscribe to it. That will required
	 *   initialisation options for sorting, which is why it is not already baked in
	 */
  function _fnInvalidate(settings, rowIdx, src, colIdx) {
    var row = settings.aoData[rowIdx];
    var i, ien;
    var cellWrite = function (cell, col) {
      // This is very frustrating, but in IE if you just write directly
      // to innerHTML, and elements that are overwritten are GC'ed,
      // even if there is a reference to them elsewhere
      while (cell.childNodes.length) {
        cell.removeChild(cell.firstChild);
      }
      cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
    };
    // Are we reading last data from DOM or the data object?
    if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {
      // Read the data from the DOM
      row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
    } else {
      // Reading from data object, update the DOM
      var cells = row.anCells;
      if (cells) {
        if (colIdx !== undefined) {
          cellWrite(cells[colIdx], colIdx);
        } else {
          for (i = 0, ien = cells.length; i < ien; i++) {
            cellWrite(cells[i], i);
          }
        }
      }
    }
    // For both row and cell invalidation, the cached data for sorting and
    // filtering is nulled out
    row._aSortData = null;
    row._aFilterData = null;
    // Invalidate the type for a specific column (if given) or all columns since
    // the data might have changed
    var cols = settings.aoColumns;
    if (colIdx !== undefined) {
      cols[colIdx].sType = null;
    } else {
      for (i = 0, ien = cols.length; i < ien; i++) {
        cols[i].sType = null;
      }
      // Update DataTables special `DT_*` attributes for the row
      _fnRowAttributes(settings, row);
    }
  }
  /**
	 * Build a data source object from an HTML row, reading the contents of the
	 * cells that are in the row.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {node|object} TR element from which to read data or existing row
	 *   object from which to re-read the data from the cells
	 * @param {int} [colIdx] Optional column index
	 * @param {array|object} [d] Data source object. If `colIdx` is given then this
	 *   parameter should also be given and will be used to write the data into.
	 *   Only the column in question will be written
	 * @returns {object} Object with two parameters: `data` the data read, in
	 *   document order, and `cells` and array of nodes (they can be useful to the
	 *   caller, so rather than needing a second traversal to get them, just return
	 *   them from here).
	 * @memberof DataTable#oApi
	 */
  function _fnGetRowElements(settings, row, colIdx, d) {
    var tds = [], td = row.firstChild, name, col, o, i = 0, contents, columns = settings.aoColumns, objectRead = settings._rowReadObject;
    // Allow the data object to be passed in, or construct
    d = d !== undefined ? d : objectRead ? {} : [];
    var attr = function (str, td) {
      if (typeof str === 'string') {
        var idx = str.indexOf('@');
        if (idx !== -1) {
          var attr = str.substring(idx + 1);
          var setter = _fnSetObjectDataFn(str);
          setter(d, td.getAttribute(attr));
        }
      }
    };
    // Read data from a cell and store into the data object
    var cellProcess = function (cell) {
      if (colIdx === undefined || colIdx === i) {
        col = columns[i];
        contents = $.trim(cell.innerHTML);
        if (col && col._bAttrSrc) {
          var setter = _fnSetObjectDataFn(col.mData._);
          setter(d, contents);
          attr(col.mData.sort, cell);
          attr(col.mData.type, cell);
          attr(col.mData.filter, cell);
        } else {
          // Depending on the `data` option for the columns the data can
          // be read to either an object or an array.
          if (objectRead) {
            if (!col._setter) {
              // Cache the setter function
              col._setter = _fnSetObjectDataFn(col.mData);
            }
            col._setter(d, contents);
          } else {
            d[i] = contents;
          }
        }
      }
      i++;
    };
    if (td) {
      // `tr` element was passed in
      while (td) {
        name = td.nodeName.toUpperCase();
        if (name == 'TD' || name == 'TH') {
          cellProcess(td);
          tds.push(td);
        }
        td = td.nextSibling;
      }
    } else {
      // Existing row object passed in
      tds = row.anCells;
      for (var j = 0, jen = tds.length; j < jen; j++) {
        cellProcess(tds[j]);
      }
    }
    // Read the ID from the DOM if present
    var rowNode = row.firstChild ? row : row.nTr;
    if (rowNode) {
      var id = rowNode.getAttribute('id');
      if (id) {
        _fnSetObjectDataFn(settings.rowId)(d, id);
      }
    }
    return {
      data: d,
      cells: tds
    };
  }
  /**
	 * Create a new TR element (and it's TD children) for a row
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow Row to consider
	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @memberof DataTable#oApi
	 */
  function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
    var row = oSettings.aoData[iRow], rowData = row._aData, cells = [], nTr, nTd, oCol, i, iLen;
    if (row.nTr === null) {
      nTr = nTrIn || document.createElement('tr');
      row.nTr = nTr;
      row.anCells = cells;
      /* Use a private property on the node to allow reserve mapping from the node
			 * to the aoData array for fast look up
			 */
      nTr._DT_RowIndex = iRow;
      /* Special parameters can be given by the data source to be used on the row */
      _fnRowAttributes(oSettings, row);
      /* Process each column */
      for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
        oCol = oSettings.aoColumns[i];
        nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
        nTd._DT_CellIndex = {
          row: iRow,
          column: i
        };
        cells.push(nTd);
        // Need to create the HTML if new, or if a rendering function is defined
        if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {
          nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
        }
        /* Add user defined class */
        if (oCol.sClass) {
          nTd.className += ' ' + oCol.sClass;
        }
        // Visibility - add or remove as required
        if (oCol.bVisible && !nTrIn) {
          nTr.appendChild(nTd);
        } else if (!oCol.bVisible && nTrIn) {
          nTd.parentNode.removeChild(nTd);
        }
        if (oCol.fnCreatedCell) {
          oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
        }
      }
      _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [
        nTr,
        rowData,
        iRow
      ]);
    }
    // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
    // and deployed
    row.nTr.setAttribute('role', 'row');
  }
  /**
	 * Add attributes to a row based on the special `DT_*` parameters in a data
	 * source object.
	 *  @param {object} settings DataTables settings object
	 *  @param {object} DataTables row object for the row to be modified
	 *  @memberof DataTable#oApi
	 */
  function _fnRowAttributes(settings, row) {
    var tr = row.nTr;
    var data = row._aData;
    if (tr) {
      var id = settings.rowIdFn(data);
      if (id) {
        tr.id = id;
      }
      if (data.DT_RowClass) {
        // Remove any classes added by DT_RowClass before
        var a = data.DT_RowClass.split(' ');
        row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;
        $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);
      }
      if (data.DT_RowAttr) {
        $(tr).attr(data.DT_RowAttr);
      }
      if (data.DT_RowData) {
        $(tr).data(data.DT_RowData);
      }
    }
  }
  /**
	 * Create the HTML header for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnBuildHead(oSettings) {
    var i, ien, cell, row, column;
    var thead = oSettings.nTHead;
    var tfoot = oSettings.nTFoot;
    var createHeader = $('th, td', thead).length === 0;
    var classes = oSettings.oClasses;
    var columns = oSettings.aoColumns;
    if (createHeader) {
      row = $('<tr/>').appendTo(thead);
    }
    for (i = 0, ien = columns.length; i < ien; i++) {
      column = columns[i];
      cell = $(column.nTh).addClass(column.sClass);
      if (createHeader) {
        cell.appendTo(row);
      }
      // 1.11 move into sorting
      if (oSettings.oFeatures.bSort) {
        cell.addClass(column.sSortingClass);
        if (column.bSortable !== false) {
          cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);
          _fnSortAttachListener(oSettings, column.nTh, i);
        }
      }
      if (column.sTitle != cell[0].innerHTML) {
        cell.html(column.sTitle);
      }
      _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);
    }
    if (createHeader) {
      _fnDetectHeader(oSettings.aoHeader, thead);
    }
    /* ARIA role for the rows */
    $(thead).find('>tr').attr('role', 'row');
    /* Deal with the footer - add classes if required */
    $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
    $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);
    // Cache the footer cells. Note that we only take the cells from the first
    // row in the footer. If there is more than one row the user wants to
    // interact with, they need to use the table().foot() method. Note also this
    // allows cells to be used for multiple columns using colspan
    if (tfoot !== null) {
      var cells = oSettings.aoFooter[0];
      for (i = 0, ien = cells.length; i < ien; i++) {
        column = columns[i];
        column.nTf = cells[i].cell;
        if (column.sClass) {
          $(column.nTf).addClass(column.sClass);
        }
      }
    }
  }
  /**
	 * Draw the header (or footer) element based on the column visibility states. The
	 * methodology here is to use the layout array from _fnDetectHeader, modified for
	 * the instantaneous column visibility, to construct the new layout. The grid is
	 * traversed over cell at a time in a rows x columns grid fashion, although each
	 * cell insert can cover multiple elements in the grid - which is tracks using the
	 * aApplied array. Cell inserts in the grid will only occur where there isn't
	 * already a cell in that position.
	 *  @param {object} oSettings dataTables settings object
	 *  @param array {objects} aoSource Layout array from _fnDetectHeader
	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	 *  @memberof DataTable#oApi
	 */
  function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
    var i, iLen, j, jLen, k, kLen, n, nLocalTr;
    var aoLocal = [];
    var aApplied = [];
    var iColumns = oSettings.aoColumns.length;
    var iRowspan, iColspan;
    if (!aoSource) {
      return;
    }
    if (bIncludeHidden === undefined) {
      bIncludeHidden = false;
    }
    /* Make a copy of the master layout array, but without the visible columns in it */
    for (i = 0, iLen = aoSource.length; i < iLen; i++) {
      aoLocal[i] = aoSource[i].slice();
      aoLocal[i].nTr = aoSource[i].nTr;
      /* Remove any columns which are currently hidden */
      for (j = iColumns - 1; j >= 0; j--) {
        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
          aoLocal[i].splice(j, 1);
        }
      }
      /* Prep the applied array - it needs an element for each row */
      aApplied.push([]);
    }
    for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
      nLocalTr = aoLocal[i].nTr;
      /* All cells are going to be replaced, so empty out the row */
      if (nLocalTr) {
        while (n = nLocalTr.firstChild) {
          nLocalTr.removeChild(n);
        }
      }
      for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
        iRowspan = 1;
        iColspan = 1;
        /* Check to see if there is already a cell (row/colspan) covering our target
				 * insert point. If there is, then there is nothing to do.
				 */
        if (aApplied[i][j] === undefined) {
          nLocalTr.appendChild(aoLocal[i][j].cell);
          aApplied[i][j] = 1;
          /* Expand the cell to cover as many rows as needed */
          while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
            aApplied[i + iRowspan][j] = 1;
            iRowspan++;
          }
          /* Expand the cell to cover as many columns as needed */
          while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
            /* Must update the applied array over the rows for the columns */
            for (k = 0; k < iRowspan; k++) {
              aApplied[i + k][j + iColspan] = 1;
            }
            iColspan++;
          }
          /* Do the actual expansion in the DOM */
          $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);
        }
      }
    }
  }
  /**
	 * Insert the required TR nodes into the table for display
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnDraw(oSettings) {
    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
    var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);
    if ($.inArray(false, aPreDraw) !== -1) {
      _fnProcessingDisplay(oSettings, false);
      return;
    }
    var i, iLen, n;
    var anRows = [];
    var iRowCount = 0;
    var asStripeClasses = oSettings.asStripeClasses;
    var iStripes = asStripeClasses.length;
    var iOpenRows = oSettings.aoOpenRows.length;
    var oLang = oSettings.oLanguage;
    var iInitDisplayStart = oSettings.iInitDisplayStart;
    var bServerSide = _fnDataSource(oSettings) == 'ssp';
    var aiDisplay = oSettings.aiDisplay;
    oSettings.bDrawing = true;
    /* Check and see if we have an initial draw position from state saving */
    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
      oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;
      oSettings.iInitDisplayStart = -1;
    }
    var iDisplayStart = oSettings._iDisplayStart;
    var iDisplayEnd = oSettings.fnDisplayEnd();
    /* Server-side processing draw intercept */
    if (oSettings.bDeferLoading) {
      oSettings.bDeferLoading = false;
      oSettings.iDraw++;
      _fnProcessingDisplay(oSettings, false);
    } else if (!bServerSide) {
      oSettings.iDraw++;
    } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
      return;
    }
    if (aiDisplay.length !== 0) {
      var iStart = bServerSide ? 0 : iDisplayStart;
      var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
      for (var j = iStart; j < iEnd; j++) {
        var iDataIndex = aiDisplay[j];
        var aoData = oSettings.aoData[iDataIndex];
        if (aoData.nTr === null) {
          _fnCreateTr(oSettings, iDataIndex);
        }
        var nRow = aoData.nTr;
        /* Remove the old striping classes and then add the new one */
        if (iStripes !== 0) {
          var sStripe = asStripeClasses[iRowCount % iStripes];
          if (aoData._sRowStripe != sStripe) {
            $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
            aoData._sRowStripe = sStripe;
          }
        }
        // Row callback functions - might want to manipulate the row
        // iRowCount and j are not currently documented. Are they at all
        // useful?
        _fnCallbackFire(oSettings, 'aoRowCallback', null, [
          nRow,
          aoData._aData,
          iRowCount,
          j
        ]);
        anRows.push(nRow);
        iRowCount++;
      }
    } else {
      /* Table is empty - create a row with an empty message in it */
      var sZero = oLang.sZeroRecords;
      if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
        sZero = oLang.sLoadingRecords;
      } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
        sZero = oLang.sEmptyTable;
      }
      anRows[0] = $('<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' }).append($('<td />', {
        'valign': 'top',
        'colSpan': _fnVisbleColumns(oSettings),
        'class': oSettings.oClasses.sRowEmpty
      }).html(sZero))[0];
    }
    /* Header and footer callbacks */
    _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [
      $(oSettings.nTHead).children('tr')[0],
      _fnGetDataMaster(oSettings),
      iDisplayStart,
      iDisplayEnd,
      aiDisplay
    ]);
    _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [
      $(oSettings.nTFoot).children('tr')[0],
      _fnGetDataMaster(oSettings),
      iDisplayStart,
      iDisplayEnd,
      aiDisplay
    ]);
    var body = $(oSettings.nTBody);
    body.children().detach();
    body.append($(anRows));
    /* Call all required callback functions for the end of a draw */
    _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);
    /* Draw is complete, sorting and filtering must be as well */
    oSettings.bSorted = false;
    oSettings.bFiltered = false;
    oSettings.bDrawing = false;
  }
  /**
	 * Redraw the table - taking account of the various features which are enabled
	 *  @param {object} oSettings dataTables settings object
	 *  @param {boolean} [holdPosition] Keep the current paging position. By default
	 *    the paging is reset to the first page
	 *  @memberof DataTable#oApi
	 */
  function _fnReDraw(settings, holdPosition) {
    var features = settings.oFeatures, sort = features.bSort, filter = features.bFilter;
    if (sort) {
      _fnSort(settings);
    }
    if (filter) {
      _fnFilterComplete(settings, settings.oPreviousSearch);
    } else {
      // No filtering, so we want to just use the display master
      settings.aiDisplay = settings.aiDisplayMaster.slice();
    }
    if (holdPosition !== true) {
      settings._iDisplayStart = 0;
    }
    // Let any modules know about the draw hold position state (used by
    // scrolling internally)
    settings._drawHold = holdPosition;
    _fnDraw(settings);
    settings._drawHold = false;
  }
  /**
	 * Add the options to the page HTML for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnAddOptionsHtml(oSettings) {
    var classes = oSettings.oClasses;
    var table = $(oSettings.nTable);
    var holding = $('<div/>').insertBefore(table);
    // Holding element for speed
    var features = oSettings.oFeatures;
    // All DataTables are wrapped in a div
    var insert = $('<div/>', {
        id: oSettings.sTableId + '_wrapper',
        'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
      });
    oSettings.nHolding = holding[0];
    oSettings.nTableWrapper = insert[0];
    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
    /* Loop over the user set positioning and place the elements as needed */
    var aDom = oSettings.sDom.split('');
    var featureNode, cOption, nNewNode, cNext, sAttr, j;
    for (var i = 0; i < aDom.length; i++) {
      featureNode = null;
      cOption = aDom[i];
      if (cOption == '<') {
        /* New container div */
        nNewNode = $('<div/>')[0];
        /* Check to see if we should append an id and/or a class name to the container */
        cNext = aDom[i + 1];
        if (cNext == '\'' || cNext == '"') {
          sAttr = '';
          j = 2;
          while (aDom[i + j] != cNext) {
            sAttr += aDom[i + j];
            j++;
          }
          /* Replace jQuery UI constants @todo depreciated */
          if (sAttr == 'H') {
            sAttr = classes.sJUIHeader;
          } else if (sAttr == 'F') {
            sAttr = classes.sJUIFooter;
          }
          /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
					 * breaks the string into parts and applies them as needed
					 */
          if (sAttr.indexOf('.') != -1) {
            var aSplit = sAttr.split('.');
            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
            nNewNode.className = aSplit[1];
          } else if (sAttr.charAt(0) == '#') {
            nNewNode.id = sAttr.substr(1, sAttr.length - 1);
          } else {
            nNewNode.className = sAttr;
          }
          i += j;  /* Move along the position array */
        }
        insert.append(nNewNode);
        insert = $(nNewNode);
      } else if (cOption == '>') {
        /* End container div */
        insert = insert.parent();
      }  // @todo Move options into their own plugins?
      else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
        /* Length */
        featureNode = _fnFeatureHtmlLength(oSettings);
      } else if (cOption == 'f' && features.bFilter) {
        /* Filter */
        featureNode = _fnFeatureHtmlFilter(oSettings);
      } else if (cOption == 'r' && features.bProcessing) {
        /* pRocessing */
        featureNode = _fnFeatureHtmlProcessing(oSettings);
      } else if (cOption == 't') {
        /* Table */
        featureNode = _fnFeatureHtmlTable(oSettings);
      } else if (cOption == 'i' && features.bInfo) {
        /* Info */
        featureNode = _fnFeatureHtmlInfo(oSettings);
      } else if (cOption == 'p' && features.bPaginate) {
        /* Pagination */
        featureNode = _fnFeatureHtmlPaginate(oSettings);
      } else if (DataTable.ext.feature.length !== 0) {
        /* Plug-in features */
        var aoFeatures = DataTable.ext.feature;
        for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
          if (cOption == aoFeatures[k].cFeature) {
            featureNode = aoFeatures[k].fnInit(oSettings);
            break;
          }
        }
      }
      /* Add to the 2D features array */
      if (featureNode) {
        var aanFeatures = oSettings.aanFeatures;
        if (!aanFeatures[cOption]) {
          aanFeatures[cOption] = [];
        }
        aanFeatures[cOption].push(featureNode);
        insert.append(featureNode);
      }
    }
    /* Built our DOM structure - replace the holding div with what we want */
    holding.replaceWith(insert);
    oSettings.nHolding = null;
  }
  /**
	 * Use the DOM source to create up an array of header cells. The idea here is to
	 * create a layout grid (array) of rows x columns, which contains a reference
	 * to the cell that that point in the grid (regardless of col/rowspan), such that
	 * any column / row could be removed and the new grid constructed
	 *  @param array {object} aLayout Array to store the calculated layout in
	 *  @param {node} nThead The header/footer element for the table
	 *  @memberof DataTable#oApi
	 */
  function _fnDetectHeader(aLayout, nThead) {
    var nTrs = $(nThead).children('tr');
    var nTr, nCell;
    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
    var bUnique;
    var fnShiftCol = function (a, i, j) {
      var k = a[i];
      while (k[j]) {
        j++;
      }
      return j;
    };
    aLayout.splice(0, aLayout.length);
    /* We know how many rows there are in the layout - so prep it */
    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      aLayout.push([]);
    }
    /* Calculate a layout array */
    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      nTr = nTrs[i];
      iColumn = 0;
      /* For every cell in the row... */
      nCell = nTr.firstChild;
      while (nCell) {
        if (nCell.nodeName.toUpperCase() == 'TD' || nCell.nodeName.toUpperCase() == 'TH') {
          /* Get the col and rowspan attributes from the DOM and sanitise them */
          iColspan = nCell.getAttribute('colspan') * 1;
          iRowspan = nCell.getAttribute('rowspan') * 1;
          iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
          iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;
          /* There might be colspan cells already in this row, so shift our target
					 * accordingly
					 */
          iColShifted = fnShiftCol(aLayout, i, iColumn);
          /* Cache calculation for unique columns */
          bUnique = iColspan === 1 ? true : false;
          /* If there is col / rowspan, copy the information into the layout grid */
          for (l = 0; l < iColspan; l++) {
            for (k = 0; k < iRowspan; k++) {
              aLayout[i + k][iColShifted + l] = {
                'cell': nCell,
                'unique': bUnique
              };
              aLayout[i + k].nTr = nTr;
            }
          }
        }
        nCell = nCell.nextSibling;
      }
    }
  }
  /**
	 * Get an array of unique th elements, one for each column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nHeader automatically detect the layout from this node - optional
	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	 *  @returns array {node} aReturn list of unique th's
	 *  @memberof DataTable#oApi
	 */
  function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
    var aReturn = [];
    if (!aLayout) {
      aLayout = oSettings.aoHeader;
      if (nHeader) {
        aLayout = [];
        _fnDetectHeader(aLayout, nHeader);
      }
    }
    for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
      for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
        if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
          aReturn[j] = aLayout[i][j].cell;
        }
      }
    }
    return aReturn;
  }
  /**
	 * Create an Ajax call based on the table's settings, taking into account that
	 * parameters can have multiple forms, and backwards compatibility.
	 *
	 * @param {object} oSettings dataTables settings object
	 * @param {array} data Data to send to the server, required by
	 *     DataTables - may be augmented by developer callbacks
	 * @param {function} fn Callback function to run when data is obtained
	 */
  function _fnBuildAjax(oSettings, data, fn) {
    // Compatibility with 1.9-, allow fnServerData and event to manipulate
    _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);
    // Convert to object based for 1.10+ if using the old array scheme which can
    // come from server-side processing or serverParams
    if (data && $.isArray(data)) {
      var tmp = {};
      var rbracket = /(.*?)\[\]$/;
      $.each(data, function (key, val) {
        var match = val.name.match(rbracket);
        if (match) {
          // Support for arrays
          var name = match[0];
          if (!tmp[name]) {
            tmp[name] = [];
          }
          tmp[name].push(val.value);
        } else {
          tmp[val.name] = val.value;
        }
      });
      data = tmp;
    }
    var ajaxData;
    var ajax = oSettings.ajax;
    var instance = oSettings.oInstance;
    var callback = function (json) {
      _fnCallbackFire(oSettings, null, 'xhr', [
        oSettings,
        json,
        oSettings.jqXHR
      ]);
      fn(json);
    };
    if ($.isPlainObject(ajax) && ajax.data) {
      ajaxData = ajax.data;
      var newData = $.isFunction(ajaxData) ? ajaxData(data, oSettings) : ajaxData;
      // an object object or array to merge
      // If the function returned something, use that alone
      data = $.isFunction(ajaxData) && newData ? newData : $.extend(true, data, newData);
      // Remove the data property as we've resolved it already and don't want
      // jQuery to do it again (it is restored at the end of the function)
      delete ajax.data;
    }
    var baseAjax = {
        'data': data,
        'success': function (json) {
          var error = json.error || json.sError;
          if (error) {
            _fnLog(oSettings, 0, error);
          }
          oSettings.json = json;
          callback(json);
        },
        'dataType': 'json',
        'cache': false,
        'type': oSettings.sServerMethod,
        'error': function (xhr, error, thrown) {
          var ret = _fnCallbackFire(oSettings, null, 'xhr', [
              oSettings,
              null,
              oSettings.jqXHR
            ]);
          if ($.inArray(true, ret) === -1) {
            if (error == 'parsererror') {
              _fnLog(oSettings, 0, 'Invalid JSON response', 1);
            } else if (xhr.readyState === 4) {
              _fnLog(oSettings, 0, 'Ajax error', 7);
            }
          }
          _fnProcessingDisplay(oSettings, false);
        }
      };
    // Store the data submitted for the API
    oSettings.oAjaxData = data;
    // Allow plug-ins and external processes to modify the data
    _fnCallbackFire(oSettings, null, 'preXhr', [
      oSettings,
      data
    ]);
    if (oSettings.fnServerData) {
      // DataTables 1.9- compatibility
      oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {
        // Need to convert back to 1.9 trad format
        return {
          name: key,
          value: val
        };
      }), callback, oSettings);
    } else if (oSettings.sAjaxSource || typeof ajax === 'string') {
      // DataTables 1.9- compatibility
      oSettings.jqXHR = $.ajax($.extend(baseAjax, { url: ajax || oSettings.sAjaxSource }));
    } else if ($.isFunction(ajax)) {
      // Is a function - let the caller define what needs to be done
      oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
    } else {
      // Object to extend the base settings
      oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));
      // Restore for next time around
      ajax.data = ajaxData;
    }
  }
  /**
	 * Update the table using an Ajax call
	 *  @param {object} settings dataTables settings object
	 *  @returns {boolean} Block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
  function _fnAjaxUpdate(settings) {
    if (settings.bAjaxDataGet) {
      settings.iDraw++;
      _fnProcessingDisplay(settings, true);
      _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
        _fnAjaxUpdateDraw(settings, json);
      });
      return false;
    }
    return true;
  }
  /**
	 * Build up the parameters in an object needed for a server-side processing
	 * request. Note that this is basically done twice, is different ways - a modern
	 * method which is used by default in DataTables 1.10 which uses objects and
	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	 * the sAjaxSource option is used in the initialisation, or the legacyAjax
	 * option is set.
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {bool} block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
  function _fnAjaxParameters(settings) {
    var columns = settings.aoColumns, columnCount = columns.length, features = settings.oFeatures, preSearch = settings.oPreviousSearch, preColSearch = settings.aoPreSearchCols, i, data = [], dataProp, column, columnSearch, sort = _fnSortFlatten(settings), displayStart = settings._iDisplayStart, displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;
    var param = function (name, value) {
      data.push({
        'name': name,
        'value': value
      });
    };
    // DataTables 1.9- compatible method
    param('sEcho', settings.iDraw);
    param('iColumns', columnCount);
    param('sColumns', _pluck(columns, 'sName').join(','));
    param('iDisplayStart', displayStart);
    param('iDisplayLength', displayLength);
    // DataTables 1.10+ method
    var d = {
        draw: settings.iDraw,
        columns: [],
        order: [],
        start: displayStart,
        length: displayLength,
        search: {
          value: preSearch.sSearch,
          regex: preSearch.bRegex
        }
      };
    for (i = 0; i < columnCount; i++) {
      column = columns[i];
      columnSearch = preColSearch[i];
      dataProp = typeof column.mData == 'function' ? 'function' : column.mData;
      d.columns.push({
        data: dataProp,
        name: column.sName,
        searchable: column.bSearchable,
        orderable: column.bSortable,
        search: {
          value: columnSearch.sSearch,
          regex: columnSearch.bRegex
        }
      });
      param('mDataProp_' + i, dataProp);
      if (features.bFilter) {
        param('sSearch_' + i, columnSearch.sSearch);
        param('bRegex_' + i, columnSearch.bRegex);
        param('bSearchable_' + i, column.bSearchable);
      }
      if (features.bSort) {
        param('bSortable_' + i, column.bSortable);
      }
    }
    if (features.bFilter) {
      param('sSearch', preSearch.sSearch);
      param('bRegex', preSearch.bRegex);
    }
    if (features.bSort) {
      $.each(sort, function (i, val) {
        d.order.push({
          column: val.col,
          dir: val.dir
        });
        param('iSortCol_' + i, val.col);
        param('sSortDir_' + i, val.dir);
      });
      param('iSortingCols', sort.length);
    }
    // If the legacy.ajax parameter is null, then we automatically decide which
    // form to use, based on sAjaxSource
    var legacy = DataTable.ext.legacy.ajax;
    if (legacy === null) {
      return settings.sAjaxSource ? data : d;
    }
    // Otherwise, if legacy has been specified then we use that to decide on the
    // form
    return legacy ? data : d;
  }
  /**
	 * Data the data from the server (nuking the old) and redraw the table
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} json json data return from the server.
	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	 *  @param {array} json.aaData The data to display on this page
	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	 *  @memberof DataTable#oApi
	 */
  function _fnAjaxUpdateDraw(settings, json) {
    // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
    // Support both
    var compat = function (old, modern) {
      return json[old] !== undefined ? json[old] : json[modern];
    };
    var data = _fnAjaxDataSrc(settings, json);
    var draw = compat('sEcho', 'draw');
    var recordsTotal = compat('iTotalRecords', 'recordsTotal');
    var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');
    if (draw) {
      // Protect against out of sequence returns
      if (draw * 1 < settings.iDraw) {
        return;
      }
      settings.iDraw = draw * 1;
    }
    _fnClearTable(settings);
    settings._iRecordsTotal = parseInt(recordsTotal, 10);
    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
    for (var i = 0, ien = data.length; i < ien; i++) {
      _fnAddData(settings, data[i]);
    }
    settings.aiDisplay = settings.aiDisplayMaster.slice();
    settings.bAjaxDataGet = false;
    _fnDraw(settings);
    if (!settings._bInitComplete) {
      _fnInitComplete(settings, json);
    }
    settings.bAjaxDataGet = true;
    _fnProcessingDisplay(settings, false);
  }
  /**
	 * Get the data from the JSON data source to use for drawing a table. Using
	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	 * source object, or from a processing function.
	 *  @param {object} oSettings dataTables settings object
	 *  @param  {object} json Data source object / array from the server
	 *  @return {array} Array of data to use
	 */
  function _fnAjaxDataSrc(oSettings, json) {
    var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp;
    // Compatibility with 1.9-.
    // Compatibility with 1.9-. In order to read from aaData, check if the
    // default has been changed, if not, check for aaData
    if (dataSrc === 'data') {
      return json.aaData || json[dataSrc];
    }
    return dataSrc !== '' ? _fnGetObjectDataFn(dataSrc)(json) : json;
  }
  /**
	 * Generate the node required for filtering text
	 *  @returns {node} Filter control element
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnFeatureHtmlFilter(settings) {
    var classes = settings.oClasses;
    var tableId = settings.sTableId;
    var language = settings.oLanguage;
    var previousSearch = settings.oPreviousSearch;
    var features = settings.aanFeatures;
    var input = '<input type="search" class="' + classes.sFilterInput + '"/>';
    var str = language.sSearch;
    str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;
    var filter = $('<div/>', {
        'id': !features.f ? tableId + '_filter' : null,
        'class': classes.sFilter
      }).append($('<label/>').append(str));
    var searchFn = function () {
      /* Update all other filter input elements for the new display */
      var n = features.f;
      var val = !this.value ? '' : this.value;
      // mental IE8 fix :-(
      /* Now do the filter */
      if (val != previousSearch.sSearch) {
        _fnFilterComplete(settings, {
          'sSearch': val,
          'bRegex': previousSearch.bRegex,
          'bSmart': previousSearch.bSmart,
          'bCaseInsensitive': previousSearch.bCaseInsensitive
        });
        // Need to redraw, without resorting
        settings._iDisplayStart = 0;
        _fnDraw(settings);
      }
    };
    var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;
    var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).bind('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).bind('keypress.DT', function (e) {
        /* Prevent form submission */
        if (e.keyCode == 13) {
          return false;
        }
      }).attr('aria-controls', tableId);
    // Update the input elements whenever the table is filtered
    $(settings.nTable).on('search.dt.DT', function (ev, s) {
      if (settings === s) {
        // IE9 throws an 'unknown error' if document.activeElement is used
        // inside an iframe or frame...
        try {
          if (jqFilter[0] !== document.activeElement) {
            jqFilter.val(previousSearch.sSearch);
          }
        } catch (e) {
        }
      }
    });
    return filter[0];
  }
  /**
	 * Filter the table using both the global filter and column based filtering
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oSearch search information
	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	 *  @memberof DataTable#oApi
	 */
  function _fnFilterComplete(oSettings, oInput, iForce) {
    var oPrevSearch = oSettings.oPreviousSearch;
    var aoPrevSearch = oSettings.aoPreSearchCols;
    var fnSaveFilter = function (oFilter) {
      /* Save the filtering values */
      oPrevSearch.sSearch = oFilter.sSearch;
      oPrevSearch.bRegex = oFilter.bRegex;
      oPrevSearch.bSmart = oFilter.bSmart;
      oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
    };
    var fnRegex = function (o) {
      // Backwards compatibility with the bEscapeRegex option
      return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
    };
    // Resolve any column types that are unknown due to addition or invalidation
    // @todo As per sort - can this be moved into an event handler?
    _fnColumnTypes(oSettings);
    /* In server-side processing all filtering is done by the server, so no point hanging around here */
    if (_fnDataSource(oSettings) != 'ssp') {
      /* Global filter */
      _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);
      fnSaveFilter(oInput);
      /* Now do the individual column filter */
      for (var i = 0; i < aoPrevSearch.length; i++) {
        _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
      }
      /* Custom filtering */
      _fnFilterCustom(oSettings);
    } else {
      fnSaveFilter(oInput);
    }
    /* Tell the draw function we have been filtering */
    oSettings.bFiltered = true;
    _fnCallbackFire(oSettings, null, 'search', [oSettings]);
  }
  /**
	 * Apply custom filtering functions
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnFilterCustom(settings) {
    var filters = DataTable.ext.search;
    var displayRows = settings.aiDisplay;
    var row, rowIdx;
    for (var i = 0, ien = filters.length; i < ien; i++) {
      var rows = [];
      // Loop over each row and see if it should be included
      for (var j = 0, jen = displayRows.length; j < jen; j++) {
        rowIdx = displayRows[j];
        row = settings.aoData[rowIdx];
        if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
          rows.push(rowIdx);
        }
      }
      // So the array reference doesn't break set the results into the
      // existing array
      displayRows.length = 0;
      $.merge(displayRows, rows);
    }
  }
  /**
	 * Filter the table on a per-column basis
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sInput string to filter on
	 *  @param {int} iColumn column to filter
	 *  @param {bool} bRegex treat search string as a regular expression or not
	 *  @param {bool} bSmart use smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
  function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
    if (searchStr === '') {
      return;
    }
    var data;
    var display = settings.aiDisplay;
    var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);
    for (var i = display.length - 1; i >= 0; i--) {
      data = settings.aoData[display[i]]._aFilterData[colIdx];
      if (!rpSearch.test(data)) {
        display.splice(i, 1);
      }
    }
  }
  /**
	 * Filter the data table based on user input and draw the table
	 *  @param {object} settings dataTables settings object
	 *  @param {string} input string to filter on
	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	 *  @param {bool} regex treat as a regular expression or not
	 *  @param {bool} smart perform smart filtering or not
	 *  @param {bool} caseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
  function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
    var prevSearch = settings.oPreviousSearch.sSearch;
    var displayMaster = settings.aiDisplayMaster;
    var display, invalidated, i;
    // Need to take account of custom filtering functions - always filter
    if (DataTable.ext.search.length !== 0) {
      force = true;
    }
    // Check if any of the rows were invalidated
    invalidated = _fnFilterData(settings);
    // If the input is blank - we just want the full data set
    if (input.length <= 0) {
      settings.aiDisplay = displayMaster.slice();
    } else {
      // New search - start from the master array
      if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted) {
        settings.aiDisplay = displayMaster.slice();
      }
      // Search the display array
      display = settings.aiDisplay;
      for (i = display.length - 1; i >= 0; i--) {
        if (!rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
          display.splice(i, 1);
        }
      }
    }
  }
  /**
	 * Build a regular expression object suitable for searching a table
	 *  @param {string} sSearch string to search for
	 *  @param {bool} bRegex treat as a regular expression or not
	 *  @param {bool} bSmart perform smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	 *  @returns {RegExp} constructed object
	 *  @memberof DataTable#oApi
	 */
  function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
    search = regex ? search : _fnEscapeRegex(search);
    if (smart) {
      /* For smart filtering we want to allow the search to work regardless of
			 * word order. We also want double quoted text to be preserved, so word
			 * order is important - a la google. So this is what we want to
			 * generate:
			 * 
			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
			 */
      var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
          if (word.charAt(0) === '"') {
            var m = word.match(/^"(.*)"$/);
            word = m ? m[1] : word;
          }
          return word.replace('"', '');
        });
      search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
    }
    return new RegExp(search, caseInsensitive ? 'i' : '');
  }
  /**
	 * Escape a string such that it can be used in a regular expression
	 *  @param {string} sVal string to escape
	 *  @returns {string} escaped string
	 *  @memberof DataTable#oApi
	 */
  var _fnEscapeRegex = DataTable.util.escapeRegex;
  var __filter_div = $('<div>')[0];
  var __filter_div_textContent = __filter_div.textContent !== undefined;
  // Update the filtering data for each row if needed (by invalidation or first run)
  function _fnFilterData(settings) {
    var columns = settings.aoColumns;
    var column;
    var i, j, ien, jen, filterData, cellData, row;
    var fomatters = DataTable.ext.type.search;
    var wasInvalidated = false;
    for (i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];
      if (!row._aFilterData) {
        filterData = [];
        for (j = 0, jen = columns.length; j < jen; j++) {
          column = columns[j];
          if (column.bSearchable) {
            cellData = _fnGetCellData(settings, i, j, 'filter');
            if (fomatters[column.sType]) {
              cellData = fomatters[column.sType](cellData);
            }
            // Search in DataTables 1.10 is string based. In 1.11 this
            // should be altered to also allow strict type checking.
            if (cellData === null) {
              cellData = '';
            }
            if (typeof cellData !== 'string' && cellData.toString) {
              cellData = cellData.toString();
            }
          } else {
            cellData = '';
          }
          // If it looks like there is an HTML entity in the string,
          // attempt to decode it so sorting works as expected. Note that
          // we could use a single line of jQuery to do this, but the DOM
          // method used here is much faster http://jsperf.com/html-decode
          if (cellData.indexOf && cellData.indexOf('&') !== -1) {
            __filter_div.innerHTML = cellData;
            cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
          }
          if (cellData.replace) {
            cellData = cellData.replace(/[\r\n]/g, '');
          }
          filterData.push(cellData);
        }
        row._aFilterData = filterData;
        row._sFilterRow = filterData.join('  ');
        wasInvalidated = true;
      }
    }
    return wasInvalidated;
  }
  /**
	 * Convert from the internal Hungarian notation to camelCase for external
	 * interaction
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
  function _fnSearchToCamel(obj) {
    return {
      search: obj.sSearch,
      smart: obj.bSmart,
      regex: obj.bRegex,
      caseInsensitive: obj.bCaseInsensitive
    };
  }
  /**
	 * Convert from camelCase notation to the internal Hungarian. We could use the
	 * Hungarian convert function here, but this is cleaner
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
  function _fnSearchToHung(obj) {
    return {
      sSearch: obj.search,
      bSmart: obj.smart,
      bRegex: obj.regex,
      bCaseInsensitive: obj.caseInsensitive
    };
  }
  /**
	 * Generate the node required for the info display
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Information element
	 *  @memberof DataTable#oApi
	 */
  function _fnFeatureHtmlInfo(settings) {
    var tid = settings.sTableId, nodes = settings.aanFeatures.i, n = $('<div/>', {
        'class': settings.oClasses.sInfo,
        'id': !nodes ? tid + '_info' : null
      });
    if (!nodes) {
      // Update display on each draw
      settings.aoDrawCallback.push({
        'fn': _fnUpdateInfo,
        'sName': 'information'
      });
      n.attr('role', 'status').attr('aria-live', 'polite');
      // Table is described by our info div
      $(settings.nTable).attr('aria-describedby', tid + '_info');
    }
    return n[0];
  }
  /**
	 * Update the information elements in the display
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnUpdateInfo(settings) {
    /* Show information about the table */
    var nodes = settings.aanFeatures.i;
    if (nodes.length === 0) {
      return;
    }
    var lang = settings.oLanguage, start = settings._iDisplayStart + 1, end = settings.fnDisplayEnd(), max = settings.fnRecordsTotal(), total = settings.fnRecordsDisplay(), out = total ? lang.sInfo : lang.sInfoEmpty;
    if (total !== max) {
      /* Record set after filtering */
      out += ' ' + lang.sInfoFiltered;
    }
    // Convert the macros
    out += lang.sInfoPostFix;
    out = _fnInfoMacros(settings, out);
    var callback = lang.fnInfoCallback;
    if (callback !== null) {
      out = callback.call(settings.oInstance, settings, start, end, max, total, out);
    }
    $(nodes).html(out);
  }
  function _fnInfoMacros(settings, str) {
    // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
    // internally
    var formatter = settings.fnFormatNumber, start = settings._iDisplayStart + 1, len = settings._iDisplayLength, vis = settings.fnRecordsDisplay(), all = len === -1;
    return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
  }
  /**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnInitialise(settings) {
    var i, iLen, iAjaxStart = settings.iInitDisplayStart;
    var columns = settings.aoColumns, column;
    var features = settings.oFeatures;
    var deferLoading = settings.bDeferLoading;
    // value modified by the draw
    /* Ensure that the table data is fully initialised */
    if (!settings.bInitialised) {
      setTimeout(function () {
        _fnInitialise(settings);
      }, 200);
      return;
    }
    /* Show the display HTML options */
    _fnAddOptionsHtml(settings);
    /* Build and draw the header / footer for the table */
    _fnBuildHead(settings);
    _fnDrawHead(settings, settings.aoHeader);
    _fnDrawHead(settings, settings.aoFooter);
    /* Okay to show that something is going on now */
    _fnProcessingDisplay(settings, true);
    /* Calculate sizes for columns */
    if (features.bAutoWidth) {
      _fnCalculateColumnWidths(settings);
    }
    for (i = 0, iLen = columns.length; i < iLen; i++) {
      column = columns[i];
      if (column.sWidth) {
        column.nTh.style.width = _fnStringToCss(column.sWidth);
      }
    }
    _fnCallbackFire(settings, null, 'preInit', [settings]);
    // If there is default sorting required - let's do it. The sort function
    // will do the drawing for us. Otherwise we draw the table regardless of the
    // Ajax source - this allows the table to look initialised for Ajax sourcing
    // data (show 'loading' message possibly)
    _fnReDraw(settings);
    // Server-side processing init complete is done by _fnAjaxUpdateDraw
    var dataSrc = _fnDataSource(settings);
    if (dataSrc != 'ssp' || deferLoading) {
      // if there is an ajax source load the data
      if (dataSrc == 'ajax') {
        _fnBuildAjax(settings, [], function (json) {
          var aData = _fnAjaxDataSrc(settings, json);
          // Got the data - add it to the table
          for (i = 0; i < aData.length; i++) {
            _fnAddData(settings, aData[i]);
          }
          // Reset the init display for cookie saving. We've already done
          // a filter, and therefore cleared it before. So we need to make
          // it appear 'fresh'
          settings.iInitDisplayStart = iAjaxStart;
          _fnReDraw(settings);
          _fnProcessingDisplay(settings, false);
          _fnInitComplete(settings, json);
        }, settings);
      } else {
        _fnProcessingDisplay(settings, false);
        _fnInitComplete(settings);
      }
    }
  }
  /**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	 *    with client-side processing (optional)
	 *  @memberof DataTable#oApi
	 */
  function _fnInitComplete(settings, json) {
    settings._bInitComplete = true;
    // When data was added after the initialisation (data or Ajax) we need to
    // calculate the column sizing
    if (json || settings.oInit.aaData) {
      _fnAdjustColumnSizing(settings);
    }
    _fnCallbackFire(settings, null, 'plugin-init', [
      settings,
      json
    ]);
    _fnCallbackFire(settings, 'aoInitComplete', 'init', [
      settings,
      json
    ]);
  }
  function _fnLengthChange(settings, val) {
    var len = parseInt(val, 10);
    settings._iDisplayLength = len;
    _fnLengthOverflow(settings);
    // Fire length change event
    _fnCallbackFire(settings, null, 'length', [
      settings,
      len
    ]);
  }
  /**
	 * Generate the node required for user display length changing
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Display length feature node
	 *  @memberof DataTable#oApi
	 */
  function _fnFeatureHtmlLength(settings) {
    var classes = settings.oClasses, tableId = settings.sTableId, menu = settings.aLengthMenu, d2 = $.isArray(menu[0]), lengths = d2 ? menu[0] : menu, language = d2 ? menu[1] : menu;
    var select = $('<select/>', {
        'name': tableId + '_length',
        'aria-controls': tableId,
        'class': classes.sLengthSelect
      });
    for (var i = 0, ien = lengths.length; i < ien; i++) {
      select[0][i] = new Option(language[i], lengths[i]);
    }
    var div = $('<div><label/></div>').addClass(classes.sLength);
    if (!settings.aanFeatures.l) {
      div[0].id = tableId + '_length';
    }
    div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML));
    // Can't use `select` variable as user might provide their own and the
    // reference is broken by the use of outerHTML
    $('select', div).val(settings._iDisplayLength).bind('change.DT', function (e) {
      _fnLengthChange(settings, $(this).val());
      _fnDraw(settings);
    });
    // Update node value whenever anything changes the table's length
    $(settings.nTable).bind('length.dt.DT', function (e, s, len) {
      if (settings === s) {
        $('select', div).val(len);
      }
    });
    return div[0];
  }
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Note that most of the paging logic is done in
	 * DataTable.ext.pager
	 */
  /**
	 * Generate the node required for default pagination
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Pagination feature node
	 *  @memberof DataTable#oApi
	 */
  function _fnFeatureHtmlPaginate(settings) {
    var type = settings.sPaginationType, plugin = DataTable.ext.pager[type], modern = typeof plugin === 'function', redraw = function (settings) {
        _fnDraw(settings);
      }, node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0], features = settings.aanFeatures;
    if (!modern) {
      plugin.fnInit(settings, node, redraw);
    }
    /* Add a draw callback for the pagination on first instance, to update the paging display */
    if (!features.p) {
      node.id = settings.sTableId + '_paginate';
      settings.aoDrawCallback.push({
        'fn': function (settings) {
          if (modern) {
            var start = settings._iDisplayStart, len = settings._iDisplayLength, visRecords = settings.fnRecordsDisplay(), all = len === -1, page = all ? 0 : Math.ceil(start / len), pages = all ? 1 : Math.ceil(visRecords / len), buttons = plugin(page, pages), i, ien;
            for (i = 0, ien = features.p.length; i < ien; i++) {
              _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);
            }
          } else {
            plugin.fnUpdate(settings, redraw);
          }
        },
        'sName': 'pagination'
      });
    }
    return node;
  }
  /**
	 * Alter the display settings to change the page
	 *  @param {object} settings DataTables settings object
	 *  @param {string|int} action Paging action to take: "first", "previous",
	 *    "next" or "last" or page number to jump to (integer)
	 *  @param [bool] redraw Automatically draw the update or not
	 *  @returns {bool} true page has changed, false - no change
	 *  @memberof DataTable#oApi
	 */
  function _fnPageChange(settings, action, redraw) {
    var start = settings._iDisplayStart, len = settings._iDisplayLength, records = settings.fnRecordsDisplay();
    if (records === 0 || len === -1) {
      start = 0;
    } else if (typeof action === 'number') {
      start = action * len;
      if (start > records) {
        start = 0;
      }
    } else if (action == 'first') {
      start = 0;
    } else if (action == 'previous') {
      start = len >= 0 ? start - len : 0;
      if (start < 0) {
        start = 0;
      }
    } else if (action == 'next') {
      if (start + len < records) {
        start += len;
      }
    } else if (action == 'last') {
      start = Math.floor((records - 1) / len) * len;
    } else {
      _fnLog(settings, 0, 'Unknown paging action: ' + action, 5);
    }
    var changed = settings._iDisplayStart !== start;
    settings._iDisplayStart = start;
    if (changed) {
      _fnCallbackFire(settings, null, 'page', [settings]);
      if (redraw) {
        _fnDraw(settings);
      }
    }
    return changed;
  }
  /**
	 * Generate the node required for the processing node
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Processing element
	 *  @memberof DataTable#oApi
	 */
  function _fnFeatureHtmlProcessing(settings) {
    return $('<div/>', {
      'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
      'class': settings.oClasses.sProcessing
    }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
  }
  /**
	 * Display or hide the processing indicator
	 *  @param {object} settings dataTables settings object
	 *  @param {bool} show Show the processing indicator (true) or not (false)
	 *  @memberof DataTable#oApi
	 */
  function _fnProcessingDisplay(settings, show) {
    if (settings.oFeatures.bProcessing) {
      $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
    }
    _fnCallbackFire(settings, null, 'processing', [
      settings,
      show
    ]);
  }
  /**
	 * Add any control elements for the table - specifically scrolling
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Node to add to the DOM
	 *  @memberof DataTable#oApi
	 */
  function _fnFeatureHtmlTable(settings) {
    var table = $(settings.nTable);
    // Add the ARIA grid role to the table
    table.attr('role', 'grid');
    // Scrolling from here on in
    var scroll = settings.oScroll;
    if (scroll.sX === '' && scroll.sY === '') {
      return settings.nTable;
    }
    var scrollX = scroll.sX;
    var scrollY = scroll.sY;
    var classes = settings.oClasses;
    var caption = table.children('caption');
    var captionSide = caption.length ? caption[0]._captionSide : null;
    var headerClone = $(table[0].cloneNode(false));
    var footerClone = $(table[0].cloneNode(false));
    var footer = table.children('tfoot');
    var _div = '<div/>';
    var size = function (s) {
      return !s ? null : _fnStringToCss(s);
    };
    if (!footer.length) {
      footer = null;
    }
    /*
		 * The HTML structure that we want to generate in this function is:
		 *  div - scroller
		 *    div - scroll head
		 *      div - scroll head inner
		 *        table - scroll head table
		 *          thead - thead
		 *    div - scroll body
		 *      table - table (master table)
		 *        thead - thead clone for sizing
		 *        tbody - tbody
		 *    div - scroll foot
		 *      div - scroll foot inner
		 *        table - scroll foot table
		 *          tfoot - tfoot
		 */
    var scroller = $(_div, { 'class': classes.sScrollWrapper }).append($(_div, { 'class': classes.sScrollHead }).css({
        overflow: 'hidden',
        position: 'relative',
        border: 0,
        width: scrollX ? size(scrollX) : '100%'
      }).append($(_div, { 'class': classes.sScrollHeadInner }).css({
        'box-sizing': 'content-box',
        width: scroll.sXInner || '100%'
      }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, { 'class': classes.sScrollBody }).css({
        position: 'relative',
        overflow: 'auto',
        width: size(scrollX)
      }).append(table));
    if (footer) {
      scroller.append($(_div, { 'class': classes.sScrollFoot }).css({
        overflow: 'hidden',
        border: 0,
        width: scrollX ? size(scrollX) : '100%'
      }).append($(_div, { 'class': classes.sScrollFootInner }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));
    }
    var children = scroller.children();
    var scrollHead = children[0];
    var scrollBody = children[1];
    var scrollFoot = footer ? children[2] : null;
    // When the body is scrolled, then we also want to scroll the headers
    if (scrollX) {
      $(scrollBody).on('scroll.DT', function (e) {
        var scrollLeft = this.scrollLeft;
        scrollHead.scrollLeft = scrollLeft;
        if (footer) {
          scrollFoot.scrollLeft = scrollLeft;
        }
      });
    }
    $(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);
    settings.nScrollHead = scrollHead;
    settings.nScrollBody = scrollBody;
    settings.nScrollFoot = scrollFoot;
    // On redraw - align columns
    settings.aoDrawCallback.push({
      'fn': _fnScrollDraw,
      'sName': 'scrolling'
    });
    return scroller[0];
  }
  /**
	 * Update the header, footer and body tables for resizing - i.e. column
	 * alignment.
	 *
	 * Welcome to the most horrible function DataTables. The process that this
	 * function follows is basically:
	 *   1. Re-create the table inside the scrolling div
	 *   2. Take live measurements from the DOM
	 *   3. Apply the measurements to align the columns
	 *   4. Clean up
	 *
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnScrollDraw(settings) {
    // Given that this is such a monster function, a lot of variables are use
    // to try and keep the minimised size as small as possible
    var scroll = settings.oScroll, scrollX = scroll.sX, scrollXInner = scroll.sXInner, scrollY = scroll.sY, barWidth = scroll.iBarWidth, divHeader = $(settings.nScrollHead), divHeaderStyle = divHeader[0].style, divHeaderInner = divHeader.children('div'), divHeaderInnerStyle = divHeaderInner[0].style, divHeaderTable = divHeaderInner.children('table'), divBodyEl = settings.nScrollBody, divBody = $(divBodyEl), divBodyStyle = divBodyEl.style, divFooter = $(settings.nScrollFoot), divFooterInner = divFooter.children('div'), divFooterTable = divFooterInner.children('table'), header = $(settings.nTHead), table = $(settings.nTable), tableEl = table[0], tableStyle = tableEl.style, footer = settings.nTFoot ? $(settings.nTFoot) : null, browser = settings.oBrowser, ie67 = browser.bScrollOversize, dtHeaderCells = _pluck(settings.aoColumns, 'nTh'), headerTrgEls, footerTrgEls, headerSrcEls, footerSrcEls, headerCopy, footerCopy, headerWidths = [], footerWidths = [], headerContent = [], footerContent = [], idx, correction, sanityWidth, zeroOut = function (nSizer) {
        var style = nSizer.style;
        style.paddingTop = '0';
        style.paddingBottom = '0';
        style.borderTopWidth = '0';
        style.borderBottomWidth = '0';
        style.height = 0;
      };
    // If the scrollbar visibility has changed from the last draw, we need to
    // adjust the column sizes as the table width will have changed to account
    // for the scrollbar
    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
    if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {
      settings.scrollBarVis = scrollBarVis;
      _fnAdjustColumnSizing(settings);
      return;  // adjust column sizing will call this function again
    } else {
      settings.scrollBarVis = scrollBarVis;
    }
    /*
		 * 1. Re-create the table inside the scrolling div
		 */
    // Remove the old minimised thead and tfoot elements in the inner table
    table.children('thead, tfoot').remove();
    if (footer) {
      footerCopy = footer.clone().prependTo(table);
      footerTrgEls = footer.find('tr');
      // the original tfoot is in its own table and must be sized
      footerSrcEls = footerCopy.find('tr');
    }
    // Clone the current header and footer elements and then place it into the inner table
    headerCopy = header.clone().prependTo(table);
    headerTrgEls = header.find('tr');
    // original header is in its own table
    headerSrcEls = headerCopy.find('tr');
    headerCopy.find('th, td').removeAttr('tabindex');
    /*
		 * 2. Take live measurements from the DOM - do not alter the DOM itself!
		 */
    // Remove old sizing and apply the calculated column widths
    // Get the unique column headers in the newly created (cloned) header. We want to apply the
    // calculated sizes to this header
    if (!scrollX) {
      divBodyStyle.width = '100%';
      divHeader[0].style.width = '100%';
    }
    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
      idx = _fnVisibleToColumnIndex(settings, i);
      el.style.width = settings.aoColumns[idx].sWidth;
    });
    if (footer) {
      _fnApplyToChildren(function (n) {
        n.style.width = '';
      }, footerSrcEls);
    }
    // Size the table as a whole
    sanityWidth = table.outerWidth();
    if (scrollX === '') {
      // No x scrolling
      tableStyle.width = '100%';
      // IE7 will make the width of the table when 100% include the scrollbar
      // - which is shouldn't. When there is a scrollbar we need to take this
      // into account.
      if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == 'scroll')) {
        tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
      }
      // Recalculate the sanity width
      sanityWidth = table.outerWidth();
    } else if (scrollXInner !== '') {
      // legacy x scroll inner has been given - use it
      tableStyle.width = _fnStringToCss(scrollXInner);
      // Recalculate the sanity width
      sanityWidth = table.outerWidth();
    }
    // Hidden header should have zero height, so remove padding and borders. Then
    // set the width based on the real headers
    // Apply all styles in one pass
    _fnApplyToChildren(zeroOut, headerSrcEls);
    // Read all widths in next pass
    _fnApplyToChildren(function (nSizer) {
      headerContent.push(nSizer.innerHTML);
      headerWidths.push(_fnStringToCss($(nSizer).css('width')));
    }, headerSrcEls);
    // Apply all widths in final pass
    _fnApplyToChildren(function (nToSize, i) {
      // Only apply widths to the DataTables detected header cells - this
      // prevents complex headers from having contradictory sizes applied
      if ($.inArray(nToSize, dtHeaderCells) !== -1) {
        nToSize.style.width = headerWidths[i];
      }
    }, headerTrgEls);
    $(headerSrcEls).height(0);
    /* Same again with the footer if we have one */
    if (footer) {
      _fnApplyToChildren(zeroOut, footerSrcEls);
      _fnApplyToChildren(function (nSizer) {
        footerContent.push(nSizer.innerHTML);
        footerWidths.push(_fnStringToCss($(nSizer).css('width')));
      }, footerSrcEls);
      _fnApplyToChildren(function (nToSize, i) {
        nToSize.style.width = footerWidths[i];
      }, footerTrgEls);
      $(footerSrcEls).height(0);
    }
    /*
		 * 3. Apply the measurements
		 */
    // "Hide" the header and footer that we used for the sizing. We need to keep
    // the content of the cell so that the width applied to the header and body
    // both match, but we want to hide it completely. We want to also fix their
    // width to what they currently are
    _fnApplyToChildren(function (nSizer, i) {
      nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
      nSizer.style.width = headerWidths[i];
    }, headerSrcEls);
    if (footer) {
      _fnApplyToChildren(function (nSizer, i) {
        nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + footerContent[i] + '</div>';
        nSizer.style.width = footerWidths[i];
      }, footerSrcEls);
    }
    // Sanity check that the table is of a sensible width. If not then we are going to get
    // misalignment - try to prevent this by not allowing the table to shrink below its min width
    if (table.outerWidth() < sanityWidth) {
      // The min width depends upon if we have a vertical scrollbar visible or not */
      correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == 'scroll' ? sanityWidth + barWidth : sanityWidth;
      // IE6/7 are a law unto themselves...
      if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == 'scroll')) {
        tableStyle.width = _fnStringToCss(correction - barWidth);
      }
      // And give the user a warning that we've stopped the table getting too small
      if (scrollX === '' || scrollXInner !== '') {
        _fnLog(settings, 1, 'Possible column misalignment', 6);
      }
    } else {
      correction = '100%';
    }
    // Apply to the container elements
    divBodyStyle.width = _fnStringToCss(correction);
    divHeaderStyle.width = _fnStringToCss(correction);
    if (footer) {
      settings.nScrollFoot.style.width = _fnStringToCss(correction);
    }
    /*
		 * 4. Clean up
		 */
    if (!scrollY) {
      /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
			 * the scrollbar height from the visible display, rather than adding it on. We need to
			 * set the height in order to sort this. Don't want to do it in any other browsers.
			 */
      if (ie67) {
        divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
      }
    }
    /* Finally set the width's of the header and footer tables */
    var iOuterWidth = table.outerWidth();
    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);
    // Figure out if there are scrollbar present - if so then we need a the header and footer to
    // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
    var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == 'scroll';
    var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
    divHeaderInnerStyle[padding] = bScrolling ? barWidth + 'px' : '0px';
    if (footer) {
      divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style[padding] = bScrolling ? barWidth + 'px' : '0px';
    }
    // Correct DOM ordering for colgroup - comes before the thead
    table.children('colgroup').insertBefore(table.children('thead'));
    /* Adjust the position of the header in case we loose the y-scrollbar */
    divBody.scroll();
    // If sorting or filtering has occurred, jump the scrolling back to the top
    // only if we aren't holding the position
    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
      divBodyEl.scrollTop = 0;
    }
  }
  /**
	 * Apply a given function to the display child nodes of an element array (typically
	 * TD children of TR rows
	 *  @param {function} fn Method to apply to the objects
	 *  @param array {nodes} an1 List of elements to look through for display children
	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	 *  @memberof DataTable#oApi
	 */
  function _fnApplyToChildren(fn, an1, an2) {
    var index = 0, i = 0, iLen = an1.length;
    var nNode1, nNode2;
    while (i < iLen) {
      nNode1 = an1[i].firstChild;
      nNode2 = an2 ? an2[i].firstChild : null;
      while (nNode1) {
        if (nNode1.nodeType === 1) {
          if (an2) {
            fn(nNode1, nNode2, index);
          } else {
            fn(nNode1, index);
          }
          index++;
        }
        nNode1 = nNode1.nextSibling;
        nNode2 = an2 ? nNode2.nextSibling : null;
      }
      i++;
    }
  }
  var __re_html_remove = /<.*?>/g;
  /**
	 * Calculate the width of columns for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnCalculateColumnWidths(oSettings) {
    var table = oSettings.nTable, columns = oSettings.aoColumns, scroll = oSettings.oScroll, scrollY = scroll.sY, scrollX = scroll.sX, scrollXInner = scroll.sXInner, columnCount = columns.length, visibleColumns = _fnGetColumns(oSettings, 'bVisible'), headerCells = $('th', oSettings.nTHead), tableWidthAttr = table.getAttribute('width'),
      // from DOM element
      tableContainer = table.parentNode, userInputs = false, i, column, columnIdx, width, outerWidth, browser = oSettings.oBrowser, ie67 = browser.bScrollOversize;
    var styleWidth = table.style.width;
    if (styleWidth && styleWidth.indexOf('%') !== -1) {
      tableWidthAttr = styleWidth;
    }
    /* Convert any user input sizes into pixel sizes */
    for (i = 0; i < visibleColumns.length; i++) {
      column = columns[visibleColumns[i]];
      if (column.sWidth !== null) {
        column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);
        userInputs = true;
      }
    }
    /* If the number of columns in the DOM equals the number that we have to
		 * process in DataTables, then we can use the offsets that are created by
		 * the web- browser. No custom sizes can be set in order for this to happen,
		 * nor scrolling used
		 */
    if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
      for (i = 0; i < columnCount; i++) {
        var colIdx = _fnVisibleToColumnIndex(oSettings, i);
        if (colIdx !== null) {
          columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
        }
      }
    } else {
      // Otherwise construct a single row, worst case, table with the widest
      // node in the data, assign any user defined widths, then insert it into
      // the DOM and allow the browser to do all the hard work of calculating
      // table widths
      var tmpTable = $(table).clone().css('visibility', 'hidden').removeAttr('id');
      // Clean up the table body
      tmpTable.find('tbody tr').remove();
      var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));
      // Clone the table header and footer - we can't use the header / footer
      // from the cloned table, since if scrolling is active, the table's
      // real header and footer are contained in different table tags
      tmpTable.find('thead, tfoot').remove();
      tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone());
      // Remove any assigned widths from the footer (from scrolling)
      tmpTable.find('tfoot th, tfoot td').css('width', '');
      // Apply custom sizing to the cloned header
      headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);
      for (i = 0; i < visibleColumns.length; i++) {
        column = columns[visibleColumns[i]];
        headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : '';
        // For scrollX we need to force the column width otherwise the
        // browser will collapse it. If this width is smaller than the
        // width the column requires, then it will have no effect
        if (column.sWidthOrig && scrollX) {
          $(headerCells[i]).append($('<div/>').css({
            width: column.sWidthOrig,
            margin: 0,
            padding: 0,
            border: 0,
            height: 1
          }));
        }
      }
      // Find the widest cell for each column and put it into the table
      if (oSettings.aoData.length) {
        for (i = 0; i < visibleColumns.length; i++) {
          columnIdx = visibleColumns[i];
          column = columns[columnIdx];
          $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
        }
      }
      // Tidy the temporary table - remove name attributes so there aren't
      // duplicated in the dom (radio elements for example)
      $('[name]', tmpTable).removeAttr('name');
      // Table has been built, attach to the document so we can work with it.
      // A holding element is used, positioned at the top of the container
      // with minimal height, so it has no effect on if the container scrolls
      // or not. Otherwise it might trigger scrolling when it actually isn't
      // needed
      var holder = $('<div/>').css(scrollX || scrollY ? {
          position: 'absolute',
          top: 0,
          left: 0,
          height: 1,
          right: 0,
          overflow: 'hidden'
        } : {}).append(tmpTable).appendTo(tableContainer);
      // When scrolling (X or Y) we want to set the width of the table as 
      // appropriate. However, when not scrolling leave the table width as it
      // is. This results in slightly different, but I think correct behaviour
      if (scrollX && scrollXInner) {
        tmpTable.width(scrollXInner);
      } else if (scrollX) {
        tmpTable.css('width', 'auto');
        tmpTable.removeAttr('width');
        // If there is no width attribute or style, then allow the table to
        // collapse
        if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
          tmpTable.width(tableContainer.clientWidth);
        }
      } else if (scrollY) {
        tmpTable.width(tableContainer.clientWidth);
      } else if (tableWidthAttr) {
        tmpTable.width(tableWidthAttr);
      }
      // Get the width of each column in the constructed table - we need to
      // know the inner width (so it can be assigned to the other table's
      // cells) and the outer width so we can calculate the full width of the
      // table. This is safe since DataTables requires a unique cell for each
      // column, but if ever a header can span multiple columns, this will
      // need to be modified.
      var total = 0;
      for (i = 0; i < visibleColumns.length; i++) {
        var cell = $(headerCells[i]);
        var border = cell.outerWidth() - cell.width();
        // Use getBounding... where possible (not IE8-) because it can give
        // sub-pixel accuracy, which we then want to round up!
        var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth();
        // Total is tracked to remove any sub-pixel errors as the outerWidth
        // of the table might not equal the total given here (IE!).
        total += bounding;
        // Width for each column to use
        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
      }
      table.style.width = _fnStringToCss(total);
      // Finished with the table - ditch it
      holder.remove();
    }
    // If there is a width attr, we want to attach an event listener which
    // allows the table sizing to automatically adjust when the window is
    // resized. Use the width attr rather than CSS, since we can't know if the
    // CSS is a relative value or absolute - DOM read is always px.
    if (tableWidthAttr) {
      table.style.width = _fnStringToCss(tableWidthAttr);
    }
    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
      var bindResize = function () {
        $(window).bind('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
          _fnAdjustColumnSizing(oSettings);
        }));
      };
      // IE6/7 will crash if we bind a resize event handler on page load.
      // To be removed in 1.11 which drops IE6/7 support
      if (ie67) {
        setTimeout(bindResize, 1000);
      } else {
        bindResize();
      }
      oSettings._reszEvt = true;
    }
  }
  /**
	 * Throttle the calls to a function. Arguments and context are maintained for
	 * the throttled function
	 *  @param {function} fn Function to be called
	 *  @param {int} [freq=200] call frequency in mS
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#oApi
	 */
  var _fnThrottle = DataTable.util.throttle;
  /**
	 * Convert a CSS unit width to pixels (e.g. 2em)
	 *  @param {string} width width to be converted
	 *  @param {node} parent parent to get the with for (required for relative widths) - optional
	 *  @returns {int} width in pixels
	 *  @memberof DataTable#oApi
	 */
  function _fnConvertToWidth(width, parent) {
    if (!width) {
      return 0;
    }
    var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);
    var val = n[0].offsetWidth;
    n.remove();
    return val;
  }
  /**
	 * Get the widest node
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {node} widest table node
	 *  @memberof DataTable#oApi
	 */
  function _fnGetWidestNode(settings, colIdx) {
    var idx = _fnGetMaxLenString(settings, colIdx);
    if (idx < 0) {
      return null;
    }
    var data = settings.aoData[idx];
    return !data.nTr ? $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];
  }
  /**
	 * Get the maximum strlen for each data column
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {string} max string length for each column
	 *  @memberof DataTable#oApi
	 */
  function _fnGetMaxLenString(settings, colIdx) {
    var s, max = -1, maxIdx = -1;
    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      s = _fnGetCellData(settings, i, colIdx, 'display') + '';
      s = s.replace(__re_html_remove, '');
      s = s.replace(/&nbsp;/g, ' ');
      if (s.length > max) {
        max = s.length;
        maxIdx = i;
      }
    }
    return maxIdx;
  }
  /**
	 * Append a CSS unit (only if required) to a string
	 *  @param {string} value to css-ify
	 *  @returns {string} value with css unit
	 *  @memberof DataTable#oApi
	 */
  function _fnStringToCss(s) {
    if (s === null) {
      return '0px';
    }
    if (typeof s == 'number') {
      return s < 0 ? '0px' : s + 'px';
    }
    // Check it has a unit character already
    return s.match(/\d$/) ? s + 'px' : s;
  }
  function _fnSortFlatten(settings) {
    var i, iLen, k, kLen, aSort = [], aiOrig = [], aoColumns = settings.aoColumns, aDataSort, iCol, sType, srcCol, fixed = settings.aaSortingFixed, fixedObj = $.isPlainObject(fixed), nestedSort = [], add = function (a) {
        if (a.length && !$.isArray(a[0])) {
          // 1D array
          nestedSort.push(a);
        } else {
          // 2D array
          $.merge(nestedSort, a);
        }
      };
    // Build the sort array, with pre-fix and post-fix options if they have been
    // specified
    if ($.isArray(fixed)) {
      add(fixed);
    }
    if (fixedObj && fixed.pre) {
      add(fixed.pre);
    }
    add(settings.aaSorting);
    if (fixedObj && fixed.post) {
      add(fixed.post);
    }
    for (i = 0; i < nestedSort.length; i++) {
      srcCol = nestedSort[i][0];
      aDataSort = aoColumns[srcCol].aDataSort;
      for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
        iCol = aDataSort[k];
        sType = aoColumns[iCol].sType || 'string';
        if (nestedSort[i]._idx === undefined) {
          nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
        }
        aSort.push({
          src: srcCol,
          col: iCol,
          dir: nestedSort[i][1],
          index: nestedSort[i]._idx,
          type: sType,
          formatter: DataTable.ext.type.order[sType + '-pre']
        });
      }
    }
    return aSort;
  }
  /**
	 * Change the order of the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 *  @todo This really needs split up!
	 */
  function _fnSort(oSettings) {
    var i, ien, iLen, j, jLen, k, kLen, sDataType, nTh, aiOrig = [], oExtSort = DataTable.ext.type.order, aoData = oSettings.aoData, aoColumns = oSettings.aoColumns, aDataSort, data, iCol, sType, oSort, formatters = 0, sortCol, displayMaster = oSettings.aiDisplayMaster, aSort;
    // Resolve any column types that are unknown due to addition or invalidation
    // @todo Can this be moved into a 'data-ready' handler which is called when
    //   data is going to be used in the table?
    _fnColumnTypes(oSettings);
    aSort = _fnSortFlatten(oSettings);
    for (i = 0, ien = aSort.length; i < ien; i++) {
      sortCol = aSort[i];
      // Track if we can use the fast sort algorithm
      if (sortCol.formatter) {
        formatters++;
      }
      // Load the data needed for the sort, for each cell
      _fnSortData(oSettings, sortCol.col);
    }
    /* No sorting required if server-side or no sorting array */
    if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
      // Create a value - key array of the current row positions such that we can use their
      // current position during the sort, if values match, in order to perform stable sorting
      for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
        aiOrig[displayMaster[i]] = i;
      }
      /* Do the sort - here we want multi-column sorting based on a given data source (column)
			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
			 * follow on it's own, but this is what we want (example two column sorting):
			 *  fnLocalSorting = function(a,b){
			 *    var iTest;
			 *    iTest = oSort['string-asc']('data11', 'data12');
			 *      if (iTest !== 0)
			 *        return iTest;
			 *    iTest = oSort['numeric-desc']('data21', 'data22');
			 *    if (iTest !== 0)
			 *      return iTest;
			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
			 *  }
			 * Basically we have a test for each sorting column, if the data in that column is equal,
			 * test the next column. If all columns match, then we use a numeric sort on the row
			 * positions in the original data array to provide a stable sort.
			 *
			 * Note - I know it seems excessive to have two sorting methods, but the first is around
			 * 15% faster, so the second is only maintained for backwards compatibility with sorting
			 * methods which do not have a pre-sort formatting function.
			 */
      if (formatters === aSort.length) {
        // All sort types have formatting functions
        displayMaster.sort(function (a, b) {
          var x, y, k, test, sort, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
          for (k = 0; k < len; k++) {
            sort = aSort[k];
            x = dataA[sort.col];
            y = dataB[sort.col];
            test = x < y ? -1 : x > y ? 1 : 0;
            if (test !== 0) {
              return sort.dir === 'asc' ? test : -test;
            }
          }
          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      } else {
        // Depreciated - remove in 1.11 (providing a plug-in option)
        // Not all sort types have formatting methods, so we have to call their sorting
        // methods.
        displayMaster.sort(function (a, b) {
          var x, y, k, l, test, sort, fn, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
          for (k = 0; k < len; k++) {
            sort = aSort[k];
            x = dataA[sort.col];
            y = dataB[sort.col];
            fn = oExtSort[sort.type + '-' + sort.dir] || oExtSort['string-' + sort.dir];
            test = fn(x, y);
            if (test !== 0) {
              return test;
            }
          }
          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      }
    }
    /* Tell the draw function that we have sorted the data */
    oSettings.bSorted = true;
  }
  function _fnSortAria(settings) {
    var label;
    var nextSort;
    var columns = settings.aoColumns;
    var aSort = _fnSortFlatten(settings);
    var oAria = settings.oLanguage.oAria;
    // ARIA attributes - need to loop all columns, to update all (removing old
    // attributes as needed)
    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      var col = columns[i];
      var asSorting = col.asSorting;
      var sTitle = col.sTitle.replace(/<.*?>/g, '');
      var th = col.nTh;
      // IE7 is throwing an error when setting these properties with jQuery's
      // attr() and removeAttr() methods...
      th.removeAttribute('aria-sort');
      /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
      if (col.bSortable) {
        if (aSort.length > 0 && aSort[0].col == i) {
          th.setAttribute('aria-sort', aSort[0].dir == 'asc' ? 'ascending' : 'descending');
          nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
        } else {
          nextSort = asSorting[0];
        }
        label = sTitle + (nextSort === 'asc' ? oAria.sSortAscending : oAria.sSortDescending);
      } else {
        label = sTitle;
      }
      th.setAttribute('aria-label', label);
    }
  }
  /**
	 * Function to run on user sort request
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {boolean} [append=false] Append the requested sort to the existing
	 *    sort if true (i.e. multi-column sort)
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
  function _fnSortListener(settings, colIdx, append, callback) {
    var col = settings.aoColumns[colIdx];
    var sorting = settings.aaSorting;
    var asSorting = col.asSorting;
    var nextSortIdx;
    var next = function (a, overflow) {
      var idx = a._idx;
      if (idx === undefined) {
        idx = $.inArray(a[1], asSorting);
      }
      return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
    };
    // Convert to 2D array if needed
    if (typeof sorting[0] === 'number') {
      sorting = settings.aaSorting = [sorting];
    }
    // If appending the sort then we are multi-column sorting
    if (append && settings.oFeatures.bSortMulti) {
      // Are we already doing some kind of sort on this column?
      var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));
      if (sortIdx !== -1) {
        // Yes, modify the sort
        nextSortIdx = next(sorting[sortIdx], true);
        if (nextSortIdx === null && sorting.length === 1) {
          nextSortIdx = 0;  // can't remove sorting completely
        }
        if (nextSortIdx === null) {
          sorting.splice(sortIdx, 1);
        } else {
          sorting[sortIdx][1] = asSorting[nextSortIdx];
          sorting[sortIdx]._idx = nextSortIdx;
        }
      } else {
        // No sort on this column yet
        sorting.push([
          colIdx,
          asSorting[0],
          0
        ]);
        sorting[sorting.length - 1]._idx = 0;
      }
    } else if (sorting.length && sorting[0][0] == colIdx) {
      // Single column - already sorting on this column, modify the sort
      nextSortIdx = next(sorting[0]);
      sorting.length = 1;
      sorting[0][1] = asSorting[nextSortIdx];
      sorting[0]._idx = nextSortIdx;
    } else {
      // Single column - sort only on this column
      sorting.length = 0;
      sorting.push([
        colIdx,
        asSorting[0]
      ]);
      sorting[0]._idx = 0;
    }
    // Run the sort by calling a full redraw
    _fnReDraw(settings);
    // callback used for async user interaction
    if (typeof callback == 'function') {
      callback(settings);
    }
  }
  /**
	 * Attach a sort handler (click) to a node
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
  function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
    var col = settings.aoColumns[colIdx];
    _fnBindAction(attachTo, {}, function (e) {
      /* If the column is not sortable - don't to anything */
      if (col.bSortable === false) {
        return;
      }
      // If processing is enabled use a timeout to allow the processing
      // display to be shown - otherwise to it synchronously
      if (settings.oFeatures.bProcessing) {
        _fnProcessingDisplay(settings, true);
        setTimeout(function () {
          _fnSortListener(settings, colIdx, e.shiftKey, callback);
          // In server-side processing, the draw callback will remove the
          // processing display
          if (_fnDataSource(settings) !== 'ssp') {
            _fnProcessingDisplay(settings, false);
          }
        }, 0);
      } else {
        _fnSortListener(settings, colIdx, e.shiftKey, callback);
      }
    });
  }
  /**
	 * Set the sorting classes on table's body, Note: it is safe to call this function
	 * when bSort and bSortClasses are false
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnSortingClasses(settings) {
    var oldSort = settings.aLastSort;
    var sortClass = settings.oClasses.sSortColumn;
    var sort = _fnSortFlatten(settings);
    var features = settings.oFeatures;
    var i, ien, colIdx;
    if (features.bSort && features.bSortClasses) {
      // Remove old sorting classes
      for (i = 0, ien = oldSort.length; i < ien; i++) {
        colIdx = oldSort[i].src;
        // Remove column sorting
        $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));
      }
      // Add new column sorting
      for (i = 0, ien = sort.length; i < ien; i++) {
        colIdx = sort[i].src;
        $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));
      }
    }
    settings.aLastSort = sort;
  }
  // Get the data to sort a column, be it from cache, fresh (populating the
  // cache), or from a sort formatter
  function _fnSortData(settings, idx) {
    // Custom sorting function - provided by the sort data type
    var column = settings.aoColumns[idx];
    var customSort = DataTable.ext.order[column.sSortDataType];
    var customData;
    if (customSort) {
      customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));
    }
    // Use / populate cache
    var row, cellData;
    var formatter = DataTable.ext.type.order[column.sType + '-pre'];
    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];
      if (!row._aSortData) {
        row._aSortData = [];
      }
      if (!row._aSortData[idx] || customSort) {
        cellData = customSort ? customData[i] : _fnGetCellData(settings, i, idx, 'sort');
        row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
      }
    }
  }
  /**
	 * Save the state of a table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
  function _fnSaveState(settings) {
    if (!settings.oFeatures.bStateSave || settings.bDestroying) {
      return;
    }
    /* Store the interesting variables */
    var state = {
        time: +new Date(),
        start: settings._iDisplayStart,
        length: settings._iDisplayLength,
        order: $.extend(true, [], settings.aaSorting),
        search: _fnSearchToCamel(settings.oPreviousSearch),
        columns: $.map(settings.aoColumns, function (col, i) {
          return {
            visible: col.bVisible,
            search: _fnSearchToCamel(settings.aoPreSearchCols[i])
          };
        })
      };
    _fnCallbackFire(settings, 'aoStateSaveParams', 'stateSaveParams', [
      settings,
      state
    ]);
    settings.oSavedState = state;
    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
  }
  /**
	 * Attempt to load a saved table state
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oInit DataTables init object so we can override settings
	 *  @memberof DataTable#oApi
	 */
  function _fnLoadState(settings, oInit) {
    var i, ien;
    var columns = settings.aoColumns;
    if (!settings.oFeatures.bStateSave) {
      return;
    }
    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings);
    if (!state || !state.time) {
      return;
    }
    /* Allow custom and plug-in manipulation functions to alter the saved data set and
		 * cancelling of loading by returning false
		 */
    var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [
        settings,
        state
      ]);
    if ($.inArray(false, abStateLoad) !== -1) {
      return;
    }
    /* Reject old data */
    var duration = settings.iStateDuration;
    if (duration > 0 && state.time < +new Date() - duration * 1000) {
      return;
    }
    // Number of columns have changed - all bets are off, no restore of settings
    if (columns.length !== state.columns.length) {
      return;
    }
    // Store the saved state so it might be accessed at any time
    settings.oLoadedState = $.extend(true, {}, state);
    // Restore key features - todo - for 1.11 this needs to be done by
    // subscribed events
    if (state.start !== undefined) {
      settings._iDisplayStart = state.start;
      settings.iInitDisplayStart = state.start;
    }
    if (state.length !== undefined) {
      settings._iDisplayLength = state.length;
    }
    // Order
    if (state.order !== undefined) {
      settings.aaSorting = [];
      $.each(state.order, function (i, col) {
        settings.aaSorting.push(col[0] >= columns.length ? [
          0,
          col[1]
        ] : col);
      });
    }
    // Search
    if (state.search !== undefined) {
      $.extend(settings.oPreviousSearch, _fnSearchToHung(state.search));
    }
    // Columns
    for (i = 0, ien = state.columns.length; i < ien; i++) {
      var col = state.columns[i];
      // Visibility
      if (col.visible !== undefined) {
        columns[i].bVisible = col.visible;
      }
      // Search
      if (col.search !== undefined) {
        $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
      }
    }
    _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [
      settings,
      state
    ]);
  }
  /**
	 * Return the settings object for a particular table
	 *  @param {node} table table we are using as a dataTable
	 *  @returns {object} Settings object - or null if not found
	 *  @memberof DataTable#oApi
	 */
  function _fnSettingsFromNode(table) {
    var settings = DataTable.settings;
    var idx = $.inArray(table, _pluck(settings, 'nTable'));
    return idx !== -1 ? settings[idx] : null;
  }
  /**
	 * Log an error message
	 *  @param {object} settings dataTables settings object
	 *  @param {int} level log error messages, or display them to the user
	 *  @param {string} msg error message
	 *  @param {int} tn Technical note id to get more information about the error.
	 *  @memberof DataTable#oApi
	 */
  function _fnLog(settings, level, msg, tn) {
    msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;
    if (tn) {
      msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;
    }
    if (!level) {
      // Backwards compatibility pre 1.10
      var ext = DataTable.ext;
      var type = ext.sErrMode || ext.errMode;
      if (settings) {
        _fnCallbackFire(settings, null, 'error', [
          settings,
          tn,
          msg
        ]);
      }
      if (type == 'alert') {
        alert(msg);
      } else if (type == 'throw') {
        throw new Error(msg);
      } else if (typeof type == 'function') {
        type(settings, tn, msg);
      }
    } else if (window.console && console.log) {
      console.log(msg);
    }
  }
  /**
	 * See if a property is defined on one object, if so assign it to the other object
	 *  @param {object} ret target object
	 *  @param {object} src source object
	 *  @param {string} name property
	 *  @param {string} [mappedName] name to map too - optional, name used if not given
	 *  @memberof DataTable#oApi
	 */
  function _fnMap(ret, src, name, mappedName) {
    if ($.isArray(name)) {
      $.each(name, function (i, val) {
        if ($.isArray(val)) {
          _fnMap(ret, src, val[0], val[1]);
        } else {
          _fnMap(ret, src, val);
        }
      });
      return;
    }
    if (mappedName === undefined) {
      mappedName = name;
    }
    if (src[name] !== undefined) {
      ret[mappedName] = src[name];
    }
  }
  /**
	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	 * shallow copy arrays. The reason we need to do this, is that we don't want to
	 * deep copy array init values (such as aaSorting) since the dev wouldn't be
	 * able to override them, but we do want to deep copy arrays.
	 *  @param {object} out Object to extend
	 *  @param {object} extender Object from which the properties will be applied to
	 *      out
	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	 *      independent copy with the exception of the `data` or `aaData` parameters
	 *      if they are present. This is so you can pass in a collection to
	 *      DataTables and have that used as your data source without breaking the
	 *      references
	 *  @returns {object} out Reference, just for convenience - out === the return.
	 *  @memberof DataTable#oApi
	 *  @todo This doesn't take account of arrays inside the deep copied objects.
	 */
  function _fnExtend(out, extender, breakRefs) {
    var val;
    for (var prop in extender) {
      if (extender.hasOwnProperty(prop)) {
        val = extender[prop];
        if ($.isPlainObject(val)) {
          if (!$.isPlainObject(out[prop])) {
            out[prop] = {};
          }
          $.extend(true, out[prop], val);
        } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
          out[prop] = val.slice();
        } else {
          out[prop] = val;
        }
      }
    }
    return out;
  }
  /**
	 * Bind an event handers to allow a click or return key to activate the callback.
	 * This is good for accessibility since a return on the keyboard will have the
	 * same effect as a click, if the element has focus.
	 *  @param {element} n Element to bind the action to
	 *  @param {object} oData Data object to pass to the triggered function
	 *  @param {function} fn Callback function for when the event is triggered
	 *  @memberof DataTable#oApi
	 */
  function _fnBindAction(n, oData, fn) {
    $(n).bind('click.DT', oData, function (e) {
      n.blur();
      // Remove focus outline for mouse users
      fn(e);
    }).bind('keypress.DT', oData, function (e) {
      if (e.which === 13) {
        e.preventDefault();
        fn(e);
      }
    }).bind('selectstart.DT', function () {
      /* Take the brutal approach to cancelling text selection */
      return false;
    });
  }
  /**
	 * Register a callback function. Easily allows a callback function to be added to
	 * an array store of callback functions that can then all be called together.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	 *  @param {function} fn Function to be called back
	 *  @param {string} sName Identifying name for the callback (i.e. a label)
	 *  @memberof DataTable#oApi
	 */
  function _fnCallbackReg(oSettings, sStore, fn, sName) {
    if (fn) {
      oSettings[sStore].push({
        'fn': fn,
        'sName': sName
      });
    }
  }
  /**
	 * Fire callback functions and trigger events. Note that the loop over the
	 * callback array store is done backwards! Further note that you do not want to
	 * fire off triggers in time sensitive applications (for example cell creation)
	 * as its slow.
	 *  @param {object} settings dataTables settings object
	 *  @param {string} callbackArr Name of the array storage for the callbacks in
	 *      oSettings
	 *  @param {string} eventName Name of the jQuery custom event to trigger. If
	 *      null no trigger is fired
	 *  @param {array} args Array of arguments to pass to the callback function /
	 *      trigger
	 *  @memberof DataTable#oApi
	 */
  function _fnCallbackFire(settings, callbackArr, eventName, args) {
    var ret = [];
    if (callbackArr) {
      ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
        return val.fn.apply(settings.oInstance, args);
      });
    }
    if (eventName !== null) {
      var e = $.Event(eventName + '.dt');
      $(settings.nTable).trigger(e, args);
      ret.push(e.result);
    }
    return ret;
  }
  function _fnLengthOverflow(settings) {
    var start = settings._iDisplayStart, end = settings.fnDisplayEnd(), len = settings._iDisplayLength;
    /* If we have space to show extra rows (backing up from the end point - then do so */
    if (start >= end) {
      start = end - len;
    }
    // Keep the start record on the current page
    start -= start % len;
    if (len === -1 || start < 0) {
      start = 0;
    }
    settings._iDisplayStart = start;
  }
  function _fnRenderer(settings, type) {
    var renderer = settings.renderer;
    var host = DataTable.ext.renderer[type];
    if ($.isPlainObject(renderer) && renderer[type]) {
      // Specific renderer for this type. If available use it, otherwise use
      // the default.
      return host[renderer[type]] || host._;
    } else if (typeof renderer === 'string') {
      // Common renderer - if there is one available for this type use it,
      // otherwise use the default
      return host[renderer] || host._;
    }
    // Use the default
    return host._;
  }
  /**
	 * Detect the data source being used for the table. Used to simplify the code
	 * a little (ajax) and to make it compress a little smaller.
	 *
	 *  @param {object} settings dataTables settings object
	 *  @returns {string} Data source
	 *  @memberof DataTable#oApi
	 */
  function _fnDataSource(settings) {
    if (settings.oFeatures.bServerSide) {
      return 'ssp';
    } else if (settings.ajax || settings.sAjaxSource) {
      return 'ajax';
    }
    return 'dom';
  }
  /**
	 * Computed structure of the DataTables API, defined by the options passed to
	 * `DataTable.Api.register()` when building the API.
	 *
	 * The structure is built in order to speed creation and extension of the Api
	 * objects since the extensions are effectively pre-parsed.
	 *
	 * The array is an array of objects with the following structure, where this
	 * base array represents the Api prototype base:
	 *
	 *     [
	 *       {
	 *         name:      'data'                -- string   - Property name
	 *         val:       function () {},       -- function - Api method (or undefined if just an object
	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	 *       },
	 *       {
	 *         name:     'row'
	 *         val:       {},
	 *         methodExt: [ ... ],
	 *         propExt:   [
	 *           {
	 *             name:      'data'
	 *             val:       function () {},
	 *             methodExt: [ ... ],
	 *             propExt:   [ ... ]
	 *           },
	 *           ...
	 *         ]
	 *       }
	 *     ]
	 *
	 * @type {Array}
	 * @ignore
	 */
  var __apiStruct = [];
  /**
	 * `Array.prototype` reference.
	 *
	 * @type object
	 * @ignore
	 */
  var __arrayProto = Array.prototype;
  /**
	 * Abstraction for `context` parameter of the `Api` constructor to allow it to
	 * take several different forms for ease of use.
	 *
	 * Each of the input parameter types will be converted to a DataTables settings
	 * object where possible.
	 *
	 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	 *   of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 *   * `DataTables.Api` - API instance
	 * @return {array|null} Matching DataTables settings objects. `null` or
	 *   `undefined` is returned if no matching DataTable is found.
	 * @ignore
	 */
  var _toSettings = function (mixed) {
    var idx, jq;
    var settings = DataTable.settings;
    var tables = $.map(settings, function (el, i) {
        return el.nTable;
      });
    if (!mixed) {
      return [];
    } else if (mixed.nTable && mixed.oApi) {
      // DataTables settings object
      return [mixed];
    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
      // Table node
      idx = $.inArray(mixed, tables);
      return idx !== -1 ? [settings[idx]] : null;
    } else if (mixed && typeof mixed.settings === 'function') {
      return mixed.settings().toArray();
    } else if (typeof mixed === 'string') {
      // jQuery selector
      jq = $(mixed);
    } else if (mixed instanceof $) {
      // jQuery object (also DataTables instance)
      jq = mixed;
    }
    if (jq) {
      return jq.map(function (i) {
        idx = $.inArray(this, tables);
        return idx !== -1 ? settings[idx] : null;
      }).toArray();
    }
  };
  /**
	 * DataTables API class - used to control and interface with  one or more
	 * DataTables enhanced tables.
	 *
	 * The API class is heavily based on jQuery, presenting a chainable interface
	 * that you can use to interact with tables. Each instance of the API class has
	 * a "context" - i.e. the tables that it will operate on. This could be a single
	 * table, all tables on a page or a sub-set thereof.
	 *
	 * Additionally the API is designed to allow you to easily work with the data in
	 * the tables, retrieving and manipulating it as required. This is done by
	 * presenting the API class as an array like interface. The contents of the
	 * array depend upon the actions requested by each method (for example
	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	 * return an array of objects or arrays depending upon your table's
	 * configuration). The API object has a number of array like methods (`push`,
	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	 * `unique` etc) to assist your working with the data held in a table.
	 *
	 * Most methods (those which return an Api instance) are chainable, which means
	 * the return from a method call also has all of the methods available that the
	 * top level object had. For example, these two calls are equivalent:
	 *
	 *     // Not chained
	 *     api.row.add( {...} );
	 *     api.draw();
	 *
	 *     // Chained
	 *     api.row.add( {...} ).draw();
	 *
	 * @class DataTable.Api
	 * @param {array|object|string|jQuery} context DataTable identifier. This is
	 *   used to define which DataTables enhanced tables this API will operate on.
	 *   Can be one of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 * @param {array} [data] Data to initialise the Api instance with.
	 *
	 * @example
	 *   // Direct initialisation during DataTables construction
	 *   var api = $('#example').DataTable();
	 *
	 * @example
	 *   // Initialisation using a DataTables jQuery object
	 *   var api = $('#example').dataTable().api();
	 *
	 * @example
	 *   // Initialisation as a constructor
	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	 */
  _Api = function (context, data) {
    if (!(this instanceof _Api)) {
      return new _Api(context, data);
    }
    var settings = [];
    var ctxSettings = function (o) {
      var a = _toSettings(o);
      if (a) {
        settings = settings.concat(a);
      }
    };
    if ($.isArray(context)) {
      for (var i = 0, ien = context.length; i < ien; i++) {
        ctxSettings(context[i]);
      }
    } else {
      ctxSettings(context);
    }
    // Remove duplicates
    this.context = _unique(settings);
    // Initial data
    if (data) {
      $.merge(this, data);
    }
    // selector
    this.selector = {
      rows: null,
      cols: null,
      opts: null
    };
    _Api.extend(this, this, __apiStruct);
  };
  DataTable.Api = _Api;
  // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
  // isPlainObject.
  $.extend(_Api.prototype, {
    any: function () {
      return this.count() !== 0;
    },
    concat: __arrayProto.concat,
    context: [],
    count: function () {
      return this.flatten().length;
    },
    each: function (fn) {
      for (var i = 0, ien = this.length; i < ien; i++) {
        fn.call(this, this[i], i, this);
      }
      return this;
    },
    eq: function (idx) {
      var ctx = this.context;
      return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;
    },
    filter: function (fn) {
      var a = [];
      if (__arrayProto.filter) {
        a = __arrayProto.filter.call(this, fn, this);
      } else {
        // Compatibility for browsers without EMCA-252-5 (JS 1.6)
        for (var i = 0, ien = this.length; i < ien; i++) {
          if (fn.call(this, this[i], i, this)) {
            a.push(this[i]);
          }
        }
      }
      return new _Api(this.context, a);
    },
    flatten: function () {
      var a = [];
      return new _Api(this.context, a.concat.apply(a, this.toArray()));
    },
    join: __arrayProto.join,
    indexOf: __arrayProto.indexOf || function (obj, start) {
      for (var i = start || 0, ien = this.length; i < ien; i++) {
        if (this[i] === obj) {
          return i;
        }
      }
      return -1;
    },
    iterator: function (flatten, type, fn, alwaysNew) {
      var a = [], ret, i, ien, j, jen, context = this.context, rows, items, item, selector = this.selector;
      // Argument shifting
      if (typeof flatten === 'string') {
        alwaysNew = fn;
        fn = type;
        type = flatten;
        flatten = false;
      }
      for (i = 0, ien = context.length; i < ien; i++) {
        var apiInst = new _Api(context[i]);
        if (type === 'table') {
          ret = fn.call(apiInst, context[i], i);
          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (type === 'columns' || type === 'rows') {
          // this has same length as context - one entry for each table
          ret = fn.call(apiInst, context[i], this[i], i);
          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
          // columns and rows share the same structure.
          // 'this' is an array of column indexes for each context
          items = this[i];
          if (type === 'column-rows') {
            rows = _selector_row_indexes(context[i], selector.opts);
          }
          for (j = 0, jen = items.length; j < jen; j++) {
            item = items[j];
            if (type === 'cell') {
              ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
            } else {
              ret = fn.call(apiInst, context[i], item, i, j, rows);
            }
            if (ret !== undefined) {
              a.push(ret);
            }
          }
        }
      }
      if (a.length || alwaysNew) {
        var api = new _Api(context, flatten ? a.concat.apply([], a) : a);
        var apiSelector = api.selector;
        apiSelector.rows = selector.rows;
        apiSelector.cols = selector.cols;
        apiSelector.opts = selector.opts;
        return api;
      }
      return this;
    },
    lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
      // Bit cheeky...
      return this.indexOf.apply(this.toArray.reverse(), arguments);
    },
    length: 0,
    map: function (fn) {
      var a = [];
      if (__arrayProto.map) {
        a = __arrayProto.map.call(this, fn, this);
      } else {
        // Compatibility for browsers without EMCA-252-5 (JS 1.6)
        for (var i = 0, ien = this.length; i < ien; i++) {
          a.push(fn.call(this, this[i], i));
        }
      }
      return new _Api(this.context, a);
    },
    pluck: function (prop) {
      return this.map(function (el) {
        return el[prop];
      });
    },
    pop: __arrayProto.pop,
    push: __arrayProto.push,
    reduce: __arrayProto.reduce || function (fn, init) {
      return _fnReduce(this, fn, init, 0, this.length, 1);
    },
    reduceRight: __arrayProto.reduceRight || function (fn, init) {
      return _fnReduce(this, fn, init, this.length - 1, -1, -1);
    },
    reverse: __arrayProto.reverse,
    selector: null,
    shift: __arrayProto.shift,
    sort: __arrayProto.sort,
    splice: __arrayProto.splice,
    toArray: function () {
      return __arrayProto.slice.call(this);
    },
    to$: function () {
      return $(this);
    },
    toJQuery: function () {
      return $(this);
    },
    unique: function () {
      return new _Api(this.context, _unique(this));
    },
    unshift: __arrayProto.unshift
  });
  _Api.extend = function (scope, obj, ext) {
    // Only extend API instances and static properties of the API
    if (!ext.length || !obj || !(obj instanceof _Api) && !obj.__dt_wrapper) {
      return;
    }
    var i, ien, j, jen, struct, inner, methodScoping = function (scope, fn, struc) {
        return function () {
          var ret = fn.apply(scope, arguments);
          // Method extension
          _Api.extend(ret, ret, struc.methodExt);
          return ret;
        };
      };
    for (i = 0, ien = ext.length; i < ien; i++) {
      struct = ext[i];
      // Value
      obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;
      obj[struct.name].__dt_wrapper = true;
      // Property extension
      _Api.extend(scope, obj[struct.name], struct.propExt);
    }
  };
  // @todo - Is there need for an augment function?
  // _Api.augment = function ( inst, name )
  // {
  // 	// Find src object in the structure from the name
  // 	var parts = name.split('.');
  // 	_Api.extend( inst, obj );
  // };
  //     [
  //       {
  //         name:      'data'                -- string   - Property name
  //         val:       function () {},       -- function - Api method (or undefined if just an object
  //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
  //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
  //       },
  //       {
  //         name:     'row'
  //         val:       {},
  //         methodExt: [ ... ],
  //         propExt:   [
  //           {
  //             name:      'data'
  //             val:       function () {},
  //             methodExt: [ ... ],
  //             propExt:   [ ... ]
  //           },
  //           ...
  //         ]
  //       }
  //     ]
  _Api.register = _api_register = function (name, val) {
    if ($.isArray(name)) {
      for (var j = 0, jen = name.length; j < jen; j++) {
        _Api.register(name[j], val);
      }
      return;
    }
    var i, ien, heir = name.split('.'), struct = __apiStruct, key, method;
    var find = function (src, name) {
      for (var i = 0, ien = src.length; i < ien; i++) {
        if (src[i].name === name) {
          return src[i];
        }
      }
      return null;
    };
    for (i = 0, ien = heir.length; i < ien; i++) {
      method = heir[i].indexOf('()') !== -1;
      key = method ? heir[i].replace('()', '') : heir[i];
      var src = find(struct, key);
      if (!src) {
        src = {
          name: key,
          val: {},
          methodExt: [],
          propExt: []
        };
        struct.push(src);
      }
      if (i === ien - 1) {
        src.val = val;
      } else {
        struct = method ? src.methodExt : src.propExt;
      }
    }
  };
  _Api.registerPlural = _api_registerPlural = function (pluralName, singularName, val) {
    _Api.register(pluralName, val);
    _Api.register(singularName, function () {
      var ret = val.apply(this, arguments);
      if (ret === this) {
        // Returned item is the API instance that was passed in, return it
        return this;
      } else if (ret instanceof _Api) {
        // New API instance returned, want the value from the first item
        // in the returned array for the singular result.
        return ret.length ? $.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : ret[0] : undefined;
      }
      // Non-API return - just fire it back
      return ret;
    });
  };
  /**
	 * Selector for HTML tables. Apply the given selector to the give array of
	 * DataTables settings objects.
	 *
	 * @param {string|integer} [selector] jQuery selector string or integer
	 * @param  {array} Array of DataTables settings objects to be filtered
	 * @return {array}
	 * @ignore
	 */
  var __table_selector = function (selector, a) {
    // Integer is used to pick out a table by index
    if (typeof selector === 'number') {
      return [a[selector]];
    }
    // Perform a jQuery selector on the table nodes
    var nodes = $.map(a, function (el, i) {
        return el.nTable;
      });
    return $(nodes).filter(selector).map(function (i) {
      // Need to translate back from the table node to the settings
      var idx = $.inArray(this, nodes);
      return a[idx];
    }).toArray();
  };
  /**
	 * Context selector for the API's context (i.e. the tables the API instance
	 * refers to.
	 *
	 * @name    DataTable.Api#tables
	 * @param {string|integer} [selector] Selector to pick which tables the iterator
	 *   should operate on. If not given, all tables in the current context are
	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	 *   select multiple tables or as an integer to select a single table.
	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	 */
  _api_register('tables()', function (selector) {
    // A new instance is created if there was a selector specified
    return selector ? new _Api(__table_selector(selector, this.context)) : this;
  });
  _api_register('table()', function (selector) {
    var tables = this.tables(selector);
    var ctx = tables.context;
    // Truncate to the first matched table
    return ctx.length ? new _Api(ctx[0]) : tables;
  });
  _api_registerPlural('tables().nodes()', 'table().node()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTable;
    }, 1);
  });
  _api_registerPlural('tables().body()', 'table().body()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTBody;
    }, 1);
  });
  _api_registerPlural('tables().header()', 'table().header()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTHead;
    }, 1);
  });
  _api_registerPlural('tables().footer()', 'table().footer()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTFoot;
    }, 1);
  });
  _api_registerPlural('tables().containers()', 'table().container()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTableWrapper;
    }, 1);
  });
  /**
	 * Redraw the tables in the current context.
	 */
  _api_register('draw()', function (paging) {
    return this.iterator('table', function (settings) {
      if (paging === 'page') {
        _fnDraw(settings);
      } else {
        if (typeof paging === 'string') {
          paging = paging === 'full-hold' ? false : true;
        }
        _fnReDraw(settings, paging === false);
      }
    });
  });
  /**
	 * Get the current page index.
	 *
	 * @return {integer} Current page index (zero based)
	 */
  /**
	 * Set the current page.
	 *
	 * Note that if you attempt to show a page which does not exist, DataTables will
	 * not throw an error, but rather reset the paging.
	 *
	 * @param {integer|string} action The paging action to take. This can be one of:
	 *  * `integer` - The page index to jump to
	 *  * `string` - An action to take:
	 *    * `first` - Jump to first page.
	 *    * `next` - Jump to the next page
	 *    * `previous` - Jump to previous page
	 *    * `last` - Jump to the last page.
	 * @returns {DataTables.Api} this
	 */
  _api_register('page()', function (action) {
    if (action === undefined) {
      return this.page.info().page;  // not an expensive call
    }
    // else, have an action to take on all tables
    return this.iterator('table', function (settings) {
      _fnPageChange(settings, action);
    });
  });
  /**
	 * Paging information for the first table in the current context.
	 *
	 * If you require paging information for another table, use the `table()` method
	 * with a suitable selector.
	 *
	 * @return {object} Object with the following properties set:
	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	 *  * `pages` - Total number of pages
	 *  * `start` - Display index for the first record shown on the current page
	 *  * `end` - Display index for the last record shown on the current page
	 *  * `length` - Display length (number of records). Note that generally `start
	 *    + length = end`, but this is not always true, for example if there are
	 *    only 2 records to show on the final page, with a length of 10.
	 *  * `recordsTotal` - Full data set length
	 *  * `recordsDisplay` - Data set length once the current filtering criterion
	 *    are applied.
	 */
  _api_register('page.info()', function (action) {
    if (this.context.length === 0) {
      return undefined;
    }
    var settings = this.context[0], start = settings._iDisplayStart, len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1, visRecords = settings.fnRecordsDisplay(), all = len === -1;
    return {
      'page': all ? 0 : Math.floor(start / len),
      'pages': all ? 1 : Math.ceil(visRecords / len),
      'start': start,
      'end': settings.fnDisplayEnd(),
      'length': len,
      'recordsTotal': settings.fnRecordsTotal(),
      'recordsDisplay': visRecords,
      'serverSide': _fnDataSource(settings) === 'ssp'
    };
  });
  /**
	 * Get the current page length.
	 *
	 * @return {integer} Current page length. Note `-1` indicates that all records
	 *   are to be shown.
	 */
  /**
	 * Set the current page length.
	 *
	 * @param {integer} Page length to set. Use `-1` to show all records.
	 * @returns {DataTables.Api} this
	 */
  _api_register('page.len()', function (len) {
    // Note that we can't call this function 'length()' because `length`
    // is a Javascript property of functions which defines how many arguments
    // the function expects.
    if (len === undefined) {
      return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;
    }
    // else, set the page length
    return this.iterator('table', function (settings) {
      _fnLengthChange(settings, len);
    });
  });
  var __reload = function (settings, holdPosition, callback) {
    // Use the draw event to trigger a callback
    if (callback) {
      var api = new _Api(settings);
      api.one('draw', function () {
        callback(api.ajax.json());
      });
    }
    if (_fnDataSource(settings) == 'ssp') {
      _fnReDraw(settings, holdPosition);
    } else {
      _fnProcessingDisplay(settings, true);
      // Cancel an existing request
      var xhr = settings.jqXHR;
      if (xhr && xhr.readyState !== 4) {
        xhr.abort();
      }
      // Trigger xhr
      _fnBuildAjax(settings, [], function (json) {
        _fnClearTable(settings);
        var data = _fnAjaxDataSrc(settings, json);
        for (var i = 0, ien = data.length; i < ien; i++) {
          _fnAddData(settings, data[i]);
        }
        _fnReDraw(settings, holdPosition);
        _fnProcessingDisplay(settings, false);
      });
    }
  };
  /**
	 * Get the JSON response from the last Ajax request that DataTables made to the
	 * server. Note that this returns the JSON from the first table in the current
	 * context.
	 *
	 * @return {object} JSON received from the server.
	 */
  _api_register('ajax.json()', function () {
    var ctx = this.context;
    if (ctx.length > 0) {
      return ctx[0].json;
    }  // else return undefined;
  });
  /**
	 * Get the data submitted in the last Ajax request
	 */
  _api_register('ajax.params()', function () {
    var ctx = this.context;
    if (ctx.length > 0) {
      return ctx[0].oAjaxData;
    }  // else return undefined;
  });
  /**
	 * Reload tables from the Ajax data source. Note that this function will
	 * automatically re-draw the table when the remote data has been loaded.
	 *
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	 *   position. A full re-sort and re-filter is performed when this method is
	 *   called, which is why the pagination reset is the default action.
	 * @returns {DataTables.Api} this
	 */
  _api_register('ajax.reload()', function (callback, resetPaging) {
    return this.iterator('table', function (settings) {
      __reload(settings, resetPaging === false, callback);
    });
  });
  /**
	 * Get the current Ajax URL. Note that this returns the URL from the first
	 * table in the current context.
	 *
	 * @return {string} Current Ajax source URL
	 */
  /**
	 * Set the Ajax URL. Note that this will set the URL for all tables in the
	 * current context.
	 *
	 * @param {string} url URL to set.
	 * @returns {DataTables.Api} this
	 */
  _api_register('ajax.url()', function (url) {
    var ctx = this.context;
    if (url === undefined) {
      // get
      if (ctx.length === 0) {
        return undefined;
      }
      ctx = ctx[0];
      return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
    }
    // set
    return this.iterator('table', function (settings) {
      if ($.isPlainObject(settings.ajax)) {
        settings.ajax.url = url;
      } else {
        settings.ajax = url;
      }  // No need to consider sAjaxSource here since DataTables gives priority
         // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
         // value of `sAjaxSource` redundant.
    });
  });
  /**
	 * Load data from the newly set Ajax URL. Note that this method is only
	 * available when `ajax.url()` is used to set a URL. Additionally, this method
	 * has the same effect as calling `ajax.reload()` but is provided for
	 * convenience when setting a new URL. Like `ajax.reload()` it will
	 * automatically redraw the table once the remote data has been loaded.
	 *
	 * @returns {DataTables.Api} this
	 */
  _api_register('ajax.url().load()', function (callback, resetPaging) {
    // Same as a reload, but makes sense to present it for easy access after a
    // url change
    return this.iterator('table', function (ctx) {
      __reload(ctx, resetPaging === false, callback);
    });
  });
  var _selector_run = function (type, selector, selectFn, settings, opts) {
    var out = [], res, a, i, ien, j, jen, selectorType = typeof selector;
    // Can't just check for isArray here, as an API or jQuery instance might be
    // given with their array like look
    if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
      selector = [selector];
    }
    for (i = 0, ien = selector.length; i < ien; i++) {
      a = selector[i] && selector[i].split ? selector[i].split(',') : [selector[i]];
      for (j = 0, jen = a.length; j < jen; j++) {
        res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);
        if (res && res.length) {
          out = out.concat(res);
        }
      }
    }
    // selector extensions
    var ext = _ext.selector[type];
    if (ext.length) {
      for (i = 0, ien = ext.length; i < ien; i++) {
        out = ext[i](settings, opts, out);
      }
    }
    return _unique(out);
  };
  var _selector_opts = function (opts) {
    if (!opts) {
      opts = {};
    }
    // Backwards compatibility for 1.9- which used the terminology filter rather
    // than search
    if (opts.filter && opts.search === undefined) {
      opts.search = opts.filter;
    }
    return $.extend({
      search: 'none',
      order: 'current',
      page: 'all'
    }, opts);
  };
  var _selector_first = function (inst) {
    // Reduce the API instance to the first item found
    for (var i = 0, ien = inst.length; i < ien; i++) {
      if (inst[i].length > 0) {
        // Assign the first element to the first item in the instance
        // and truncate the instance and context
        inst[0] = inst[i];
        inst[0].length = 1;
        inst.length = 1;
        inst.context = [inst.context[i]];
        return inst;
      }
    }
    // Not found - return an empty instance
    inst.length = 0;
    return inst;
  };
  var _selector_row_indexes = function (settings, opts) {
    var i, ien, tmp, a = [], displayFiltered = settings.aiDisplay, displayMaster = settings.aiDisplayMaster;
    var search = opts.search,
      // none, applied, removed
      order = opts.order,
      // applied, current, index (original - compatibility with 1.9)
      page = opts.page;
    // all, current
    if (_fnDataSource(settings) == 'ssp') {
      // In server-side processing mode, most options are irrelevant since
      // rows not shown don't exist and the index order is the applied order
      // Removed is a special case - for consistency just return an empty
      // array
      return search === 'removed' ? [] : _range(0, displayMaster.length);
    } else if (page == 'current') {
      // Current page implies that order=current and fitler=applied, since it is
      // fairly senseless otherwise, regardless of what order and search actually
      // are
      for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
        a.push(displayFiltered[i]);
      }
    } else if (order == 'current' || order == 'applied') {
      a = search == 'none' ? displayMaster.slice() : search == 'applied' ? displayFiltered.slice() : $.map(displayMaster, function (el, i) {
        // removed search
        return $.inArray(el, displayFiltered) === -1 ? el : null;
      });
    } else if (order == 'index' || order == 'original') {
      for (i = 0, ien = settings.aoData.length; i < ien; i++) {
        if (search == 'none') {
          a.push(i);
        } else {
          // applied | removed
          tmp = $.inArray(i, displayFiltered);
          if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {
            a.push(i);
          }
        }
      }
    }
    return a;
  };
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Rows
	 *
	 * {}          - no selector - use all available rows
	 * {integer}   - row aoData index
	 * {node}      - TR node
	 * {string}    - jQuery selector to apply to the TR elements
	 * {array}     - jQuery array of nodes, or simply an array of TR nodes
	 *
	 */
  var __row_selector = function (settings, selector, opts) {
    var run = function (sel) {
      var selInt = _intVal(sel);
      var i, ien;
      // Short cut - selector is a number and no options provided (default is
      // all records, so no need to check if the index is in there, since it
      // must be - dev error if the index doesn't exist).
      if (selInt !== null && !opts) {
        return [selInt];
      }
      var rows = _selector_row_indexes(settings, opts);
      if (selInt !== null && $.inArray(selInt, rows) !== -1) {
        // Selector - integer
        return [selInt];
      } else if (!sel) {
        // Selector - none
        return rows;
      }
      // Selector - function
      if (typeof sel === 'function') {
        return $.map(rows, function (idx) {
          var row = settings.aoData[idx];
          return sel(idx, row._aData, row.nTr) ? idx : null;
        });
      }
      // Get nodes in the order from the `rows` array with null values removed
      var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr'));
      // Selector - node
      if (sel.nodeName) {
        if (sel._DT_RowIndex !== undefined) {
          return [sel._DT_RowIndex];  // Property added by DT for fast lookup
        } else if (sel._DT_CellIndex) {
          return [sel._DT_CellIndex.row];
        } else {
          var host = $(sel).closest('*[data-dt-row]');
          return host.length ? [host.data('dt-row')] : [];
        }
      }
      // ID selector. Want to always be able to select rows by id, regardless
      // of if the tr element has been created or not, so can't rely upon
      // jQuery here - hence a custom implementation. This does not match
      // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
      // but to select it using a CSS selector engine (like Sizzle or
      // querySelect) it would need to need to be escaped for some characters.
      // DataTables simplifies this for row selectors since you can select
      // only a row. A # indicates an id any anything that follows is the id -
      // unescaped.
      if (typeof sel === 'string' && sel.charAt(0) === '#') {
        // get row index from id
        var rowObj = settings.aIds[sel.replace(/^#/, '')];
        if (rowObj !== undefined) {
          return [rowObj.idx];
        }  // need to fall through to jQuery in case there is DOM id that
           // matches
      }
      // Selector - jQuery selector string, array of nodes or jQuery object/
      // As jQuery's .filter() allows jQuery objects to be passed in filter,
      // it also allows arrays, so this will cope with all three options
      return $(nodes).filter(sel).map(function () {
        return this._DT_RowIndex;
      }).toArray();
    };
    return _selector_run('row', selector, run, settings, opts);
  };
  _api_register('rows()', function (selector, opts) {
    // argument shifting
    if (selector === undefined) {
      selector = '';
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = '';
    }
    opts = _selector_opts(opts);
    var inst = this.iterator('table', function (settings) {
        return __row_selector(settings, selector, opts);
      }, 1);
    // Want argument shifting here and in __row_selector?
    inst.selector.rows = selector;
    inst.selector.opts = opts;
    return inst;
  });
  _api_register('rows().nodes()', function () {
    return this.iterator('row', function (settings, row) {
      return settings.aoData[row].nTr || undefined;
    }, 1);
  });
  _api_register('rows().data()', function () {
    return this.iterator(true, 'rows', function (settings, rows) {
      return _pluck_order(settings.aoData, rows, '_aData');
    }, 1);
  });
  _api_registerPlural('rows().cache()', 'row().cache()', function (type) {
    return this.iterator('row', function (settings, row) {
      var r = settings.aoData[row];
      return type === 'search' ? r._aFilterData : r._aSortData;
    }, 1);
  });
  _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
    return this.iterator('row', function (settings, row) {
      _fnInvalidate(settings, row, src);
    });
  });
  _api_registerPlural('rows().indexes()', 'row().index()', function () {
    return this.iterator('row', function (settings, row) {
      return row;
    }, 1);
  });
  _api_registerPlural('rows().ids()', 'row().id()', function (hash) {
    var a = [];
    var context = this.context;
    // `iterator` will drop undefined values, but in this case we want them
    for (var i = 0, ien = context.length; i < ien; i++) {
      for (var j = 0, jen = this[i].length; j < jen; j++) {
        var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
        a.push((hash === true ? '#' : '') + id);
      }
    }
    return new _Api(context, a);
  });
  _api_registerPlural('rows().remove()', 'row().remove()', function () {
    var that = this;
    this.iterator('row', function (settings, row, thatIdx) {
      var data = settings.aoData;
      var rowData = data[row];
      var i, ien, j, jen;
      var loopRow, loopCells;
      data.splice(row, 1);
      // Update the cached indexes
      for (i = 0, ien = data.length; i < ien; i++) {
        loopRow = data[i];
        loopCells = loopRow.anCells;
        // Rows
        if (loopRow.nTr !== null) {
          loopRow.nTr._DT_RowIndex = i;
        }
        // Cells
        if (loopCells !== null) {
          for (j = 0, jen = loopCells.length; j < jen; j++) {
            loopCells[j]._DT_CellIndex.row = i;
          }
        }
      }
      // Delete from the display arrays
      _fnDeleteIndex(settings.aiDisplayMaster, row);
      _fnDeleteIndex(settings.aiDisplay, row);
      _fnDeleteIndex(that[thatIdx], row, false);
      // maintain local indexes
      // Check for an 'overflow' they case for displaying the table
      _fnLengthOverflow(settings);
      // Remove the row's ID reference if there is one
      var id = settings.rowIdFn(rowData._aData);
      if (id !== undefined) {
        delete settings.aIds[id];
      }
    });
    this.iterator('table', function (settings) {
      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
        settings.aoData[i].idx = i;
      }
    });
    return this;
  });
  _api_register('rows.add()', function (rows) {
    var newRows = this.iterator('table', function (settings) {
        var row, i, ien;
        var out = [];
        for (i = 0, ien = rows.length; i < ien; i++) {
          row = rows[i];
          if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
            out.push(_fnAddTr(settings, row)[0]);
          } else {
            out.push(_fnAddData(settings, row));
          }
        }
        return out;
      }, 1);
    // Return an Api.rows() extended instance, so rows().nodes() etc can be used
    var modRows = this.rows(-1);
    modRows.pop();
    $.merge(modRows, newRows);
    return modRows;
  });
  /**
	 *
	 */
  _api_register('row()', function (selector, opts) {
    return _selector_first(this.rows(selector, opts));
  });
  _api_register('row().data()', function (data) {
    var ctx = this.context;
    if (data === undefined) {
      // Get
      return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;
    }
    // Set
    ctx[0].aoData[this[0]]._aData = data;
    // Automatically invalidate
    _fnInvalidate(ctx[0], this[0], 'data');
    return this;
  });
  _api_register('row().node()', function () {
    var ctx = this.context;
    return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
  });
  _api_register('row.add()', function (row) {
    // Allow a jQuery object to be passed in - only a single row is added from
    // it though - the first element in the set
    if (row instanceof $ && row.length) {
      row = row[0];
    }
    var rows = this.iterator('table', function (settings) {
        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
          return _fnAddTr(settings, row)[0];
        }
        return _fnAddData(settings, row);
      });
    // Return an Api.rows() extended instance, with the newly added row selected
    return this.row(rows[0]);
  });
  var __details_add = function (ctx, row, data, klass) {
    // Convert to array of TR elements
    var rows = [];
    var addRow = function (r, k) {
      // Recursion to allow for arrays of jQuery objects
      if ($.isArray(r) || r instanceof $) {
        for (var i = 0, ien = r.length; i < ien; i++) {
          addRow(r[i], k);
        }
        return;
      }
      // If we get a TR element, then just add it directly - up to the dev
      // to add the correct number of columns etc
      if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
        rows.push(r);
      } else {
        // Otherwise create a row with a wrapper
        var created = $('<tr><td/></tr>').addClass(k);
        $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);
        rows.push(created[0]);
      }
    };
    addRow(data, klass);
    if (row._details) {
      row._details.remove();
    }
    row._details = $(rows);
    // If the children were already shown, that state should be retained
    if (row._detailsShow) {
      row._details.insertAfter(row.nTr);
    }
  };
  var __details_remove = function (api, idx) {
    var ctx = api.context;
    if (ctx.length) {
      var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];
      if (row && row._details) {
        row._details.remove();
        row._detailsShow = undefined;
        row._details = undefined;
      }
    }
  };
  var __details_display = function (api, show) {
    var ctx = api.context;
    if (ctx.length && api.length) {
      var row = ctx[0].aoData[api[0]];
      if (row._details) {
        row._detailsShow = show;
        if (show) {
          row._details.insertAfter(row.nTr);
        } else {
          row._details.detach();
        }
        __details_events(ctx[0]);
      }
    }
  };
  var __details_events = function (settings) {
    var api = new _Api(settings);
    var namespace = '.dt.DT_details';
    var drawEvent = 'draw' + namespace;
    var colvisEvent = 'column-visibility' + namespace;
    var destroyEvent = 'destroy' + namespace;
    var data = settings.aoData;
    api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);
    if (_pluck(data, '_details').length > 0) {
      // On each draw, insert the required elements into the document
      api.on(drawEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }
        api.rows({ page: 'current' }).eq(0).each(function (idx) {
          // Internal data grab
          var row = data[idx];
          if (row._detailsShow) {
            row._details.insertAfter(row.nTr);
          }
        });
      });
      // Column visibility change - update the colspan
      api.on(colvisEvent, function (e, ctx, idx, vis) {
        if (settings !== ctx) {
          return;
        }
        // Update the colspan for the details rows (note, only if it already has
        // a colspan)
        var row, visible = _fnVisbleColumns(ctx);
        for (var i = 0, ien = data.length; i < ien; i++) {
          row = data[i];
          if (row._details) {
            row._details.children('td[colspan]').attr('colspan', visible);
          }
        }
      });
      // Table destroyed - nuke any child rows
      api.on(destroyEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }
        for (var i = 0, ien = data.length; i < ien; i++) {
          if (data[i]._details) {
            __details_remove(api, i);
          }
        }
      });
    }
  };
  // Strings for the method names to help minification
  var _emp = '';
  var _child_obj = _emp + 'row().child';
  var _child_mth = _child_obj + '()';
  // data can be:
  //  tr
  //  string
  //  jQuery or array of any of the above
  _api_register(_child_mth, function (data, klass) {
    var ctx = this.context;
    if (data === undefined) {
      // get
      return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;
    } else if (data === true) {
      // show
      this.child.show();
    } else if (data === false) {
      // remove
      __details_remove(this);
    } else if (ctx.length && this.length) {
      // set
      __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
    }
    return this;
  });
  _api_register([
    _child_obj + '.show()',
    _child_mth + '.show()'
  ], function (show) {
    // it returns an object and this method is not executed)
    __details_display(this, true);
    return this;
  });
  _api_register([
    _child_obj + '.hide()',
    _child_mth + '.hide()'
  ], function () {
    // it returns an object and this method is not executed)
    __details_display(this, false);
    return this;
  });
  _api_register([
    _child_obj + '.remove()',
    _child_mth + '.remove()'
  ], function () {
    // it returns an object and this method is not executed)
    __details_remove(this);
    return this;
  });
  _api_register(_child_obj + '.isShown()', function () {
    var ctx = this.context;
    if (ctx.length && this.length) {
      // _detailsShown as false or undefined will fall through to return false
      return ctx[0].aoData[this[0]]._detailsShow || false;
    }
    return false;
  });
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Columns
	 *
	 * {integer}           - column index (>=0 count from left, <0 count from right)
	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	 * "{string}:name"     - column name
	 * "{string}"          - jQuery selector on column header nodes
	 *
	 */
  // can be an array of these items, comma separated list, or an array of comma
  // separated lists
  var __re_column_selector = /^(.+):(name|visIdx|visible)$/;
  // r1 and r2 are redundant - but it means that the parameters match for the
  // iterator callback in columns().data()
  var __columnData = function (settings, column, r1, r2, rows) {
    var a = [];
    for (var row = 0, ien = rows.length; row < ien; row++) {
      a.push(_fnGetCellData(settings, rows[row], column));
    }
    return a;
  };
  var __column_selector = function (settings, selector, opts) {
    var columns = settings.aoColumns, names = _pluck(columns, 'sName'), nodes = _pluck(columns, 'nTh');
    var run = function (s) {
      var selInt = _intVal(s);
      // Selector - all
      if (s === '') {
        return _range(columns.length);
      }
      // Selector - index
      if (selInt !== null) {
        return [selInt >= 0 ? selInt : columns.length + selInt];
      }
      // Selector = function
      if (typeof s === 'function') {
        var rows = _selector_row_indexes(settings, opts);
        return $.map(columns, function (col, idx) {
          return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
        });
      }
      // jQuery or string selector
      var match = typeof s === 'string' ? s.match(__re_column_selector) : '';
      if (match) {
        switch (match[2]) {
        case 'visIdx':
        case 'visible':
          var idx = parseInt(match[1], 10);
          // Visible index given, convert to column index
          if (idx < 0) {
            // Counting from the right
            var visColumns = $.map(columns, function (col, i) {
                return col.bVisible ? i : null;
              });
            return [visColumns[visColumns.length + idx]];
          }
          // Counting from the left
          return [_fnVisibleToColumnIndex(settings, idx)];
        case 'name':
          // match by name. `names` is column index complete and in order
          return $.map(names, function (name, i) {
            return name === match[1] ? i : null;
          });
        default:
          return [];
        }
      }
      // Cell in the table body
      if (s.nodeName && s._DT_CellIndex) {
        return [s._DT_CellIndex.column];
      }
      // jQuery selector on the TH elements for the columns
      var jqResult = $(nodes).filter(s).map(function () {
          return $.inArray(this, nodes);  // `nodes` is column index complete and in order
        }).toArray();
      if (jqResult.length || !s.nodeName) {
        return jqResult;
      }
      // Otherwise a node which might have a `dt-column` data attribute, or be
      // a child or such an element
      var host = $(s).closest('*[data-dt-column]');
      return host.length ? [host.data('dt-column')] : [];
    };
    return _selector_run('column', selector, run, settings, opts);
  };
  var __setColumnVis = function (settings, column, vis) {
    var cols = settings.aoColumns, col = cols[column], data = settings.aoData, row, cells, i, ien, tr;
    // Get
    if (vis === undefined) {
      return col.bVisible;
    }
    // Set
    // No change
    if (col.bVisible === vis) {
      return;
    }
    if (vis) {
      // Insert column
      // Need to decide if we should use appendChild or insertBefore
      var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);
      for (i = 0, ien = data.length; i < ien; i++) {
        tr = data[i].nTr;
        cells = data[i].anCells;
        if (tr) {
          // insertBefore can act like appendChild if 2nd arg is null
          tr.insertBefore(cells[column], cells[insertBefore] || null);
        }
      }
    } else {
      // Remove column
      $(_pluck(settings.aoData, 'anCells', column)).detach();
    }
    // Common actions
    col.bVisible = vis;
    _fnDrawHead(settings, settings.aoHeader);
    _fnDrawHead(settings, settings.aoFooter);
    _fnSaveState(settings);
  };
  _api_register('columns()', function (selector, opts) {
    // argument shifting
    if (selector === undefined) {
      selector = '';
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = '';
    }
    opts = _selector_opts(opts);
    var inst = this.iterator('table', function (settings) {
        return __column_selector(settings, selector, opts);
      }, 1);
    // Want argument shifting here and in _row_selector?
    inst.selector.cols = selector;
    inst.selector.opts = opts;
    return inst;
  });
  _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].nTh;
    }, 1);
  });
  _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].nTf;
    }, 1);
  });
  _api_registerPlural('columns().data()', 'column().data()', function () {
    return this.iterator('column-rows', __columnData, 1);
  });
  _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].mData;
    }, 1);
  });
  _api_registerPlural('columns().cache()', 'column().cache()', function (type) {
    return this.iterator('column-rows', function (settings, column, i, j, rows) {
      return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);
    }, 1);
  });
  _api_registerPlural('columns().nodes()', 'column().nodes()', function () {
    return this.iterator('column-rows', function (settings, column, i, j, rows) {
      return _pluck_order(settings.aoData, rows, 'anCells', column);
    }, 1);
  });
  _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
    var ret = this.iterator('column', function (settings, column) {
        if (vis === undefined) {
          return settings.aoColumns[column].bVisible;
        }
        // else
        __setColumnVis(settings, column, vis);
      });
    // Group the column visibility changes
    if (vis !== undefined) {
      // Second loop once the first is done for events
      this.iterator('column', function (settings, column) {
        _fnCallbackFire(settings, null, 'column-visibility', [
          settings,
          column,
          vis,
          calc
        ]);
      });
      if (calc === undefined || calc) {
        this.columns.adjust();
      }
    }
    return ret;
  });
  _api_registerPlural('columns().indexes()', 'column().index()', function (type) {
    return this.iterator('column', function (settings, column) {
      return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;
    }, 1);
  });
  _api_register('columns.adjust()', function () {
    return this.iterator('table', function (settings) {
      _fnAdjustColumnSizing(settings);
    }, 1);
  });
  _api_register('column.index()', function (type, idx) {
    if (this.context.length !== 0) {
      var ctx = this.context[0];
      if (type === 'fromVisible' || type === 'toData') {
        return _fnVisibleToColumnIndex(ctx, idx);
      } else if (type === 'fromData' || type === 'toVisible') {
        return _fnColumnIndexToVisible(ctx, idx);
      }
    }
  });
  _api_register('column()', function (selector, opts) {
    return _selector_first(this.columns(selector, opts));
  });
  var __cell_selector = function (settings, selector, opts) {
    var data = settings.aoData;
    var rows = _selector_row_indexes(settings, opts);
    var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));
    var allCells = $([].concat.apply([], cells));
    var row;
    var columns = settings.aoColumns.length;
    var a, i, ien, j, o, host;
    var run = function (s) {
      var fnSelector = typeof s === 'function';
      if (s === null || s === undefined || fnSelector) {
        // All cells and function selectors
        a = [];
        for (i = 0, ien = rows.length; i < ien; i++) {
          row = rows[i];
          for (j = 0; j < columns; j++) {
            o = {
              row: row,
              column: j
            };
            if (fnSelector) {
              // Selector - function
              host = data[row];
              if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
                a.push(o);
              }
            } else {
              // Selector - all
              a.push(o);
            }
          }
        }
        return a;
      }
      // Selector - index
      if ($.isPlainObject(s)) {
        return [s];
      }
      // Selector - jQuery filtered cells
      var jqResult = allCells.filter(s).map(function (i, el) {
          return {
            row: el._DT_CellIndex.row,
            column: el._DT_CellIndex.column
          };
        }).toArray();
      if (jqResult.length || !s.nodeName) {
        return jqResult;
      }
      // Otherwise the selector is a node, and there is one last option - the
      // element might be a child of an element which has dt-row and dt-column
      // data attributes
      host = $(s).closest('*[data-dt-row]');
      return host.length ? [{
          row: host.data('dt-row'),
          column: host.data('dt-column')
        }] : [];
    };
    return _selector_run('cell', selector, run, settings, opts);
  };
  _api_register('cells()', function (rowSelector, columnSelector, opts) {
    // Argument shifting
    if ($.isPlainObject(rowSelector)) {
      // Indexes
      if (rowSelector.row === undefined) {
        // Selector options in first parameter
        opts = rowSelector;
        rowSelector = null;
      } else {
        // Cell index objects in first parameter
        opts = columnSelector;
        columnSelector = null;
      }
    }
    if ($.isPlainObject(columnSelector)) {
      opts = columnSelector;
      columnSelector = null;
    }
    // Cell selector
    if (columnSelector === null || columnSelector === undefined) {
      return this.iterator('table', function (settings) {
        return __cell_selector(settings, rowSelector, _selector_opts(opts));
      });
    }
    // Row + column selector
    var columns = this.columns(columnSelector, opts);
    var rows = this.rows(rowSelector, opts);
    var a, i, ien, j, jen;
    var cells = this.iterator('table', function (settings, idx) {
        a = [];
        for (i = 0, ien = rows[idx].length; i < ien; i++) {
          for (j = 0, jen = columns[idx].length; j < jen; j++) {
            a.push({
              row: rows[idx][i],
              column: columns[idx][j]
            });
          }
        }
        return a;
      }, 1);
    $.extend(cells.selector, {
      cols: columnSelector,
      rows: rowSelector,
      opts: opts
    });
    return cells;
  });
  _api_registerPlural('cells().nodes()', 'cell().node()', function () {
    return this.iterator('cell', function (settings, row, column) {
      var data = settings.aoData[row];
      return data && data.anCells ? data.anCells[column] : undefined;
    }, 1);
  });
  _api_register('cells().data()', function () {
    return this.iterator('cell', function (settings, row, column) {
      return _fnGetCellData(settings, row, column);
    }, 1);
  });
  _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
    type = type === 'search' ? '_aFilterData' : '_aSortData';
    return this.iterator('cell', function (settings, row, column) {
      return settings.aoData[row][type][column];
    }, 1);
  });
  _api_registerPlural('cells().render()', 'cell().render()', function (type) {
    return this.iterator('cell', function (settings, row, column) {
      return _fnGetCellData(settings, row, column, type);
    }, 1);
  });
  _api_registerPlural('cells().indexes()', 'cell().index()', function () {
    return this.iterator('cell', function (settings, row, column) {
      return {
        row: row,
        column: column,
        columnVisible: _fnColumnIndexToVisible(settings, column)
      };
    }, 1);
  });
  _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
    return this.iterator('cell', function (settings, row, column) {
      _fnInvalidate(settings, row, src, column);
    });
  });
  _api_register('cell()', function (rowSelector, columnSelector, opts) {
    return _selector_first(this.cells(rowSelector, columnSelector, opts));
  });
  _api_register('cell().data()', function (data) {
    var ctx = this.context;
    var cell = this[0];
    if (data === undefined) {
      // Get
      return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;
    }
    // Set
    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
    _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);
    return this;
  });
  /**
	 * Get current ordering (sorting) that has been applied to the table.
	 *
	 * @returns {array} 2D array containing the sorting information for the first
	 *   table in the current context. Each element in the parent array represents
	 *   a column being sorted upon (i.e. multi-sorting with two columns would have
	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	 *   the column index that the sorting condition applies to, the second is the
	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	 *   index of the sorting order from the `column.sorting` initialisation array.
	 */
  /**
	 * Set the ordering for the table.
	 *
	 * @param {integer} order Column index to sort upon.
	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	 * @returns {DataTables.Api} this
	 */
  /**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 1D array of sorting information to be applied.
	 * @param {array} [...] Optional additional sorting conditions
	 * @returns {DataTables.Api} this
	 */
  /**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 2D array of sorting information to be applied.
	 * @returns {DataTables.Api} this
	 */
  _api_register('order()', function (order, dir) {
    var ctx = this.context;
    if (order === undefined) {
      // get
      return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
    }
    // set
    if (typeof order === 'number') {
      // Simple column / direction passed in
      order = [[
          order,
          dir
        ]];
    } else if (order.length && !$.isArray(order[0])) {
      // Arguments passed in (list of 1D arrays)
      order = Array.prototype.slice.call(arguments);
    }
    // otherwise a 2D array was passed in
    return this.iterator('table', function (settings) {
      settings.aaSorting = order.slice();
    });
  });
  /**
	 * Attach a sort listener to an element for a given column
	 *
	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	 *   listener to. This can take the form of a single DOM node, a jQuery
	 *   collection of nodes or a jQuery selector which will identify the node(s).
	 * @param {integer} column the column that a click on this node will sort on
	 * @param {function} [callback] callback function when sort is run
	 * @returns {DataTables.Api} this
	 */
  _api_register('order.listener()', function (node, column, callback) {
    return this.iterator('table', function (settings) {
      _fnSortAttachListener(settings, node, column, callback);
    });
  });
  _api_register('order.fixed()', function (set) {
    if (!set) {
      var ctx = this.context;
      var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;
      return $.isArray(fixed) ? { pre: fixed } : fixed;
    }
    return this.iterator('table', function (settings) {
      settings.aaSortingFixed = $.extend(true, {}, set);
    });
  });
  // Order by the selected column(s)
  _api_register([
    'columns().order()',
    'column().order()'
  ], function (dir) {
    var that = this;
    return this.iterator('table', function (settings, i) {
      var sort = [];
      $.each(that[i], function (j, col) {
        sort.push([
          col,
          dir
        ]);
      });
      settings.aaSorting = sort;
    });
  });
  _api_register('search()', function (input, regex, smart, caseInsen) {
    var ctx = this.context;
    if (input === undefined) {
      // get
      return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
    }
    // set
    return this.iterator('table', function (settings) {
      if (!settings.oFeatures.bFilter) {
        return;
      }
      _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
        'sSearch': input + '',
        'bRegex': regex === null ? false : regex,
        'bSmart': smart === null ? true : smart,
        'bCaseInsensitive': caseInsen === null ? true : caseInsen
      }), 1);
    });
  });
  _api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {
    return this.iterator('column', function (settings, column) {
      var preSearch = settings.aoPreSearchCols;
      if (input === undefined) {
        // get
        return preSearch[column].sSearch;
      }
      // set
      if (!settings.oFeatures.bFilter) {
        return;
      }
      $.extend(preSearch[column], {
        'sSearch': input + '',
        'bRegex': regex === null ? false : regex,
        'bSmart': smart === null ? true : smart,
        'bCaseInsensitive': caseInsen === null ? true : caseInsen
      });
      _fnFilterComplete(settings, settings.oPreviousSearch, 1);
    });
  });
  /*
	 * State API methods
	 */
  _api_register('state()', function () {
    return this.context.length ? this.context[0].oSavedState : null;
  });
  _api_register('state.clear()', function () {
    return this.iterator('table', function (settings) {
      // Save an empty object
      settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
    });
  });
  _api_register('state.loaded()', function () {
    return this.context.length ? this.context[0].oLoadedState : null;
  });
  _api_register('state.save()', function () {
    return this.iterator('table', function (settings) {
      _fnSaveState(settings);
    });
  });
  /**
	 * Provide a common method for plug-ins to check the version of DataTables being
	 * used, in order to ensure compatibility.
	 *
	 *  @param {string} version Version string to check for, in the format "X.Y.Z".
	 *    Note that the formats "X" and "X.Y" are also acceptable.
	 *  @returns {boolean} true if this version of DataTables is greater or equal to
	 *    the required version, or false if this version of DataTales is not
	 *    suitable
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	 */
  DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
    var aThis = DataTable.version.split('.');
    var aThat = version.split('.');
    var iThis, iThat;
    for (var i = 0, iLen = aThat.length; i < iLen; i++) {
      iThis = parseInt(aThis[i], 10) || 0;
      iThat = parseInt(aThat[i], 10) || 0;
      // Parts are the same, keep comparing
      if (iThis === iThat) {
        continue;
      }
      // Parts are different, return immediately
      return iThis > iThat;
    }
    return true;
  };
  /**
	 * Check if a `<table>` node is a DataTable table already or not.
	 *
	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	 *      selector for the table to test. Note that if more than more than one
	 *      table is passed on, only the first will be checked
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	 *      $('#example').dataTable();
	 *    }
	 */
  DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
    var t = $(table).get(0);
    var is = false;
    $.each(DataTable.settings, function (i, o) {
      var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
      var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
      if (o.nTable === t || head === t || foot === t) {
        is = true;
      }
    });
    return is;
  };
  /**
	 * Get all DataTable tables that have been initialised - optionally you can
	 * select to get only currently visible tables.
	 *
	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	 *    or visible tables only.
	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	 *    DataTables
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    $.each( $.fn.dataTable.tables(true), function () {
	 *      $(table).DataTable().columns.adjust();
	 *    } );
	 */
  DataTable.tables = DataTable.fnTables = function (visible) {
    var api = false;
    if ($.isPlainObject(visible)) {
      api = visible.api;
      visible = visible.visible;
    }
    var a = $.map(DataTable.settings, function (o) {
        if (!visible || visible && $(o.nTable).is(':visible')) {
          return o.nTable;
        }
      });
    return api ? new _Api(a) : a;
  };
  /**
	 * Convert from camel case parameters to Hungarian notation. This is made public
	 * for the extensions to provide the same ability as DataTables core to accept
	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	 * parameters.
	 *
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 */
  DataTable.camelToHungarian = _fnCamelToHungarian;
  /**
	 *
	 */
  _api_register('$()', function (selector, opts) {
    var rows = this.rows(opts).nodes(),
      // Get all rows
      jqRows = $(rows);
    return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
  });
  // jQuery functions to operate on the tables
  $.each([
    'on',
    'one',
    'off'
  ], function (i, key) {
    _api_register(key + '()', function () {
      var args = Array.prototype.slice.call(arguments);
      // Add the `dt` namespace automatically if it isn't already present
      if (!args[0].match(/\.dt\b/)) {
        args[0] += '.dt';
      }
      var inst = $(this.tables().nodes());
      inst[key].apply(inst, args);
      return this;
    });
  });
  _api_register('clear()', function () {
    return this.iterator('table', function (settings) {
      _fnClearTable(settings);
    });
  });
  _api_register('settings()', function () {
    return new _Api(this.context, this.context);
  });
  _api_register('init()', function () {
    var ctx = this.context;
    return ctx.length ? ctx[0].oInit : null;
  });
  _api_register('data()', function () {
    return this.iterator('table', function (settings) {
      return _pluck(settings.aoData, '_aData');
    }).flatten();
  });
  _api_register('destroy()', function (remove) {
    remove = remove || false;
    return this.iterator('table', function (settings) {
      var orig = settings.nTableWrapper.parentNode;
      var classes = settings.oClasses;
      var table = settings.nTable;
      var tbody = settings.nTBody;
      var thead = settings.nTHead;
      var tfoot = settings.nTFoot;
      var jqTable = $(table);
      var jqTbody = $(tbody);
      var jqWrapper = $(settings.nTableWrapper);
      var rows = $.map(settings.aoData, function (r) {
          return r.nTr;
        });
      var i, ien;
      // Flag to note that the table is currently being destroyed - no action
      // should be taken
      settings.bDestroying = true;
      // Fire off the destroy callbacks for plug-ins etc
      _fnCallbackFire(settings, 'aoDestroyCallback', 'destroy', [settings]);
      // If not being removed from the document, make all columns visible
      if (!remove) {
        new _Api(settings).columns().visible(true);
      }
      // Blitz all `DT` namespaced events (these are internal events, the
      // lowercase, `dt` events are user subscribed and they are responsible
      // for removing them
      jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');
      $(window).unbind('.DT-' + settings.sInstance);
      // When scrolling we had to break the table up - restore it
      if (table != thead.parentNode) {
        jqTable.children('thead').detach();
        jqTable.append(thead);
      }
      if (tfoot && table != tfoot.parentNode) {
        jqTable.children('tfoot').detach();
        jqTable.append(tfoot);
      }
      settings.aaSorting = [];
      settings.aaSortingFixed = [];
      _fnSortingClasses(settings);
      $(rows).removeClass(settings.asStripeClasses.join(' '));
      $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone);
      if (settings.bJUI) {
        $('th span.' + classes.sSortIcon + ', td span.' + classes.sSortIcon, thead).detach();
        $('th, td', thead).each(function () {
          var wrapper = $('div.' + classes.sSortJUIWrapper, this);
          $(this).append(wrapper.contents());
          wrapper.detach();
        });
      }
      // Add the TR elements back into the table in their original order
      jqTbody.children().detach();
      jqTbody.append(rows);
      // Remove the DataTables generated nodes, events and classes
      var removedMethod = remove ? 'remove' : 'detach';
      jqTable[removedMethod]();
      jqWrapper[removedMethod]();
      // If we need to reattach the table to the document
      if (!remove && orig) {
        // insertBefore acts like appendChild if !arg[1]
        orig.insertBefore(table, settings.nTableReinsertBefore);
        // Restore the width of the original table - was read from the style property,
        // so we can restore directly to that
        jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable);
        // If the were originally stripe classes - then we add them back here.
        // Note this is not fool proof (for example if not all rows had stripe
        // classes - but it's a good effort without getting carried away
        ien = settings.asDestroyStripes.length;
        if (ien) {
          jqTbody.children().each(function (i) {
            $(this).addClass(settings.asDestroyStripes[i % ien]);
          });
        }
      }
      /* Remove the settings object from the settings array */
      var idx = $.inArray(settings, DataTable.settings);
      if (idx !== -1) {
        DataTable.settings.splice(idx, 1);
      }
    });
  });
  // Add the `every()` method for rows, columns and cells in a compact form
  $.each([
    'column',
    'row',
    'cell'
  ], function (i, type) {
    _api_register(type + 's().every()', function (fn) {
      var opts = this.selector.opts;
      var api = this;
      return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {
        // Rows and columns:
        //  arg1 - index
        //  arg2 - table counter
        //  arg3 - loop counter
        //  arg4 - undefined
        // Cells:
        //  arg1 - row index
        //  arg2 - column index
        //  arg3 - table counter
        //  arg4 - loop counter
        fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);
      });
    });
  });
  // i18n method for extensions to be able to use the language object from the
  // DataTable
  _api_register('i18n()', function (token, def, plural) {
    var ctx = this.context[0];
    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);
    if (resolved === undefined) {
      resolved = def;
    }
    if (plural !== undefined && $.isPlainObject(resolved)) {
      resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
    }
    return resolved.replace('%d', plural);  // nb: plural might be undefined,
  });
  /**
	 * Version string for plug-ins to check compatibility. Allowed format is
	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	 * only for non-release builds. See http://semver.org/ for more information.
	 *  @member
	 *  @type string
	 *  @default Version number
	 */
  DataTable.version = '1.10.12';
  /**
	 * Private data store, containing all of the settings objects that are
	 * created for the tables on a given page.
	 *
	 * Note that the `DataTable.settings` object is aliased to
	 * `jQuery.fn.dataTableExt` through which it may be accessed and
	 * manipulated, or `jQuery.fn.dataTable.settings`.
	 *  @member
	 *  @type array
	 *  @default []
	 *  @private
	 */
  DataTable.settings = [];
  /**
	 * Object models container, for the various models that DataTables has
	 * available to it. These models define the objects that are used to hold
	 * the active state and configuration of the table.
	 *  @namespace
	 */
  DataTable.models = {};
  /**
	 * Template object for the way in which DataTables holds information about
	 * search information for the global filter and individual column filters.
	 *  @namespace
	 */
  DataTable.models.oSearch = {
    'bCaseInsensitive': true,
    'sSearch': '',
    'bRegex': false,
    'bSmart': true
  };
  /**
	 * Template object for the way in which DataTables holds information about
	 * each individual row. This is the object format used for the settings
	 * aoData array.
	 *  @namespace
	 */
  DataTable.models.oRow = {
    'nTr': null,
    'anCells': null,
    '_aData': [],
    '_aSortData': null,
    '_aFilterData': null,
    '_sFilterRow': null,
    '_sRowStripe': '',
    'src': null,
    'idx': -1
  };
  /**
	 * Template object for the column information object in DataTables. This object
	 * is held in the settings aoColumns array and contains all the information that
	 * DataTables needs about each individual column.
	 *
	 * Note that this object is related to {@link DataTable.defaults.column}
	 * but this one is the internal data store for DataTables's cache of columns.
	 * It should NOT be manipulated outside of DataTables. Any configuration should
	 * be done through the initialisation options.
	 *  @namespace
	 */
  DataTable.models.oColumn = {
    'idx': null,
    'aDataSort': null,
    'asSorting': null,
    'bSearchable': null,
    'bSortable': null,
    'bVisible': null,
    '_sManualType': null,
    '_bAttrSrc': false,
    'fnCreatedCell': null,
    'fnGetData': null,
    'fnSetData': null,
    'mData': null,
    'mRender': null,
    'nTh': null,
    'nTf': null,
    'sClass': null,
    'sContentPadding': null,
    'sDefaultContent': null,
    'sName': null,
    'sSortDataType': 'std',
    'sSortingClass': null,
    'sSortingClassJUI': null,
    'sTitle': null,
    'sType': null,
    'sWidth': null,
    'sWidthOrig': null
  };
  /*
	 * Developer note: The properties of the object below are given in Hungarian
	 * notation, that was used as the interface for DataTables prior to v1.10, however
	 * from v1.10 onwards the primary interface is camel case. In order to avoid
	 * breaking backwards compatibility utterly with this change, the Hungarian
	 * version is still, internally the primary interface, but is is not documented
	 * - hence the @name tags in each doc comment. This allows a Javascript function
	 * to create a map from Hungarian notation to camel case (going the other direction
	 * would require each property to be listed, which would at around 3K to the size
	 * of DataTables, while this method is about a 0.5K hit.
	 *
	 * Ultimately this does pave the way for Hungarian notation to be dropped
	 * completely, but that is a massive amount of work and will break current
	 * installs (therefore is on-hold until v2).
	 */
  /**
	 * Initialisation options that can be given to DataTables at initialisation
	 * time.
	 *  @namespace
	 */
  DataTable.defaults = {
    'aaData': null,
    'aaSorting': [[
        0,
        'asc'
      ]],
    'aaSortingFixed': [],
    'ajax': null,
    'aLengthMenu': [
      10,
      25,
      50,
      100
    ],
    'aoColumns': null,
    'aoColumnDefs': null,
    'aoSearchCols': [],
    'asStripeClasses': null,
    'bAutoWidth': true,
    'bDeferRender': false,
    'bDestroy': false,
    'bFilter': true,
    'bInfo': true,
    'bJQueryUI': false,
    'bLengthChange': true,
    'bPaginate': true,
    'bProcessing': false,
    'bRetrieve': false,
    'bScrollCollapse': false,
    'bServerSide': false,
    'bSort': true,
    'bSortMulti': true,
    'bSortCellsTop': false,
    'bSortClasses': true,
    'bStateSave': false,
    'fnCreatedRow': null,
    'fnDrawCallback': null,
    'fnFooterCallback': null,
    'fnFormatNumber': function (toFormat) {
      return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
    },
    'fnHeaderCallback': null,
    'fnInfoCallback': null,
    'fnInitComplete': null,
    'fnPreDrawCallback': null,
    'fnRowCallback': null,
    'fnServerData': null,
    'fnServerParams': null,
    'fnStateLoadCallback': function (settings) {
      try {
        return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));
      } catch (e) {
      }
    },
    'fnStateLoadParams': null,
    'fnStateLoaded': null,
    'fnStateSaveCallback': function (settings, data) {
      try {
        (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));
      } catch (e) {
      }
    },
    'fnStateSaveParams': null,
    'iStateDuration': 7200,
    'iDeferLoading': null,
    'iDisplayLength': 10,
    'iDisplayStart': 0,
    'iTabIndex': 0,
    'oClasses': {},
    'oLanguage': {
      'oAria': {
        'sSortAscending': ': activate to sort column ascending',
        'sSortDescending': ': activate to sort column descending'
      },
      'oPaginate': {
        'sFirst': 'First',
        'sLast': 'Last',
        'sNext': 'Next',
        'sPrevious': 'Previous'
      },
      'sEmptyTable': 'No data available in table',
      'sInfo': 'Showing _START_ to _END_ of _TOTAL_ entries',
      'sInfoEmpty': 'Showing 0 to 0 of 0 entries',
      'sInfoFiltered': '(filtered from _MAX_ total entries)',
      'sInfoPostFix': '',
      'sDecimal': '',
      'sThousands': ',',
      'sLengthMenu': 'Show _MENU_ entries',
      'sLoadingRecords': 'Loading...',
      'sProcessing': 'Processing...',
      'sSearch': 'Search:',
      'sSearchPlaceholder': '',
      'sUrl': '',
      'sZeroRecords': 'No matching records found'
    },
    'oSearch': $.extend({}, DataTable.models.oSearch),
    'sAjaxDataProp': 'data',
    'sAjaxSource': null,
    'sDom': 'lfrtip',
    'searchDelay': null,
    'sPaginationType': 'simple_numbers',
    'sScrollX': '',
    'sScrollXInner': '',
    'sScrollY': '',
    'sServerMethod': 'GET',
    'renderer': null,
    'rowId': 'DT_RowId'
  };
  _fnHungarianMap(DataTable.defaults);
  /*
	 * Developer note - See note in model.defaults.js about the use of Hungarian
	 * notation and camel case.
	 */
  /**
	 * Column options that can be given to DataTables at initialisation time.
	 *  @namespace
	 */
  DataTable.defaults.column = {
    'aDataSort': null,
    'iDataSort': -1,
    'asSorting': [
      'asc',
      'desc'
    ],
    'bSearchable': true,
    'bSortable': true,
    'bVisible': true,
    'fnCreatedCell': null,
    'mData': null,
    'mRender': null,
    'sCellType': 'td',
    'sClass': '',
    'sContentPadding': '',
    'sDefaultContent': null,
    'sName': '',
    'sSortDataType': 'std',
    'sTitle': null,
    'sType': null,
    'sWidth': null
  };
  _fnHungarianMap(DataTable.defaults.column);
  /**
	 * DataTables settings object - this holds all the information needed for a
	 * given table, including configuration, data and current application of the
	 * table options. DataTables does not have a single instance for each DataTable
	 * with the settings attached to that instance, but rather instances of the
	 * DataTable "class" are created on-the-fly as needed (typically by a
	 * $().dataTable() call) and the settings object is then applied to that
	 * instance.
	 *
	 * Note that this object is related to {@link DataTable.defaults} but this
	 * one is the internal data store for DataTables's cache of columns. It should
	 * NOT be manipulated outside of DataTables. Any configuration should be done
	 * through the initialisation options.
	 *  @namespace
	 *  @todo Really should attach the settings object to individual instances so we
	 *    don't need to create new instances on each $().dataTable() call (if the
	 *    table already exists). It would also save passing oSettings around and
	 *    into every single function. However, this is a very significant
	 *    architecture change for DataTables and will almost certainly break
	 *    backwards compatibility with older installations. This is something that
	 *    will be done in 2.0.
	 */
  DataTable.models.oSettings = {
    'oFeatures': {
      'bAutoWidth': null,
      'bDeferRender': null,
      'bFilter': null,
      'bInfo': null,
      'bLengthChange': null,
      'bPaginate': null,
      'bProcessing': null,
      'bServerSide': null,
      'bSort': null,
      'bSortMulti': null,
      'bSortClasses': null,
      'bStateSave': null
    },
    'oScroll': {
      'bCollapse': null,
      'iBarWidth': 0,
      'sX': null,
      'sXInner': null,
      'sY': null
    },
    'oLanguage': { 'fnInfoCallback': null },
    'oBrowser': {
      'bScrollOversize': false,
      'bScrollbarLeft': false,
      'bBounding': false,
      'barWidth': 0
    },
    'ajax': null,
    'aanFeatures': [],
    'aoData': [],
    'aiDisplay': [],
    'aiDisplayMaster': [],
    'aIds': {},
    'aoColumns': [],
    'aoHeader': [],
    'aoFooter': [],
    'oPreviousSearch': {},
    'aoPreSearchCols': [],
    'aaSorting': null,
    'aaSortingFixed': [],
    'asStripeClasses': null,
    'asDestroyStripes': [],
    'sDestroyWidth': 0,
    'aoRowCallback': [],
    'aoHeaderCallback': [],
    'aoFooterCallback': [],
    'aoDrawCallback': [],
    'aoRowCreatedCallback': [],
    'aoPreDrawCallback': [],
    'aoInitComplete': [],
    'aoStateSaveParams': [],
    'aoStateLoadParams': [],
    'aoStateLoaded': [],
    'sTableId': '',
    'nTable': null,
    'nTHead': null,
    'nTFoot': null,
    'nTBody': null,
    'nTableWrapper': null,
    'bDeferLoading': false,
    'bInitialised': false,
    'aoOpenRows': [],
    'sDom': null,
    'searchDelay': null,
    'sPaginationType': 'two_button',
    'iStateDuration': 0,
    'aoStateSave': [],
    'aoStateLoad': [],
    'oSavedState': null,
    'oLoadedState': null,
    'sAjaxSource': null,
    'sAjaxDataProp': null,
    'bAjaxDataGet': true,
    'jqXHR': null,
    'json': undefined,
    'oAjaxData': undefined,
    'fnServerData': null,
    'aoServerParams': [],
    'sServerMethod': null,
    'fnFormatNumber': null,
    'aLengthMenu': null,
    'iDraw': 0,
    'bDrawing': false,
    'iDrawError': -1,
    '_iDisplayLength': 10,
    '_iDisplayStart': 0,
    '_iRecordsTotal': 0,
    '_iRecordsDisplay': 0,
    'bJUI': null,
    'oClasses': {},
    'bFiltered': false,
    'bSorted': false,
    'bSortCellsTop': null,
    'oInit': null,
    'aoDestroyCallback': [],
    'fnRecordsTotal': function () {
      return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
    },
    'fnRecordsDisplay': function () {
      return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
    },
    'fnDisplayEnd': function () {
      var len = this._iDisplayLength, start = this._iDisplayStart, calc = start + len, records = this.aiDisplay.length, features = this.oFeatures, paginate = features.bPaginate;
      if (features.bServerSide) {
        return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);
      } else {
        return !paginate || calc > records || len === -1 ? records : calc;
      }
    },
    'oInstance': null,
    'sInstance': null,
    'iTabIndex': 0,
    'nScrollHead': null,
    'nScrollFoot': null,
    'aLastSort': [],
    'oPlugins': {},
    'rowIdFn': null,
    'rowId': null
  };
  /**
	 * Extension object for DataTables that is used to provide all extension
	 * options.
	 *
	 * Note that the `DataTable.ext` object is available through
	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	 *  @namespace
	 *  @extends DataTable.models.ext
	 */
  /**
	 * DataTables extensions
	 * 
	 * This namespace acts as a collection area for plug-ins that can be used to
	 * extend DataTables capabilities. Indeed many of the build in methods
	 * use this method to provide their own capabilities (sorting methods for
	 * example).
	 *
	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	 * reasons
	 *
	 *  @namespace
	 */
  DataTable.ext = _ext = {
    buttons: {},
    classes: {},
    builder: '-source-',
    errMode: 'alert',
    feature: [],
    search: [],
    selector: {
      cell: [],
      column: [],
      row: []
    },
    internal: {},
    legacy: { ajax: null },
    pager: {},
    renderer: {
      pageButton: {},
      header: {}
    },
    order: {},
    type: {
      detect: [],
      search: {},
      order: {}
    },
    _unique: 0,
    fnVersionCheck: DataTable.fnVersionCheck,
    iApiIndex: 0,
    oJUIClasses: {},
    sVersion: DataTable.version
  };
  //
  // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
  //
  $.extend(_ext, {
    afnFiltering: _ext.search,
    aTypes: _ext.type.detect,
    ofnSearch: _ext.type.search,
    oSort: _ext.type.order,
    afnSortData: _ext.order,
    aoFeatures: _ext.feature,
    oApi: _ext.internal,
    oStdClasses: _ext.classes,
    oPagination: _ext.pager
  });
  $.extend(DataTable.ext.classes, {
    'sTable': 'dataTable',
    'sNoFooter': 'no-footer',
    'sPageButton': 'paginate_button',
    'sPageButtonActive': 'current',
    'sPageButtonDisabled': 'disabled',
    'sStripeOdd': 'odd',
    'sStripeEven': 'even',
    'sRowEmpty': 'dataTables_empty',
    'sWrapper': 'dataTables_wrapper',
    'sFilter': 'dataTables_filter',
    'sInfo': 'dataTables_info',
    'sPaging': 'dataTables_paginate paging_',
    'sLength': 'dataTables_length',
    'sProcessing': 'dataTables_processing',
    'sSortAsc': 'sorting_asc',
    'sSortDesc': 'sorting_desc',
    'sSortable': 'sorting',
    'sSortableAsc': 'sorting_asc_disabled',
    'sSortableDesc': 'sorting_desc_disabled',
    'sSortableNone': 'sorting_disabled',
    'sSortColumn': 'sorting_',
    'sFilterInput': '',
    'sLengthSelect': '',
    'sScrollWrapper': 'dataTables_scroll',
    'sScrollHead': 'dataTables_scrollHead',
    'sScrollHeadInner': 'dataTables_scrollHeadInner',
    'sScrollBody': 'dataTables_scrollBody',
    'sScrollFoot': 'dataTables_scrollFoot',
    'sScrollFootInner': 'dataTables_scrollFootInner',
    'sHeaderTH': '',
    'sFooterTH': '',
    'sSortJUIAsc': '',
    'sSortJUIDesc': '',
    'sSortJUI': '',
    'sSortJUIAscAllowed': '',
    'sSortJUIDescAllowed': '',
    'sSortJUIWrapper': '',
    'sSortIcon': '',
    'sJUIHeader': '',
    'sJUIFooter': ''
  });
  (function () {
    // Reused strings for better compression. Closure compiler appears to have a
    // weird edge case where it is trying to expand strings rather than use the
    // variable version. This results in about 200 bytes being added, for very
    // little preference benefit since it this run on script load only.
    var _empty = '';
    _empty = '';
    var _stateDefault = _empty + 'ui-state-default';
    var _sortIcon = _empty + 'css_right ui-icon ui-icon-';
    var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';
    $.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
      'sPageButton': 'fg-button ui-button ' + _stateDefault,
      'sPageButtonActive': 'ui-state-disabled',
      'sPageButtonDisabled': 'ui-state-disabled',
      'sPaging': 'dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ' + 'ui-buttonset-multi paging_',
      'sSortAsc': _stateDefault + ' sorting_asc',
      'sSortDesc': _stateDefault + ' sorting_desc',
      'sSortable': _stateDefault + ' sorting',
      'sSortableAsc': _stateDefault + ' sorting_asc_disabled',
      'sSortableDesc': _stateDefault + ' sorting_desc_disabled',
      'sSortableNone': _stateDefault + ' sorting_disabled',
      'sSortJUIAsc': _sortIcon + 'triangle-1-n',
      'sSortJUIDesc': _sortIcon + 'triangle-1-s',
      'sSortJUI': _sortIcon + 'carat-2-n-s',
      'sSortJUIAscAllowed': _sortIcon + 'carat-1-n',
      'sSortJUIDescAllowed': _sortIcon + 'carat-1-s',
      'sSortJUIWrapper': 'DataTables_sort_wrapper',
      'sSortIcon': 'DataTables_sort_icon',
      'sScrollHead': 'dataTables_scrollHead ' + _stateDefault,
      'sScrollFoot': 'dataTables_scrollFoot ' + _stateDefault,
      'sHeaderTH': _stateDefault,
      'sFooterTH': _stateDefault,
      'sJUIHeader': _headerFooter + ' ui-corner-tl ui-corner-tr',
      'sJUIFooter': _headerFooter + ' ui-corner-bl ui-corner-br'
    });
  }());
  var extPagination = DataTable.ext.pager;
  function _numbers(page, pages) {
    var numbers = [], buttons = extPagination.numbers_length, half = Math.floor(buttons / 2), i = 1;
    if (pages <= buttons) {
      numbers = _range(0, pages);
    } else if (page <= half) {
      numbers = _range(0, buttons - 2);
      numbers.push('ellipsis');
      numbers.push(pages - 1);
    } else if (page >= pages - 1 - half) {
      numbers = _range(pages - (buttons - 2), pages);
      numbers.splice(0, 0, 'ellipsis');
      // no unshift in ie6
      numbers.splice(0, 0, 0);
    } else {
      numbers = _range(page - half + 2, page + half - 1);
      numbers.push('ellipsis');
      numbers.push(pages - 1);
      numbers.splice(0, 0, 'ellipsis');
      numbers.splice(0, 0, 0);
    }
    numbers.DT_el = 'span';
    return numbers;
  }
  $.extend(extPagination, {
    simple: function (page, pages) {
      return [
        'previous',
        'next'
      ];
    },
    full: function (page, pages) {
      return [
        'first',
        'previous',
        'next',
        'last'
      ];
    },
    numbers: function (page, pages) {
      return [_numbers(page, pages)];
    },
    simple_numbers: function (page, pages) {
      return [
        'previous',
        _numbers(page, pages),
        'next'
      ];
    },
    full_numbers: function (page, pages) {
      return [
        'first',
        'previous',
        _numbers(page, pages),
        'next',
        'last'
      ];
    },
    _numbers: _numbers,
    numbers_length: 7
  });
  $.extend(true, DataTable.ext.renderer, {
    pageButton: {
      _: function (settings, host, idx, buttons, page, pages) {
        var classes = settings.oClasses;
        var lang = settings.oLanguage.oPaginate;
        var aria = settings.oLanguage.oAria.paginate || {};
        var btnDisplay, btnClass, counter = 0;
        var attach = function (container, buttons) {
          var i, ien, node, button;
          var clickHandler = function (e) {
            _fnPageChange(settings, e.data.action, true);
          };
          for (i = 0, ien = buttons.length; i < ien; i++) {
            button = buttons[i];
            if ($.isArray(button)) {
              var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);
              attach(inner, button);
            } else {
              btnDisplay = null;
              btnClass = '';
              switch (button) {
              case 'ellipsis':
                container.append('<span class="ellipsis">&#x2026;</span>');
                break;
              case 'first':
                btnDisplay = lang.sFirst;
                btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                break;
              case 'previous':
                btnDisplay = lang.sPrevious;
                btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                break;
              case 'next':
                btnDisplay = lang.sNext;
                btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                break;
              case 'last':
                btnDisplay = lang.sLast;
                btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                break;
              default:
                btnDisplay = button + 1;
                btnClass = page === button ? classes.sPageButtonActive : '';
                break;
              }
              if (btnDisplay !== null) {
                node = $('<a>', {
                  'class': classes.sPageButton + ' ' + btnClass,
                  'aria-controls': settings.sTableId,
                  'aria-label': aria[button],
                  'data-dt-idx': counter,
                  'tabindex': settings.iTabIndex,
                  'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
                }).html(btnDisplay).appendTo(container);
                _fnBindAction(node, { action: button }, clickHandler);
                counter++;
              }
            }
          }
        };
        // IE9 throws an 'unknown error' if document.activeElement is used
        // inside an iframe or frame. Try / catch the error. Not good for
        // accessibility, but neither are frames.
        var activeEl;
        try {
          // Because this approach is destroying and recreating the paging
          // elements, focus is lost on the select button which is bad for
          // accessibility. So we want to restore focus once the draw has
          // completed
          activeEl = $(host).find(document.activeElement).data('dt-idx');
        } catch (e) {
        }
        attach($(host).empty(), buttons);
        if (activeEl) {
          $(host).find('[data-dt-idx=' + activeEl + ']').focus();
        }
      }
    }
  });
  // Built in type detection. See model.ext.aTypes for information about
  // what is required from this methods.
  $.extend(DataTable.ext.type.detect, [
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _isNumber(d, decimal) ? 'num' + decimal : null;
    },
    function (d, settings) {
      // V8 will remove any unknown characters at the start and end of the
      // expression, leading to false matches such as `$245.12` or `10%` being
      // a valid date. See forum thread 18941 for detail.
      if (d && !(d instanceof Date) && (!_re_date_start.test(d) || !_re_date_end.test(d))) {
        return null;
      }
      var parsed = Date.parse(d);
      return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;
    },
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
    },
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
    },
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
    },
    function (d, settings) {
      return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;
    }
  ]);
  // Filter formatting functions. See model.ext.ofnSearch for information about
  // what is required from these methods.
  // 
  // Note that additional search methods are added for the html numbers and
  // html formatted numbers by `_addNumericSort()` when we know what the decimal
  // place is
  $.extend(DataTable.ext.type.search, {
    html: function (data) {
      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, ' ').replace(_re_html, '') : '';
    },
    string: function (data) {
      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, ' ') : data;
    }
  });
  var __numericReplace = function (d, decimalPlace, re1, re2) {
    if (d !== 0 && (!d || d === '-')) {
      return -Infinity;
    }
    // If a decimal place other than `.` is used, it needs to be given to the
    // function so we can detect it and replace with a `.` which is the only
    // decimal place Javascript recognises - it is not locale aware.
    if (decimalPlace) {
      d = _numToDecimal(d, decimalPlace);
    }
    if (d.replace) {
      if (re1) {
        d = d.replace(re1, '');
      }
      if (re2) {
        d = d.replace(re2, '');
      }
    }
    return d * 1;
  };
  // Add the numeric 'deformatting' functions for sorting and search. This is done
  // in a function to provide an easy ability for the language options to add
  // additional methods if a non-period decimal place is used.
  function _addNumericSort(decimalPlace) {
    $.each({
      'num': function (d) {
        return __numericReplace(d, decimalPlace);
      },
      'num-fmt': function (d) {
        return __numericReplace(d, decimalPlace, _re_formatted_numeric);
      },
      'html-num': function (d) {
        return __numericReplace(d, decimalPlace, _re_html);
      },
      'html-num-fmt': function (d) {
        return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
      }
    }, function (key, fn) {
      // Add the ordering method
      _ext.type.order[key + decimalPlace + '-pre'] = fn;
      // For HTML types add a search formatter that will strip the HTML
      if (key.match(/^html\-/)) {
        _ext.type.search[key + decimalPlace] = _ext.type.search.html;
      }
    });
  }
  // Default sort methods
  $.extend(_ext.type.order, {
    'date-pre': function (d) {
      return Date.parse(d) || 0;
    },
    'html-pre': function (a) {
      return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, '').toLowerCase() : a + '';
    },
    'string-pre': function (a) {
      // This is a little complex, but faster than always calling toString,
      // http://jsperf.com/tostring-v-check
      return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();
    },
    'string-asc': function (x, y) {
      return x < y ? -1 : x > y ? 1 : 0;
    },
    'string-desc': function (x, y) {
      return x < y ? 1 : x > y ? -1 : 0;
    }
  });
  // Numeric sorting types - order doesn't matter here
  _addNumericSort('');
  $.extend(true, DataTable.ext.renderer, {
    header: {
      _: function (settings, cell, column, classes) {
        // No additional mark-up required
        // Attach a sort listener to update on sort - note that using the
        // `DT` namespace will allow the event to be removed automatically
        // on destroy, while the `dt` namespaced event is the one we are
        // listening for
        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
          if (settings !== ctx) {
            // need to check this this is the host
            return;  // table, not a nested one
          }
          var colIdx = column.idx;
          cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
        });
      },
      jqueryui: function (settings, cell, column, classes) {
        $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell);
        // Attach a sort listener to update on sort
        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
          if (settings !== ctx) {
            return;
          }
          var colIdx = column.idx;
          cell.removeClass(classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
          cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + ' ' + classes.sSortJUIDesc + ' ' + classes.sSortJUI + ' ' + classes.sSortJUIAscAllowed + ' ' + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);
        });
      }
    }
  });
  /*
	 * Public helper functions. These aren't used internally by DataTables, or
	 * called by any of the options passed into DataTables, but they can be used
	 * externally by developers working with DataTables. They are helper functions
	 * to make working with DataTables a little bit easier.
	 */
  var __htmlEscapeEntities = function (d) {
    return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : d;
  };
  /**
	 * Helpers for `columns.render`.
	 *
	 * The options defined here can be used with the `columns.render` initialisation
	 * option to provide a display renderer. The following functions are defined:
	 *
	 * * `number` - Will format numeric data (defined by `columns.data`) for
	 *   display, retaining the original unformatted data for sorting and filtering.
	 *   It takes 5 parameters:
	 *   * `string` - Thousands grouping separator
	 *   * `string` - Decimal point indicator
	 *   * `integer` - Number of decimal points to show
	 *   * `string` (optional) - Prefix.
	 *   * `string` (optional) - Postfix (/suffix).
	 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
	 *   parameters.
	 *
	 * @example
	 *   // Column definition using the number renderer
	 *   {
	 *     data: "salary",
	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	 *   }
	 *
	 * @namespace
	 */
  DataTable.render = {
    number: function (thousands, decimal, precision, prefix, postfix) {
      return {
        display: function (d) {
          if (typeof d !== 'number' && typeof d !== 'string') {
            return d;
          }
          var negative = d < 0 ? '-' : '';
          var flo = parseFloat(d);
          // If NaN then there isn't much formatting that we can do - just
          // return immediately, escaping any HTML (this was supposed to
          // be a number after all)
          if (isNaN(flo)) {
            return __htmlEscapeEntities(d);
          }
          d = Math.abs(flo);
          var intPart = parseInt(d, 10);
          var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';
          return negative + (prefix || '') + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart + (postfix || '');
        }
      };
    },
    text: function () {
      return { display: __htmlEscapeEntities };
    }
  };
  /*
	 * This is really a good bit rubbish this method of exposing the internal methods
	 * publicly... - To be fixed in 2.0 using methods on the prototype
	 */
  /**
	 * Create a wrapper function for exporting an internal functions to an external API.
	 *  @param {string} fn API function name
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#internal
	 */
  function _fnExternApiFunc(fn) {
    return function () {
      var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
      return DataTable.ext.internal[fn].apply(this, args);
    };
  }
  /**
	 * Reference to internal functions for use by plug-in developers. Note that
	 * these methods are references to internal functions and are considered to be
	 * private. If you use these methods, be aware that they are liable to change
	 * between versions.
	 *  @namespace
	 */
  $.extend(DataTable.ext.internal, {
    _fnExternApiFunc: _fnExternApiFunc,
    _fnBuildAjax: _fnBuildAjax,
    _fnAjaxUpdate: _fnAjaxUpdate,
    _fnAjaxParameters: _fnAjaxParameters,
    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
    _fnAjaxDataSrc: _fnAjaxDataSrc,
    _fnAddColumn: _fnAddColumn,
    _fnColumnOptions: _fnColumnOptions,
    _fnAdjustColumnSizing: _fnAdjustColumnSizing,
    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
    _fnColumnIndexToVisible: _fnColumnIndexToVisible,
    _fnVisbleColumns: _fnVisbleColumns,
    _fnGetColumns: _fnGetColumns,
    _fnColumnTypes: _fnColumnTypes,
    _fnApplyColumnDefs: _fnApplyColumnDefs,
    _fnHungarianMap: _fnHungarianMap,
    _fnCamelToHungarian: _fnCamelToHungarian,
    _fnLanguageCompat: _fnLanguageCompat,
    _fnBrowserDetect: _fnBrowserDetect,
    _fnAddData: _fnAddData,
    _fnAddTr: _fnAddTr,
    _fnNodeToDataIndex: _fnNodeToDataIndex,
    _fnNodeToColumnIndex: _fnNodeToColumnIndex,
    _fnGetCellData: _fnGetCellData,
    _fnSetCellData: _fnSetCellData,
    _fnSplitObjNotation: _fnSplitObjNotation,
    _fnGetObjectDataFn: _fnGetObjectDataFn,
    _fnSetObjectDataFn: _fnSetObjectDataFn,
    _fnGetDataMaster: _fnGetDataMaster,
    _fnClearTable: _fnClearTable,
    _fnDeleteIndex: _fnDeleteIndex,
    _fnInvalidate: _fnInvalidate,
    _fnGetRowElements: _fnGetRowElements,
    _fnCreateTr: _fnCreateTr,
    _fnBuildHead: _fnBuildHead,
    _fnDrawHead: _fnDrawHead,
    _fnDraw: _fnDraw,
    _fnReDraw: _fnReDraw,
    _fnAddOptionsHtml: _fnAddOptionsHtml,
    _fnDetectHeader: _fnDetectHeader,
    _fnGetUniqueThs: _fnGetUniqueThs,
    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
    _fnFilterComplete: _fnFilterComplete,
    _fnFilterCustom: _fnFilterCustom,
    _fnFilterColumn: _fnFilterColumn,
    _fnFilter: _fnFilter,
    _fnFilterCreateSearch: _fnFilterCreateSearch,
    _fnEscapeRegex: _fnEscapeRegex,
    _fnFilterData: _fnFilterData,
    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
    _fnUpdateInfo: _fnUpdateInfo,
    _fnInfoMacros: _fnInfoMacros,
    _fnInitialise: _fnInitialise,
    _fnInitComplete: _fnInitComplete,
    _fnLengthChange: _fnLengthChange,
    _fnFeatureHtmlLength: _fnFeatureHtmlLength,
    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
    _fnPageChange: _fnPageChange,
    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
    _fnProcessingDisplay: _fnProcessingDisplay,
    _fnFeatureHtmlTable: _fnFeatureHtmlTable,
    _fnScrollDraw: _fnScrollDraw,
    _fnApplyToChildren: _fnApplyToChildren,
    _fnCalculateColumnWidths: _fnCalculateColumnWidths,
    _fnThrottle: _fnThrottle,
    _fnConvertToWidth: _fnConvertToWidth,
    _fnGetWidestNode: _fnGetWidestNode,
    _fnGetMaxLenString: _fnGetMaxLenString,
    _fnStringToCss: _fnStringToCss,
    _fnSortFlatten: _fnSortFlatten,
    _fnSort: _fnSort,
    _fnSortAria: _fnSortAria,
    _fnSortListener: _fnSortListener,
    _fnSortAttachListener: _fnSortAttachListener,
    _fnSortingClasses: _fnSortingClasses,
    _fnSortData: _fnSortData,
    _fnSaveState: _fnSaveState,
    _fnLoadState: _fnLoadState,
    _fnSettingsFromNode: _fnSettingsFromNode,
    _fnLog: _fnLog,
    _fnMap: _fnMap,
    _fnBindAction: _fnBindAction,
    _fnCallbackReg: _fnCallbackReg,
    _fnCallbackFire: _fnCallbackFire,
    _fnLengthOverflow: _fnLengthOverflow,
    _fnRenderer: _fnRenderer,
    _fnDataSource: _fnDataSource,
    _fnRowAttributes: _fnRowAttributes,
    _fnCalculateEnd: function () {
    }  // Used by a lot of plug-ins, but redundant
       // in 1.10, so this dead-end function is
       // added to prevent errors
  });
  // jQuery access
  $.fn.dataTable = DataTable;
  // Provide access to the host jQuery object (circular reference)
  DataTable.$ = $;
  // Legacy aliases
  $.fn.dataTableSettings = DataTable.settings;
  $.fn.dataTableExt = DataTable.ext;
  // With a capital `D` we return a DataTables API instance rather than a
  // jQuery object
  $.fn.DataTable = function (opts) {
    return $(this).dataTable(opts).api();
  };
  // All properties that are available to $.fn.dataTable should also be
  // available on $.fn.DataTable
  $.each(DataTable, function (prop, val) {
    $.fn.DataTable[prop] = val;
  });
  // Information about events fired by DataTables - for documentation.
  /**
	 * Draw event, fired whenever the table is redrawn on the page, at the same
	 * point as fnDrawCallback. This may be useful for binding events or
	 * performing calculations when the table is altered at all.
	 *  @name DataTable#draw.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
  /**
	 * Search event, fired when the searching applied to the table (using the
	 * built-in global search, or column filters) is altered.
	 *  @name DataTable#search.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
  /**
	 * Page change event, fired when the paging of the table is altered.
	 *  @name DataTable#page.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
  /**
	 * Order event, fired when the ordering applied to the table is altered.
	 *  @name DataTable#order.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
  /**
	 * DataTables initialisation complete event, fired when the table is fully
	 * drawn, including Ajax data loaded, if Ajax data is required.
	 *  @name DataTable#init.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The JSON object request from the server - only
	 *    present if client-side Ajax sourced data is used</li></ol>
	 */
  /**
	 * State save event, fired when the table has changed state a new state save
	 * is required. This event allows modification of the state saving object
	 * prior to actually doing the save, including addition or other state
	 * properties (for plug-ins) or modification of a DataTables core property.
	 *  @name DataTable#stateSaveParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The state information to be saved
	 */
  /**
	 * State load event, fired when the table is loading state from the stored
	 * data, but prior to the settings object being modified by the saved state
	 * - allowing modification of the saved state is required or loading of
	 * state for a plug-in.
	 *  @name DataTable#stateLoadParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */
  /**
	 * State loaded event, fired when state has been loaded from stored data and
	 * the settings object has been modified by the loaded data.
	 *  @name DataTable#stateLoaded.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */
  /**
	 * Processing event, fired when DataTables is doing some kind of processing
	 * (be it, order, searcg or anything else). It can be used to indicate to
	 * the end user that there is something happening, or that something has
	 * finished.
	 *  @name DataTable#processing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	 */
  /**
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	 * request to made to the server for new data. This event is called before
	 * DataTables processed the returned data, so it can also be used to pre-
	 * process the data returned from the server, if needed.
	 *
	 * Note that this trigger is called in `fnServerData`, if you override
	 * `fnServerData` and which to use this event, you need to trigger it in you
	 * success function.
	 *  @name DataTable#xhr.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {object} json JSON returned from the server
	 *
	 *  @example
	 *     // Use a custom property returned from the server in another DOM element
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       $('#status').html( json.status );
	 *     } );
	 *
	 *  @example
	 *     // Pre-process the data returned from the server
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	 *       }
	 *       // Note no return - manipulate the data directly in the JSON object.
	 *     } );
	 */
  /**
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	 * or passing the bDestroy:true parameter in the initialisation object. This
	 * can be used to remove bound events, added DOM nodes, etc.
	 *  @name DataTable#destroy.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
  /**
	 * Page length change event, fired when number of records to show on each
	 * page (the length) is changed.
	 *  @name DataTable#length.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {integer} len New length
	 */
  /**
	 * Column sizing has changed.
	 *  @name DataTable#column-sizing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
  /**
	 * Column visibility has changed.
	 *  @name DataTable#column-visibility.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {int} column Column index
	 *  @param {bool} vis `false` if column now hidden, or `true` if visible
	 */
  return $.fn.dataTable;
}));
/*! DataTables Bootstrap 3 integration
 * ©2011-2015 SpryMedia Ltd - datatables.net/license
 */
/**
 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
 * DataTables 1.10 or newer.
 *
 * This file sets the defaults and adds options to DataTables to style its
 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
 * for further information.
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([
      'jquery',
      'datatables.net'
    ], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        root = window;
      }
      if (!$ || !$.fn.dataTable) {
        // Require DataTables, which attaches to jQuery, including
        // jQuery if needed and have a $ property so we can access the
        // jQuery object that is used
        $ = require('datatables.net')(root, $).$;
      }
      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
}(function ($, window, document, undefined) {
  'use strict';
  var DataTable = $.fn.dataTable;
  /* Set the defaults for DataTables initialisation */
  $.extend(true, DataTable.defaults, {
    dom: '<\'row\'<\'col-sm-6\'l><\'col-sm-6\'f>>' + '<\'row\'<\'col-sm-12\'tr>>' + '<\'row\'<\'col-sm-5\'i><\'col-sm-7\'p>>',
    renderer: 'bootstrap'
  });
  /* Default class modification */
  $.extend(DataTable.ext.classes, {
    sWrapper: 'dataTables_wrapper form-inline dt-bootstrap',
    sFilterInput: 'form-control input-sm',
    sLengthSelect: 'form-control input-sm',
    sProcessing: 'dataTables_processing panel panel-default'
  });
  /* Bootstrap paging button renderer */
  DataTable.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {
    var api = new DataTable.Api(settings);
    var classes = settings.oClasses;
    var lang = settings.oLanguage.oPaginate;
    var aria = settings.oLanguage.oAria.paginate || {};
    var btnDisplay, btnClass, counter = 0;
    var attach = function (container, buttons) {
      var i, ien, node, button;
      var clickHandler = function (e) {
        e.preventDefault();
        if (!$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action) {
          api.page(e.data.action).draw('page');
        }
      };
      for (i = 0, ien = buttons.length; i < ien; i++) {
        button = buttons[i];
        if ($.isArray(button)) {
          attach(container, button);
        } else {
          btnDisplay = '';
          btnClass = '';
          switch (button) {
          case 'ellipsis':
            btnDisplay = '&#x2026;';
            btnClass = 'disabled';
            break;
          case 'first':
            btnDisplay = lang.sFirst;
            btnClass = button + (page > 0 ? '' : ' disabled');
            break;
          case 'previous':
            btnDisplay = lang.sPrevious;
            btnClass = button + (page > 0 ? '' : ' disabled');
            break;
          case 'next':
            btnDisplay = lang.sNext;
            btnClass = button + (page < pages - 1 ? '' : ' disabled');
            break;
          case 'last':
            btnDisplay = lang.sLast;
            btnClass = button + (page < pages - 1 ? '' : ' disabled');
            break;
          default:
            btnDisplay = button + 1;
            btnClass = page === button ? 'active' : '';
            break;
          }
          if (btnDisplay) {
            node = $('<li>', {
              'class': classes.sPageButton + ' ' + btnClass,
              'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
            }).append($('<a>', {
              'href': '#',
              'aria-controls': settings.sTableId,
              'aria-label': aria[button],
              'data-dt-idx': counter,
              'tabindex': settings.iTabIndex
            }).html(btnDisplay)).appendTo(container);
            settings.oApi._fnBindAction(node, { action: button }, clickHandler);
            counter++;
          }
        }
      }
    };
    // IE9 throws an 'unknown error' if document.activeElement is used
    // inside an iframe or frame. 
    var activeEl;
    try {
      // Because this approach is destroying and recreating the paging
      // elements, focus is lost on the select button which is bad for
      // accessibility. So we want to restore focus once the draw has
      // completed
      activeEl = $(host).find(document.activeElement).data('dt-idx');
    } catch (e) {
    }
    attach($(host).empty().html('<ul class="pagination"/>').children('ul'), buttons);
    if (activeEl) {
      $(host).find('[data-dt-idx=' + activeEl + ']').focus();
    }
  };
  return DataTable;
}));
/*! FixedHeader 3.1.2
 * ©2009-2016 SpryMedia Ltd - datatables.net/license
 */
/**
 * @summary     FixedHeader
 * @description Fix a table's header or footer, so it is always visible while
 *              scrolling
 * @version     3.1.2
 * @file        dataTables.fixedHeader.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2009-2016 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([
      'jquery',
      'datatables.net'
    ], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        root = window;
      }
      if (!$ || !$.fn.dataTable) {
        $ = require('datatables.net')(root, $).$;
      }
      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
}(function ($, window, document, undefined) {
  'use strict';
  var DataTable = $.fn.dataTable;
  var _instCounter = 0;
  var FixedHeader = function (dt, config) {
    // Sanity check - you just know it will happen
    if (!(this instanceof FixedHeader)) {
      throw 'FixedHeader must be initialised with the \'new\' keyword.';
    }
    // Allow a boolean true for defaults
    if (config === true) {
      config = {};
    }
    dt = new DataTable.Api(dt);
    this.c = $.extend(true, {}, FixedHeader.defaults, config);
    this.s = {
      dt: dt,
      position: {
        theadTop: 0,
        tbodyTop: 0,
        tfootTop: 0,
        tfootBottom: 0,
        width: 0,
        left: 0,
        tfootHeight: 0,
        theadHeight: 0,
        windowHeight: $(window).height(),
        visible: true
      },
      headerMode: null,
      footerMode: null,
      autoWidth: dt.settings()[0].oFeatures.bAutoWidth,
      namespace: '.dtfc' + _instCounter++,
      scrollLeft: {
        header: -1,
        footer: -1
      },
      enable: true
    };
    this.dom = {
      floatingHeader: null,
      thead: $(dt.table().header()),
      tbody: $(dt.table().body()),
      tfoot: $(dt.table().footer()),
      header: {
        host: null,
        floating: null,
        placeholder: null
      },
      footer: {
        host: null,
        floating: null,
        placeholder: null
      }
    };
    this.dom.header.host = this.dom.thead.parent();
    this.dom.footer.host = this.dom.tfoot.parent();
    var dtSettings = dt.settings()[0];
    if (dtSettings._fixedHeader) {
      throw 'FixedHeader already initialised on table ' + dtSettings.nTable.id;
    }
    dtSettings._fixedHeader = this;
    this._constructor();
  };
  /*
 * Variable: FixedHeader
 * Purpose:  Prototype for FixedHeader
 * Scope:    global
 */
  $.extend(FixedHeader.prototype, {
    enable: function (enable) {
      this.s.enable = enable;
      if (this.c.header) {
        this._modeChange('in-place', 'header', true);
      }
      if (this.c.footer && this.dom.tfoot.length) {
        this._modeChange('in-place', 'footer', true);
      }
      this.update();
    },
    headerOffset: function (offset) {
      if (offset !== undefined) {
        this.c.headerOffset = offset;
        this.update();
      }
      return this.c.headerOffset;
    },
    footerOffset: function (offset) {
      if (offset !== undefined) {
        this.c.footerOffset = offset;
        this.update();
      }
      return this.c.footerOffset;
    },
    update: function () {
      this._positions();
      this._scroll(true);
    },
    _constructor: function () {
      var that = this;
      var dt = this.s.dt;
      $(window).on('scroll' + this.s.namespace, function () {
        that._scroll();
      }).on('resize' + this.s.namespace, function () {
        that.s.position.windowHeight = $(window).height();
        that.update();
      });
      var autoHeader = $('.fh-fixedHeader');
      if (!this.c.headerOffset && autoHeader.length) {
        this.c.headerOffset = autoHeader.outerHeight();
      }
      var autoFooter = $('.fh-fixedFooter');
      if (!this.c.footerOffset && autoFooter.length) {
        this.c.footerOffset = autoFooter.outerHeight();
      }
      dt.on('column-reorder.dt.dtfc column-visibility.dt.dtfc draw.dt.dtfc column-sizing.dt.dtfc', function () {
        that.update();
      });
      dt.on('destroy.dtfc', function () {
        dt.off('.dtfc');
        $(window).off(that.s.namespace);
      });
      this._positions();
      this._scroll();
    },
    _clone: function (item, force) {
      var dt = this.s.dt;
      var itemDom = this.dom[item];
      var itemElement = item === 'header' ? this.dom.thead : this.dom.tfoot;
      if (!force && itemDom.floating) {
        // existing floating element - reuse it
        itemDom.floating.removeClass('fixedHeader-floating fixedHeader-locked');
      } else {
        if (itemDom.floating) {
          itemDom.placeholder.remove();
          this._unsize(item);
          itemDom.floating.children().detach();
          itemDom.floating.remove();
        }
        itemDom.floating = $(dt.table().node().cloneNode(false)).css('table-layout', 'fixed').removeAttr('id').append(itemElement).appendTo('body');
        // Insert a fake thead/tfoot into the DataTable to stop it jumping around
        itemDom.placeholder = itemElement.clone(false);
        itemDom.host.prepend(itemDom.placeholder);
        // Clone widths
        this._matchWidths(itemDom.placeholder, itemDom.floating);
      }
    },
    _matchWidths: function (from, to) {
      var get = function (name) {
        return $(name, from).map(function () {
          return $(this).width();
        }).toArray();
      };
      var set = function (name, toWidths) {
        $(name, to).each(function (i) {
          $(this).css({
            width: toWidths[i],
            minWidth: toWidths[i]
          });
        });
      };
      var thWidths = get('th');
      var tdWidths = get('td');
      set('th', thWidths);
      set('td', tdWidths);
    },
    _unsize: function (item) {
      var el = this.dom[item].floating;
      if (el && (item === 'footer' || item === 'header' && !this.s.autoWidth)) {
        $('th, td', el).css({
          width: '',
          minWidth: ''
        });
      } else if (el && item === 'header') {
        $('th, td', el).css('min-width', '');
      }
    },
    _horizontal: function (item, scrollLeft) {
      var itemDom = this.dom[item];
      var position = this.s.position;
      var lastScrollLeft = this.s.scrollLeft;
      if (itemDom.floating && lastScrollLeft[item] !== scrollLeft) {
        itemDom.floating.css('left', position.left - scrollLeft);
        lastScrollLeft[item] = scrollLeft;
      }
    },
    _modeChange: function (mode, item, forceChange) {
      var dt = this.s.dt;
      var itemDom = this.dom[item];
      var position = this.s.position;
      // Record focus. Browser's will cause input elements to loose focus if
      // they are inserted else where in the doc
      var tablePart = this.dom[item === 'footer' ? 'tfoot' : 'thead'];
      var focus = $.contains(tablePart[0], document.activeElement) ? document.activeElement : null;
      if (mode === 'in-place') {
        // Insert the header back into the table's real header
        if (itemDom.placeholder) {
          itemDom.placeholder.remove();
          itemDom.placeholder = null;
        }
        this._unsize(item);
        if (item === 'header') {
          itemDom.host.prepend(this.dom.thead);
        } else {
          itemDom.host.append(this.dom.tfoot);
        }
        if (itemDom.floating) {
          itemDom.floating.remove();
          itemDom.floating = null;
        }
      } else if (mode === 'in') {
        // Remove the header from the read header and insert into a fixed
        // positioned floating table clone
        this._clone(item, forceChange);
        itemDom.floating.addClass('fixedHeader-floating').css(item === 'header' ? 'top' : 'bottom', this.c[item + 'Offset']).css('left', position.left + 'px').css('width', position.width + 'px');
        if (item === 'footer') {
          itemDom.floating.css('top', '');
        }
      } else if (mode === 'below') {
        // only used for the header
        // Fix the position of the floating header at base of the table body
        this._clone(item, forceChange);
        itemDom.floating.addClass('fixedHeader-locked').css('top', position.tfootTop - position.theadHeight).css('left', position.left + 'px').css('width', position.width + 'px');
      } else if (mode === 'above') {
        // only used for the footer
        // Fix the position of the floating footer at top of the table body
        this._clone(item, forceChange);
        itemDom.floating.addClass('fixedHeader-locked').css('top', position.tbodyTop).css('left', position.left + 'px').css('width', position.width + 'px');
      }
      // Restore focus if it was lost
      if (focus && focus !== document.activeElement) {
        focus.focus();
      }
      this.s.scrollLeft.header = -1;
      this.s.scrollLeft.footer = -1;
      this.s[item + 'Mode'] = mode;
    },
    _positions: function () {
      var dt = this.s.dt;
      var table = dt.table();
      var position = this.s.position;
      var dom = this.dom;
      var tableNode = $(table.node());
      // Need to use the header and footer that are in the main table,
      // regardless of if they are clones, since they hold the positions we
      // want to measure from
      var thead = tableNode.children('thead');
      var tfoot = tableNode.children('tfoot');
      var tbody = dom.tbody;
      position.visible = tableNode.is(':visible');
      position.width = tableNode.outerWidth();
      position.left = tableNode.offset().left;
      position.theadTop = thead.offset().top;
      position.tbodyTop = tbody.offset().top;
      position.theadHeight = position.tbodyTop - position.theadTop;
      if (tfoot.length) {
        position.tfootTop = tfoot.offset().top;
        position.tfootBottom = position.tfootTop + tfoot.outerHeight();
        position.tfootHeight = position.tfootBottom - position.tfootTop;
      } else {
        position.tfootTop = position.tbodyTop + tbody.outerHeight();
        position.tfootBottom = position.tfootTop;
        position.tfootHeight = position.tfootTop;
      }
    },
    _scroll: function (forceChange) {
      var windowTop = $(document).scrollTop();
      var windowLeft = $(document).scrollLeft();
      var position = this.s.position;
      var headerMode, footerMode;
      if (!this.s.enable) {
        return;
      }
      if (this.c.header) {
        if (!position.visible || windowTop <= position.theadTop - this.c.headerOffset) {
          headerMode = 'in-place';
        } else if (windowTop <= position.tfootTop - position.theadHeight - this.c.headerOffset) {
          headerMode = 'in';
        } else {
          headerMode = 'below';
        }
        if (forceChange || headerMode !== this.s.headerMode) {
          this._modeChange(headerMode, 'header', forceChange);
        }
        this._horizontal('header', windowLeft);
      }
      if (this.c.footer && this.dom.tfoot.length) {
        if (!position.visible || windowTop + position.windowHeight >= position.tfootBottom + this.c.footerOffset) {
          footerMode = 'in-place';
        } else if (position.windowHeight + windowTop > position.tbodyTop + position.tfootHeight + this.c.footerOffset) {
          footerMode = 'in';
        } else {
          footerMode = 'above';
        }
        if (forceChange || footerMode !== this.s.footerMode) {
          this._modeChange(footerMode, 'footer', forceChange);
        }
        this._horizontal('footer', windowLeft);
      }
    }
  });
  /**
 * Version
 * @type {String}
 * @static
 */
  FixedHeader.version = '3.1.2';
  /**
 * Defaults
 * @type {Object}
 * @static
 */
  FixedHeader.defaults = {
    header: true,
    footer: false,
    headerOffset: 0,
    footerOffset: 0
  };
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables interfaces
 */
  // Attach for constructor access
  $.fn.dataTable.FixedHeader = FixedHeader;
  $.fn.DataTable.FixedHeader = FixedHeader;
  // DataTables creation - check if the FixedHeader option has been defined on the
  // table and if so, initialise
  $(document).on('init.dt.dtfh', function (e, settings, json) {
    if (e.namespace !== 'dt') {
      return;
    }
    var init = settings.oInit.fixedHeader;
    var defaults = DataTable.defaults.fixedHeader;
    if ((init || defaults) && !settings._fixedHeader) {
      var opts = $.extend({}, defaults, init);
      if (init !== false) {
        new FixedHeader(settings, opts);
      }
    }
  });
  // DataTables API methods
  DataTable.Api.register('fixedHeader()', function () {
  });
  DataTable.Api.register('fixedHeader.adjust()', function () {
    return this.iterator('table', function (ctx) {
      var fh = ctx._fixedHeader;
      if (fh) {
        fh.update();
      }
    });
  });
  DataTable.Api.register('fixedHeader.enable()', function (flag) {
    return this.iterator('table', function (ctx) {
      var fh = ctx._fixedHeader;
      if (fh) {
        fh.enable(flag !== undefined ? flag : true);
      }
    });
  });
  DataTable.Api.register('fixedHeader.disable()', function () {
    return this.iterator('table', function (ctx) {
      var fh = ctx._fixedHeader;
      if (fh) {
        fh.enable(false);
      }
    });
  });
  $.each([
    'header',
    'footer'
  ], function (i, el) {
    DataTable.Api.register('fixedHeader.' + el + 'Offset()', function (offset) {
      var ctx = this.context;
      if (offset === undefined) {
        return ctx.length && ctx[0]._fixedHeader ? ctx[0]._fixedHeader[el + 'Offset']() : undefined;
      }
      return this.iterator('table', function (ctx) {
        var fh = ctx._fixedHeader;
        if (fh) {
          fh[el + 'Offset'](offset);
        }
      });
    });
  });
  return FixedHeader;
}));
/*! FixedColumns 3.2.2
 * ©2010-2016 SpryMedia Ltd - datatables.net/license
 */
/**
 * @summary     FixedColumns
 * @description Freeze columns in place on a scrolling DataTable
 * @version     3.2.2
 * @file        dataTables.fixedColumns.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2010-2016 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([
      'jquery',
      'datatables.net'
    ], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        root = window;
      }
      if (!$ || !$.fn.dataTable) {
        $ = require('datatables.net')(root, $).$;
      }
      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
}(function ($, window, document, undefined) {
  'use strict';
  var DataTable = $.fn.dataTable;
  var _firefoxScroll;
  /**
 * When making use of DataTables' x-axis scrolling feature, you may wish to
 * fix the left most column in place. This plug-in for DataTables provides
 * exactly this option (note for non-scrolling tables, please use the
 * FixedHeader plug-in, which can fix headers, footers and columns). Key
 * features include:
 *
 * * Freezes the left or right most columns to the side of the table
 * * Option to freeze two or more columns
 * * Full integration with DataTables' scrolling options
 * * Speed - FixedColumns is fast in its operation
 *
 *  @class
 *  @constructor
 *  @global
 *  @param {object} dt DataTables instance. With DataTables 1.10 this can also
 *    be a jQuery collection, a jQuery selector, DataTables API instance or
 *    settings object.
 *  @param {object} [init={}] Configuration object for FixedColumns. Options are
 *    defined by {@link FixedColumns.defaults}
 *
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.8.0+
 *
 *  @example
 *      var table = $('#example').dataTable( {
 *        "scrollX": "100%"
 *      } );
 *      new $.fn.dataTable.fixedColumns( table );
 */
  var FixedColumns = function (dt, init) {
    var that = this;
    /* Sanity check - you just know it will happen */
    if (!(this instanceof FixedColumns)) {
      alert('FixedColumns warning: FixedColumns must be initialised with the \'new\' keyword.');
      return;
    }
    if (init === undefined || init === true) {
      init = {};
    }
    // Use the DataTables Hungarian notation mapping method, if it exists to
    // provide forwards compatibility for camel case variables
    var camelToHungarian = $.fn.dataTable.camelToHungarian;
    if (camelToHungarian) {
      camelToHungarian(FixedColumns.defaults, FixedColumns.defaults, true);
      camelToHungarian(FixedColumns.defaults, init);
    }
    // v1.10 allows the settings object to be got form a number of sources
    var dtSettings = new $.fn.dataTable.Api(dt).settings()[0];
    /**
	 * Settings object which contains customisable information for FixedColumns instance
	 * @namespace
	 * @extends FixedColumns.defaults
	 * @private
	 */
    this.s = {
      'dt': dtSettings,
      'iTableColumns': dtSettings.aoColumns.length,
      'aiOuterWidths': [],
      'aiInnerWidths': [],
      rtl: $(dtSettings.nTable).css('direction') === 'rtl'
    };
    /**
	 * DOM elements used by the class instance
	 * @namespace
	 * @private
	 *
	 */
    this.dom = {
      'scroller': null,
      'header': null,
      'body': null,
      'footer': null,
      'grid': {
        'wrapper': null,
        'dt': null,
        'left': {
          'wrapper': null,
          'head': null,
          'body': null,
          'foot': null
        },
        'right': {
          'wrapper': null,
          'head': null,
          'body': null,
          'foot': null
        }
      },
      'clone': {
        'left': {
          'header': null,
          'body': null,
          'footer': null
        },
        'right': {
          'header': null,
          'body': null,
          'footer': null
        }
      }
    };
    if (dtSettings._oFixedColumns) {
      throw 'FixedColumns already initialised on this table';
    }
    /* Attach the instance to the DataTables instance so it can be accessed easily */
    dtSettings._oFixedColumns = this;
    /* Let's do it */
    if (!dtSettings._bInitComplete) {
      dtSettings.oApi._fnCallbackReg(dtSettings, 'aoInitComplete', function () {
        that._fnConstruct(init);
      }, 'FixedColumns');
    } else {
      this._fnConstruct(init);
    }
  };
  $.extend(FixedColumns.prototype, {
    'fnUpdate': function () {
      this._fnDraw(true);
    },
    'fnRedrawLayout': function () {
      this._fnColCalc();
      this._fnGridLayout();
      this.fnUpdate();
    },
    'fnRecalculateHeight': function (nTr) {
      delete nTr._DTTC_iHeight;
      nTr.style.height = 'auto';
    },
    'fnSetRowHeight': function (nTarget, iHeight) {
      nTarget.style.height = iHeight + 'px';
    },
    'fnGetPosition': function (node) {
      var idx;
      var inst = this.s.dt.oInstance;
      if (!$(node).parents('.DTFC_Cloned').length) {
        // Not in a cloned table
        return inst.fnGetPosition(node);
      } else {
        // Its in the cloned table, so need to look up position
        if (node.nodeName.toLowerCase() === 'tr') {
          idx = $(node).index();
          return inst.fnGetPosition($('tr', this.s.dt.nTBody)[idx]);
        } else {
          var colIdx = $(node).index();
          idx = $(node.parentNode).index();
          var row = inst.fnGetPosition($('tr', this.s.dt.nTBody)[idx]);
          return [
            row,
            colIdx,
            inst.oApi._fnVisibleToColumnIndex(this.s.dt, colIdx)
          ];
        }
      }
    },
    '_fnConstruct': function (oInit) {
      var i, iLen, iWidth, that = this;
      /* Sanity checking */
      if (typeof this.s.dt.oInstance.fnVersionCheck != 'function' || this.s.dt.oInstance.fnVersionCheck('1.8.0') !== true) {
        alert('FixedColumns ' + FixedColumns.VERSION + ' required DataTables 1.8.0 or later. ' + 'Please upgrade your DataTables installation');
        return;
      }
      if (this.s.dt.oScroll.sX === '') {
        this.s.dt.oInstance.oApi._fnLog(this.s.dt, 1, 'FixedColumns is not needed (no ' + 'x-scrolling in DataTables enabled), so no action will be taken. Use \'FixedHeader\' for ' + 'column fixing when scrolling is not enabled');
        return;
      }
      /* Apply the settings from the user / defaults */
      this.s = $.extend(true, this.s, FixedColumns.defaults, oInit);
      /* Set up the DOM as we need it and cache nodes */
      var classes = this.s.dt.oClasses;
      this.dom.grid.dt = $(this.s.dt.nTable).parents('div.' + classes.sScrollWrapper)[0];
      this.dom.scroller = $('div.' + classes.sScrollBody, this.dom.grid.dt)[0];
      /* Set up the DOM that we want for the fixed column layout grid */
      this._fnColCalc();
      this._fnGridSetup();
      /* Event handlers */
      var mouseController;
      var mouseDown = false;
      // When the mouse is down (drag scroll) the mouse controller cannot
      // change, as the browser keeps the original element as the scrolling one
      $(this.s.dt.nTableWrapper).on('mousedown.DTFC', function () {
        mouseDown = true;
        $(document).one('mouseup', function () {
          mouseDown = false;
        });
      });
      // When the body is scrolled - scroll the left and right columns
      $(this.dom.scroller).on('mouseover.DTFC touchstart.DTFC', function () {
        if (!mouseDown) {
          mouseController = 'main';
        }
      }).on('scroll.DTFC', function (e) {
        if (!mouseController && e.originalEvent) {
          mouseController = 'main';
        }
        if (mouseController === 'main') {
          if (that.s.iLeftColumns > 0) {
            that.dom.grid.left.liner.scrollTop = that.dom.scroller.scrollTop;
          }
          if (that.s.iRightColumns > 0) {
            that.dom.grid.right.liner.scrollTop = that.dom.scroller.scrollTop;
          }
        }
      });
      var wheelType = 'onwheel' in document.createElement('div') ? 'wheel.DTFC' : 'mousewheel.DTFC';
      if (that.s.iLeftColumns > 0) {
        // When scrolling the left column, scroll the body and right column
        $(that.dom.grid.left.liner).on('mouseover.DTFC touchstart.DTFC', function () {
          if (!mouseDown) {
            mouseController = 'left';
          }
        }).on('scroll.DTFC', function (e) {
          if (!mouseController && e.originalEvent) {
            mouseController = 'left';
          }
          if (mouseController === 'left') {
            that.dom.scroller.scrollTop = that.dom.grid.left.liner.scrollTop;
            if (that.s.iRightColumns > 0) {
              that.dom.grid.right.liner.scrollTop = that.dom.grid.left.liner.scrollTop;
            }
          }
        }).on(wheelType, function (e) {
          // Pass horizontal scrolling through
          var xDelta = e.type === 'wheel' ? -e.originalEvent.deltaX : e.originalEvent.wheelDeltaX;
          that.dom.scroller.scrollLeft -= xDelta;
        });
      }
      if (that.s.iRightColumns > 0) {
        // When scrolling the right column, scroll the body and the left column
        $(that.dom.grid.right.liner).on('mouseover.DTFC touchstart.DTFC', function () {
          if (!mouseDown) {
            mouseController = 'right';
          }
        }).on('scroll.DTFC', function (e) {
          if (!mouseController && e.originalEvent) {
            mouseController = 'right';
          }
          if (mouseController === 'right') {
            that.dom.scroller.scrollTop = that.dom.grid.right.liner.scrollTop;
            if (that.s.iLeftColumns > 0) {
              that.dom.grid.left.liner.scrollTop = that.dom.grid.right.liner.scrollTop;
            }
          }
        }).on(wheelType, function (e) {
          // Pass horizontal scrolling through
          var xDelta = e.type === 'wheel' ? -e.originalEvent.deltaX : e.originalEvent.wheelDeltaX;
          that.dom.scroller.scrollLeft -= xDelta;
        });
      }
      $(window).on('resize.DTFC', function () {
        that._fnGridLayout.call(that);
      });
      var bFirstDraw = true;
      var jqTable = $(this.s.dt.nTable);
      jqTable.on('draw.dt.DTFC', function () {
        that._fnColCalc();
        that._fnDraw.call(that, bFirstDraw);
        bFirstDraw = false;
      }).on('column-sizing.dt.DTFC', function () {
        that._fnColCalc();
        that._fnGridLayout(that);
      }).on('column-visibility.dt.DTFC', function (e, settings, column, vis, recalc) {
        if (recalc === undefined || recalc) {
          that._fnColCalc();
          that._fnGridLayout(that);
          that._fnDraw(true);
        }
      }).on('select.dt.DTFC deselect.dt.DTFC', function (e, dt, type, indexes) {
        if (e.namespace === 'dt') {
          that._fnDraw(false);
        }
      }).on('destroy.dt.DTFC', function () {
        jqTable.off('.DTFC');
        $(that.dom.scroller).off('.DTFC');
        $(window).off('.DTFC');
        $(that.s.dt.nTableWrapper).off('.DTFC');
        $(that.dom.grid.left.liner).off('.DTFC ' + wheelType);
        $(that.dom.grid.left.wrapper).remove();
        $(that.dom.grid.right.liner).off('.DTFC ' + wheelType);
        $(that.dom.grid.right.wrapper).remove();
      });
      /* Get things right to start with - note that due to adjusting the columns, there must be
		 * another redraw of the main table. It doesn't need to be a full redraw however.
		 */
      this._fnGridLayout();
      this.s.dt.oInstance.fnDraw(false);
    },
    '_fnColCalc': function () {
      var that = this;
      var iLeftWidth = 0;
      var iRightWidth = 0;
      this.s.aiInnerWidths = [];
      this.s.aiOuterWidths = [];
      $.each(this.s.dt.aoColumns, function (i, col) {
        var th = $(col.nTh);
        var border;
        if (!th.filter(':visible').length) {
          that.s.aiInnerWidths.push(0);
          that.s.aiOuterWidths.push(0);
        } else {
          // Inner width is used to assign widths to cells
          // Outer width is used to calculate the container
          var iWidth = th.outerWidth();
          // When working with the left most-cell, need to add on the
          // table's border to the outerWidth, since we need to take
          // account of it, but it isn't in any cell
          if (that.s.aiOuterWidths.length === 0) {
            border = $(that.s.dt.nTable).css('border-left-width');
            iWidth += typeof border === 'string' ? 1 : parseInt(border, 10);
          }
          // Likewise with the final column on the right
          if (that.s.aiOuterWidths.length === that.s.dt.aoColumns.length - 1) {
            border = $(that.s.dt.nTable).css('border-right-width');
            iWidth += typeof border === 'string' ? 1 : parseInt(border, 10);
          }
          that.s.aiOuterWidths.push(iWidth);
          that.s.aiInnerWidths.push(th.width());
          if (i < that.s.iLeftColumns) {
            iLeftWidth += iWidth;
          }
          if (that.s.iTableColumns - that.s.iRightColumns <= i) {
            iRightWidth += iWidth;
          }
        }
      });
      this.s.iLeftWidth = iLeftWidth;
      this.s.iRightWidth = iRightWidth;
    },
    '_fnGridSetup': function () {
      var that = this;
      var oOverflow = this._fnDTOverflow();
      var block;
      this.dom.body = this.s.dt.nTable;
      this.dom.header = this.s.dt.nTHead.parentNode;
      this.dom.header.parentNode.parentNode.style.position = 'relative';
      var nSWrapper = $('<div class="DTFC_ScrollWrapper" style="position:relative; clear:both;">' + '<div class="DTFC_LeftWrapper" style="position:absolute; top:0; left:0;">' + '<div class="DTFC_LeftHeadWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div>' + '<div class="DTFC_LeftBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;">' + '<div class="DTFC_LeftBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div>' + '</div>' + '<div class="DTFC_LeftFootWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div>' + '</div>' + '<div class="DTFC_RightWrapper" style="position:absolute; top:0; right:0;">' + '<div class="DTFC_RightHeadWrapper" style="position:relative; top:0; left:0;">' + '<div class="DTFC_RightHeadBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div>' + '</div>' + '<div class="DTFC_RightBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;">' + '<div class="DTFC_RightBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div>' + '</div>' + '<div class="DTFC_RightFootWrapper" style="position:relative; top:0; left:0;">' + '<div class="DTFC_RightFootBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div>' + '</div>' + '</div>' + '</div>')[0];
      var nLeft = nSWrapper.childNodes[0];
      var nRight = nSWrapper.childNodes[1];
      this.dom.grid.dt.parentNode.insertBefore(nSWrapper, this.dom.grid.dt);
      nSWrapper.appendChild(this.dom.grid.dt);
      this.dom.grid.wrapper = nSWrapper;
      if (this.s.iLeftColumns > 0) {
        this.dom.grid.left.wrapper = nLeft;
        this.dom.grid.left.head = nLeft.childNodes[0];
        this.dom.grid.left.body = nLeft.childNodes[1];
        this.dom.grid.left.liner = $('div.DTFC_LeftBodyLiner', nSWrapper)[0];
        nSWrapper.appendChild(nLeft);
      }
      if (this.s.iRightColumns > 0) {
        this.dom.grid.right.wrapper = nRight;
        this.dom.grid.right.head = nRight.childNodes[0];
        this.dom.grid.right.body = nRight.childNodes[1];
        this.dom.grid.right.liner = $('div.DTFC_RightBodyLiner', nSWrapper)[0];
        nRight.style.right = oOverflow.bar + 'px';
        block = $('div.DTFC_RightHeadBlocker', nSWrapper)[0];
        block.style.width = oOverflow.bar + 'px';
        block.style.right = -oOverflow.bar + 'px';
        this.dom.grid.right.headBlock = block;
        block = $('div.DTFC_RightFootBlocker', nSWrapper)[0];
        block.style.width = oOverflow.bar + 'px';
        block.style.right = -oOverflow.bar + 'px';
        this.dom.grid.right.footBlock = block;
        nSWrapper.appendChild(nRight);
      }
      if (this.s.dt.nTFoot) {
        this.dom.footer = this.s.dt.nTFoot.parentNode;
        if (this.s.iLeftColumns > 0) {
          this.dom.grid.left.foot = nLeft.childNodes[2];
        }
        if (this.s.iRightColumns > 0) {
          this.dom.grid.right.foot = nRight.childNodes[2];
        }
      }
      // RTL support - swap the position of the left and right columns (#48)
      if (this.s.rtl) {
        $('div.DTFC_RightHeadBlocker', nSWrapper).css({
          left: -oOverflow.bar + 'px',
          right: ''
        });
      }
    },
    '_fnGridLayout': function () {
      var that = this;
      var oGrid = this.dom.grid;
      var iWidth = $(oGrid.wrapper).width();
      var iBodyHeight = $(this.s.dt.nTable.parentNode).outerHeight();
      var iFullHeight = $(this.s.dt.nTable.parentNode.parentNode).outerHeight();
      var oOverflow = this._fnDTOverflow();
      var iLeftWidth = this.s.iLeftWidth;
      var iRightWidth = this.s.iRightWidth;
      var rtl = $(this.dom.body).css('direction') === 'rtl';
      var wrapper;
      var scrollbarAdjust = function (node, width) {
        if (!oOverflow.bar) {
          // If there is no scrollbar (Macs) we need to hide the auto scrollbar
          node.style.width = width + 20 + 'px';
          node.style.paddingRight = '20px';
          node.style.boxSizing = 'border-box';
        } else if (that._firefoxScrollError()) {
          // See the above function for why this is required
          if ($(node).height() > 34) {
            node.style.width = width + oOverflow.bar + 'px';
          }
        } else {
          // Otherwise just overflow by the scrollbar
          node.style.width = width + oOverflow.bar + 'px';
        }
      };
      // When x scrolling - don't paint the fixed columns over the x scrollbar
      if (oOverflow.x) {
        iBodyHeight -= oOverflow.bar;
      }
      oGrid.wrapper.style.height = iFullHeight + 'px';
      if (this.s.iLeftColumns > 0) {
        wrapper = oGrid.left.wrapper;
        wrapper.style.width = iLeftWidth + 'px';
        wrapper.style.height = '1px';
        // Swap the position of the left and right columns for rtl (#48)
        // This is always up against the edge, scrollbar on the far side
        if (rtl) {
          wrapper.style.left = '';
          wrapper.style.right = 0;
        } else {
          wrapper.style.left = 0;
          wrapper.style.right = '';
        }
        oGrid.left.body.style.height = iBodyHeight + 'px';
        if (oGrid.left.foot) {
          oGrid.left.foot.style.top = (oOverflow.x ? oOverflow.bar : 0) + 'px';  // shift footer for scrollbar
        }
        scrollbarAdjust(oGrid.left.liner, iLeftWidth);
        oGrid.left.liner.style.height = iBodyHeight + 'px';
      }
      if (this.s.iRightColumns > 0) {
        wrapper = oGrid.right.wrapper;
        wrapper.style.width = iRightWidth + 'px';
        wrapper.style.height = '1px';
        // Need to take account of the vertical scrollbar
        if (this.s.rtl) {
          wrapper.style.left = oOverflow.y ? oOverflow.bar + 'px' : 0;
          wrapper.style.right = '';
        } else {
          wrapper.style.left = '';
          wrapper.style.right = oOverflow.y ? oOverflow.bar + 'px' : 0;
        }
        oGrid.right.body.style.height = iBodyHeight + 'px';
        if (oGrid.right.foot) {
          oGrid.right.foot.style.top = (oOverflow.x ? oOverflow.bar : 0) + 'px';
        }
        scrollbarAdjust(oGrid.right.liner, iRightWidth);
        oGrid.right.liner.style.height = iBodyHeight + 'px';
        oGrid.right.headBlock.style.display = oOverflow.y ? 'block' : 'none';
        oGrid.right.footBlock.style.display = oOverflow.y ? 'block' : 'none';
      }
    },
    '_fnDTOverflow': function () {
      var nTable = this.s.dt.nTable;
      var nTableScrollBody = nTable.parentNode;
      var out = {
          'x': false,
          'y': false,
          'bar': this.s.dt.oScroll.iBarWidth
        };
      if (nTable.offsetWidth > nTableScrollBody.clientWidth) {
        out.x = true;
      }
      if (nTable.offsetHeight > nTableScrollBody.clientHeight) {
        out.y = true;
      }
      return out;
    },
    '_fnDraw': function (bAll) {
      this._fnGridLayout();
      this._fnCloneLeft(bAll);
      this._fnCloneRight(bAll);
      /* Draw callback function */
      if (this.s.fnDrawCallback !== null) {
        this.s.fnDrawCallback.call(this, this.dom.clone.left, this.dom.clone.right);
      }
      /* Event triggering */
      $(this).trigger('draw.dtfc', {
        'leftClone': this.dom.clone.left,
        'rightClone': this.dom.clone.right
      });
    },
    '_fnCloneRight': function (bAll) {
      if (this.s.iRightColumns <= 0) {
        return;
      }
      var that = this, i, jq, aiColumns = [];
      for (i = this.s.iTableColumns - this.s.iRightColumns; i < this.s.iTableColumns; i++) {
        if (this.s.dt.aoColumns[i].bVisible) {
          aiColumns.push(i);
        }
      }
      this._fnClone(this.dom.clone.right, this.dom.grid.right, aiColumns, bAll);
    },
    '_fnCloneLeft': function (bAll) {
      if (this.s.iLeftColumns <= 0) {
        return;
      }
      var that = this, i, jq, aiColumns = [];
      for (i = 0; i < this.s.iLeftColumns; i++) {
        if (this.s.dt.aoColumns[i].bVisible) {
          aiColumns.push(i);
        }
      }
      this._fnClone(this.dom.clone.left, this.dom.grid.left, aiColumns, bAll);
    },
    '_fnCopyLayout': function (aoOriginal, aiColumns, events) {
      var aReturn = [];
      var aClones = [];
      var aCloned = [];
      for (var i = 0, iLen = aoOriginal.length; i < iLen; i++) {
        var aRow = [];
        aRow.nTr = $(aoOriginal[i].nTr).clone(events, false)[0];
        for (var j = 0, jLen = this.s.iTableColumns; j < jLen; j++) {
          if ($.inArray(j, aiColumns) === -1) {
            continue;
          }
          var iCloned = $.inArray(aoOriginal[i][j].cell, aCloned);
          if (iCloned === -1) {
            var nClone = $(aoOriginal[i][j].cell).clone(events, false)[0];
            aClones.push(nClone);
            aCloned.push(aoOriginal[i][j].cell);
            aRow.push({
              'cell': nClone,
              'unique': aoOriginal[i][j].unique
            });
          } else {
            aRow.push({
              'cell': aClones[iCloned],
              'unique': aoOriginal[i][j].unique
            });
          }
        }
        aReturn.push(aRow);
      }
      return aReturn;
    },
    '_fnClone': function (oClone, oGrid, aiColumns, bAll) {
      var that = this, i, iLen, j, jLen, jq, nTarget, iColumn, nClone, iIndex, aoCloneLayout, jqCloneThead, aoFixedHeader, dt = this.s.dt;
      /*
		 * Header
		 */
      if (bAll) {
        $(oClone.header).remove();
        oClone.header = $(this.dom.header).clone(true, false)[0];
        oClone.header.className += ' DTFC_Cloned';
        oClone.header.style.width = '100%';
        oGrid.head.appendChild(oClone.header);
        /* Copy the DataTables layout cache for the header for our floating column */
        aoCloneLayout = this._fnCopyLayout(dt.aoHeader, aiColumns, true);
        jqCloneThead = $('>thead', oClone.header);
        jqCloneThead.empty();
        /* Add the created cloned TR elements to the table */
        for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
          jqCloneThead[0].appendChild(aoCloneLayout[i].nTr);
        }
        /* Use the handy _fnDrawHead function in DataTables to do the rowspan/colspan
			 * calculations for us
			 */
        dt.oApi._fnDrawHead(dt, aoCloneLayout, true);
      } else {
        /* To ensure that we copy cell classes exactly, regardless of colspan, multiple rows
			 * etc, we make a copy of the header from the DataTable again, but don't insert the
			 * cloned cells, just copy the classes across. To get the matching layout for the
			 * fixed component, we use the DataTables _fnDetectHeader method, allowing 1:1 mapping
			 */
        aoCloneLayout = this._fnCopyLayout(dt.aoHeader, aiColumns, false);
        aoFixedHeader = [];
        dt.oApi._fnDetectHeader(aoFixedHeader, $('>thead', oClone.header)[0]);
        for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
          for (j = 0, jLen = aoCloneLayout[i].length; j < jLen; j++) {
            aoFixedHeader[i][j].cell.className = aoCloneLayout[i][j].cell.className;
            // If jQuery UI theming is used we need to copy those elements as well
            $('span.DataTables_sort_icon', aoFixedHeader[i][j].cell).each(function () {
              this.className = $('span.DataTables_sort_icon', aoCloneLayout[i][j].cell)[0].className;
            });
          }
        }
      }
      this._fnEqualiseHeights('thead', this.dom.header, oClone.header);
      /*
		 * Body
		 */
      if (this.s.sHeightMatch == 'auto') {
        /* Remove any heights which have been applied already and let the browser figure it out */
        $('>tbody>tr', that.dom.body).css('height', 'auto');
      }
      if (oClone.body !== null) {
        $(oClone.body).remove();
        oClone.body = null;
      }
      oClone.body = $(this.dom.body).clone(true)[0];
      oClone.body.className += ' DTFC_Cloned';
      oClone.body.style.paddingBottom = dt.oScroll.iBarWidth + 'px';
      oClone.body.style.marginBottom = dt.oScroll.iBarWidth * 2 + 'px';
      /* For IE */
      if (oClone.body.getAttribute('id') !== null) {
        oClone.body.removeAttribute('id');
      }
      $('>thead>tr', oClone.body).empty();
      $('>tfoot', oClone.body).remove();
      var nBody = $('tbody', oClone.body)[0];
      $(nBody).empty();
      if (dt.aiDisplay.length > 0) {
        /* Copy the DataTables' header elements to force the column width in exactly the
			 * same way that DataTables does it - have the header element, apply the width and
			 * colapse it down
			 */
        var nInnerThead = $('>thead>tr', oClone.body)[0];
        for (iIndex = 0; iIndex < aiColumns.length; iIndex++) {
          iColumn = aiColumns[iIndex];
          nClone = $(dt.aoColumns[iColumn].nTh).clone(true)[0];
          nClone.innerHTML = '';
          var oStyle = nClone.style;
          oStyle.paddingTop = '0';
          oStyle.paddingBottom = '0';
          oStyle.borderTopWidth = '0';
          oStyle.borderBottomWidth = '0';
          oStyle.height = 0;
          oStyle.width = that.s.aiInnerWidths[iColumn] + 'px';
          nInnerThead.appendChild(nClone);
        }
        /* Add in the tbody elements, cloning form the master table */
        $('>tbody>tr', that.dom.body).each(function (z) {
          var i = that.s.dt.oFeatures.bServerSide === false ? that.s.dt.aiDisplay[that.s.dt._iDisplayStart + z] : z;
          var aTds = that.s.dt.aoData[i].anCells || $(this).children('td, th');
          var n = this.cloneNode(false);
          n.removeAttribute('id');
          n.setAttribute('data-dt-row', i);
          for (iIndex = 0; iIndex < aiColumns.length; iIndex++) {
            iColumn = aiColumns[iIndex];
            if (aTds.length > 0) {
              nClone = $(aTds[iColumn]).clone(true, true)[0];
              nClone.setAttribute('data-dt-row', i);
              nClone.setAttribute('data-dt-column', iIndex);
              n.appendChild(nClone);
            }
          }
          nBody.appendChild(n);
        });
      } else {
        $('>tbody>tr', that.dom.body).each(function (z) {
          nClone = this.cloneNode(true);
          nClone.className += ' DTFC_NoData';
          $('td', nClone).html('');
          nBody.appendChild(nClone);
        });
      }
      oClone.body.style.width = '100%';
      oClone.body.style.margin = '0';
      oClone.body.style.padding = '0';
      // Interop with Scroller - need to use a height forcing element in the
      // scrolling area in the same way that Scroller does in the body scroll.
      if (dt.oScroller !== undefined) {
        var scrollerForcer = dt.oScroller.dom.force;
        if (!oGrid.forcer) {
          oGrid.forcer = scrollerForcer.cloneNode(true);
          oGrid.liner.appendChild(oGrid.forcer);
        } else {
          oGrid.forcer.style.height = scrollerForcer.style.height;
        }
      }
      oGrid.liner.appendChild(oClone.body);
      this._fnEqualiseHeights('tbody', that.dom.body, oClone.body);
      /*
		 * Footer
		 */
      if (dt.nTFoot !== null) {
        if (bAll) {
          if (oClone.footer !== null) {
            oClone.footer.parentNode.removeChild(oClone.footer);
          }
          oClone.footer = $(this.dom.footer).clone(true, true)[0];
          oClone.footer.className += ' DTFC_Cloned';
          oClone.footer.style.width = '100%';
          oGrid.foot.appendChild(oClone.footer);
          /* Copy the footer just like we do for the header */
          aoCloneLayout = this._fnCopyLayout(dt.aoFooter, aiColumns, true);
          var jqCloneTfoot = $('>tfoot', oClone.footer);
          jqCloneTfoot.empty();
          for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
            jqCloneTfoot[0].appendChild(aoCloneLayout[i].nTr);
          }
          dt.oApi._fnDrawHead(dt, aoCloneLayout, true);
        } else {
          aoCloneLayout = this._fnCopyLayout(dt.aoFooter, aiColumns, false);
          var aoCurrFooter = [];
          dt.oApi._fnDetectHeader(aoCurrFooter, $('>tfoot', oClone.footer)[0]);
          for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
            for (j = 0, jLen = aoCloneLayout[i].length; j < jLen; j++) {
              aoCurrFooter[i][j].cell.className = aoCloneLayout[i][j].cell.className;
            }
          }
        }
        this._fnEqualiseHeights('tfoot', this.dom.footer, oClone.footer);
      }
      /* Equalise the column widths between the header footer and body - body get's priority */
      var anUnique = dt.oApi._fnGetUniqueThs(dt, $('>thead', oClone.header)[0]);
      $(anUnique).each(function (i) {
        iColumn = aiColumns[i];
        this.style.width = that.s.aiInnerWidths[iColumn] + 'px';
      });
      if (that.s.dt.nTFoot !== null) {
        anUnique = dt.oApi._fnGetUniqueThs(dt, $('>tfoot', oClone.footer)[0]);
        $(anUnique).each(function (i) {
          iColumn = aiColumns[i];
          this.style.width = that.s.aiInnerWidths[iColumn] + 'px';
        });
      }
    },
    '_fnGetTrNodes': function (nIn) {
      var aOut = [];
      for (var i = 0, iLen = nIn.childNodes.length; i < iLen; i++) {
        if (nIn.childNodes[i].nodeName.toUpperCase() == 'TR') {
          aOut.push(nIn.childNodes[i]);
        }
      }
      return aOut;
    },
    '_fnEqualiseHeights': function (nodeName, original, clone) {
      if (this.s.sHeightMatch == 'none' && nodeName !== 'thead' && nodeName !== 'tfoot') {
        return;
      }
      var that = this, i, iLen, iHeight, iHeight2, iHeightOriginal, iHeightClone, rootOriginal = original.getElementsByTagName(nodeName)[0], rootClone = clone.getElementsByTagName(nodeName)[0], jqBoxHack = $('>' + nodeName + '>tr:eq(0)', original).children(':first'), iBoxHack = jqBoxHack.outerHeight() - jqBoxHack.height(), anOriginal = this._fnGetTrNodes(rootOriginal), anClone = this._fnGetTrNodes(rootClone), heights = [];
      for (i = 0, iLen = anClone.length; i < iLen; i++) {
        iHeightOriginal = anOriginal[i].offsetHeight;
        iHeightClone = anClone[i].offsetHeight;
        iHeight = iHeightClone > iHeightOriginal ? iHeightClone : iHeightOriginal;
        if (this.s.sHeightMatch == 'semiauto') {
          anOriginal[i]._DTTC_iHeight = iHeight;
        }
        heights.push(iHeight);
      }
      for (i = 0, iLen = anClone.length; i < iLen; i++) {
        anClone[i].style.height = heights[i] + 'px';
        anOriginal[i].style.height = heights[i] + 'px';
      }
    },
    _firefoxScrollError: function () {
      if (_firefoxScroll === undefined) {
        var test = $('<div/>').css({
            position: 'absolute',
            top: 0,
            left: 0,
            height: 10,
            width: 50,
            overflow: 'scroll'
          }).appendTo('body');
        // Make sure this doesn't apply on Macs with 0 width scrollbars
        _firefoxScroll = test[0].clientWidth === test[0].offsetWidth && this._fnDTOverflow().bar !== 0;
        test.remove();
      }
      return _firefoxScroll;
    }
  });
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Statics
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  /**
 * FixedColumns default settings for initialisation
 *  @name FixedColumns.defaults
 *  @namespace
 *  @static
 */
  FixedColumns.defaults = {
    'iLeftColumns': 1,
    'iRightColumns': 0,
    'fnDrawCallback': null,
    'sHeightMatch': 'semiauto'
  };
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Constants
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  /**
 * FixedColumns version
 *  @name      FixedColumns.version
 *  @type      String
 *  @default   See code
 *  @static
 */
  FixedColumns.version = '3.2.2';
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables API integration
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  DataTable.Api.register('fixedColumns()', function () {
    return this;
  });
  DataTable.Api.register('fixedColumns().update()', function () {
    return this.iterator('table', function (ctx) {
      if (ctx._oFixedColumns) {
        ctx._oFixedColumns.fnUpdate();
      }
    });
  });
  DataTable.Api.register('fixedColumns().relayout()', function () {
    return this.iterator('table', function (ctx) {
      if (ctx._oFixedColumns) {
        ctx._oFixedColumns.fnRedrawLayout();
      }
    });
  });
  DataTable.Api.register('rows().recalcHeight()', function () {
    return this.iterator('row', function (ctx, idx) {
      if (ctx._oFixedColumns) {
        ctx._oFixedColumns.fnRecalculateHeight(this.row(idx).node());
      }
    });
  });
  DataTable.Api.register('fixedColumns().rowIndex()', function (row) {
    row = $(row);
    return row.parents('.DTFC_Cloned').length ? this.rows({ page: 'current' }).indexes()[row.index()] : this.row(row).index();
  });
  DataTable.Api.register('fixedColumns().cellIndex()', function (cell) {
    cell = $(cell);
    if (cell.parents('.DTFC_Cloned').length) {
      var rowClonedIdx = cell.parent().index();
      var rowIdx = this.rows({ page: 'current' }).indexes()[rowClonedIdx];
      var columnIdx;
      if (cell.parents('.DTFC_LeftWrapper').length) {
        columnIdx = cell.index();
      } else {
        var columns = this.columns().flatten().length;
        columnIdx = columns - this.context[0]._oFixedColumns.s.iRightColumns + cell.index();
      }
      return {
        row: rowIdx,
        column: this.column.index('toData', columnIdx),
        columnVisible: columnIdx
      };
    } else {
      return this.cell(cell).index();
    }
  });
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Initialisation
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  // Attach a listener to the document which listens for DataTables initialisation
  // events so we can automatically initialise
  $(document).on('init.dt.fixedColumns', function (e, settings) {
    if (e.namespace !== 'dt') {
      return;
    }
    var init = settings.oInit.fixedColumns;
    var defaults = DataTable.defaults.fixedColumns;
    if (init || defaults) {
      var opts = $.extend({}, init, defaults);
      if (init !== false) {
        new FixedColumns(settings, opts);
      }
    }
  });
  // Make FixedColumns accessible from the DataTables instance
  $.fn.dataTable.FixedColumns = FixedColumns;
  $.fn.DataTable.FixedColumns = FixedColumns;
  return FixedColumns;
}));
/*! Responsive 2.1.0
 * 2014-2016 SpryMedia Ltd - datatables.net/license
 */
/**
 * @summary     Responsive
 * @description Responsive tables plug-in for DataTables
 * @version     2.1.0
 * @file        dataTables.responsive.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2014-2016 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([
      'jquery',
      'datatables.net'
    ], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        root = window;
      }
      if (!$ || !$.fn.dataTable) {
        $ = require('datatables.net')(root, $).$;
      }
      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
}(function ($, window, document, undefined) {
  'use strict';
  var DataTable = $.fn.dataTable;
  /**
 * Responsive is a plug-in for the DataTables library that makes use of
 * DataTables' ability to change the visibility of columns, changing the
 * visibility of columns so the displayed columns fit into the table container.
 * The end result is that complex tables will be dynamically adjusted to fit
 * into the viewport, be it on a desktop, tablet or mobile browser.
 *
 * Responsive for DataTables has two modes of operation, which can used
 * individually or combined:
 *
 * * Class name based control - columns assigned class names that match the
 *   breakpoint logic can be shown / hidden as required for each breakpoint.
 * * Automatic control - columns are automatically hidden when there is no
 *   room left to display them. Columns removed from the right.
 *
 * In additional to column visibility control, Responsive also has built into
 * options to use DataTables' child row display to show / hide the information
 * from the table that has been hidden. There are also two modes of operation
 * for this child row display:
 *
 * * Inline - when the control element that the user can use to show / hide
 *   child rows is displayed inside the first column of the table.
 * * Column - where a whole column is dedicated to be the show / hide control.
 *
 * Initialisation of Responsive is performed by:
 *
 * * Adding the class `responsive` or `dt-responsive` to the table. In this case
 *   Responsive will automatically be initialised with the default configuration
 *   options when the DataTable is created.
 * * Using the `responsive` option in the DataTables configuration options. This
 *   can also be used to specify the configuration options, or simply set to
 *   `true` to use the defaults.
 *
 *  @class
 *  @param {object} settings DataTables settings object for the host table
 *  @param {object} [opts] Configuration options
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.10.3+
 *
 *  @example
 *      $('#example').DataTable( {
 *        responsive: true
 *      } );
 *    } );
 */
  var Responsive = function (settings, opts) {
    // Sanity check that we are using DataTables 1.10 or newer
    if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.3')) {
      throw 'DataTables Responsive requires DataTables 1.10.3 or newer';
    }
    this.s = {
      dt: new DataTable.Api(settings),
      columns: [],
      current: []
    };
    // Check if responsive has already been initialised on this table
    if (this.s.dt.settings()[0].responsive) {
      return;
    }
    // details is an object, but for simplicity the user can give it as a string
    // or a boolean
    if (opts && typeof opts.details === 'string') {
      opts.details = { type: opts.details };
    } else if (opts && opts.details === false) {
      opts.details = { type: false };
    } else if (opts && opts.details === true) {
      opts.details = { type: 'inline' };
    }
    this.c = $.extend(true, {}, Responsive.defaults, DataTable.defaults.responsive, opts);
    settings.responsive = this;
    this._constructor();
  };
  $.extend(Responsive.prototype, {
    _constructor: function () {
      var that = this;
      var dt = this.s.dt;
      var dtPrivateSettings = dt.settings()[0];
      var oldWindowWidth = $(window).width();
      dt.settings()[0]._responsive = this;
      // Use DataTables' throttle function to avoid processor thrashing on
      // resize
      $(window).on('resize.dtr orientationchange.dtr', DataTable.util.throttle(function () {
        // iOS has a bug whereby resize can fire when only scrolling
        // See: http://stackoverflow.com/questions/8898412
        var width = $(window).width();
        if (width !== oldWindowWidth) {
          that._resize();
          oldWindowWidth = width;
        }
      }));
      // DataTables doesn't currently trigger an event when a row is added, so
      // we need to hook into its private API to enforce the hidden rows when
      // new data is added
      dtPrivateSettings.oApi._fnCallbackReg(dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {
        if ($.inArray(false, that.s.current) !== -1) {
          $('td, th', tr).each(function (i) {
            var idx = dt.column.index('toData', i);
            if (that.s.current[idx] === false) {
              $(this).css('display', 'none');
            }
          });
        }
      });
      // Destroy event handler
      dt.on('destroy.dtr', function () {
        dt.off('.dtr');
        $(dt.table().body()).off('.dtr');
        $(window).off('resize.dtr orientationchange.dtr');
        // Restore the columns that we've hidden
        $.each(that.s.current, function (i, val) {
          if (val === false) {
            that._setColumnVis(i, true);
          }
        });
      });
      // Reorder the breakpoints array here in case they have been added out
      // of order
      this.c.breakpoints.sort(function (a, b) {
        return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;
      });
      this._classLogic();
      this._resizeAuto();
      // Details handler
      var details = this.c.details;
      if (details.type !== false) {
        that._detailsInit();
        // DataTables will trigger this event on every column it shows and
        // hides individually
        dt.on('column-visibility.dtr', function (e, ctx, col, vis) {
          that._classLogic();
          that._resizeAuto();
          that._resize();
        });
        // Redraw the details box on each draw which will happen if the data
        // has changed. This is used until DataTables implements a native
        // `updated` event for rows
        dt.on('draw.dtr', function () {
          that._redrawChildren();
        });
        $(dt.table().node()).addClass('dtr-' + details.type);
      }
      dt.on('column-reorder.dtr', function (e, settings, details) {
        that._classLogic();
        that._resizeAuto();
        that._resize();
      });
      // Change in column sizes means we need to calc
      dt.on('column-sizing.dtr', function () {
        that._resizeAuto();
        that._resize();
      });
      dt.on('init.dtr', function (e, settings, details) {
        that._resizeAuto();
        that._resize();
        // If columns were hidden, then DataTables needs to adjust the
        // column sizing
        if ($.inArray(false, that.s.current)) {
          dt.columns.adjust();
        }
      });
      // First pass - draw the table for the current viewport size
      this._resize();
    },
    _columnsVisiblity: function (breakpoint) {
      var dt = this.s.dt;
      var columns = this.s.columns;
      var i, ien;
      // Create an array that defines the column ordering based first on the
      // column's priority, and secondly the column index. This allows the
      // columns to be removed from the right if the priority matches
      var order = columns.map(function (col, idx) {
          return {
            columnIdx: idx,
            priority: col.priority
          };
        }).sort(function (a, b) {
          if (a.priority !== b.priority) {
            return a.priority - b.priority;
          }
          return a.columnIdx - b.columnIdx;
        });
      // Class logic - determine which columns are in this breakpoint based
      // on the classes. If no class control (i.e. `auto`) then `-` is used
      // to indicate this to the rest of the function
      var display = $.map(columns, function (col) {
          return col.auto && col.minWidth === null ? false : col.auto === true ? '-' : $.inArray(breakpoint, col.includeIn) !== -1;
        });
      // Auto column control - first pass: how much width is taken by the
      // ones that must be included from the non-auto columns
      var requiredWidth = 0;
      for (i = 0, ien = display.length; i < ien; i++) {
        if (display[i] === true) {
          requiredWidth += columns[i].minWidth;
        }
      }
      // Second pass, use up any remaining width for other columns. For
      // scrolling tables we need to subtract the width of the scrollbar. It
      // may not be requires which makes this sub-optimal, but it would
      // require another full redraw to make complete use of those extra few
      // pixels
      var scrolling = dt.settings()[0].oScroll;
      var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
      var widthAvailable = dt.table().container().offsetWidth - bar;
      var usedWidth = widthAvailable - requiredWidth;
      // Control column needs to always be included. This makes it sub-
      // optimal in terms of using the available with, but to stop layout
      // thrashing or overflow. Also we need to account for the control column
      // width first so we know how much width is available for the other
      // columns, since the control column might not be the first one shown
      for (i = 0, ien = display.length; i < ien; i++) {
        if (columns[i].control) {
          usedWidth -= columns[i].minWidth;
        }
      }
      // Allow columns to be shown (counting by priority and then right to
      // left) until we run out of room
      var empty = false;
      for (i = 0, ien = order.length; i < ien; i++) {
        var colIdx = order[i].columnIdx;
        if (display[colIdx] === '-' && !columns[colIdx].control && columns[colIdx].minWidth) {
          // Once we've found a column that won't fit we don't let any
          // others display either, or columns might disappear in the
          // middle of the table
          if (empty || usedWidth - columns[colIdx].minWidth < 0) {
            empty = true;
            display[colIdx] = false;
          } else {
            display[colIdx] = true;
          }
          usedWidth -= columns[colIdx].minWidth;
        }
      }
      // Determine if the 'control' column should be shown (if there is one).
      // This is the case when there is a hidden column (that is not the
      // control column). The two loops look inefficient here, but they are
      // trivial and will fly through. We need to know the outcome from the
      // first , before the action in the second can be taken
      var showControl = false;
      for (i = 0, ien = columns.length; i < ien; i++) {
        if (!columns[i].control && !columns[i].never && !display[i]) {
          showControl = true;
          break;
        }
      }
      for (i = 0, ien = columns.length; i < ien; i++) {
        if (columns[i].control) {
          display[i] = showControl;
        }
      }
      // Finally we need to make sure that there is at least one column that
      // is visible
      if ($.inArray(true, display) === -1) {
        display[0] = true;
      }
      return display;
    },
    _classLogic: function () {
      var that = this;
      var calc = {};
      var breakpoints = this.c.breakpoints;
      var dt = this.s.dt;
      var columns = dt.columns().eq(0).map(function (i) {
          var column = this.column(i);
          var className = column.header().className;
          var priority = dt.settings()[0].aoColumns[i].responsivePriority;
          if (priority === undefined) {
            var dataPriority = $(column.header()).data('priority');
            priority = dataPriority !== undefined ? dataPriority * 1 : 10000;
          }
          return {
            className: className,
            includeIn: [],
            auto: false,
            control: false,
            never: className.match(/\bnever\b/) ? true : false,
            priority: priority
          };
        });
      // Simply add a breakpoint to `includeIn` array, ensuring that there are
      // no duplicates
      var add = function (colIdx, name) {
        var includeIn = columns[colIdx].includeIn;
        if ($.inArray(name, includeIn) === -1) {
          includeIn.push(name);
        }
      };
      var column = function (colIdx, name, operator, matched) {
        var size, i, ien;
        if (!operator) {
          columns[colIdx].includeIn.push(name);
        } else if (operator === 'max-') {
          // Add this breakpoint and all smaller
          size = that._find(name).width;
          for (i = 0, ien = breakpoints.length; i < ien; i++) {
            if (breakpoints[i].width <= size) {
              add(colIdx, breakpoints[i].name);
            }
          }
        } else if (operator === 'min-') {
          // Add this breakpoint and all larger
          size = that._find(name).width;
          for (i = 0, ien = breakpoints.length; i < ien; i++) {
            if (breakpoints[i].width >= size) {
              add(colIdx, breakpoints[i].name);
            }
          }
        } else if (operator === 'not-') {
          // Add all but this breakpoint
          for (i = 0, ien = breakpoints.length; i < ien; i++) {
            if (breakpoints[i].name.indexOf(matched) === -1) {
              add(colIdx, breakpoints[i].name);
            }
          }
        }
      };
      // Loop over each column and determine if it has a responsive control
      // class
      columns.each(function (col, i) {
        var classNames = col.className.split(' ');
        var hasClass = false;
        // Split the class name up so multiple rules can be applied if needed
        for (var k = 0, ken = classNames.length; k < ken; k++) {
          var className = $.trim(classNames[k]);
          if (className === 'all') {
            // Include in all
            hasClass = true;
            col.includeIn = $.map(breakpoints, function (a) {
              return a.name;
            });
            return;
          } else if (className === 'none' || col.never) {
            // Include in none (default) and no auto
            hasClass = true;
            return;
          } else if (className === 'control') {
            // Special column that is only visible, when one of the other
            // columns is hidden. This is used for the details control
            hasClass = true;
            col.control = true;
            return;
          }
          $.each(breakpoints, function (j, breakpoint) {
            // Does this column have a class that matches this breakpoint?
            var brokenPoint = breakpoint.name.split('-');
            var re = new RegExp('(min\\-|max\\-|not\\-)?(' + brokenPoint[0] + ')(\\-[_a-zA-Z0-9])?');
            var match = className.match(re);
            if (match) {
              hasClass = true;
              if (match[2] === brokenPoint[0] && match[3] === '-' + brokenPoint[1]) {
                // Class name matches breakpoint name fully
                column(i, breakpoint.name, match[1], match[2] + match[3]);
              } else if (match[2] === brokenPoint[0] && !match[3]) {
                // Class name matched primary breakpoint name with no qualifier
                column(i, breakpoint.name, match[1], match[2]);
              }
            }
          });
        }
        // If there was no control class, then automatic sizing is used
        if (!hasClass) {
          col.auto = true;
        }
      });
      this.s.columns = columns;
    },
    _detailsDisplay: function (row, update) {
      var that = this;
      var dt = this.s.dt;
      var details = this.c.details;
      if (details && details.type !== false) {
        var res = details.display(row, update, function () {
            return details.renderer(dt, row[0], that._detailsObj(row[0]));
          });
        if (res === true || res === false) {
          $(dt.table().node()).triggerHandler('responsive-display.dt', [
            dt,
            row,
            res,
            update
          ]);
        }
      }
    },
    _detailsInit: function () {
      var that = this;
      var dt = this.s.dt;
      var details = this.c.details;
      // The inline type always uses the first child as the target
      if (details.type === 'inline') {
        details.target = 'td:first-child, th:first-child';
      }
      // Keyboard accessibility
      dt.on('draw.dtr', function () {
        that._tabIndexes();
      });
      that._tabIndexes();
      // Initial draw has already happened
      $(dt.table().body()).on('keyup.dtr', 'td, th', function (e) {
        if (e.keyCode === 13 && $(this).data('dtr-keyboard')) {
          $(this).click();
        }
      });
      // type.target can be a string jQuery selector or a column index
      var target = details.target;
      var selector = typeof target === 'string' ? target : 'td, th';
      // Click handler to show / hide the details rows when they are available
      $(dt.table().body()).on('click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {
        // If the table is not collapsed (i.e. there is no hidden columns)
        // then take no action
        if (!$(dt.table().node()).hasClass('collapsed')) {
          return;
        }
        // Check that the row is actually a DataTable's controlled node
        if (!dt.row($(this).closest('tr')).length) {
          return;
        }
        // For column index, we determine if we should act or not in the
        // handler - otherwise it is already okay
        if (typeof target === 'number') {
          var targetIdx = target < 0 ? dt.columns().eq(0).length + target : target;
          if (dt.cell(this).index().column !== targetIdx) {
            return;
          }
        }
        // $().closest() includes itself in its check
        var row = dt.row($(this).closest('tr'));
        // Check event type to do an action
        if (e.type === 'click') {
          // The renderer is given as a function so the caller can execute it
          // only when they need (i.e. if hiding there is no point is running
          // the renderer)
          that._detailsDisplay(row, false);
        } else if (e.type === 'mousedown') {
          // For mouse users, prevent the focus ring from showing
          $(this).css('outline', 'none');
        } else if (e.type === 'mouseup') {
          // And then re-allow at the end of the click
          $(this).blur().css('outline', '');
        }
      });
    },
    _detailsObj: function (rowIdx) {
      var that = this;
      var dt = this.s.dt;
      return $.map(this.s.columns, function (col, i) {
        // Never and control columns should not be passed to the renderer
        if (col.never || col.control) {
          return;
        }
        return {
          title: dt.settings()[0].aoColumns[i].sTitle,
          data: dt.cell(rowIdx, i).render(that.c.orthogonal),
          hidden: dt.column(i).visible() && !that.s.current[i],
          columnIndex: i,
          rowIndex: rowIdx
        };
      });
    },
    _find: function (name) {
      var breakpoints = this.c.breakpoints;
      for (var i = 0, ien = breakpoints.length; i < ien; i++) {
        if (breakpoints[i].name === name) {
          return breakpoints[i];
        }
      }
    },
    _redrawChildren: function () {
      var that = this;
      var dt = this.s.dt;
      dt.rows({ page: 'current' }).iterator('row', function (settings, idx) {
        var row = dt.row(idx);
        that._detailsDisplay(dt.row(idx), true);
      });
    },
    _resize: function () {
      var that = this;
      var dt = this.s.dt;
      var width = $(window).width();
      var breakpoints = this.c.breakpoints;
      var breakpoint = breakpoints[0].name;
      var columns = this.s.columns;
      var i, ien;
      var oldVis = this.s.current.slice();
      // Determine what breakpoint we are currently at
      for (i = breakpoints.length - 1; i >= 0; i--) {
        if (width <= breakpoints[i].width) {
          breakpoint = breakpoints[i].name;
          break;
        }
      }
      // Show the columns for that break point
      var columnsVis = this._columnsVisiblity(breakpoint);
      this.s.current = columnsVis;
      // Set the class before the column visibility is changed so event
      // listeners know what the state is. Need to determine if there are
      // any columns that are not visible but can be shown
      var collapsedClass = false;
      for (i = 0, ien = columns.length; i < ien; i++) {
        if (columnsVis[i] === false && !columns[i].never && !columns[i].control) {
          collapsedClass = true;
          break;
        }
      }
      $(dt.table().node()).toggleClass('collapsed', collapsedClass);
      var changed = false;
      dt.columns().eq(0).each(function (colIdx, i) {
        if (columnsVis[i] !== oldVis[i]) {
          changed = true;
          that._setColumnVis(colIdx, columnsVis[i]);
        }
      });
      if (changed) {
        this._redrawChildren();
        // Inform listeners of the change
        $(dt.table().node()).trigger('responsive-resize.dt', [
          dt,
          this.s.current
        ]);
      }
    },
    _resizeAuto: function () {
      var dt = this.s.dt;
      var columns = this.s.columns;
      // Are we allowed to do auto sizing?
      if (!this.c.auto) {
        return;
      }
      // Are there any columns that actually need auto-sizing, or do they all
      // have classes defined
      if ($.inArray(true, $.map(columns, function (c) {
          return c.auto;
        })) === -1) {
        return;
      }
      // Clone the table with the current data in it
      var tableWidth = dt.table().node().offsetWidth;
      var columnWidths = dt.columns;
      var clonedTable = dt.table().node().cloneNode(false);
      var clonedHeader = $(dt.table().header().cloneNode(false)).appendTo(clonedTable);
      var clonedBody = $(dt.table().body()).clone(false, false).empty().appendTo(clonedTable);
      // use jQuery because of IE8
      // Header
      var headerCells = dt.columns().header().filter(function (idx) {
          return dt.column(idx).visible();
        }).to$().clone(false).css('display', 'table-cell');
      // Body rows - we don't need to take account of DataTables' column
      // visibility since we implement our own here (hence the `display` set)
      $(clonedBody).append($(dt.rows({ page: 'current' }).nodes()).clone(false)).find('th, td').css('display', '');
      // Footer
      var footer = dt.table().footer();
      if (footer) {
        var clonedFooter = $(footer.cloneNode(false)).appendTo(clonedTable);
        var footerCells = dt.columns().footer().filter(function (idx) {
            return dt.column(idx).visible();
          }).to$().clone(false).css('display', 'table-cell');
        $('<tr/>').append(footerCells).appendTo(clonedFooter);
      }
      $('<tr/>').append(headerCells).appendTo(clonedHeader);
      // In the inline case extra padding is applied to the first column to
      // give space for the show / hide icon. We need to use this in the
      // calculation
      if (this.c.details.type === 'inline') {
        $(clonedTable).addClass('dtr-inline collapsed');
      }
      // It is unsafe to insert elements with the same name into the DOM
      // multiple times. For example, cloning and inserting a checked radio
      // clears the chcecked state of the original radio.
      $(clonedTable).find('[name]').removeAttr('name');
      var inserted = $('<div/>').css({
          width: 1,
          height: 1,
          overflow: 'hidden'
        }).append(clonedTable);
      inserted.insertBefore(dt.table().node());
      // The cloned header now contains the smallest that each column can be
      headerCells.each(function (i) {
        var idx = dt.column.index('fromVisible', i);
        columns[idx].minWidth = this.offsetWidth || 0;
      });
      inserted.remove();
    },
    _setColumnVis: function (col, showHide) {
      var dt = this.s.dt;
      var display = showHide ? '' : 'none';
      // empty string will remove the attr
      $(dt.column(col).header()).css('display', display);
      $(dt.column(col).footer()).css('display', display);
      dt.column(col).nodes().to$().css('display', display);
    },
    _tabIndexes: function () {
      var dt = this.s.dt;
      var cells = dt.cells({ page: 'current' }).nodes().to$();
      var ctx = dt.settings()[0];
      var target = this.c.details.target;
      cells.filter('[data-dtr-keyboard]').removeData('[data-dtr-keyboard]');
      var selector = typeof target === 'number' ? ':eq(' + target + ')' : target;
      $(selector, dt.rows({ page: 'current' }).nodes()).attr('tabIndex', ctx.iTabIndex).data('dtr-keyboard', 1);
    }
  });
  /**
 * List of default breakpoints. Each item in the array is an object with two
 * properties:
 *
 * * `name` - the breakpoint name.
 * * `width` - the breakpoint width
 *
 * @name Responsive.breakpoints
 * @static
 */
  Responsive.breakpoints = [
    {
      name: 'desktop',
      width: Infinity
    },
    {
      name: 'tablet-l',
      width: 1024
    },
    {
      name: 'tablet-p',
      width: 768
    },
    {
      name: 'mobile-l',
      width: 480
    },
    {
      name: 'mobile-p',
      width: 320
    }
  ];
  /**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
  Responsive.display = {
    childRow: function (row, update, render) {
      if (update) {
        if ($(row.node()).hasClass('parent')) {
          row.child(render(), 'child').show();
          return true;
        }
      } else {
        if (!row.child.isShown()) {
          row.child(render(), 'child').show();
          $(row.node()).addClass('parent');
          return true;
        } else {
          row.child(false);
          $(row.node()).removeClass('parent');
          return false;
        }
      }
    },
    childRowImmediate: function (row, update, render) {
      if (!update && row.child.isShown() || !row.responsive.hasHidden()) {
        // User interaction and the row is show, or nothing to show
        row.child(false);
        $(row.node()).removeClass('parent');
        return false;
      } else {
        // Display
        row.child(render(), 'child').show();
        $(row.node()).addClass('parent');
        return true;
      }
    },
    modal: function (options) {
      return function (row, update, render) {
        if (!update) {
          // Show a modal
          var close = function () {
            modal.remove();
            // will tidy events for us
            $(document).off('keypress.dtr');
          };
          var modal = $('<div class="dtr-modal"/>').append($('<div class="dtr-modal-display"/>').append($('<div class="dtr-modal-content"/>').append(render())).append($('<div class="dtr-modal-close">&times;</div>').click(function () {
              close();
            }))).append($('<div class="dtr-modal-background"/>').click(function () {
              close();
            })).appendTo('body');
          $(document).on('keyup.dtr', function (e) {
            if (e.keyCode === 27) {
              e.stopPropagation();
              close();
            }
          });
        } else {
          $('div.dtr-modal-content').empty().append(render());
        }
        if (options && options.header) {
          $('div.dtr-modal-content').prepend('<h2>' + options.header(row) + '</h2>');
        }
      };
    }
  };
  /**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
  Responsive.renderer = {
    listHidden: function () {
      return function (api, rowIdx, columns) {
        var data = $.map(columns, function (col) {
            return col.hidden ? '<li data-dtr-index="' + col.columnIndex + '" data-dt-row="' + col.rowIndex + '" data-dt-column="' + col.columnIndex + '">' + '<span class="dtr-title">' + col.title + '</span> ' + '<span class="dtr-data">' + col.data + '</span>' + '</li>' : '';
          }).join('');
        return data ? $('<ul data-dtr-index="' + rowIdx + '"/>').append(data) : false;
      };
    },
    tableAll: function (options) {
      options = $.extend({ tableClass: '' }, options);
      return function (api, rowIdx, columns) {
        var data = $.map(columns, function (col) {
            return '<tr data-dt-row="' + col.rowIndex + '" data-dt-column="' + col.columnIndex + '">' + '<td>' + col.title + ':' + '</td> ' + '<td>' + col.data + '</td>' + '</tr>';
          }).join('');
        return $('<table class="' + options.tableClass + '" width="100%"/>').append(data);
      };
    }
  };
  /**
 * Responsive default settings for initialisation
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
  Responsive.defaults = {
    breakpoints: Responsive.breakpoints,
    auto: true,
    details: {
      display: Responsive.display.childRow,
      renderer: Responsive.renderer.listHidden(),
      target: 0,
      type: 'inline'
    },
    orthogonal: 'display'
  };
  /*
 * API
 */
  var Api = $.fn.dataTable.Api;
  // Doesn't do anything - work around for a bug in DT... Not documented
  Api.register('responsive()', function () {
    return this;
  });
  Api.register('responsive.index()', function (li) {
    li = $(li);
    return {
      column: li.data('dtr-index'),
      row: li.parent().data('dtr-index')
    };
  });
  Api.register('responsive.rebuild()', function () {
    return this.iterator('table', function (ctx) {
      if (ctx._responsive) {
        ctx._responsive._classLogic();
      }
    });
  });
  Api.register('responsive.recalc()', function () {
    return this.iterator('table', function (ctx) {
      if (ctx._responsive) {
        ctx._responsive._resizeAuto();
        ctx._responsive._resize();
      }
    });
  });
  Api.register('responsive.hasHidden()', function () {
    var ctx = this.context[0];
    return ctx._responsive ? $.inArray(false, ctx._responsive.s.current) !== -1 : false;
  });
  /**
 * Version information
 *
 * @name Responsive.version
 * @static
 */
  Responsive.version = '2.1.0';
  $.fn.dataTable.Responsive = Responsive;
  $.fn.DataTable.Responsive = Responsive;
  // Attach a listener to the document which listens for DataTables initialisation
  // events so we can automatically initialise
  $(document).on('preInit.dt.dtr', function (e, settings, json) {
    if (e.namespace !== 'dt') {
      return;
    }
    if ($(settings.nTable).hasClass('responsive') || $(settings.nTable).hasClass('dt-responsive') || settings.oInit.responsive || DataTable.defaults.responsive) {
      var init = settings.oInit.responsive;
      if (init !== false) {
        new Responsive(settings, $.isPlainObject(init) ? init : {});
      }
    }
  });
  return Responsive;
}));
/*! Buttons for DataTables 1.2.0
 * ©2016 SpryMedia Ltd - datatables.net/license
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([
      'jquery',
      'datatables.net'
    ], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        root = window;
      }
      if (!$ || !$.fn.dataTable) {
        $ = require('datatables.net')(root, $).$;
      }
      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
}(function ($, window, document, undefined) {
  'use strict';
  var DataTable = $.fn.dataTable;
  // Used for namespacing events added to the document by each instance, so they
  // can be removed on destroy
  var _instCounter = 0;
  // Button namespacing counter for namespacing events on individual buttons
  var _buttonCounter = 0;
  var _dtButtons = DataTable.ext.buttons;
  /**
 * [Buttons description]
 * @param {[type]}
 * @param {[type]}
 */
  var Buttons = function (dt, config) {
    // Allow a boolean true for defaults
    if (config === true) {
      config = {};
    }
    // For easy configuration of buttons an array can be given
    if ($.isArray(config)) {
      config = { buttons: config };
    }
    this.c = $.extend(true, {}, Buttons.defaults, config);
    // Don't want a deep copy for the buttons
    if (config.buttons) {
      this.c.buttons = config.buttons;
    }
    this.s = {
      dt: new DataTable.Api(dt),
      buttons: [],
      listenKeys: '',
      namespace: 'dtb' + _instCounter++
    };
    this.dom = { container: $('<' + this.c.dom.container.tag + '/>').addClass(this.c.dom.container.className) };
    this._constructor();
  };
  $.extend(Buttons.prototype, {
    action: function (node, action) {
      var button = this._nodeToButton(node);
      if (action === undefined) {
        return button.conf.action;
      }
      button.conf.action = action;
      return this;
    },
    active: function (node, flag) {
      var button = this._nodeToButton(node);
      var klass = this.c.dom.button.active;
      var jqNode = $(button.node);
      if (flag === undefined) {
        return jqNode.hasClass(klass);
      }
      jqNode.toggleClass(klass, flag === undefined ? true : flag);
      return this;
    },
    add: function (config, idx) {
      var buttons = this.s.buttons;
      if (typeof idx === 'string') {
        var split = idx.split('-');
        var base = this.s;
        for (var i = 0, ien = split.length - 1; i < ien; i++) {
          base = base.buttons[split[i] * 1];
        }
        buttons = base.buttons;
        idx = split[split.length - 1] * 1;
      }
      this._expandButton(buttons, config, false, idx);
      this._draw();
      return this;
    },
    container: function () {
      return this.dom.container;
    },
    disable: function (node) {
      var button = this._nodeToButton(node);
      $(button.node).addClass(this.c.dom.button.disabled);
      return this;
    },
    destroy: function () {
      // Key event listener
      $('body').off('keyup.' + this.s.namespace);
      // Individual button destroy (so they can remove their own events if
      // needed
      var buttons = this.s.buttons;
      var i, ien;
      for (i = 0, ien = buttons.length; i < ien; i++) {
        this.remove(buttons[i].node);
      }
      // Container
      this.dom.container.remove();
      // Remove from the settings object collection
      var buttonInsts = this.s.dt.settings()[0];
      for (i = 0, ien = buttonInsts.length; i < ien; i++) {
        if (buttonInsts.inst === this) {
          buttonInsts.splice(i, 1);
          break;
        }
      }
      return this;
    },
    enable: function (node, flag) {
      if (flag === false) {
        return this.disable(node);
      }
      var button = this._nodeToButton(node);
      $(button.node).removeClass(this.c.dom.button.disabled);
      return this;
    },
    name: function () {
      return this.c.name;
    },
    node: function (node) {
      var button = this._nodeToButton(node);
      return $(button.node);
    },
    remove: function (node) {
      var button = this._nodeToButton(node);
      var host = this._nodeToHost(node);
      var dt = this.s.dt;
      // Remove any child buttons first
      if (button.buttons.length) {
        for (var i = button.buttons.length - 1; i >= 0; i--) {
          this.remove(button.buttons[i].node);
        }
      }
      // Allow the button to remove event handlers, etc
      if (button.conf.destroy) {
        button.conf.destroy.call(dt.button(node), dt, $(node), button.conf);
      }
      this._removeKey(button.conf);
      $(button.node).remove();
      var idx = $.inArray(button, host);
      host.splice(idx, 1);
      return this;
    },
    text: function (node, label) {
      var button = this._nodeToButton(node);
      var buttonLiner = this.c.dom.collection.buttonLiner;
      var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ? buttonLiner.tag : this.c.dom.buttonLiner.tag;
      var dt = this.s.dt;
      var jqNode = $(button.node);
      var text = function (opt) {
        return typeof opt === 'function' ? opt(dt, jqNode, button.conf) : opt;
      };
      if (label === undefined) {
        return text(button.conf.text);
      }
      button.conf.text = label;
      if (linerTag) {
        jqNode.children(linerTag).html(text(label));
      } else {
        jqNode.html(text(label));
      }
      return this;
    },
    _constructor: function () {
      var that = this;
      var dt = this.s.dt;
      var dtSettings = dt.settings()[0];
      var buttons = this.c.buttons;
      if (!dtSettings._buttons) {
        dtSettings._buttons = [];
      }
      dtSettings._buttons.push({
        inst: this,
        name: this.c.name
      });
      for (var i = 0, ien = buttons.length; i < ien; i++) {
        this.add(buttons[i]);
      }
      dt.on('destroy', function () {
        that.destroy();
      });
      // Global key event binding to listen for button keys
      $('body').on('keyup.' + this.s.namespace, function (e) {
        if (!document.activeElement || document.activeElement === document.body) {
          // SUse a string of characters for fast lookup of if we need to
          // handle this
          var character = String.fromCharCode(e.keyCode).toLowerCase();
          if (that.s.listenKeys.toLowerCase().indexOf(character) !== -1) {
            that._keypress(character, e);
          }
        }
      });
    },
    _addKey: function (conf) {
      if (conf.key) {
        this.s.listenKeys += $.isPlainObject(conf.key) ? conf.key.key : conf.key;
      }
    },
    _draw: function (container, buttons) {
      if (!container) {
        container = this.dom.container;
        buttons = this.s.buttons;
      }
      container.children().detach();
      for (var i = 0, ien = buttons.length; i < ien; i++) {
        container.append(buttons[i].inserter);
        if (buttons[i].buttons && buttons[i].buttons.length) {
          this._draw(buttons[i].collection, buttons[i].buttons);
        }
      }
    },
    _expandButton: function (attachTo, button, inCollection, attachPoint) {
      var dt = this.s.dt;
      var buttonCounter = 0;
      var buttons = !$.isArray(button) ? [button] : button;
      for (var i = 0, ien = buttons.length; i < ien; i++) {
        var conf = this._resolveExtends(buttons[i]);
        if (!conf) {
          continue;
        }
        // If the configuration is an array, then expand the buttons at this
        // point
        if ($.isArray(conf)) {
          this._expandButton(attachTo, conf, inCollection, attachPoint);
          continue;
        }
        var built = this._buildButton(conf, inCollection);
        if (!built) {
          continue;
        }
        if (attachPoint !== undefined) {
          attachTo.splice(attachPoint, 0, built);
          attachPoint++;
        } else {
          attachTo.push(built);
        }
        if (built.conf.buttons) {
          var collectionDom = this.c.dom.collection;
          built.collection = $('<' + collectionDom.tag + '/>').addClass(collectionDom.className);
          built.conf._collection = built.collection;
          this._expandButton(built.buttons, built.conf.buttons, true, attachPoint);
        }
        // init call is made here, rather than buildButton as it needs to
        // be selectable, and for that it needs to be in the buttons array
        if (conf.init) {
          conf.init.call(dt.button(built.node), dt, $(built.node), conf);
        }
        buttonCounter++;
      }
    },
    _buildButton: function (config, inCollection) {
      var buttonDom = this.c.dom.button;
      var linerDom = this.c.dom.buttonLiner;
      var collectionDom = this.c.dom.collection;
      var dt = this.s.dt;
      var text = function (opt) {
        return typeof opt === 'function' ? opt(dt, button, config) : opt;
      };
      if (inCollection && collectionDom.button) {
        buttonDom = collectionDom.button;
      }
      if (inCollection && collectionDom.buttonLiner) {
        linerDom = collectionDom.buttonLiner;
      }
      // Make sure that the button is available based on whatever requirements
      // it has. For example, Flash buttons require Flash
      if (config.available && !config.available(dt, config)) {
        return false;
      }
      var action = function (e, dt, button, config) {
        config.action.call(dt.button(button), e, dt, button, config);
        $(dt.table().node()).triggerHandler('buttons-action.dt', [
          dt.button(button),
          dt,
          button,
          config
        ]);
      };
      var button = $('<' + buttonDom.tag + '/>').addClass(buttonDom.className).attr('tabindex', this.s.dt.settings()[0].iTabIndex).attr('aria-controls', this.s.dt.table().node().id).on('click.dtb', function (e) {
          e.preventDefault();
          if (!button.hasClass(buttonDom.disabled) && config.action) {
            action(e, dt, button, config);
          }
          button.blur();
        }).on('keyup.dtb', function (e) {
          if (e.keyCode === 13) {
            if (!button.hasClass(buttonDom.disabled) && config.action) {
              action(e, dt, button, config);
            }
          }
        });
      // Make `a` tags act like a link
      if (buttonDom.tag.toLowerCase() === 'a') {
        button.attr('href', '#');
      }
      if (linerDom.tag) {
        var liner = $('<' + linerDom.tag + '/>').html(text(config.text)).addClass(linerDom.className);
        if (linerDom.tag.toLowerCase() === 'a') {
          liner.attr('href', '#');
        }
        button.append(liner);
      } else {
        button.html(text(config.text));
      }
      if (config.enabled === false) {
        button.addClass(buttonDom.disabled);
      }
      if (config.className) {
        button.addClass(config.className);
      }
      if (config.titleAttr) {
        button.attr('title', config.titleAttr);
      }
      if (!config.namespace) {
        config.namespace = '.dt-button-' + _buttonCounter++;
      }
      var buttonContainer = this.c.dom.buttonContainer;
      var inserter;
      if (buttonContainer && buttonContainer.tag) {
        inserter = $('<' + buttonContainer.tag + '/>').addClass(buttonContainer.className).append(button);
      } else {
        inserter = button;
      }
      this._addKey(config);
      return {
        conf: config,
        node: button.get(0),
        inserter: inserter,
        buttons: [],
        inCollection: inCollection,
        collection: null
      };
    },
    _nodeToButton: function (node, buttons) {
      if (!buttons) {
        buttons = this.s.buttons;
      }
      for (var i = 0, ien = buttons.length; i < ien; i++) {
        if (buttons[i].node === node) {
          return buttons[i];
        }
        if (buttons[i].buttons.length) {
          var ret = this._nodeToButton(node, buttons[i].buttons);
          if (ret) {
            return ret;
          }
        }
      }
    },
    _nodeToHost: function (node, buttons) {
      if (!buttons) {
        buttons = this.s.buttons;
      }
      for (var i = 0, ien = buttons.length; i < ien; i++) {
        if (buttons[i].node === node) {
          return buttons;
        }
        if (buttons[i].buttons.length) {
          var ret = this._nodeToHost(node, buttons[i].buttons);
          if (ret) {
            return ret;
          }
        }
      }
    },
    _keypress: function (character, e) {
      var run = function (conf, node) {
        if (!conf.key) {
          return;
        }
        if (conf.key === character) {
          $(node).click();
        } else if ($.isPlainObject(conf.key)) {
          if (conf.key.key !== character) {
            return;
          }
          if (conf.key.shiftKey && !e.shiftKey) {
            return;
          }
          if (conf.key.altKey && !e.altKey) {
            return;
          }
          if (conf.key.ctrlKey && !e.ctrlKey) {
            return;
          }
          if (conf.key.metaKey && !e.metaKey) {
            return;
          }
          // Made it this far - it is good
          $(node).click();
        }
      };
      var recurse = function (a) {
        for (var i = 0, ien = a.length; i < ien; i++) {
          run(a[i].conf, a[i].node);
          if (a[i].buttons.length) {
            recurse(a[i].buttons);
          }
        }
      };
      recurse(this.s.buttons);
    },
    _removeKey: function (conf) {
      if (conf.key) {
        var character = $.isPlainObject(conf.key) ? conf.key.key : conf.key;
        // Remove only one character, as multiple buttons could have the
        // same listening key
        var a = this.s.listenKeys.split('');
        var idx = $.inArray(character, a);
        a.splice(idx, 1);
        this.s.listenKeys = a.join('');
      }
    },
    _resolveExtends: function (conf) {
      var dt = this.s.dt;
      var i, ien;
      var toConfObject = function (base) {
        var loop = 0;
        // Loop until we have resolved to a button configuration, or an
        // array of button configurations (which will be iterated
        // separately)
        while (!$.isPlainObject(base) && !$.isArray(base)) {
          if (base === undefined) {
            return;
          }
          if (typeof base === 'function') {
            base = base(dt, conf);
            if (!base) {
              return false;
            }
          } else if (typeof base === 'string') {
            if (!_dtButtons[base]) {
              throw 'Unknown button type: ' + base;
            }
            base = _dtButtons[base];
          }
          loop++;
          if (loop > 30) {
            // Protect against misconfiguration killing the browser
            throw 'Buttons: Too many iterations';
          }
        }
        return $.isArray(base) ? base : $.extend({}, base);
      };
      conf = toConfObject(conf);
      while (conf && conf.extend) {
        // Use `toConfObject` in case the button definition being extended
        // is itself a string or a function
        if (!_dtButtons[conf.extend]) {
          throw 'Cannot extend unknown button type: ' + conf.extend;
        }
        var objArray = toConfObject(_dtButtons[conf.extend]);
        if ($.isArray(objArray)) {
          return objArray;
        } else if (!objArray) {
          // This is a little brutal as it might be possible to have a
          // valid button without the extend, but if there is no extend
          // then the host button would be acting in an undefined state
          return false;
        }
        // Stash the current class name
        var originalClassName = objArray.className;
        conf = $.extend({}, objArray, conf);
        // The extend will have overwritten the original class name if the
        // `conf` object also assigned a class, but we want to concatenate
        // them so they are list that is combined from all extended buttons
        if (originalClassName && conf.className !== originalClassName) {
          conf.className = originalClassName + ' ' + conf.className;
        }
        // Buttons to be added to a collection  -gives the ability to define
        // if buttons should be added to the start or end of a collection
        var postfixButtons = conf.postfixButtons;
        if (postfixButtons) {
          if (!conf.buttons) {
            conf.buttons = [];
          }
          for (i = 0, ien = postfixButtons.length; i < ien; i++) {
            conf.buttons.push(postfixButtons[i]);
          }
          conf.postfixButtons = null;
        }
        var prefixButtons = conf.prefixButtons;
        if (prefixButtons) {
          if (!conf.buttons) {
            conf.buttons = [];
          }
          for (i = 0, ien = prefixButtons.length; i < ien; i++) {
            conf.buttons.splice(i, 0, prefixButtons[i]);
          }
          conf.prefixButtons = null;
        }
        // Although we want the `conf` object to overwrite almost all of
        // the properties of the object being extended, the `extend`
        // property should come from the object being extended
        conf.extend = objArray.extend;
      }
      return conf;
    }
  });
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Statics
 */
  /**
 * Show / hide a background layer behind a collection
 * @param  {boolean} Flag to indicate if the background should be shown or
 *   hidden 
 * @param  {string} Class to assign to the background
 * @static
 */
  Buttons.background = function (show, className, fade) {
    if (fade === undefined) {
      fade = 400;
    }
    if (show) {
      $('<div/>').addClass(className).css('display', 'none').appendTo('body').fadeIn(fade);
    } else {
      $('body > div.' + className).fadeOut(fade, function () {
        $(this).remove();
      });
    }
  };
  /**
 * Instance selector - select Buttons instances based on an instance selector
 * value from the buttons assigned to a DataTable. This is only useful if
 * multiple instances are attached to a DataTable.
 * @param  {string|int|array} Instance selector - see `instance-selector`
 *   documentation on the DataTables site
 * @param  {array} Button instance array that was attached to the DataTables
 *   settings object
 * @return {array} Buttons instances
 * @static
 */
  Buttons.instanceSelector = function (group, buttons) {
    if (!group) {
      return $.map(buttons, function (v) {
        return v.inst;
      });
    }
    var ret = [];
    var names = $.map(buttons, function (v) {
        return v.name;
      });
    // Flatten the group selector into an array of single options
    var process = function (input) {
      if ($.isArray(input)) {
        for (var i = 0, ien = input.length; i < ien; i++) {
          process(input[i]);
        }
        return;
      }
      if (typeof input === 'string') {
        if (input.indexOf(',') !== -1) {
          // String selector, list of names
          process(input.split(','));
        } else {
          // String selector individual name
          var idx = $.inArray($.trim(input), names);
          if (idx !== -1) {
            ret.push(buttons[idx].inst);
          }
        }
      } else if (typeof input === 'number') {
        // Index selector
        ret.push(buttons[input].inst);
      }
    };
    process(group);
    return ret;
  };
  /**
 * Button selector - select one or more buttons from a selector input so some
 * operation can be performed on them.
 * @param  {array} Button instances array that the selector should operate on
 * @param  {string|int|node|jQuery|array} Button selector - see
 *   `button-selector` documentation on the DataTables site
 * @return {array} Array of objects containing `inst` and `idx` properties of
 *   the selected buttons so you know which instance each button belongs to.
 * @static
 */
  Buttons.buttonSelector = function (insts, selector) {
    var ret = [];
    var nodeBuilder = function (a, buttons, baseIdx) {
      var button;
      var idx;
      for (var i = 0, ien = buttons.length; i < ien; i++) {
        button = buttons[i];
        if (button) {
          idx = baseIdx !== undefined ? baseIdx + i : i + '';
          a.push({
            node: button.node,
            name: button.conf.name,
            idx: idx
          });
          if (button.buttons) {
            nodeBuilder(a, button.buttons, idx + '-');
          }
        }
      }
    };
    var run = function (selector, inst) {
      var i, ien;
      var buttons = [];
      nodeBuilder(buttons, inst.s.buttons);
      var nodes = $.map(buttons, function (v) {
          return v.node;
        });
      if ($.isArray(selector) || selector instanceof $) {
        for (i = 0, ien = selector.length; i < ien; i++) {
          run(selector[i], inst);
        }
        return;
      }
      if (selector === null || selector === undefined || selector === '*') {
        // Select all
        for (i = 0, ien = buttons.length; i < ien; i++) {
          ret.push({
            inst: inst,
            node: buttons[i].node
          });
        }
      } else if (typeof selector === 'number') {
        // Main button index selector
        ret.push({
          inst: inst,
          node: inst.s.buttons[selector].node
        });
      } else if (typeof selector === 'string') {
        if (selector.indexOf(',') !== -1) {
          // Split
          var a = selector.split(',');
          for (i = 0, ien = a.length; i < ien; i++) {
            run($.trim(a[i]), inst);
          }
        } else if (selector.match(/^\d+(\-\d+)*$/)) {
          // Sub-button index selector
          var indexes = $.map(buttons, function (v) {
              return v.idx;
            });
          ret.push({
            inst: inst,
            node: buttons[$.inArray(selector, indexes)].node
          });
        } else if (selector.indexOf(':name') !== -1) {
          // Button name selector
          var name = selector.replace(':name', '');
          for (i = 0, ien = buttons.length; i < ien; i++) {
            if (buttons[i].name === name) {
              ret.push({
                inst: inst,
                node: buttons[i].node
              });
            }
          }
        } else {
          // jQuery selector on the nodes
          $(nodes).filter(selector).each(function () {
            ret.push({
              inst: inst,
              node: this
            });
          });
        }
      } else if (typeof selector === 'object' && selector.nodeName) {
        // Node selector
        var idx = $.inArray(selector, nodes);
        if (idx !== -1) {
          ret.push({
            inst: inst,
            node: nodes[idx]
          });
        }
      }
    };
    for (var i = 0, ien = insts.length; i < ien; i++) {
      var inst = insts[i];
      run(selector, inst);
    }
    return ret;
  };
  /**
 * Buttons defaults. For full documentation, please refer to the docs/option
 * directory or the DataTables site.
 * @type {Object}
 * @static
 */
  Buttons.defaults = {
    buttons: [
      'copy',
      'excel',
      'csv',
      'pdf',
      'print'
    ],
    name: 'main',
    tabIndex: 0,
    dom: {
      container: {
        tag: 'div',
        className: 'dt-buttons'
      },
      collection: {
        tag: 'div',
        className: 'dt-button-collection'
      },
      button: {
        tag: 'a',
        className: 'dt-button',
        active: 'active',
        disabled: 'disabled'
      },
      buttonLiner: {
        tag: 'span',
        className: ''
      }
    }
  };
  /**
 * Version information
 * @type {string}
 * @static
 */
  Buttons.version = '1.2.0';
  $.extend(_dtButtons, {
    collection: {
      text: function (dt) {
        return dt.i18n('buttons.collection', 'Collection');
      },
      className: 'buttons-collection',
      action: function (e, dt, button, config) {
        var host = button;
        var hostOffset = host.offset();
        var tableContainer = $(dt.table().container());
        var multiLevel = false;
        // Remove any old collection
        if ($('div.dt-button-background').length) {
          multiLevel = $('div.dt-button-collection').offset();
          $('body').trigger('click.dtb-collection');
        }
        config._collection.addClass(config.collectionLayout).css('display', 'none').appendTo('body').fadeIn(config.fade);
        var position = config._collection.css('position');
        if (multiLevel && position === 'absolute') {
          config._collection.css({
            top: multiLevel.top + 5,
            left: multiLevel.left + 5
          });
        } else if (position === 'absolute') {
          config._collection.css({
            top: hostOffset.top + host.outerHeight(),
            left: hostOffset.left
          });
          var listRight = hostOffset.left + config._collection.outerWidth();
          var tableRight = tableContainer.offset().left + tableContainer.width();
          if (listRight > tableRight) {
            config._collection.css('left', hostOffset.left - (listRight - tableRight));
          }
        } else {
          // Fix position - centre on screen
          var top = config._collection.height() / 2;
          if (top > $(window).height() / 2) {
            top = $(window).height() / 2;
          }
          config._collection.css('marginTop', top * -1);
        }
        if (config.background) {
          Buttons.background(true, config.backgroundClassName, config.fade);
        }
        // Need to break the 'thread' for the collection button being
        // activated by a click - it would also trigger this event
        setTimeout(function () {
          // This is bonkers, but if we don't have a click listener on the
          // background element, iOS Safari will ignore the body click
          // listener below. An empty function here is all that is
          // required to make it work...
          $('div.dt-button-background').on('click.dtb-collection', function () {
          });
          $('body').on('click.dtb-collection', function (e) {
            if (!$(e.target).parents().andSelf().filter(config._collection).length) {
              config._collection.fadeOut(config.fade, function () {
                config._collection.detach();
              });
              $('div.dt-button-background').off('click.dtb-collection');
              Buttons.background(false, config.backgroundClassName, config.fade);
              $('body').off('click.dtb-collection');
              dt.off('buttons-action.b-internal');
            }
          });
        }, 10);
        if (config.autoClose) {
          dt.on('buttons-action.b-internal', function () {
            $('div.dt-button-background').click();
          });
        }
      },
      background: true,
      collectionLayout: '',
      backgroundClassName: 'dt-button-background',
      autoClose: false,
      fade: 400
    },
    copy: function (dt, conf) {
      if (_dtButtons.copyHtml5) {
        return 'copyHtml5';
      }
      if (_dtButtons.copyFlash && _dtButtons.copyFlash.available(dt, conf)) {
        return 'copyFlash';
      }
    },
    csv: function (dt, conf) {
      // Common option that will use the HTML5 or Flash export buttons
      if (_dtButtons.csvHtml5 && _dtButtons.csvHtml5.available(dt, conf)) {
        return 'csvHtml5';
      }
      if (_dtButtons.csvFlash && _dtButtons.csvFlash.available(dt, conf)) {
        return 'csvFlash';
      }
    },
    excel: function (dt, conf) {
      // Common option that will use the HTML5 or Flash export buttons
      if (_dtButtons.excelHtml5 && _dtButtons.excelHtml5.available(dt, conf)) {
        return 'excelHtml5';
      }
      if (_dtButtons.excelFlash && _dtButtons.excelFlash.available(dt, conf)) {
        return 'excelFlash';
      }
    },
    pdf: function (dt, conf) {
      // Common option that will use the HTML5 or Flash export buttons
      if (_dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available(dt, conf)) {
        return 'pdfHtml5';
      }
      if (_dtButtons.pdfFlash && _dtButtons.pdfFlash.available(dt, conf)) {
        return 'pdfFlash';
      }
    },
    pageLength: function (dt) {
      var lengthMenu = dt.settings()[0].aLengthMenu;
      var vals = $.isArray(lengthMenu[0]) ? lengthMenu[0] : lengthMenu;
      var lang = $.isArray(lengthMenu[0]) ? lengthMenu[1] : lengthMenu;
      var text = function (dt) {
        return dt.i18n('buttons.pageLength', {
          '-1': 'Show all rows',
          _: 'Show %d rows'
        }, dt.page.len());
      };
      return {
        extend: 'collection',
        text: text,
        className: 'buttons-page-length',
        autoClose: true,
        buttons: $.map(vals, function (val, i) {
          return {
            text: lang[i],
            action: function (e, dt) {
              dt.page.len(val).draw();
            },
            init: function (dt, node, conf) {
              var that = this;
              var fn = function () {
                that.active(dt.page.len() === val);
              };
              dt.on('length.dt' + conf.namespace, fn);
              fn();
            },
            destroy: function (dt, node, conf) {
              dt.off('length.dt' + conf.namespace);
            }
          };
        }),
        init: function (dt, node, conf) {
          var that = this;
          dt.on('length.dt' + conf.namespace, function () {
            that.text(text(dt));
          });
        },
        destroy: function (dt, node, conf) {
          dt.off('length.dt' + conf.namespace);
        }
      };
    }
  });
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables API
 *
 * For complete documentation, please refer to the docs/api directory or the
 * DataTables site
 */
  // Buttons group and individual button selector
  DataTable.Api.register('buttons()', function (group, selector) {
    // Argument shifting
    if (selector === undefined) {
      selector = group;
      group = undefined;
    }
    return this.iterator(true, 'table', function (ctx) {
      if (ctx._buttons) {
        return Buttons.buttonSelector(Buttons.instanceSelector(group, ctx._buttons), selector);
      }
    }, true);
  });
  // Individual button selector
  DataTable.Api.register('button()', function (group, selector) {
    // just run buttons() and truncate
    var buttons = this.buttons(group, selector);
    if (buttons.length > 1) {
      buttons.splice(1, buttons.length);
    }
    return buttons;
  });
  // Active buttons
  DataTable.Api.registerPlural('buttons().active()', 'button().active()', function (flag) {
    if (flag === undefined) {
      return this.map(function (set) {
        return set.inst.active(set.node);
      });
    }
    return this.each(function (set) {
      set.inst.active(set.node, flag);
    });
  });
  // Get / set button action
  DataTable.Api.registerPlural('buttons().action()', 'button().action()', function (action) {
    if (action === undefined) {
      return this.map(function (set) {
        return set.inst.action(set.node);
      });
    }
    return this.each(function (set) {
      set.inst.action(set.node, action);
    });
  });
  // Enable / disable buttons
  DataTable.Api.register([
    'buttons().enable()',
    'button().enable()'
  ], function (flag) {
    return this.each(function (set) {
      set.inst.enable(set.node, flag);
    });
  });
  // Disable buttons
  DataTable.Api.register([
    'buttons().disable()',
    'button().disable()'
  ], function () {
    return this.each(function (set) {
      set.inst.disable(set.node);
    });
  });
  // Get button nodes
  DataTable.Api.registerPlural('buttons().nodes()', 'button().node()', function () {
    var jq = $();
    // jQuery will automatically reduce duplicates to a single entry
    $(this.each(function (set) {
      jq = jq.add(set.inst.node(set.node));
    }));
    return jq;
  });
  // Get / set button text (i.e. the button labels)
  DataTable.Api.registerPlural('buttons().text()', 'button().text()', function (label) {
    if (label === undefined) {
      return this.map(function (set) {
        return set.inst.text(set.node);
      });
    }
    return this.each(function (set) {
      set.inst.text(set.node, label);
    });
  });
  // Trigger a button's action
  DataTable.Api.registerPlural('buttons().trigger()', 'button().trigger()', function () {
    return this.each(function (set) {
      set.inst.node(set.node).trigger('click');
    });
  });
  // Get the container elements for the button sets selected
  DataTable.Api.registerPlural('buttons().containers()', 'buttons().container()', function () {
    var jq = $();
    // jQuery will automatically reduce duplicates to a single entry
    $(this.each(function (set) {
      jq = jq.add(set.inst.container());
    }));
    return jq;
  });
  // Add a new button
  DataTable.Api.register('button().add()', function (idx, conf) {
    if (this.length === 1) {
      this[0].inst.add(conf, idx);
    }
    return this.button(idx);
  });
  // Destroy the button sets selected
  DataTable.Api.register('buttons().destroy()', function () {
    this.pluck('inst').unique().each(function (inst) {
      inst.destroy();
    });
    return this;
  });
  // Remove a button
  DataTable.Api.registerPlural('buttons().remove()', 'buttons().remove()', function () {
    this.each(function (set) {
      set.inst.remove(set.node);
    });
    return this;
  });
  // Information box that can be used by buttons
  var _infoTimer;
  DataTable.Api.register('buttons.info()', function (title, message, time) {
    var that = this;
    if (title === false) {
      $('#datatables_buttons_info').fadeOut(function () {
        $(this).remove();
      });
      clearTimeout(_infoTimer);
      _infoTimer = null;
      return this;
    }
    if (_infoTimer) {
      clearTimeout(_infoTimer);
    }
    if ($('#datatables_buttons_info').length) {
      $('#datatables_buttons_info').remove();
    }
    title = title ? '<h2>' + title + '</h2>' : '';
    $('<div id="datatables_buttons_info" class="dt-button-info"/>').html(title).append($('<div/>')[typeof message === 'string' ? 'html' : 'append'](message)).css('display', 'none').appendTo('body').fadeIn();
    if (time !== undefined && time !== 0) {
      _infoTimer = setTimeout(function () {
        that.buttons.info(false);
      }, time);
    }
    return this;
  });
  // Get data from the table for export - this is common to a number of plug-in
  // buttons so it is included in the Buttons core library
  DataTable.Api.register('buttons.exportData()', function (options) {
    if (this.context.length) {
      return _exportData(new DataTable.Api(this.context[0]), options);
    }
  });
  var _exportTextarea = $('<textarea/>')[0];
  var _exportData = function (dt, inOpts) {
    var config = $.extend(true, {}, {
        rows: null,
        columns: '',
        modifier: {
          search: 'applied',
          order: 'applied'
        },
        orthogonal: 'display',
        stripHtml: true,
        stripNewlines: true,
        decodeEntities: true,
        trim: true,
        format: {
          header: function (d) {
            return strip(d);
          },
          footer: function (d) {
            return strip(d);
          },
          body: function (d) {
            return strip(d);
          }
        }
      }, inOpts);
    var strip = function (str) {
      if (typeof str !== 'string') {
        return str;
      }
      if (config.stripHtml) {
        str = str.replace(/<[^>]*>/g, '');
      }
      if (config.trim) {
        str = str.replace(/^\s+|\s+$/g, '');
      }
      if (config.stripNewlines) {
        str = str.replace(/\n/g, ' ');
      }
      if (config.decodeEntities) {
        _exportTextarea.innerHTML = str;
        str = _exportTextarea.value;
      }
      return str;
    };
    var header = dt.columns(config.columns).indexes().map(function (idx) {
        return config.format.header(dt.column(idx).header().innerHTML, idx);
      }).toArray();
    var footer = dt.table().footer() ? dt.columns(config.columns).indexes().map(function (idx) {
        var el = dt.column(idx).footer();
        return config.format.footer(el ? el.innerHTML : '', idx);
      }).toArray() : null;
    var rowIndexes = dt.rows(config.rows, config.modifier).indexes().toArray();
    var cells = dt.cells(rowIndexes, config.columns).render(config.orthogonal).toArray();
    var columns = header.length;
    var rows = columns > 0 ? cells.length / columns : 0;
    var body = new Array(rows);
    var cellCounter = 0;
    for (var i = 0, ien = rows; i < ien; i++) {
      var row = new Array(columns);
      for (var j = 0; j < columns; j++) {
        row[j] = config.format.body(cells[cellCounter], j, i);
        cellCounter++;
      }
      body[i] = row;
    }
    return {
      header: header,
      footer: footer,
      body: body
    };
  };
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables interface
 */
  // Attach to DataTables objects for global access
  $.fn.dataTable.Buttons = Buttons;
  $.fn.DataTable.Buttons = Buttons;
  // DataTables creation - check if the buttons have been defined for this table,
  // they will have been if the `B` option was used in `dom`, otherwise we should
  // create the buttons instance here so they can be inserted into the document
  // using the API. Listen for `init` for compatibility with pre 1.10.10, but to
  // be removed in future.
  $(document).on('init.dt plugin-init.dt', function (e, settings) {
    if (e.namespace !== 'dt') {
      return;
    }
    var opts = settings.oInit.buttons || DataTable.defaults.buttons;
    if (opts && !settings._buttons) {
      new Buttons(settings, opts).container();
    }
  });
  // DataTables `dom` feature option
  DataTable.ext.feature.push({
    fnInit: function (settings) {
      var api = new DataTable.Api(settings);
      var opts = api.init().buttons || DataTable.defaults.buttons;
      return new Buttons(api, opts).container();
    },
    cFeature: 'B'
  });
  return Buttons;
}));
/*!
 Bootstrap integration for DataTables' Buttons
 ©2016 SpryMedia Ltd - datatables.net/license
*/
(function (c) {
  'function' === typeof define && define.amd ? define([
    'jquery',
    'datatables.net-bs',
    'datatables.net-buttons'
  ], function (a) {
    return c(a, window, document);
  }) : 'object' === typeof exports ? module.exports = function (a, b) {
    a || (a = window);
    if (!b || !b.fn.dataTable)
      b = require('datatables.net-bs')(a, b).$;
    b.fn.dataTable.Buttons || require('datatables.net-buttons')(a, b);
    return c(b, a, a.document);
  } : c(jQuery, window, document);
}(function (c) {
  var a = c.fn.dataTable;
  c.extend(!0, a.Buttons.defaults, {
    dom: {
      container: { className: 'dt-buttons btn-group' },
      button: { className: 'btn btn-default' },
      collection: {
        tag: 'ul',
        className: 'dt-button-collection dropdown-menu',
        button: {
          tag: 'li',
          className: 'dt-button'
        },
        buttonLiner: {
          tag: 'a',
          className: ''
        }
      }
    }
  });
  a.ext.buttons.collection.text = function (a) {
    return a.i18n('buttons.collection', 'Collection <span class="caret"/>');
  };
  return a.Buttons;
}));
/*!
 Select for DataTables 1.2.0
 2015-2016 SpryMedia Ltd - datatables.net/license/mit
*/
(function (e) {
  'function' === typeof define && define.amd ? define([
    'jquery',
    'datatables.net'
  ], function (i) {
    return e(i, window, document);
  }) : 'object' === typeof exports ? module.exports = function (i, l) {
    i || (i = window);
    if (!l || !l.fn.dataTable)
      l = require('datatables.net')(i, l).$;
    return e(l, i, i.document);
  } : e(jQuery, window, document);
}(function (e, i, l, h) {
  function t(b, a, c) {
    var d;
    d = function (c, a) {
      if (c > a)
        var d = a, a = c, c = d;
      var f = !1;
      return b.columns(':visible').indexes().filter(function (b) {
        b === c && (f = !0);
        return b === a ? (f = !1, !0) : f;
      });
    };
    var f = function (c, a) {
      var d = b.rows({ search: 'applied' }).indexes();
      if (d.indexOf(c) > d.indexOf(a))
        var f = a, a = c, c = f;
      var e = !1;
      return d.filter(function (b) {
        b === c && (e = !0);
        return b === a ? (e = !1, !0) : e;
      });
    };
    !b.cells({ selected: !0 }).any() && !c ? (d = d(0, a.column), c = f(0, a.row)) : (d = d(c.column, a.column), c = f(c.row, a.row));
    c = b.cells(c, d).flatten();
    b.cells(a, { selected: !0 }).any() ? b.cells(c).deselect() : b.cells(c).select();
  }
  function r(b) {
    var a = b.settings()[0]._select.selector;
    e(b.table().body()).off('mousedown.dtSelect', a).off('mouseup.dtSelect', a).off('click.dtSelect', a);
    e('body').off('click.dtSelect');
  }
  function v(b) {
    var a = e(b.table().body()), c = b.settings()[0], d = c._select.selector;
    a.on('mousedown.dtSelect', d, function (c) {
      if (c.shiftKey || c.metaKey || c.ctrlKey)
        a.css('-moz-user-select', 'none').one('selectstart.dtSelect', d, function () {
          return !1;
        });
    }).on('mouseup.dtSelect', d, function () {
      a.css('-moz-user-select', '');
    }).on('click.dtSelect', d, function (c) {
      var a = b.select.items();
      if (!i.getSelection || !i.getSelection().toString()) {
        var d = b.settings()[0];
        if (e(c.target).closest('div.dataTables_wrapper')[0] == b.table().container()) {
          var g = b.cell(e(c.target).closest('td, th'));
          if (g.any()) {
            var h = e.Event('user-select.dt');
            k(b, h, [
              a,
              g,
              c
            ]);
            h.isDefaultPrevented() || (h = g.index(), 'row' === a ? (a = h.row, s(c, b, d, 'row', a)) : 'column' === a ? (a = g.index().column, s(c, b, d, 'column', a)) : 'cell' === a && (a = g.index(), s(c, b, d, 'cell', a)), d._select_lastCell = h);
          }
        }
      }
    });
    e('body').on('click.dtSelect', function (a) {
      c._select.blurable && !e(a.target).parents().filter(b.table().container()).length && (e(a.target).parents('div.DTE').length || p(c, !0));
    });
  }
  function k(b, a, c, d) {
    if (!d || b.flatten().length)
      'string' === typeof a && (a += '.dt'), c.unshift(b), e(b.table().node()).triggerHandler(a, c);
  }
  function w(b) {
    var a = b.settings()[0];
    if (a._select.info && a.aanFeatures.i) {
      var c = e('<span class="select-info"/>'), d = function (a, d) {
          c.append(e('<span class="select-item"/>').append(b.i18n('select.' + a + 's', {
            _: '%d ' + a + 's selected',
            '0': '',
            1: '1 ' + a + ' selected'
          }, d)));
        };
      d('row', b.rows({ selected: !0 }).flatten().length);
      d('column', b.columns({ selected: !0 }).flatten().length);
      d('cell', b.cells({ selected: !0 }).flatten().length);
      e.each(a.aanFeatures.i, function (a, b) {
        var b = e(b), d = b.children('span.select-info');
        d.length && d.remove();
        '' !== c.text() && b.append(c);
      });
    }
  }
  function x(b, a, c, d) {
    var f = b[a + 's']({ search: 'applied' }).indexes(), d = e.inArray(d, f), m = e.inArray(c, f);
    if (!b[a + 's']({ selected: !0 }).any() && -1 === d)
      f.splice(e.inArray(c, f) + 1, f.length);
    else {
      if (d > m)
        var j = m, m = d, d = j;
      f.splice(m + 1, f.length);
      f.splice(0, d);
    }
    b[a](c, { selected: !0 }).any() ? (f.splice(e.inArray(c, f), 1), b[a + 's'](f).deselect()) : b[a + 's'](f).select();
  }
  function p(b, a) {
    if (a || 'single' === b._select.style) {
      var c = new g.Api(b);
      c.rows({ selected: !0 }).deselect();
      c.columns({ selected: !0 }).deselect();
      c.cells({ selected: !0 }).deselect();
    }
  }
  function s(b, a, c, d, f) {
    var e = a.select.style(), j = a[d](f, { selected: !0 }).any();
    'os' === e ? b.ctrlKey || b.metaKey ? a[d](f).select(!j) : b.shiftKey ? 'cell' === d ? t(a, f, c._select_lastCell || null) : x(a, d, f, c._select_lastCell ? c._select_lastCell[d] : null) : (b = a[d + 's']({ selected: !0 }), j && 1 === b.flatten().length ? a[d](f).deselect() : (b.deselect(), a[d](f).select())) : 'multi+shift' == e ? b.shiftKey ? 'cell' === d ? t(a, f, c._select_lastCell || null) : x(a, d, f, c._select_lastCell ? c._select_lastCell[d] : null) : a[d](f).select(!j) : a[d](f).select(!j);
  }
  function q(b, a) {
    return function (c) {
      return c.i18n('buttons.' + b, a);
    };
  }
  var g = e.fn.dataTable;
  g.select = {};
  g.select.version = '1.2.0';
  g.select.init = function (b) {
    var a = b.settings()[0], c = a.oInit.select, d = g.defaults.select, c = c === h ? d : c, d = 'row', f = 'api', m = !1, j = !0, u = 'td, th', i = 'selected';
    a._select = {};
    if (!0 === c)
      f = 'os';
    else if ('string' === typeof c)
      f = c;
    else if (e.isPlainObject(c) && (c.blurable !== h && (m = c.blurable), c.info !== h && (j = c.info), c.items !== h && (d = c.items), c.style !== h && (f = c.style), c.selector !== h && (u = c.selector), c.className !== h))
      i = c.className;
    b.select.selector(u);
    b.select.items(d);
    b.select.style(f);
    b.select.blurable(m);
    b.select.info(j);
    a._select.className = i;
    e.fn.dataTable.ext.order['select-checkbox'] = function (a, c) {
      return this.api().column(c, { order: 'index' }).nodes().map(function (c) {
        return 'row' === a._select.items ? e(c).parent().hasClass(a._select.className) : 'cell' === a._select.items ? e(c).hasClass(a._select.className) : !1;
      });
    };
    e(b.table().node()).hasClass('selectable') && b.select.style('os');
  };
  e.each([
    {
      type: 'row',
      prop: 'aoData'
    },
    {
      type: 'column',
      prop: 'aoColumns'
    }
  ], function (b, a) {
    g.ext.selector[a.type].push(function (c, b, f) {
      var b = b.selected, e, j = [];
      if (b === h)
        return f;
      for (var g = 0, i = f.length; g < i; g++)
        e = c[a.prop][f[g]], (!0 === b && !0 === e._select_selected || !1 === b && !e._select_selected) && j.push(f[g]);
      return j;
    });
  });
  g.ext.selector.cell.push(function (b, a, c) {
    var a = a.selected, d, f = [];
    if (a === h)
      return c;
    for (var e = 0, g = c.length; e < g; e++)
      d = b.aoData[c[e].row], (!0 === a && d._selected_cells && !0 === d._selected_cells[c[e].column] || !1 === a && (!d._selected_cells || !d._selected_cells[c[e].column])) && f.push(c[e]);
    return f;
  });
  var n = g.Api.register, o = g.Api.registerPlural;
  n('select()', function () {
    return this.iterator('table', function (b) {
      g.select.init(new g.Api(b));
    });
  });
  n('select.blurable()', function (b) {
    return b === h ? this.context[0]._select.blurable : this.iterator('table', function (a) {
      a._select.blurable = b;
    });
  });
  n('select.info()', function (b) {
    return w === h ? this.context[0]._select.info : this.iterator('table', function (a) {
      a._select.info = b;
    });
  });
  n('select.items()', function (b) {
    return b === h ? this.context[0]._select.items : this.iterator('table', function (a) {
      a._select.items = b;
      k(new g.Api(a), 'selectItems', [b]);
    });
  });
  n('select.style()', function (b) {
    return b === h ? this.context[0]._select.style : this.iterator('table', function (a) {
      a._select.style = b;
      if (!a._select_init) {
        var c = new g.Api(a);
        a.aoRowCreatedCallback.push({
          fn: function (c, b, d) {
            b = a.aoData[d];
            b._select_selected && e(c).addClass(a._select.className);
            c = 0;
            for (d = a.aoColumns.length; c < d; c++)
              (a.aoColumns[c]._select_selected || b._selected_cells && b._selected_cells[c]) && e(b.anCells[c]).addClass(a._select.className);
          },
          sName: 'select-deferRender'
        });
        c.on('preXhr.dt.dtSelect', function () {
          var a = c.rows({ selected: !0 }).ids(!0).filter(function (c) {
              return c !== h;
            }), b = c.cells({ selected: !0 }).eq(0).map(function (a) {
              var b = c.row(a.row).id(!0);
              return b ? {
                row: b,
                column: a.column
              } : h;
            }).filter(function (c) {
              return c !== h;
            });
          c.one('draw.dt.dtSelect', function () {
            c.rows(a).select();
            b.any() && b.each(function (a) {
              c.cells(a.row, a.column).select();
            });
          });
        });
        c.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
          w(c);
        });
        c.on('destroy.dtSelect', function () {
          r(c);
          c.off('.dtSelect');
        });
      }
      var d = new g.Api(a);
      r(d);
      'api' !== b && v(d);
      k(new g.Api(a), 'selectStyle', [b]);
    });
  });
  n('select.selector()', function (b) {
    return b === h ? this.context[0]._select.selector : this.iterator('table', function (a) {
      r(new g.Api(a));
      a._select.selector = b;
      'api' !== a._select.style && v(new g.Api(a));
    });
  });
  o('rows().select()', 'row().select()', function (b) {
    var a = this;
    if (!1 === b)
      return this.deselect();
    this.iterator('row', function (c, a) {
      p(c);
      c.aoData[a]._select_selected = !0;
      e(c.aoData[a].nTr).addClass(c._select.className);
    });
    this.iterator('table', function (c, b) {
      k(a, 'select', [
        'row',
        a[b]
      ], !0);
    });
    return this;
  });
  o('columns().select()', 'column().select()', function (b) {
    var a = this;
    if (!1 === b)
      return this.deselect();
    this.iterator('column', function (a, b) {
      p(a);
      a.aoColumns[b]._select_selected = !0;
      var f = new g.Api(a).column(b);
      e(f.header()).addClass(a._select.className);
      e(f.footer()).addClass(a._select.className);
      f.nodes().to$().addClass(a._select.className);
    });
    this.iterator('table', function (c, b) {
      k(a, 'select', [
        'column',
        a[b]
      ], !0);
    });
    return this;
  });
  o('cells().select()', 'cell().select()', function (b) {
    var a = this;
    if (!1 === b)
      return this.deselect();
    this.iterator('cell', function (a, b, f) {
      p(a);
      b = a.aoData[b];
      b._selected_cells === h && (b._selected_cells = []);
      b._selected_cells[f] = !0;
      b.anCells && e(b.anCells[f]).addClass(a._select.className);
    });
    this.iterator('table', function (b, d) {
      k(a, 'select', [
        'cell',
        a[d]
      ], !0);
    });
    return this;
  });
  o('rows().deselect()', 'row().deselect()', function () {
    var b = this;
    this.iterator('row', function (a, b) {
      a.aoData[b]._select_selected = !1;
      e(a.aoData[b].nTr).removeClass(a._select.className);
    });
    this.iterator('table', function (a, c) {
      k(b, 'deselect', [
        'row',
        b[c]
      ], !0);
    });
    return this;
  });
  o('columns().deselect()', 'column().deselect()', function () {
    var b = this;
    this.iterator('column', function (a, b) {
      a.aoColumns[b]._select_selected = !1;
      var d = new g.Api(a), f = d.column(b);
      e(f.header()).removeClass(a._select.className);
      e(f.footer()).removeClass(a._select.className);
      d.cells(null, b).indexes().each(function (b) {
        var c = a.aoData[b.row], d = c._selected_cells;
        c.anCells && (!d || !d[b.column]) && e(c.anCells[b.column]).removeClass(a._select.className);
      });
    });
    this.iterator('table', function (a, c) {
      k(b, 'deselect', [
        'column',
        b[c]
      ], !0);
    });
    return this;
  });
  o('cells().deselect()', 'cell().deselect()', function () {
    var b = this;
    this.iterator('cell', function (a, b, d) {
      b = a.aoData[b];
      b._selected_cells[d] = !1;
      b.anCells && !a.aoColumns[d]._select_selected && e(b.anCells[d]).removeClass(a._select.className);
    });
    this.iterator('table', function (a, c) {
      k(b, 'deselect', [
        'cell',
        b[c]
      ], !0);
    });
    return this;
  });
  e.extend(g.ext.buttons, {
    selected: {
      text: q('selected', 'Selected'),
      className: 'buttons-selected',
      init: function (b) {
        var a = this;
        b.on('draw.dt.DT select.dt.DT deselect.dt.DT', function () {
          var b = a.rows({ selected: !0 }).any() || a.columns({ selected: !0 }).any() || a.cells({ selected: !0 }).any();
          a.enable(b);
        });
        this.disable();
      }
    },
    selectedSingle: {
      text: q('selectedSingle', 'Selected single'),
      className: 'buttons-selected-single',
      init: function (b) {
        var a = this;
        b.on('draw.dt.DT select.dt.DT deselect.dt.DT', function () {
          var c = b.rows({ selected: !0 }).flatten().length + b.columns({ selected: !0 }).flatten().length + b.cells({ selected: !0 }).flatten().length;
          a.enable(1 === c);
        });
        this.disable();
      }
    },
    selectAll: {
      text: q('selectAll', 'Select all'),
      className: 'buttons-select-all',
      action: function () {
        this[this.select.items() + 's']().select();
      }
    },
    selectNone: {
      text: q('selectNone', 'Deselect all'),
      className: 'buttons-select-none',
      action: function () {
        p(this.settings()[0], !0);
      },
      init: function (b) {
        var a = this;
        b.on('draw.dt.DT select.dt.DT deselect.dt.DT', function () {
          var c = b.rows({ selected: !0 }).flatten().length + b.columns({ selected: !0 }).flatten().length + b.cells({ selected: !0 }).flatten().length;
          a.enable(0 < c);
        });
        this.disable();
      }
    }
  });
  e.each([
    'Row',
    'Column',
    'Cell'
  ], function (b, a) {
    var c = a.toLowerCase();
    g.ext.buttons['select' + a + 's'] = {
      text: q('select' + a + 's', 'Select ' + c + 's'),
      className: 'buttons-select-' + c + 's',
      action: function () {
        this.select.items(c);
      },
      init: function (a) {
        var b = this;
        a.on('selectItems.dt.DT', function (a, d, e) {
          b.active(e === c);
        });
      }
    };
  });
  e(l).on('preInit.dt.dtSelect', function (b, a) {
    'dt' === b.namespace && g.select.init(new g.Api(a));
  });
  return g.select;
}));
/*!
 KeyTable 2.1.2
 ©2009-2016 SpryMedia Ltd - datatables.net/license
*/
(function (e) {
  'function' === typeof define && define.amd ? define([
    'jquery',
    'datatables.net'
  ], function (k) {
    return e(k, window, document);
  }) : 'object' === typeof exports ? module.exports = function (k, g) {
    k || (k = window);
    if (!g || !g.fn.dataTable)
      g = require('datatables.net')(k, g).$;
    return e(g, k, k.document);
  } : e(jQuery, window, document);
}(function (e, k, g, n) {
  var h = e.fn.dataTable, l = function (a, b) {
      if (!h.versionCheck || !h.versionCheck('1.10.8'))
        throw 'KeyTable requires DataTables 1.10.8 or newer';
      this.c = e.extend(!0, {}, h.defaults.keyTable, l.defaults, b);
      this.s = {
        dt: new h.Api(a),
        enable: !0,
        focusDraw: !1
      };
      this.dom = {};
      var d = this.s.dt.settings()[0], c = d.keytable;
      if (c)
        return c;
      d.keytable = this;
      this._constructor();
    };
  e.extend(l.prototype, {
    blur: function () {
      this._blur();
    },
    enable: function (a) {
      this.s.enable = a;
    },
    focus: function (a, b) {
      this._focus(this.s.dt.cell(a, b));
    },
    focused: function (a) {
      if (!this.s.lastFocus)
        return !1;
      var b = this.s.lastFocus.index();
      return a.row === b.row && a.column === b.column;
    },
    _constructor: function () {
      this._tabInput();
      var a = this, b = this.s.dt, d = e(b.table().node());
      'static' === d.css('position') && d.css('position', 'relative');
      e(b.table().body()).on('click.keyTable', 'th, td', function () {
        if (!1 !== a.s.enable) {
          var c = b.cell(this);
          c.any() && a._focus(c, null, !1);
        }
      });
      e(g).on('keydown.keyTable', function (b) {
        a._key(b);
      });
      if (this.c.blurable)
        e(g).on('click.keyTable', function (c) {
          e(c.target).parents('.dataTables_filter').length && a._blur();
          e(c.target).parents().filter(b.table().container()).length || e(c.target).parents('div.DTE').length || a._blur();
        });
      if (this.c.editor)
        b.on('key.keyTable', function (b, c, d, e, g) {
          a._editor(d, g);
        });
      if (b.settings()[0].oFeatures.bStateSave)
        b.on('stateSaveParams.keyTable', function (b, c, d) {
          d.keyTable = a.s.lastFocus ? a.s.lastFocus.index() : null;
        });
      b.on('xhr.keyTable', function () {
        if (!a.s.focusDraw) {
          var c = a.s.lastFocus;
          c && (a.s.lastFocus = null, b.one('draw', function () {
            a._focus(c);
          }));
        }
      });
      b.on('destroy.keyTable', function () {
        b.off('.keyTable');
        e(b.table().body()).off('click.keyTable', 'th, td');
        e(g.body).off('keydown.keyTable').off('click.keyTable');
      });
      var c = b.state.loaded();
      if (c && c.keyTable)
        b.one('init', function () {
          var a = b.cell(c.keyTable);
          a.any() && a.focus();
        });
      else
        this.c.focus && b.cell(this.c.focus).focus();
    },
    _blur: function () {
      if (this.s.enable && this.s.lastFocus) {
        var a = this.s.lastFocus;
        e(a.node()).removeClass(this.c.className);
        this.s.lastFocus = null;
        this._emitEvent('key-blur', [
          this.s.dt,
          a
        ]);
      }
    },
    _columns: function () {
      var a = this.s.dt, b = a.columns(this.c.columns).indexes(), d = [];
      a.columns(':visible').every(function (a) {
        -1 !== b.indexOf(a) && d.push(a);
      });
      return d;
    },
    _editor: function (a, b) {
      var d = this.s.dt, c = this.c.editor;
      b.stopPropagation();
      13 === a && b.preventDefault();
      c.inline(this.s.lastFocus.index());
      var f = e('div.DTE input, div.DTE textarea');
      f.length && f[0].select();
      d.keys.enable('navigation-only');
      d.one('key-blur.editor', function () {
        c.displayed() && c.submit();
      });
      c.one('close', function () {
        d.keys.enable(!0);
        d.off('key-blur.editor');
      });
    },
    _emitEvent: function (a, b) {
      this.s.dt.iterator('table', function (d) {
        e(d.nTable).triggerHandler(a, b);
      });
    },
    _focus: function (a, b, d) {
      var c = this, f = this.s.dt, i = f.page.info(), m = this.s.lastFocus;
      if (this.s.enable) {
        if ('number' !== typeof a) {
          var j = a.index(), b = j.column, a = f.rows({
              filter: 'applied',
              order: 'applied'
            }).indexes().indexOf(j.row);
          i.serverSide && (a += i.start);
        }
        if (-1 !== i.length && (a < i.start || a >= i.start + i.length))
          this.s.focusDraw = !0, f.one('draw', function () {
            c.s.focusDraw = !1;
            c._focus(a, b);
          }).page(Math.floor(a / i.length)).draw(!1);
        else if (-1 !== e.inArray(b, this._columns())) {
          i.serverSide && (a -= i.start);
          i = f.cell(':eq(' + a + ')', b, { search: 'applied' });
          if (m) {
            if (m.node() === i.node())
              return;
            this._blur();
          }
          m = e(i.node());
          m.addClass(this.c.className);
          if (d === n || !0 === d)
            this._scroll(e(k), e(g.body), m, 'offset'), d = f.table().body().parentNode, d !== f.table().header().parentNode && (d = e(d.parentNode), this._scroll(d, d, m, 'position'));
          this.s.lastFocus = i;
          this._emitEvent('key-focus', [
            this.s.dt,
            i
          ]);
          f.state.save();
        }
      }
    },
    _key: function (a) {
      if (this.s.enable && !(0 === a.keyCode || a.ctrlKey || a.metaKey || a.altKey)) {
        var b = this.s.lastFocus;
        if (b) {
          var d = this, c = this.s.dt;
          if (!(this.c.keys && -1 === e.inArray(a.keyCode, this.c.keys)))
            switch (a.keyCode) {
            case 9:
              this._shift(a, a.shiftKey ? 'left' : 'right', !0);
              break;
            case 27:
              this.s.blurable && !0 === this.s.enable && this._blur();
              break;
            case 33:
            case 34:
              a.preventDefault();
              var f = c.cells({ page: 'current' }).nodes().indexOf(b.node());
              c.one('draw', function () {
                var a = c.cells({ page: 'current' }).nodes();
                d._focus(c.cell(f < a.length ? a[f] : a[a.length - 1]));
              }).page(33 === a.keyCode ? 'previous' : 'next').draw(!1);
              break;
            case 35:
            case 36:
              a.preventDefault();
              b = c.cells({ page: 'current' }).indexes();
              this._focus(c.cell(b[35 === a.keyCode ? b.length - 1 : 0]));
              break;
            case 37:
              this._shift(a, 'left');
              break;
            case 38:
              this._shift(a, 'up');
              break;
            case 39:
              this._shift(a, 'right');
              break;
            case 40:
              this._shift(a, 'down');
              break;
            default:
              !0 === this.s.enable && this._emitEvent('key', [
                c,
                a.keyCode,
                this.s.lastFocus,
                a
              ]);
            }
        }
      }
    },
    _scroll: function (a, b, d, c) {
      var c = d[c](), f = d.outerHeight(), d = d.outerWidth(), e = b.scrollTop(), g = b.scrollLeft(), j = a.height(), a = a.width();
      c.top < e && b.scrollTop(c.top);
      c.left < g && b.scrollLeft(c.left);
      c.top + f > e + j && f < j && b.scrollTop(c.top + f - j);
      c.left + d > g + a && d < a && b.scrollLeft(c.left + d - a);
    },
    _shift: function (a, b, d) {
      var c = this.s.dt, f = c.page.info(), i = f.recordsDisplay, g = this.s.lastFocus, j = this._columns();
      if (g) {
        var h = c.rows({
            filter: 'applied',
            order: 'applied'
          }).indexes().indexOf(g.index().row);
        f.serverSide && (h += f.start);
        c = c.columns(j).indexes().indexOf(g.index().column);
        f = j[c];
        'right' === b ? c >= j.length - 1 ? (h++, f = j[0]) : f = j[c + 1] : 'left' === b ? 0 === c ? (h--, f = j[j.length - 1]) : f = j[c - 1] : 'up' === b ? h-- : 'down' === b && h++;
        0 <= h && h < i && -1 !== e.inArray(f, j) ? (a.preventDefault(), this._focus(h, f)) : !d || !this.c.blurable ? a.preventDefault() : this._blur();
      }
    },
    _tabInput: function () {
      var a = this, b = this.s.dt, d = null !== this.c.tabIndex ? this.c.tabIndex : b.settings()[0].iTabIndex;
      if (-1 != d)
        e('<div><input type="text" tabindex="' + d + '"/></div>').css({
          position: 'absolute',
          height: 1,
          width: 0,
          overflow: 'hidden'
        }).insertBefore(b.table().node()).children().on('focus', function () {
          a._focus(b.cell(':eq(0)', '0:visible', { page: 'current' }));
        });
    }
  });
  l.defaults = {
    blurable: !0,
    className: 'focus',
    columns: '',
    editor: null,
    focus: null,
    keys: null,
    tabIndex: null
  };
  l.version = '2.1.2';
  e.fn.dataTable.KeyTable = l;
  e.fn.DataTable.KeyTable = l;
  h.Api.register('cell.blur()', function () {
    return this.iterator('table', function (a) {
      a.keytable && a.keytable.blur();
    });
  });
  h.Api.register('cell().focus()', function () {
    return this.iterator('cell', function (a, b, d) {
      a.keytable && a.keytable.focus(b, d);
    });
  });
  h.Api.register('keys.disable()', function () {
    return this.iterator('table', function (a) {
      a.keytable && a.keytable.enable(!1);
    });
  });
  h.Api.register('keys.enable()', function (a) {
    return this.iterator('table', function (b) {
      b.keytable && b.keytable.enable(a === n ? !0 : a);
    });
  });
  h.ext.selector.cell.push(function (a, b, d) {
    var b = b.focused, a = a.keytable, c = [];
    if (!a || b === n)
      return d;
    for (var e = 0, g = d.length; e < g; e++)
      (!0 === b && a.focused(d[e]) || !1 === b && !a.focused(d[e])) && c.push(d[e]);
    return c;
  });
  e(g).on('preInit.dt.dtk', function (a, b) {
    if ('dt' === a.namespace) {
      var d = b.oInit.keys, c = h.defaults.keys;
      if (d || c)
        c = e.extend({}, d, c), !1 !== d && new l(b, c);
    }
  });
  return l;
}));
/*!
 ColReorder 1.3.2
 ©2010-2015 SpryMedia Ltd - datatables.net/license
*/
(function (f) {
  'function' === typeof define && define.amd ? define([
    'jquery',
    'datatables.net'
  ], function (o) {
    return f(o, window, document);
  }) : 'object' === typeof exports ? module.exports = function (o, l) {
    o || (o = window);
    if (!l || !l.fn.dataTable)
      l = require('datatables.net')(o, l).$;
    return f(l, o, o.document);
  } : f(jQuery, window, document);
}(function (f, o, l, r) {
  function q(a) {
    for (var b = [], d = 0, e = a.length; d < e; d++)
      b[a[d]] = d;
    return b;
  }
  function p(a, b, d) {
    b = a.splice(b, 1)[0];
    a.splice(d, 0, b);
  }
  function s(a, b, d) {
    for (var e = [], f = 0, c = a.childNodes.length; f < c; f++)
      1 == a.childNodes[f].nodeType && e.push(a.childNodes[f]);
    b = e[b];
    null !== d ? a.insertBefore(b, e[d]) : a.appendChild(b);
  }
  var t = f.fn.dataTable;
  f.fn.dataTableExt.oApi.fnColReorder = function (a, b, d, e, g) {
    var c, h, j, m, i, l = a.aoColumns.length, k;
    i = function (a, b, c) {
      if (a[b] && 'function' !== typeof a[b]) {
        var d = a[b].split('.'), e = d.shift();
        isNaN(1 * e) || (a[b] = c[1 * e] + '.' + d.join('.'));
      }
    };
    if (b != d)
      if (0 > b || b >= l)
        this.oApi._fnLog(a, 1, 'ColReorder \'from\' index is out of bounds: ' + b);
      else if (0 > d || d >= l)
        this.oApi._fnLog(a, 1, 'ColReorder \'to\' index is out of bounds: ' + d);
      else {
        j = [];
        c = 0;
        for (h = l; c < h; c++)
          j[c] = c;
        p(j, b, d);
        var n = q(j);
        c = 0;
        for (h = a.aaSorting.length; c < h; c++)
          a.aaSorting[c][0] = n[a.aaSorting[c][0]];
        if (null !== a.aaSortingFixed) {
          c = 0;
          for (h = a.aaSortingFixed.length; c < h; c++)
            a.aaSortingFixed[c][0] = n[a.aaSortingFixed[c][0]];
        }
        c = 0;
        for (h = l; c < h; c++) {
          k = a.aoColumns[c];
          j = 0;
          for (m = k.aDataSort.length; j < m; j++)
            k.aDataSort[j] = n[k.aDataSort[j]];
          k.idx = n[k.idx];
        }
        f.each(a.aLastSort, function (b, c) {
          a.aLastSort[b].src = n[c.src];
        });
        c = 0;
        for (h = l; c < h; c++)
          k = a.aoColumns[c], 'number' == typeof k.mData ? k.mData = n[k.mData] : f.isPlainObject(k.mData) && (i(k.mData, '_', n), i(k.mData, 'filter', n), i(k.mData, 'sort', n), i(k.mData, 'type', n));
        if (a.aoColumns[b].bVisible) {
          i = this.oApi._fnColumnIndexToVisible(a, b);
          m = null;
          for (c = d < b ? d : d + 1; null === m && c < l;)
            m = this.oApi._fnColumnIndexToVisible(a, c), c++;
          j = a.nTHead.getElementsByTagName('tr');
          c = 0;
          for (h = j.length; c < h; c++)
            s(j[c], i, m);
          if (null !== a.nTFoot) {
            j = a.nTFoot.getElementsByTagName('tr');
            c = 0;
            for (h = j.length; c < h; c++)
              s(j[c], i, m);
          }
          c = 0;
          for (h = a.aoData.length; c < h; c++)
            null !== a.aoData[c].nTr && s(a.aoData[c].nTr, i, m);
        }
        p(a.aoColumns, b, d);
        c = 0;
        for (h = l; c < h; c++)
          a.oApi._fnColumnOptions(a, c, {});
        p(a.aoPreSearchCols, b, d);
        c = 0;
        for (h = a.aoData.length; c < h; c++) {
          m = a.aoData[c];
          if (k = m.anCells) {
            p(k, b, d);
            j = 0;
            for (i = k.length; j < i; j++)
              k[j] && k[j]._DT_CellIndex && (k[j]._DT_CellIndex.column = j);
          }
          'dom' !== m.src && f.isArray(m._aData) && p(m._aData, b, d);
        }
        c = 0;
        for (h = a.aoHeader.length; c < h; c++)
          p(a.aoHeader[c], b, d);
        if (null !== a.aoFooter) {
          c = 0;
          for (h = a.aoFooter.length; c < h; c++)
            p(a.aoFooter[c], b, d);
        }
        (g || g === r) && f.fn.dataTable.Api(a).rows().invalidate();
        c = 0;
        for (h = l; c < h; c++)
          f(a.aoColumns[c].nTh).off('click.DT'), this.oApi._fnSortAttachListener(a, a.aoColumns[c].nTh, c);
        f(a.oInstance).trigger('column-reorder.dt', [
          a,
          {
            from: b,
            to: d,
            mapping: n,
            drop: e,
            iFrom: b,
            iTo: d,
            aiInvertMapping: n
          }
        ]);
      }
  };
  var i = function (a, b) {
    var d = new f.fn.dataTable.Api(a).settings()[0];
    if (d._colReorder)
      return d._colReorder;
    !0 === b && (b = {});
    var e = f.fn.dataTable.camelToHungarian;
    e && (e(i.defaults, i.defaults, !0), e(i.defaults, b || {}));
    this.s = {
      dt: null,
      init: f.extend(!0, {}, i.defaults, b),
      fixed: 0,
      fixedRight: 0,
      reorderCallback: null,
      mouse: {
        startX: -1,
        startY: -1,
        offsetX: -1,
        offsetY: -1,
        target: -1,
        targetIndex: -1,
        fromIndex: -1
      },
      aoTargets: []
    };
    this.dom = {
      drag: null,
      pointer: null
    };
    this.s.dt = d;
    this.s.dt._colReorder = this;
    this._fnConstruct();
    return this;
  };
  f.extend(i.prototype, {
    fnReset: function () {
      this._fnOrderColumns(this.fnOrder());
      return this;
    },
    fnGetCurrentOrder: function () {
      return this.fnOrder();
    },
    fnOrder: function (a, b) {
      var d = [], e, g, c = this.s.dt.aoColumns;
      if (a === r) {
        e = 0;
        for (g = c.length; e < g; e++)
          d.push(c[e]._ColReorder_iOrigCol);
        return d;
      }
      if (b) {
        c = this.fnOrder();
        e = 0;
        for (g = a.length; e < g; e++)
          d.push(f.inArray(a[e], c));
        a = d;
      }
      this._fnOrderColumns(q(a));
      return this;
    },
    fnTranspose: function (a, b) {
      b || (b = 'toCurrent');
      var d = this.fnOrder(), e = this.s.dt.aoColumns;
      return 'toCurrent' === b ? !f.isArray(a) ? f.inArray(a, d) : f.map(a, function (a) {
        return f.inArray(a, d);
      }) : !f.isArray(a) ? e[a]._ColReorder_iOrigCol : f.map(a, function (a) {
        return e[a]._ColReorder_iOrigCol;
      });
    },
    _fnConstruct: function () {
      var a = this, b = this.s.dt.aoColumns.length, d = this.s.dt.nTable, e;
      this.s.init.iFixedColumns && (this.s.fixed = this.s.init.iFixedColumns);
      this.s.init.iFixedColumnsLeft && (this.s.fixed = this.s.init.iFixedColumnsLeft);
      this.s.fixedRight = this.s.init.iFixedColumnsRight ? this.s.init.iFixedColumnsRight : 0;
      this.s.init.fnReorderCallback && (this.s.reorderCallback = this.s.init.fnReorderCallback);
      for (e = 0; e < b; e++)
        e > this.s.fixed - 1 && e < b - this.s.fixedRight && this._fnMouseListener(e, this.s.dt.aoColumns[e].nTh), this.s.dt.aoColumns[e]._ColReorder_iOrigCol = e;
      this.s.dt.oApi._fnCallbackReg(this.s.dt, 'aoStateSaveParams', function (b, c) {
        a._fnStateSave.call(a, c);
      }, 'ColReorder_State');
      var g = null;
      this.s.init.aiOrder && (g = this.s.init.aiOrder.slice());
      this.s.dt.oLoadedState && ('undefined' != typeof this.s.dt.oLoadedState.ColReorder && this.s.dt.oLoadedState.ColReorder.length == this.s.dt.aoColumns.length) && (g = this.s.dt.oLoadedState.ColReorder);
      if (g)
        if (a.s.dt._bInitComplete)
          b = q(g), a._fnOrderColumns.call(a, b);
        else {
          var c = !1;
          f(d).on('draw.dt.colReorder', function () {
            if (!a.s.dt._bInitComplete && !c) {
              c = true;
              var b = q(g);
              a._fnOrderColumns.call(a, b);
            }
          });
        }
      else
        this._fnSetColumnIndexes();
      f(d).on('destroy.dt.colReorder', function () {
        f(d).off('destroy.dt.colReorder draw.dt.colReorder');
        f(a.s.dt.nTHead).find('*').off('.ColReorder');
        f.each(a.s.dt.aoColumns, function (a, b) {
          f(b.nTh).removeAttr('data-column-index');
        });
        a.s.dt._colReorder = null;
        a.s = null;
      });
    },
    _fnOrderColumns: function (a) {
      var b = !1;
      if (a.length != this.s.dt.aoColumns.length)
        this.s.dt.oInstance.oApi._fnLog(this.s.dt, 1, 'ColReorder - array reorder does not match known number of columns. Skipping.');
      else {
        for (var d = 0, e = a.length; d < e; d++) {
          var g = f.inArray(d, a);
          d != g && (p(a, g, d), this.s.dt.oInstance.fnColReorder(g, d, !0, !1), b = !0);
        }
        f.fn.dataTable.Api(this.s.dt).rows().invalidate();
        this._fnSetColumnIndexes();
        b && (('' !== this.s.dt.oScroll.sX || '' !== this.s.dt.oScroll.sY) && this.s.dt.oInstance.fnAdjustColumnSizing(!1), this.s.dt.oInstance.oApi._fnSaveState(this.s.dt), null !== this.s.reorderCallback && this.s.reorderCallback.call(this));
      }
    },
    _fnStateSave: function (a) {
      var b, d, e, g = this.s.dt.aoColumns;
      a.ColReorder = [];
      if (a.aaSorting) {
        for (b = 0; b < a.aaSorting.length; b++)
          a.aaSorting[b][0] = g[a.aaSorting[b][0]]._ColReorder_iOrigCol;
        var c = f.extend(!0, [], a.aoSearchCols);
        b = 0;
        for (d = g.length; b < d; b++)
          e = g[b]._ColReorder_iOrigCol, a.aoSearchCols[e] = c[b], a.abVisCols[e] = g[b].bVisible, a.ColReorder.push(e);
      } else if (a.order) {
        for (b = 0; b < a.order.length; b++)
          a.order[b][0] = g[a.order[b][0]]._ColReorder_iOrigCol;
        c = f.extend(!0, [], a.columns);
        b = 0;
        for (d = g.length; b < d; b++)
          e = g[b]._ColReorder_iOrigCol, a.columns[e] = c[b], a.ColReorder.push(e);
      }
    },
    _fnMouseListener: function (a, b) {
      var d = this;
      f(b).on('mousedown.ColReorder', function (a) {
        a.preventDefault();
        d._fnMouseDown.call(d, a, b);
      });
    },
    _fnMouseDown: function (a, b) {
      var d = this, e = f(a.target).closest('th, td').offset(), g = parseInt(f(b).attr('data-column-index'), 10);
      g !== r && (this.s.mouse.startX = a.pageX, this.s.mouse.startY = a.pageY, this.s.mouse.offsetX = a.pageX - e.left, this.s.mouse.offsetY = a.pageY - e.top, this.s.mouse.target = this.s.dt.aoColumns[g].nTh, this.s.mouse.targetIndex = g, this.s.mouse.fromIndex = g, this._fnRegions(), f(l).on('mousemove.ColReorder', function (a) {
        d._fnMouseMove.call(d, a);
      }).on('mouseup.ColReorder', function (a) {
        d._fnMouseUp.call(d, a);
      }));
    },
    _fnMouseMove: function (a) {
      if (null === this.dom.drag) {
        if (5 > Math.pow(Math.pow(a.pageX - this.s.mouse.startX, 2) + Math.pow(a.pageY - this.s.mouse.startY, 2), 0.5))
          return;
        this._fnCreateDragNode();
      }
      this.dom.drag.css({
        left: a.pageX - this.s.mouse.offsetX,
        top: a.pageY - this.s.mouse.offsetY
      });
      for (var b = !1, d = this.s.mouse.toIndex, e = 1, f = this.s.aoTargets.length; e < f; e++)
        if (a.pageX < this.s.aoTargets[e - 1].x + (this.s.aoTargets[e].x - this.s.aoTargets[e - 1].x) / 2) {
          this.dom.pointer.css('left', this.s.aoTargets[e - 1].x);
          this.s.mouse.toIndex = this.s.aoTargets[e - 1].to;
          b = !0;
          break;
        }
      b || (this.dom.pointer.css('left', this.s.aoTargets[this.s.aoTargets.length - 1].x), this.s.mouse.toIndex = this.s.aoTargets[this.s.aoTargets.length - 1].to);
      this.s.init.bRealtime && d !== this.s.mouse.toIndex && (this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex, !1), this.s.mouse.fromIndex = this.s.mouse.toIndex, this._fnRegions());
    },
    _fnMouseUp: function () {
      f(l).off('mousemove.ColReorder mouseup.ColReorder');
      null !== this.dom.drag && (this.dom.drag.remove(), this.dom.pointer.remove(), this.dom.drag = null, this.dom.pointer = null, this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex, !0), this._fnSetColumnIndexes(), ('' !== this.s.dt.oScroll.sX || '' !== this.s.dt.oScroll.sY) && this.s.dt.oInstance.fnAdjustColumnSizing(!1), this.s.dt.oInstance.oApi._fnSaveState(this.s.dt), null !== this.s.reorderCallback && this.s.reorderCallback.call(this));
    },
    _fnRegions: function () {
      var a = this.s.dt.aoColumns;
      this.s.aoTargets.splice(0, this.s.aoTargets.length);
      this.s.aoTargets.push({
        x: f(this.s.dt.nTable).offset().left,
        to: 0
      });
      for (var b = 0, d = this.s.aoTargets[0].x, e = 0, g = a.length; e < g; e++)
        e != this.s.mouse.fromIndex && b++, a[e].bVisible && 'none' !== a[e].nTh.style.display && (d += f(a[e].nTh).outerWidth(), this.s.aoTargets.push({
          x: d,
          to: b
        }));
      0 !== this.s.fixedRight && this.s.aoTargets.splice(this.s.aoTargets.length - this.s.fixedRight);
      0 !== this.s.fixed && this.s.aoTargets.splice(0, this.s.fixed);
    },
    _fnCreateDragNode: function () {
      var a = '' !== this.s.dt.oScroll.sX || '' !== this.s.dt.oScroll.sY, b = this.s.dt.aoColumns[this.s.mouse.targetIndex].nTh, d = b.parentNode, e = d.parentNode, g = e.parentNode, c = f(b).clone();
      this.dom.drag = f(g.cloneNode(!1)).addClass('DTCR_clonedTable').append(f(e.cloneNode(!1)).append(f(d.cloneNode(!1)).append(c[0]))).css({
        position: 'absolute',
        top: 0,
        left: 0,
        width: f(b).outerWidth(),
        height: f(b).outerHeight()
      }).appendTo('body');
      this.dom.pointer = f('<div></div>').addClass('DTCR_pointer').css({
        position: 'absolute',
        top: a ? f('div.dataTables_scroll', this.s.dt.nTableWrapper).offset().top : f(this.s.dt.nTable).offset().top,
        height: a ? f('div.dataTables_scroll', this.s.dt.nTableWrapper).height() : f(this.s.dt.nTable).height()
      }).appendTo('body');
    },
    _fnSetColumnIndexes: function () {
      f.each(this.s.dt.aoColumns, function (a, b) {
        f(b.nTh).attr('data-column-index', a);
      });
    }
  });
  i.defaults = {
    aiOrder: null,
    bRealtime: !0,
    iFixedColumnsLeft: 0,
    iFixedColumnsRight: 0,
    fnReorderCallback: null
  };
  i.version = '1.3.2';
  f.fn.dataTable.ColReorder = i;
  f.fn.DataTable.ColReorder = i;
  'function' == typeof f.fn.dataTable && 'function' == typeof f.fn.dataTableExt.fnVersionCheck && f.fn.dataTableExt.fnVersionCheck('1.10.8') ? f.fn.dataTableExt.aoFeatures.push({
    fnInit: function (a) {
      var b = a.oInstance;
      a._colReorder ? b.oApi._fnLog(a, 1, 'ColReorder attempted to initialise twice. Ignoring second') : (b = a.oInit, new i(a, b.colReorder || b.oColReorder || {}));
      return null;
    },
    cFeature: 'R',
    sFeature: 'ColReorder'
  }) : alert('Warning: ColReorder requires DataTables 1.10.8 or greater - www.datatables.net/download');
  f(l).on('preInit.dt.colReorder', function (a, b) {
    if ('dt' === a.namespace) {
      var d = b.oInit.colReorder, e = t.defaults.colReorder;
      if (d || e)
        e = f.extend({}, d, e), !1 !== d && new i(b, e);
    }
  });
  f.fn.dataTable.Api.register('colReorder.reset()', function () {
    return this.iterator('table', function (a) {
      a._colReorder.fnReset();
    });
  });
  f.fn.dataTable.Api.register('colReorder.order()', function (a, b) {
    return a ? this.iterator('table', function (d) {
      d._colReorder.fnOrder(a, b);
    }) : this.context.length ? this.context[0]._colReorder.fnOrder() : null;
  });
  f.fn.dataTable.Api.register('colReorder.transpose()', function (a, b) {
    return this.context.length && this.context[0]._colReorder ? this.context[0]._colReorder.fnTranspose(a, b) : a;
  });
  return i;
}));
angular.module('dellUiComponents', []);
angular.module('dellUiComponents').config(function () {
}).run([
  '$rootScope',
  function ($rootScope) {
    $rootScope.safeApply = function (fn) {
      var phase = $rootScope.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn && typeof fn === 'function') {
          fn();
        }
      } else {
        this.$apply(fn);
      }
    };
    function calculateBreakPointStatus() {
      var window_size = $(window).width();
      $rootScope.bp = {
        isXS: false,
        isSM: false,
        isMD: false,
        isLG: false
      };
      switch (true) {
      case window_size < 750:
        $rootScope.bp.isXS = true;
        break;
      case window_size > 751 && window_size < 975:
        $rootScope.bp.isSM = true;
        break;
      case window_size > 974 && window_size < 1141:
        $rootScope.bp.isMD = true;
        break;
      default:
        $rootScope.bp.isLG = true;
        break;
      }
    }
    calculateBreakPointStatus();
    $(window).resize(function () {
      calculateBreakPointStatus();
      $rootScope.safeApply();
    });
  }
]);
(function ($) {
  $.dellUIoverflowTab = function (el, options) {
    // To avoid scope issues, use 'base' instead of 'this'
    // to reference this class from internal events and functions.
    var base = this;
    // Access to jQuery and DOM versions of element
    base.$el = $(el);
    base.el = el;
    // Add a reverse reference to the DOM object
    base.$el.data('dellUIoverflowTab', base);
  };
  $.dellUIoverflowTab.defaultOptions = {
    defaultHeight: 42,
    pagerWidth: 29,
    xsMax: 750,
    smMin: 751,
    smMax: 975,
    mdMin: 974,
    mdMax: 1141,
    iconClasses: {
      left: 'glyphicon glyphicon-menu-left',
      right: 'glyphicon glyphicon-menu-right'
    }
  };
  $.fn.dellUIoverflowTab = function (options) {
    if (options) {
      $.dellUIoverflowTab.defaultOptions = $.extend($.dellUIoverflowTab.defaultOptions, options);
    }
    return this.each(function () {
      new $.dellUIoverflowTab(this);
      var options = $.dellUIoverflowTab.defaultOptions, element = $(this), containerWidth = element.parent().width(), tabObjs = element.find('> li'), tabs = [], totalWidth = 0, widthLeftToTheRight, homePosition = options.pagerWidth, offsetTotal = options.pagerWidth, leftPosition = options.pagerWidth, isHome = false, isTooFar = false, leftMostTab = {}, nextTab, maxTabHeight = options.defaultHeight, changeHeight, breakpoint = function () {
          var window_size = $(window).width(), breakpoint = {
              isXS: false,
              isSM: false,
              isMD: false,
              isLG: false
            };
          switch (true) {
          case window_size < options.xsMax:
            breakpoint.isXS = true;
            break;
          case window_size > options.smMin && window_size < options.smMax:
            breakpoint.isSM = true;
            break;
          case window_size > options.mdMin && window_size < options.mdMax:
            breakpoint.isMD = true;
            break;
          default:
            breakpoint.isLG = true;
            break;
          }
          return breakpoint;
        }, isOverflow = false, initTabs = function () {
          _.each(tabObjs, function (t, index) {
            totalWidth = totalWidth + $(t).width() + 1;
            var tObj = {
                index: index,
                offset: offsetTotal,
                width: $(t).width(),
                height: $(t).height(),
                visibility: 1
              };
            //visibility = 0: none 1: fully visible 2: partially visible
            if (tabObjs.length === index + 1) {
            } else {
              offsetTotal = offsetTotal - tObj.width - 1;
            }
            if (tObj.height > maxTabHeight) {
              maxTabHeight = tObj.height;
            }
            tabs.push(tObj);
          });
          leftMostTab = tabs[0];
          isOverflow = totalWidth > containerWidth;
        }, slideIt = function (backDirection, tabInContext) {
          var indexOffset = 1, isToofar;
          if (backDirection) {
            indexOffset = -1;
          } else if (!tabInContext) {
            //If next is pressed what is the last visible tab? Set that as tabInContext
            console.log('>>>>>>>>> ', tabs, homePosition, leftPosition);
          }
          leftPosition = parseInt(element.css('left'));
          if (!leftMostTab) {
            leftMostTab = tabs[0];
          }
          isHome = homePosition === leftPosition;
          if (backDirection) {
            leftMostTab.visibility = 1;
          } else {
            leftMostTab.visibility = 0;
          }
          leftMostTab = tabs[leftMostTab.index + indexOffset];
          widthLeftToTheRight = _.reduce(_.pluck(_.filter(tabs, function (tb) {
            return tb.visibility === 1;
          }), 'width'), function (memo, num) {
            return memo + num;
          }, 0);
          if (isToofar) {
            isToofar = false;
          } else if (tabInContext) {
            if (tabInContext.lastTab) {
              isToofar = true;
            }
          } else {
            isToofar = widthLeftToTheRight < containerWidth;
          }
          if (leftMostTab) {
            if (isToofar) {
              leftPosition = containerWidth - totalWidth - homePosition;
              element.parent().find('> .next').addClass('disabled');
            } else {
              element.parent().find('> .next').removeClass('disabled');
              leftPosition = leftMostTab.offset;
            }
            if (tabInContext && !isToofar) {
              //if this the last tab on the right do nothing different
              if (tabInContext.index !== tabs.length - 1) {
                //not the last tab on the right need to adjust the left offset
                leftPosition = tabInContext.tabContainerWidth - tabInContext.rightMostPoint - 60;
              }
            }
            if (!breakpoint().isXS) {
              element.css('left', leftPosition + 'px');
            }
          } else {
            isHome = true;
          }
          if (isHome) {
            element.parent().find('> .prev').addClass('disabled');
          } else {
            element.parent().find('> .prev').removeClass('disabled');
          }
        };
      initTabs();
      if (isOverflow) {
        //this should already be overflow but in case it wasn't checked before it got fired
        element.width(totalWidth + 1);
        //add 1 so that it doesn't drop the last tab to a second line
        element.css('left', homePosition + 'px');
        //compensates for the left arrow that will be added
        element.parent().addClass('nav-tabs-overflow-container');
        //css wrapper for styling
        element.before('<div class="prev disabled"><a href="javascript:;"><i class="' + options.iconClasses.left + '"></i></a></div>');
        //left arrow
        element.after('<div class="next"><a href="javascript:;"><i class="' + options.iconClasses.right + '"></i></a></div>');
        //right arrow
        changeHeight = function (h) {
          if (h) {
            element.css('height', h + 2 + 'px');
            //2 pixels account for top and bottom border
            element.find('> li').find('a').css('height', h + 'px');
            element.parent().find('.prev,.next').find('a').css('height', h + 'px');
            element.parent().find('.prev,.next').find('a').css('padding-top', h / 2 - 8 + 'px');  //moves the arrow to center when the content pushes the height beyond default (42px)
          } else {
            //if no height is provided everything is reset.
            element.removeAttr('style').width(totalWidth + 200);
            //removes height and resets width
            element.find('> li').find('a').removeAttr('style');
            //removes height
            element.parent().find('.prev,.next').find('a').removeAttr('style');  //removes height
          }
        };
        if (maxTabHeight > options.defaultHeight && !breakpoint().isXS) {
          //$rootScope.bp is part of dell-ui-components angular module
          changeHeight(maxTabHeight);
        } else {
          changeHeight();
        }
        //set up a window change watch here
        $(window).resize(function () {
          if (breakpoint().isXS) {
            changeHeight();  //if it is mobile (xs) clear all height values
          } else {
            changeHeight(maxTabHeight);
          }
        });
        tabObjs.on('click', function (e) {
          var t = {
              rightMostPoint: e.currentTarget.offsetLeft + e.currentTarget.offsetWidth,
              leftMostPoint: e.currentTarget.offsetLeft + e.currentTarget.offsetWidth - $(e.currentTarget).width() - 2,
              tabContainerWidth: $(e.currentTarget).parents('.nav-tabs-overflow-container').width(),
              tabContainerOffset: $(e.currentTarget).parent()[0].offsetLeft,
              index: $(e.currentTarget).index()
            };
          if (t.tabContainerWidth - t.rightMostPoint - t.tabContainerOffset < options.pagerWidth + 1) {
            if (t.index === tabs.length - 1) {
              // last tab, make sure it is not already at the end
              if (t.rightMostPoint + t.tabContainerOffset + options.pagerWidth - 1 < t.tabContainerWidth) {
                slideIt(false, t);  //false sets it as a forward move with the tab in context
              } else if (t.rightMostPoint + t.tabContainerOffset + options.pagerWidth - 1 > t.tabContainerWidth) {
                t.lastTab = true;
                //let slide function that it is the last tab
                slideIt(false, t);  //false sets it as a forward move with the tab in context
              }  //otherwise if it is right on the last spot dont slide it
            } else {
              slideIt(false, t);  //false sets it as a forward move with the tab in context
            }
          } else if (t.leftMostPoint + t.tabContainerOffset < 0) {
            slideIt(true);  //true sets it as a backward move
          }
        });
        element.parent().find('> .prev').on('click', function (e) {
          if (!$(e.currentTarget).hasClass('disabled')) {
            slideIt(true);  //true sets it as a backward move
          }
        });
        element.parent().find('> .next').on('click', function (e) {
          if (!$(e.currentTarget).hasClass('disabled')) {
            slideIt();  //no argument (false) sets it as a forward move
          }
        });
      }
    });
  };
}(jQuery));
(function ($) {
  $.dellUIloadMore = function (el, options) {
    // To avoid scope issues, use 'base' instead of 'this'
    // to reference this class from internal events and functions.
    var base = this;
    // Access to jQuery and DOM versions of element
    base.$el = $(el);
    base.el = el;
    // Add a reverse reference to the DOM object
    base.$el.data('dellUIloadMore', base);
  };
  $.dellUIloadMore.defaultOptions = {
    lazyLoad: false,
    scrollTarget: window,
    fadeIn: true,
    loadMoreButtonText: 'Load more',
    loadMoreIncrement: 5
  };
  $.fn.dellUIloadMore = function (options) {
    if (options) {
      $.dellUIloadMore.defaultOptions = $.extend($.dellUIloadMore.defaultOptions, options);
    }
    return this.each(function () {
      new $.dellUIloadMore(this);
      var options = $.dellUIloadMore.defaultOptions, element = $(this), visibleCount = 0, items = element.find('li'), elementId = typeof $(this).attr('id') !== 'undefined' ? $(this).attr('id') : Math.random(1 + Math.random() * 100000000000), button = '<p><button id="load-more-button-' + elementId + '" rel="' + elementId + '" type="button" class="btn btn-block">' + options.loadMoreButtonText + '</button></p>', loadMore = function () {
          visibleCount = visibleCount + options.loadMoreIncrement;
          items = element.find('li');
          items.each(function (index) {
            if (index < visibleCount && $(items[index]).is(':hidden')) {
              $(this).addClass('in');
              if (index + 1 === items.length) {
                $('#load-more-button-' + elementId).remove();
              }
            }
          });
        }, initPagination = function () {
          if (element.hasClass('load-more-lazy')) {
            options.lazyLoad = true;
          }
          if (options.fadeIn) {
            items.addClass('fade');
          }
          loadMore();
          if (!options.lazyLoad) {
            element.after(button);
            $('#load-more-button-' + elementId).click(function () {
              loadMore();
            });
          } else {
            if (options.scrollTarget === window) {
              $(options.scrollTarget).scroll(function () {
                if ($(options.scrollTarget).scrollTop() + $(options.scrollTarget).height() === $(document).height()) {
                  loadMore();
                }
              });
            } else {
              $(options.scrollTarget).scroll(function () {
                if ($(this).scrollTop() + $(this).height() === $(this)[0].scrollHeight) {
                  loadMore();
                }
              });
            }
          }
        };
      initPagination();
    });
  };
}(jQuery));
(function ($) {
  $.dellUIcontentGallery = function (el) {
    // To avoid scope issues, use 'base' instead of 'this'
    // to reference this class from internal events and functions.
    var base = this;
    // Access to jQuery and DOM versions of element
    base.$el = $(el);
    base.el = el;
    // Add a reverse reference to the DOM object
    base.$el.data('dellUIcontentGallery', base);
  };
  $.fn.dellUIcontentGallery = function () {
    return this.each(function () {
      new $.dellUIcontentGallery(this);
      var element = $(this), allListItems = element.find('li'), showMoreToggle = element.find('.content-gallery-show-more'), initGallery = function () {
          showMoreToggle.on('click', function (e) {
            var parentLi = $($(e.currentTarget).parents('li')[0]), rowWidth = 0, rowMaxWidth = Math.abs(element.parent().innerWidth() - element.parent().css('padding-left').replace(/px/, '') - element.parent().css('padding-right').replace(/px/, '')), targetFound, targetIndex, done, content;
            if (parentLi.hasClass('open')) {
              element.find('li.details-container').attr('display', 'none').slideUp(250).delay(200).queue(function () {
                $(this).remove();
              });
              element.find('.open').removeClass('open');
            } else {
              element.find('li.details-container').attr('display', 'none').slideUp(250).delay(200).queue(function () {
                $(this).remove();
              });
              element.find('.open').removeClass('open');
              setTimeout(function () {
                parentLi.addClass('open');
                $.each(allListItems, function (index, i) {
                  if (!done) {
                    var itemWidth = $(i).outerWidth();
                    if (!targetFound) {
                      targetFound = $(i).hasClass('open');
                      targetIndex = index;
                      content = '<li class="col-xs-12 details-container"><div class="gallery"><span class="close"><button type="button" class="close">\xd7</button></span>' + $(i).find('.content-gallery-details').html() + '</div></li>';
                    }
                    rowWidth = rowWidth + itemWidth;
                    if (rowWidth >= rowMaxWidth || index === allListItems.length - 1) {
                      if (targetFound) {
                        $(i).after(content);
                        element.find('.details-container').attr('display', 'block').slideDown(450);
                        element.find('.details-container .close').on('click', function (e) {
                          e.preventDefault();
                          element.find('li.details-container').attr('display', 'none').slideUp(450).delay(500).queue(function () {
                            $(this).remove();
                          });
                          element.find('.open').removeClass('open');
                        });
                        element.find('.details-container').on('click', function (e) {
                          e.stopPropagation();
                        });
                        done = true;
                      } else {
                        rowWidth = 0;
                      }
                    }
                  }
                });
              }, 100);
            }
          });
        };
      initGallery();
    });
  };
}(jQuery));
(function ($) {
  $.dellUIuniversalFooter = function (el, options) {
    // To avoid scope issues, use 'base' instead of 'this'
    // to reference this class from internal events and functions.
    var base = this;
    // Access to jQuery and DOM versions of element
    base.$el = $(el);
    base.el = el;
    // Add a reverse reference to the DOM object
    base.$el.data('dellUIuniversalFooter', base);
  };
  $.dellUIuniversalFooter.defaultOptions = {
    xsMax: 750,
    smMin: 751,
    smMax: 975,
    mdMin: 974,
    mdMax: 1141,
    dosomething: ''
  };
  $.fn.dellUIuniversalFooter = function (options) {
    if (options) {
      $.dellUIuniversalFooter.defaultOptions = $.extend($.dellUIuniversalFooter.defaultOptions, options);
    }
    return this.each(function () {
      new $.dellUIuniversalFooter(this);
      var options = $.dellUIuniversalFooter.defaultOptions, breakpoint = function () {
          var window_size = $(window).width(), breakpoint = {
              isXS: false,
              isSM: false,
              isMD: false,
              isLG: false
            };
          switch (true) {
          case window_size < options.xsMax:
            breakpoint.isXS = true;
            break;
          case window_size > options.smMin && window_size < options.smMax:
            breakpoint.isSM = true;
            break;
          case window_size > options.mdMin && window_size < options.mdMax:
            breakpoint.isMD = true;
            break;
          default:
            breakpoint.isLG = true;
            break;
          }
          return breakpoint;
        }, responsiveElements = function () {
          if (breakpoint().isXS) {
            $('.footer-gallery').css('display', 'none');
            $('.gallery-shadow-section').css('display', 'none');
          } else {
            $('.footer-gallery').css('display', 'block');
            $('.gallery-shadow-section').css('display', 'block');
          }
        }, equalizeRows = function () {
          setTimeout(function () {
            $('.gallery-item').removeAttr('style');
            var eObj = {
                highest: 0,
                columns: $('.gallery-item')
              };
            eObj.columns.each(function () {
              var currColumnHeight = $(this).outerHeight();
              if (currColumnHeight > eObj.highest) {
                eObj.highest = currColumnHeight;
              }
            });
            eObj.columns.height(eObj.highest);
          }, 800);
        }, importJson = function () {
          if (!options.datafile) {
            options.datafile = 'components/footer/footerData.json';
          }
          $.getJSON(options.datafile, function (data) {
            var items = [];
            //console.log("data", data);
            $.each(data, function () {
              var countryData = data;
              $.each(countryData.countries, function (key, value) {
                var countryInfo = value;
                items.push('<li><a href=\'javascript;\'>' + countryInfo.label + '</a></li>');
              });
            });
            $('.country-names').append(items);
          });
        };
      importJson();
      equalizeRows();
      responsiveElements();
      $(window).resize(function () {
        equalizeRows();
        responsiveElements();
      });
    });
  };
}(jQuery));
angular.module('dellUiComponents').directive('toggle', [
  '$rootScope',
  '$timeout',
  '$compile',
  function ($rootScope, $timeout, $compile) {
    return {
      restrict: 'A',
      link: function ($scope, $element, $attrs, controller) {
        switch ($attrs.toggle) {
        case 'popover':
          var hidePopover = function () {
            $element.popover('hide');
            $element.blur();
          };
          if ($attrs.trigger === 'hover') {
            $element.popover({ trigger: 'hover' });
          } else {
            $element.popover({ trigger: 'manual' });
            $element.on('click', function () {
              $element.popover('toggle');
            });
            $element.on('shown.bs.popover', function () {
              $element.next().off('click');
              $element.next().on('click', function () {
                $element.focus();
              });
              $('[data-dismiss="popover"]').on('click', function () {
                $timeout(function () {
                  $element.blur();
                }, 300);
              });
              $element.off('blur');
              $element.on('blur', function () {
                $timeout(function () {
                  if (!$element.is(':focus')) {
                    hidePopover();
                  }
                }, 500);
              });
              $compile($element.next().contents())($scope);
            });
            $element.on('hidden.bs.popover', function () {
              $element.on('click', function () {
                $element.popover('show');
              });
            });
          }
          break;
        case 'tooltip':
          $element.tooltip();
          $element.on('click', function () {
            if ($rootScope.bp.isXS) {
              $element.tooltip('show');
            }
          });
          $element.on('mouseenter', function () {
            if ($rootScope.bp.isXS) {
              $element.tooltip('hide');
            }
          });
          break;
        case 'offcanvas':
          $element.on('click', function (event) {
            event.preventDefault();
            $element.parents('.row-offcanvas').find('.tab-content').removeClass('active');
            $element.parents('.row-offcanvas').removeClass('active');
          });
          break;
        case 'tab':
          $element.on('click', function (event) {
            event.preventDefault();
            $(this).tab('show');
            $(this).parents('.row-offcanvas').find('.tab-content').addClass('active');
            $(this).parents('.row-offcanvas').addClass('active');
          });
          break;
        case 'collapse':
          $element.on('click', function (event) {
            event.preventDefault();
          });
          break;
        case 'load-more':
          var selector = $attrs.target, size_li = $(selector + ' li').size(), x = 3;
          if (!selector) {
            console.error('You must use data-target when using data-toggle="load-more". ');
          }
          $(selector + ' li:lt(' + x + ')').show();
          $element.click(function () {
            x = x + 5 <= size_li ? x + 5 : size_li;
            $(selector + ' li:lt(' + x + ')').fadeIn(1500);
            if ($(selector + ' li:visible').size() === size_li) {
              $element.hide();
            }
            var $this = $(this);
            $this.button('loading');
            setTimeout(function () {
              $this.button('reset');
            }, 1500);
          });
          break;
        case 'list-truncated':
          var target = $attrs.target;
          if (!target) {
            target = $element.prev();
          }
          if ($(target).find('li').length <= 5) {
            $element.hide();
          } else {
            var maxHeight = 0, minHeight = 0;
            _.each($(target).find('li'), function (listItem, index) {
              if (index < 5) {
                minHeight = minHeight + $(listItem).height();
              }
              maxHeight = maxHeight + $(listItem).height();
            });
            $(target).height(minHeight);
            $element.on('click', function () {
              var height = minHeight;
              if ($element.hasClass('collapsed')) {
                height = maxHeight;
              }
              $element.toggleClass('collapsed');
              $(target).animate({ height: height }, {
                duration: 300,
                specialEasing: { height: 'swing' }
              });
            });
          }
          break;
        }
      }
    };
  }
]);
angular.module('dellUiComponents').directive('navTabs', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, iAttrs, controller) {
      var containerWidth = $element.parent().width(), tabObjs = $element.find('> li'), totalWidth = 0;
      _.each(tabObjs, function (t, index) {
        totalWidth = totalWidth + $(t).width() + 1;
      });
      if (totalWidth > containerWidth) {
        $element.dellUIoverflowTab({
          iconClasses: {
            left: 'icon-ui-arrowleft',
            right: 'icon-ui-arrowright'
          }
        });
      }
    }
  };
});
angular.module('dellUiComponents').directive('defaultFooter', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, $attributes, controller) {
      var options = {};
      if ($attributes.datafile) {
        options.datafile = $attributes.datafile;
      }
      if ($(window).resize) {
        $element.dellUIuniversalFooter(options);
      }
    }
  };
});
//asumes that angular-ui-bootstrap is loaded
angular.module('ui.bootstrap.carousel', ['ui.bootstrap.transition']).controller('CarouselController', [
  '$scope',
  '$timeout',
  '$transition',
  '$q',
  function ($scope, $timeout, $transition, $q) {
  }
]).directive('carousel', function () {
  return {};
}).directive('slide', function () {
  return {};
});
angular.module('dellUiComponents').directive('carousel', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        $element.carousel();
      }
    };
  }
]).directive('carouselFilmstrip', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    // requires bower_components/slick-1.5.0/slick/slick.js which is bundled in dell-ui-components.js
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        $($element).find('.carousel-inner').slick({
          dots: true,
          infinite: false,
          speed: 300,
          slidesToShow: 4,
          slidesToScroll: 1,
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 4,
                slidesToScroll: 1,
                infinite: true
              }
            },
            {
              breakpoint: 600,
              settings: {
                slidesToShow: 2,
                slidesToScroll: 1
              }
            },
            {
              breakpoint: 480,
              settings: {
                slidesToShow: 1,
                slidesToScroll: 1
              }
            }
          ]
        });
      }
    };
  }
]).directive('carouselFilmstripArrowOnly', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    // requires bower_components/slick-1.5.0/slick/slick.js which is bundled in dell-ui-components.js
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        $($element).find('.carousel-inner').slick({
          dots: false,
          infinite: false,
          speed: 300,
          slidesToShow: 4,
          slidesToScroll: 1,
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 4,
                slidesToScroll: 1,
                infinite: false,
                dots: false
              }
            },
            {
              breakpoint: 600,
              settings: {
                slidesToShow: 2,
                slidesToScroll: 1,
                infinite: false,
                dots: false
              }
            },
            {
              breakpoint: 480,
              settings: {
                slidesToShow: 1,
                slidesToScroll: 1,
                infinite: false,
                dots: false
              }
            }
          ]
        });
      }
    };
  }
]).directive('slide', [
  '$timeout',
  function ($timeout) {
    return {
      restrict: 'A',
      link: function ($scope, $element, $attr, controller) {
        $element.on('click', function (event) {
          event.preventDefault();
        });
        $element.carousel($attr.slide);
      }
    };
  }
]);
/*
 * Created by Clint_Batte on 3/24/2015.
 */
angular.module('dellUiComponents').directive('msCheckbox', function () {
  return {
    restrict: 'C',
    link: function () {
      $('.ms-checkbox').multipleSelect({ placeholder: 'Select title' });
    }
  };
}).directive('listTree', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, $attr) {
      $element.find('.checkbox input').on('click', function () {
        if ($(this).is(':checked')) {
          $(this).parent().addClass('open');
        } else {
          $(this).parent().removeClass('open');
        }
      });
    }
  };
}).directive('emailValidate', function () {
  return {
    restrict: 'C',
    link: function ($scope, element, attributes, controller) {
      $(element).blur(function () {
        var email = $(this).validate();
        var re = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}/gim;
        if (re.test(element)) {
          $(element).addClass('alert alert-warning');
          $(element).tooltip({ title: 'Please input a valid email address!' });
        } else {
        }
      });
    }
  };
}).directive('emailCheck', function () {
  return {
    restrict: 'AEC',
    link: function ($scope, element, attributes, controller) {
      //$(element).blur(function () {
      //    var string1 = $(element).val();
      //    if (string1.indexOf("@") === -1){
      //        $(element).addClass('alert alert-warning');
      //        $(element).tooltip({
      //            title: "Please input a valid email address!"
      //        });
      //    //$(element).blur();
      //    } else {
      //        $(element).removeClass('alert alert-warning');
      //        $(element).tooltip('disable');
      //    }
      //});
      $(element).on('keyup', function () {
        var string1 = $(element).val();
        var regex = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}/gim;
        if (!string1.match(regex)) {
          if (!attributes.errorMessage) {
            attributes.errorMessage = 'Please input a valid email address!';
          }
          $(element).addClass('alert alert-warning');
          $(element).tooltip({ title: attributes.errorMessage });
        } else {
          $(element).removeClass('alert alert-warning');
          $(element).tooltip('destroy');
        }
      });
    }
  };
}).directive('showHidePassword', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, $attrs, controller) {
      $element.find('.checkbox input[type=checkbox]').on('click', function () {
        if ($element.find('.checkbox input[type=checkbox]').is(':checked')) {
          $($element).find('input[type=password]').attr('type', 'text');
        } else {
          $($element).find('input[type=text]').attr('type', 'password');
        }
      });
    }
  };
}).directive('phoneNumber', function () {
  // Runs during compile
  return {
    restrict: 'C',
    link: function ($scope, element, attributes, controller) {
      //requires https://raw.githubusercontent.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.min.js
      //TODO use $locale to create mask
      if ($(element).is('input')) {
        $(element).attr('data-inputmask', '\'mask\': \'(999)-999-9999\'');
        $(element).inputmask();
      }
    }
  };
}).directive('phoneExtension', function () {
  return {
    restrict: 'C',
    link: function ($scope, element, attributes, controller) {
      if ($(element).is('input')) {
        $(element).attr('data-inputmask', '\'mask\': \'ext: (9999)\'');
        $(element).inputmask();
      }
    }
  };
}).directive('bsSlider', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, $attrs, controller) {
      // Angular implementation for Boostrap Slider: http://seiyria.com/bootstrap-slider/
      var options = {};
      if ($attrs.sliderLabel) {
        options.formatter = function (value) {
          return $attrs.sliderLabel + value;
        };
      }
      $element.slider(options);
    }
  };
}).directive('spinbox', function () {
  return {
    restrict: 'C',
    link: function ($scope, element, attributes, controller) {
      // Inject html code
      $('.spinbox').each(function (index) {
        var el = $(this);
        if (el.data('orient') === 'vertical') {
          $(el).addClass('dpui-numberPicker spinbox-vert').html('<button class=\'spinbox-increase\'>' + el.data('spinincrease') + '</button><input type=\'text\' class=\'spinbox-input spinbox-input-vert\' style=\'border-top: 0px solid #cfcfcf; border-bottom: 0px solid #cfcfcf;\' value=\'' + el.data('spindefault') + '\' name=\'' + el.data('spinname') + '\'/><button class=\'spinbox-decrease\'>' + el.data('spindecrease') + '</button>');
        } else {
          $(el).addClass('dpui-numberPicker').html('<button class=\'spinbox-decrease\'>' + el.data('spindecrease') + '</button><input type=\'text\' class=\'spinbox-input\' style=\'border-left: 0px solid #cfcfcf; border-right: 0px solid #cfcfcf;\' value=\'' + el.data('spindefault') + '\' name=\'' + el.data('spinname') + '\'/><button class=\'spinbox-increase\'>' + el.data('spinincrease') + '</button>');
        }
      });
      // Increase Button code
      $('.spinbox-increase').click(function () {
        var em = $(this);
        if (em.parent().data('orient') === 'vertical' && parseInt($(this).siblings('input').val()) < em.parent().data('spinmax')) {
          $(em).next().val(parseInt($(em).next().val()) + em.parent().data('spinstep'));
        } else if (parseInt($(this).siblings('input').val()) < em.parent().data('spinmax')) {
          $(em).prev().val(parseInt($(em).prev().val()) + em.parent().data('spinstep'));
        }
      });
      // Decrease Button code
      $('.spinbox-decrease').click(function () {
        var el = $(this);
        if (el.parent().data('orient') === 'vertical' && parseInt($(this).siblings('input').val()) > el.parent().data('spinmin')) {
          $(el).prev().val(parseInt($(el).prev().val()) - el.parent().data('spinstep'));
        } else if (parseInt($(this).siblings('input').val()) > el.parent().data('spinmin')) {
          $(el).next().val(parseInt($(el).next().val()) - el.parent().data('spinstep'));
        }
      });
      //Checks to see if the manual input is outside the range of the min-max and changes it to bring it back in range.
      $('.spinbox-input').blur(function () {
        var em = $(this);
        if (parseInt($(this).val()) > em.parent().data('spinmax')) {
          $(this).val(em.parent().data('spinmax'));
        } else if (parseInt($(this).val()) < em.parent().data('spinmin')) {
          $(this).val(em.parent().data('spinmin'));
        }
      });
      // Limits keyboard input to alphanumeric
      $(document).ready(function () {
        $('.spinbox-input').keypress(function (key) {
          if (key.charCode < 48 || key.charCode > 57) {
            return false;
          }
        });
      });
    }
  };
}).directive('selectState', function () {
  // Runs during compile
  var template = '<option value="">{{ emptyName }}</option>' + '<option ng-repeat="state in states" value="{{state.code}}">' + '   {{state[label]}}' + '</option>';
  return {
    scope: true,
    controller: [
      '$scope',
      '$element',
      '$attrs',
      '$transclude',
      function ($scope, $element, $attrs, $transclude) {
        $scope.selectedState = '';
        $scope.format = $attrs.format;
        $scope.states = [
          {
            'code': 'AL',
            'label': 'Alabama',
            'long_label': 'AL - Alabama'
          },
          {
            'code': 'AK',
            'label': 'Alaska',
            'long_label': 'AK - Alaska'
          },
          {
            'code': 'AZ',
            'label': 'Arizona',
            'long_label': 'AZ - Arizona'
          },
          {
            'code': 'AR',
            'label': 'Arkansas',
            'long_label': 'AR - Arkansas'
          },
          {
            'code': 'CA',
            'label': 'California',
            'long_label': 'CA - California'
          },
          {
            'code': 'CO',
            'label': 'Colorado',
            'long_label': 'CO - Colorado'
          },
          {
            'code': 'CT',
            'label': 'Connecticut',
            'long_label': 'CT - Connecticut'
          },
          {
            'code': 'DE',
            'label': 'Delaware',
            'long_label': 'DE - Delaware'
          },
          {
            'code': 'DC',
            'label': 'District of Columbia',
            'long_label': 'DC - District of Columbia'
          },
          {
            'code': 'FL',
            'label': 'Florida',
            'long_label': 'FL - Florida'
          },
          {
            'code': 'GA',
            'label': 'Georgia',
            'long_label': 'GA - Georgia'
          },
          {
            'code': 'HI',
            'label': 'Hawaii',
            'long_label': 'HI - Hawaii'
          },
          {
            'code': 'ID',
            'label': 'Idaho',
            'long_label': 'ID - Idaho'
          },
          {
            'code': 'IL',
            'label': 'Illinois',
            'long_label': 'IL - Illinois'
          },
          {
            'code': 'IN',
            'label': 'Indiana',
            'long_label': 'IN - Indiana'
          },
          {
            'code': 'IA',
            'label': 'Iowa',
            'long_label': 'IA - Iowa'
          },
          {
            'code': 'KS',
            'label': 'Kansas',
            'long_label': 'KS - Kansas'
          },
          {
            'code': 'KY',
            'label': 'Kentucky',
            'long_label': 'KY - Kentucky'
          },
          {
            'code': 'LA',
            'label': 'Louisiana',
            'long_label': 'LA - Louisiana'
          },
          {
            'code': 'ME',
            'label': 'Maine',
            'long_label': 'ME - Maine'
          },
          {
            'code': 'MD',
            'label': 'Maryland',
            'long_label': 'MD - Maryland'
          },
          {
            'code': 'MA',
            'label': 'Massachusetts',
            'long_label': 'MA - Massachusetts'
          },
          {
            'code': 'MI',
            'label': 'Michigan',
            'long_label': 'MI - Michigan'
          },
          {
            'code': 'MN',
            'label': 'Minnesota',
            'long_label': 'MN - Minnesota'
          },
          {
            'code': 'MS',
            'label': 'Mississippi',
            'long_label': 'MS - Mississippi'
          },
          {
            'code': 'MO',
            'label': 'Missouri',
            'long_label': 'MO - Missouri'
          },
          {
            'code': 'MT',
            'label': 'Montana',
            'long_label': 'MT - Montana'
          },
          {
            'code': 'NE',
            'label': 'Nebraska',
            'long_label': 'NE - Nebraska'
          },
          {
            'code': 'NV',
            'label': 'Nevada',
            'long_label': 'NV - Nevada'
          },
          {
            'code': 'NH',
            'label': 'New Hampshire',
            'long_label': 'NH - New Hampshire'
          },
          {
            'code': 'NJ',
            'label': 'New Jersey',
            'long_label': 'NJ - New Jersey'
          },
          {
            'code': 'NM',
            'label': 'New Mexico',
            'long_label': 'NM - New Mexico'
          },
          {
            'code': 'NY',
            'label': 'New York',
            'long_label': 'NY - New York'
          },
          {
            'code': 'NC',
            'label': 'North Carolina',
            'long_label': 'NC - North Carolina'
          },
          {
            'code': 'ND',
            'label': 'North Dakota',
            'long_label': 'ND - North Dakota'
          },
          {
            'code': 'OH',
            'label': 'Ohio',
            'long_label': 'OH - Ohio'
          },
          {
            'code': 'OK',
            'label': 'Oklahoma',
            'long_label': 'OK - Oklahoma'
          },
          {
            'code': 'OR',
            'label': 'Oregon',
            'long_label': 'OR - Oregon'
          },
          {
            'code': 'PA',
            'label': 'Pennsylvania',
            'long_label': 'PA - Pennsylvania'
          },
          {
            'code': 'RI',
            'label': 'Rhode Island',
            'long_label': 'RI - Rhode Island'
          },
          {
            'code': 'SC',
            'label': 'South Carolina',
            'long_label': 'SC - South Carolina'
          },
          {
            'code': 'SD',
            'label': 'South Dakota',
            'long_label': 'SD - South Dakota'
          },
          {
            'code': 'TN',
            'label': 'Tennessee',
            'long_label': 'TN - Tennessee'
          },
          {
            'code': 'TX',
            'label': 'Texas',
            'long_label': 'TX - Texas'
          },
          {
            'code': 'UT',
            'label': 'Utah',
            'long_label': 'UT - Utah'
          },
          {
            'code': 'VA',
            'label': 'Virginia',
            'long_label': 'VA - Virginia'
          },
          {
            'code': 'WA',
            'label': 'Washington',
            'long_label': 'WA - Washington'
          },
          {
            'code': 'WV',
            'label': 'West Virginia',
            'long_label': 'WV - West Virginia'
          },
          {
            'code': 'WI',
            'label': 'Wisconsin',
            'long_label': 'WI - Wisconsin'
          },
          {
            'code': 'WY',
            'label': 'Wyoming',
            'long_label': 'WY - Wyoming'
          },
          {
            'code': 'AA',
            'label': 'Armed Forces-Americas',
            'long_label': 'AA - Armed Forces-Americas'
          },
          {
            'code': 'AE',
            'label': 'Armed Forces-Europe',
            'long_label': 'AE - Armed Forces-Europe'
          },
          {
            'code': 'AP',
            'label': 'Armed Forces-Pacific',
            'long_label': 'AP - Armed Forces-Pacific'
          }
        ];
        switch ($attrs.format) {
        case 'short':
          $scope.label = 'code';
          break;
        case 'both':
          $scope.label = 'long_label';
          break;
        default:
          $scope.label = 'label';
        }
      }
    ],
    restrict: 'AC',
    template: template,
    link: function ($scope, $element, $attributes, controller) {
      $scope.emptyName = $attributes.emptyName || 'State';
    }
  };
}).directive('dateSelector', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, $attrs) {
        var inputField = $element.find('input'), calendarIcon = $element.find('.icon-small-calendar'), calendarWidget, inputFieldWidth = inputField.width(), inputFieldOffset = inputField.offset(), viewPortWidth = $(window).width(), viewPortHeight = $(window).height(), dateSelectorConfig = {
            icons: {
              time: 'icon-small-clock',
              date: 'icon-small-calendar',
              up: 'glyphicon glyphicon-chevron-up',
              down: 'glyphicon glyphicon-chevron-down',
              previous: 'glyphicon glyphicon-chevron-left',
              next: 'glyphicon glyphicon-chevron-right',
              today: 'icon-small-software',
              clear: 'icon-small-trash',
              close: 'icon-ui-close'
            },
            keepOpen: true,
            widgetPositioning: {
              horizontal: 'right',
              vertical: typeof $attrs.position !== 'undefined' ? $attrs.position : 'bottom'
            },
            format: typeof $attrs.format !== 'undefined' ? $attrs.format : 'MM/DD/YYYY'
          };
        //TODO, check to see if the field is at the bottom of the viewport and position it on top
        inputField.datetimepicker(dateSelectorConfig);
        inputField.on('dp.show', function (e) {
          viewPortWidth = $(window).width();
          viewPortHeight = $(window).height();
          inputFieldWidth = inputField.width();
          inputFieldOffset = inputField.offset();
          calendarWidget = $element.find('.bootstrap-datetimepicker-widget');
          //have to repeat this because it is destroyed everytime focus is gone
          //check to see if the right side is big enough for the widget
          if (inputFieldOffset.left + inputFieldWidth + 215 > viewPortWidth) {
            calendarWidget.removeClass('pull-right');
            calendarWidget.addClass('pull-left');
          } else {
            calendarWidget.removeClass('pull-left');
            calendarWidget.addClass('pull-right');
          }
          //check to see if the bottom side is big enough for the widget
          if (inputFieldOffset.top - window.pageYOffset + 255 > viewPortHeight) {
            //dateSelectorConfig.widgetPositioning.vertical = "top";
            calendarWidget.removeClass('bottom').addClass('top');
          } else {
            calendarWidget.removeClass('bottom, top').addClass(dateSelectorConfig.widgetPositioning.vertical);
          }
          calendarWidget.find('.datepicker tr > td.day').on('click', function () {
            $timeout(function () {
              inputField.data('DateTimePicker').hide();
            });
          });
        });
        calendarIcon.on('click', function (e) {
          inputField.focus();
        });
      }
    };
  }
]);
angular.module('dellUiComponents').directive('alertCollapsible', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, $attrs) {
      //toggle x
      $element.find('.close').on('click', function () {
        $(event.currentTarget).parent().addClass('collapsed');
      });
      $element.find('> .show-collapsed').on('click', function () {
        $(event.currentTarget).parent().removeClass('collapsed');
      });
    }
  };
});
angular.module('dellUiComponents').directive('tableResponsive', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'AC',
      link: function ($scope, $element, $attrs, controller) {
        $element.rtResponsiveTables({ containerBreakPoint: 300 });
      }
    };
  }
]);
/**
 * Created by Clint_Batte on 5/7/2015.
 */
angular.module('dellUiComponents').directive('tapToLoad', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, attrs) {
      $(document).ready(function () {
        $('.news-pagination li').slice(5).hide();
        $('#loadmore').jqPagination({
          max_page: Math.ceil($('.news-pagination li').length / 5),
          paged: function (page) {
            $('.news-pagination li').hide();
            $('.news-pagination li').slice((page - 1) * 5, page * 5).fadeIn('slow');
          }
        });
      });
    }
  };
}).directive('pagination', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, attrs) {
      $('.pagination').jqPagination({
        paged: function (page) {
        }
      });
    }
  };
}).directive('loadMore', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, attrs) {
      var options = {
          lazyLoad: typeof attrs.lazyLoad !== 'undefined' ? attrs.lazyLoad === 'true' : false,
          scrollTarget: typeof attrs.scrollTarget !== 'undefined' ? attrs.scrollTarget : window,
          fadeIn: typeof attrs.fadeIn !== 'undefined' ? attrs.fadeIn === 'true' : true,
          loadMoreButtonText: typeof attrs.loadMoreButtonText !== 'undefined' ? attrs.loadMoreButtonText : 'Load more',
          loadMoreIncrement: typeof attrs.loadMoreIncrement !== 'undefined' ? parseInt(attrs.loadMoreIncrement) : 5
        };
      $element.dellUIloadMore(options);
    }
  };
});
/**
 * Created by Clint_Batte on 5/18/2015.
 */
//TODO need to add this to wordpress site as native jquery
angular.module('dellUiComponents').directive('interactiveProgressBar', [
  '$timeout',
  function ($timeout) {
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        $scope.fakeAnimationValue = 0;
        $scope.fakeAnimation = function () {
          $scope.fakeAnimationId = $timeout(function () {
            if ($scope.fakeAnimationValue < 100) {
              $scope.fakeAnimationValue = $scope.fakeAnimationValue + 1;
              $scope.fakeAnimationSteps = Math.round($scope.fakeAnimationValue / 20);
              //console.log($scope.fakeAnimationValue,$scope.fakeAnimationSteps);
              $scope.stripeAnimate = 'active';
              $scope.fakeAnimation();
            }
          }, _.random(100, 500));
        };
        $scope.pauseFakeAnimation = function () {
          $timeout.cancel($scope.fakeAnimationId);
          $scope.fakeAnimationId = undefined;
          $scope.stripeAnimate = '';
        };
        //console.log('hello timeout');
        $scope.resetFakeAnimation = function () {
          $scope.fakeAnimationValue = 0;
          $scope.fakeAnimation();
          $scope.stripeAnimate = 'active';
        };
      }
    };
  }
]);
angular.module('dellUiComponents').directive('equalizeHeight', [
  '$timeout',
  '$rootScope',
  function ($timeout, $rootScope) {
    // Runs during compile
    return {
      restrict: 'A',
      link: function ($scope, $element, $attrs, controller) {
        var selector = $attrs.equalizeHeight;
        if (selector) {
          $timeout(function () {
            $(selector).matchHeight({ property: 'min-height' });
          }, 500);
        } else {
          console.error('equalize-height usage error. Must include css selector to identify objects to equalize. Example: cequalize-height=".classname"');
        }
      }
    };
  }
]);
/* globals: jQuery, Eve */
/* ======================================================================================
 * Dell-UI-Components: contact-drawer.js
 * http://www.delldesignlibrary.com/components/contact-drawer/
 * ======================================================================================
 * Copyright 2015 Dell, Inc.
 * Licensed under MIT (https://github.com/DellGDC/dell-ui-components/blob/master/LICENSE)
 * ======================================================================================
 */
//Requires jQuery and Eve.js
(function ($, Eve) {
  Eve.scope('.contact-drawer', function () {
    this.listen('.contact-drawer-cta', 'click', function (e) {
      $(e.currentTarget).parent().toggleClass('open');
    });
  });
}(jQuery, Eve));
angular.module('dellUiComponents').directive('contentGallery', [
  '$timeout',
  '$rootScope',
  function ($timeout, $rootScope) {
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        $element.dellUIcontentGallery();
      }
    };
  }
]);
/**
 * Created by Clint_Batte on 5/18/2015.
 */
angular.module('dellUiComponents').directive('navAnchored', [
  '$timeout',
  function ($timeout) {
    return {
      restrict: 'CA',
      link: function ($scope, $element, iAttrs, controller) {
        function fixWidth() {
          $element.css('width', $element.parent().width() + 1).css('left', $element.parent().offset().left + 1 / 2);
        }
        fixWidth();
        $(window).resize(function () {
          fixWidth();
        });
        var sticky = new Waypoint.Sticky({
            element: $element,
            stuckClass: 'affix',
            wrapper: 'nav-tabs-affix'
          }), waypointObjs = $element.find('> li > a[href^=#]'), waypoints = [], triggerClicked = false, offsetHeight = $element.height() + 5;
        //console.log(waypointObjs);
        function clearActiveTab() {
          $element.find('> li').removeClass('active');
        }
        if (waypointObjs) {
          $(waypointObjs).on('click', function (e) {
            //Setting up a click listener on each tab
            e.preventDefault();
            var target = $($(e.currentTarget).attr('href'));
            $('html, body').stop().animate({ 'scrollTop': target.offset().top - offsetHeight }, 900, 'swing');
            if ($element.find('> li').hasClass('active')) {
              clearActiveTab();
              $(e.currentTarget).parent().addClass('active');
              triggerClicked = true;
            }
          });
          _.each(waypointObjs, function (w, index) {
            var target = $($(w).attr('href')), targetWaypoint = new Waypoint.Inview({
                element: target,
                entered: function (direction) {
                  if (direction === 'up' && !triggerClicked) {
                    clearActiveTab();
                    $('[href=' + this.element.selector + ']').parent().addClass('active');
                  } else {
                    $timeout(function () {
                      triggerClicked = false;
                    }, 900);  //wait for the annimation to be done
                  }
                },
                exited: function (direction) {
                  if (direction === 'down' && !triggerClicked) {
                    clearActiveTab();
                    $('[href=' + this.element.selector + ']').parent().next().addClass('active');
                  } else {
                    $timeout(function () {
                      triggerClicked = false;
                    }, 900);  //wait for the annimation to be done
                  }
                }
              });
          });
        }
      }
    };
  }
]);
/**
 * Created by Clint_Batte on 7/14/2015.
 */
/* ======================================================================================
 * Dell-UI-Components: tables.js
 * http://www.delldesignlibrary.com/components/tables/
 * ======================================================================================
 * Copyright 2015 Dell, Inc.
 * Licensed under MIT (https://github.com/DellGDC/dell-ui-components/blob/master/LICENSE)
 * ======================================================================================
 */
angular.module('dellUiComponents').directive('tableFixedHeader', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        $(document).ready(function () {
          var table = $('.table-sort').DataTable({
              'pagingType': 'simple',
              'language': {
                'paginate': {
                  'next': 'Next&nbsp;<span aria-hidden="true" class="icon-ui-arrowright"></span>',
                  'previous': '<span aria-hidden="true" class="icon-ui-arrowleft"></span>&nbsp;Previous'
                }
              },
              retrieve: true
            });
          new $.fn.dataTable.FixedHeader(table);
        });
      }
    };
  }
]).directive('tableFixedColumn', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        var table = $element.DataTable({
            scrollY: '300px',
            scrollX: true,
            scrollCollapse: true,
            paging: false,
            'oLanguage': { 'sSearch': '<i class="icon-small-magnifying-glass text-blue"></i>' },
            retrieve: true
          });
        //change the position of the sorting toggle arrows
        table.columns().iterator('column', function (ctx, idx) {
          $(table.column(idx).header()).append('<span class="sort-icon"/>');
        });
        new $.fn.dataTable.FixedColumns(table);
        // change positioning of search bar
        $element.each(function () {
          var datatable = $(this);
          // find the search label
          var search_label = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] label');
          search_label.addClass('hide-text');
          // SEARCH - Add the placeholder for Search and Turn this into in-line form control
          var search_input = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] input');
          search_input.attr('placeholder', 'Search');
          search_input.addClass('form-control col-xs-12 col-sm-4');
          // LENGTH - Inline-Form control
          // code below for select
          var length_sel = datatable.closest('.dataTables_wrapper').find('div[id$=_length] select');
          length_sel.addClass('form-control');
        });
      }
    };
  }
]).directive('responsiveDataTable', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        var table = $element.DataTable({
            dom: 'C<"clear">lfrtip',
            displayLength: 5,
            paging: false,
            scrollY: '300px',
            scrollX: true,
            'oLanguage': { 'sSearch': '<i class="icon-small-magnifying-glass text-blue"></i>' },
            retrieve: true
          });
        //change the position of the sorting toggle arrows
        table.columns().iterator('column', function (ctx, idx) {
          $(table.column(idx).header()).append('<span class="sort-icon"/>');
        });
        // change positioning of search bar
        $element.each(function () {
          var datatable = $(this);
          // find the search label
          var search_label = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] label');
          search_label.addClass('hide-text');
          // SEARCH - Add the placeholder for Search and Turn this into in-line form control
          var search_input = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] input');
          search_input.attr('placeholder', 'Search');
          search_input.addClass('form-control col-xs-12 col-sm-4');
          // LENGTH - Inline-Form control
          // code below for select
          var length_sel = datatable.closest('.dataTables_wrapper').find('div[id$=_length] select');
          length_sel.addClass('form-control');
        });
      }
    };
  }
]).directive('tableComplex', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        /* Formatting function for row details - modify as you need */
        function format(d) {
          // `d` is the original data object for the row
          return '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">' + '<tr>' + '<td>Full name:</td>' + '<td>' + d.name + '</td>' + '</tr>' + '<tr>' + '<td>Extension number:</td>' + '<td>' + d.extn + '</td>' + '</tr>' + '<tr>' + '<td>Extra info:</td>' + '<td>And any further details here (images etc)...</td>' + '</tr>' + '</table>';
        }
        var table = $element.DataTable({
            'ajax': '../components/tables/data.json',
            'columns': [
              {
                'className': 'details-control',
                'orderable': false,
                'data': null,
                'defaultContent': ''
              },
              { 'data': 'name' },
              { 'data': 'position' },
              { 'data': 'office' },
              { 'data': 'salary' }
            ],
            'order': [[
                1,
                'asc'
              ]],
            dom: 'C<"clear">lfrtip',
            displayLength: 5,
            paging: false,
            scrollY: '300px',
            scrollX: true,
            'oLanguage': { 'sSearch': '<i class="icon-small-magnifying-glass text-blue"></i>' },
            retrieve: true
          });
        //change the position of the sorting toggle arrows
        table.columns().iterator('column', function (ctx, idx) {
          $(table.column(idx).header()).append('<span class="sort-icon"/>');
        });
        // Add event listener for opening and closing details
        $('.table-complex tbody').on('click', 'td.details-control', function () {
          var tr = $(this).closest('tr');
          var row = table.row(tr);
          if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
          } else {
            // Open this row
            row.child(format(row.data())).show();
            tr.addClass('shown');
          }
        });
        // change positioning of search bar
        $element.each(function () {
          var datatable = $(this);
          // find the search label
          var search_label = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] label');
          search_label.addClass('hide-text');
          // SEARCH - Add the placeholder for Search and Turn this into in-line form control
          var search_input = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] input');
          search_input.attr('placeholder', 'Search');
          search_input.addClass('form-control col-xs-12 col-sm-4');
          // LENGTH - Inline-Form control
          // code below for select
          var length_sel = datatable.closest('.dataTables_wrapper').find('div[id$=_length] select');
          length_sel.addClass('form-control');
        });
      }
    };
  }
]).directive('responsiveDataItem', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, iAttrs, controller) {
        $(document).ready(function () {
          $('table.responsive-data-table').DataTable({
            dom: 'C<"clear">lfrtip',
            displayLength: 5,
            paging: false,
            scrollY: '300px',
            scrollX: true
          });
        });
      }
    };
  }
]);
/**
 * Created by Clint_Batte on 9/9/2015.
 */
/* ======================================================================================
 * Dell-UI-Components: tables.js
 * http://www.delldesignlibrary.com/components/tables/
 * ======================================================================================
 * Copyright 2015 Dell, Inc.
 * Licensed under MIT (https://github.com/DellGDC/dell-ui-components/blob/master/LICENSE)
 * ======================================================================================
 */
angular.module('dellUiComponents').directive('tableExpandableRow', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, $attributes, controller) {
        var datafile = 'components/tables-uber/data-responsive.json';
        //TODO need to redo sample json file so that includes configuration for columns
        if ($attributes.datafile) {
          datafile = $attributes.datafile;
        }
        function updateDataTableSelectAllCtrl(table) {
          var $table = table.table().node();
          var $chkbox_all = $('tbody input[type="checkbox"]', $table);
          var $chkbox_checked = $('tbody input[type="checkbox"]:checked', $table);
          var chkbox_select_all = $('thead input[name="select_all"]', $table).get(0);
          // If none of the checkboxes are checked
          if ($chkbox_checked.length === 0) {
            chkbox_select_all.checked = false;
            if ('indeterminate' in chkbox_select_all) {
              chkbox_select_all.indeterminate = false;
            }  // If all of the checkboxes are checked
          } else if ($chkbox_checked.length === $chkbox_all.length) {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
              chkbox_select_all.indeterminate = false;
            }  // If some of the checkboxes are checked
          } else {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
              chkbox_select_all.indeterminate = true;
            }
          }
        }
        /* Formatting function for row details - modify as you need */
        function format(d) {
          // `d` is the original data object for the row
          //TODO we can't really do this. We can't hard code labels like "Company Name". The column names need to come from a configuration file. The HTML also needs to come from a template file.
          return '<row>' + '<div class="row">' + '<div class="col-xs-12">' + '<div class="col-xs-6 col-sm-3 visible-xs-block">' + '<p class="text-gray-medium small">Company Name</p>' + '<p>' + d.Company_name + '</p>' + '</div>' + '<div class="col-xs-6 col-sm-3 visible-xs-block">' + '<p class="text-gray-medium small">Solution ID</p>' + '<p><a href="javascript:;" class="btn-link">' + d.Solution_ID + '</a></p>' + '</div>' + '<div class="col-xs-6 col-sm-3 visible-xs-block">' + '<p class="text-gray-medium small">List Price</p>' + '<p>' + d.List_price + '</p>' + '</div>' + '<div class="col-xs-6 col-sm-3 visible-xs-block">' + '<p class="text-gray-medium small">Quote Number</p>' + '<p><a href="javascript:;" class="btn-link">' + d.Quote_number + '</a></p>' + '</div>' + '<div class="row">' + '<div class="col-xs-12 visible-xs-block">' + '<hr class="hr-gray top-offset-10">' + '</div>' + '</div>' + '<div class="col-xs-12">' + '<h3 class="text-blue">Account Details</h3>' + '</div>' + '<div class="col-xs-6 col-sm-3">' + '<p class="text-gray-medium small">Contact Number</p>' + '<p>' + d.Contact_number + '</p>' + '</div>' + '<div class="col-xs-6 col-sm-3">' + '<p class="text-gray-medium small">Extension</p>' + '<p>' + d.Extension + '</p>' + '</div>' + '<div class="col-xs-6 col-sm-3">' + '<p class="text-gray-medium small">Customer Since</p>' + '<p>' + d.Customer_since + '</p>' + '</div>' + '<div class="col-xs-6 col-sm-3">' + '<p class="text-gray-medium small">Location</p>' + '<p>' + d.Location + '</p>' + '</div>' + '<div class="col-xs-6 col-sm-3">' + '<p class="text-gray-medium small">Owner</p>' + '<p><a href="javascript:;" class="btn-link">' + d.Owner + '</a></p>' + '</div>' + '<div class="col-xs-6 col-sm-3">' + '<p class="text-gray-medium small">Last Edited</p>' + '<p>' + d.Last_edited + '</p>' + '</div>' + '<div class="col-xs-6 col-sm-3">' + '<p class="text-gray-medium small">Customer Number</p>' + '<p><a href="javascript:;" class="btn-link">' + d.Customer_number + '</a></p>' + '</div>' + '</div>' + '</div>' + '<div class="row">' + '<div class="col-xs-12">' + '<hr class="hr-gray top-offset-10">' + '</div>' + '</div>' + '<div class="row">' + '<div class="col-xs-12">' + '<h3 class="text-blue col-xs-12">Additional Notes</h3>' + '</div>' + '<div class="col-xs-12">' + '<div class="col-xs-6">' + '<p class="text-gray-medium small">Purchase Details</p>' + '<p>' + d.Purchase_details + '</p>' + '</div>' + '<div class="col-xs-6">' + '<p class=" text-gray-medium small">Sales Notes</p>' + '<p>' + d.Sales_notes + '</p>' + '</div>' + '</div>' + '</div>' + '</row>';
        }
        // Array holding selected row IDs
        var rows_selected = [];
        var tableData;
        var table = $element.DataTable({
            'ajax': datafile,
            'columnDefs': [{
                'targets': 0,
                'searchable': true,
                'orderable': true,
                'stateSave': true,
                'className': 'details-control',
                'render': function (data, type, full, meta) {
                  return '<input type="checkbox">';
                }
              }],
            responsive: { details: false },
            'columns': [
              { 'data': '' },
              {
                'data': 'Company_name',
                'sClass': 'editable'
              },
              {
                'data': 'Solution_ID',
                'sClass': 'editable'
              },
              {
                'data': 'List_price',
                'sClass': 'editable'
              },
              {
                'data': 'Quote_number',
                'sClass': 'editable'
              }
            ],
            'order': [
              1,
              'asc'
            ],
            'dom': 'C<"clear">lfrtip',
            'pagingType': 'simple',
            'language': {
              'paginate': {
                'next': 'Next&nbsp;<span aria-hidden="true" class="icon-ui-arrowright"></span>',
                'previous': '<span aria-hidden="true" class="icon-ui-arrowleft"></span>&nbsp;Previous'
              }
            },
            'fnDrawCallback': function () {
              //bind the click handler script to the newly created elements held in the table
              $('ul.pagination a').bind('click', dataReloadClick);
              //console.log('i was clicked');
              $('th.editable.sorting_asc' || 'th.editable.sorting_desc').bind('click', dataReloadClick);  //console.log('i was sorted');
            },
            'oLanguage': { 'sSearch': '<i class="icon-small-magnifying-glass text-blue"></i>' },
            retrieve: true
          });
        //change the position of the sorting toggle arrows
        table.columns().iterator('column', function (ctx, idx) {
          $(table.column(idx).header()).append('<span class="sort-icon"/>');
        });
        // Handle click on checkbox
        $element.find('tbody').on('click', 'input[type="checkbox"]', function (e) {
          var $row = $(this).closest('tr');
          // Get row data
          var data = table.row($row).data();
          // Get row ID
          var rowId = data[0];
          // Determine whether row ID is in the list of selected row IDs
          var index = $.inArray(rowId, rows_selected);
          // If checkbox is checked and row ID is not in list of selected row IDs
          if (this.checked && index === -1) {
            rows_selected.push(rowId);  // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
          } else if (!this.checked && index !== -1) {
            rows_selected.splice(index, 1);
          }
          if (this.checked) {
            $row.addClass('selected');
          } else {
            $row.removeClass('selected');
          }
          // Update state of "Select all" control
          updateDataTableSelectAllCtrl(table);
          //Prevent click event from propagating to parent
          e.stopPropagation();
        });
        // Handle click on "Select all" control
        $element.find('thead input[name="select_all"]').on('click', function (e) {
          if (this.checked) {
            $element.find('tbody input[type="checkbox"]:not(:checked)').trigger('click');
          } else {
            $element.find('tbody input[type="checkbox"]:checked').trigger('click');
          }
          // Prevent click event from propagating to parent
          e.stopPropagation();
        });
        // Handle table draw event
        table.on('draw', function () {
          // Update state of "Select all" control
          updateDataTableSelectAllCtrl(table);
        });
        // Handle form submission event
        $('#frm-table-uber').on('submit', function (e) {
          var form = this;
          // Iterate over all selected checkboxes
          $.each(rows_selected, function (index, rowId) {
            // Create a hidden element
            $(form).append($('<input>').attr('type', 'hidden').attr('name', 'id[]').val(rowId));
          });
        });
        var inputTable = $element.DataTable(tableData);
        if ($element.hasClass('table-editable')) {
          $timeout(function () {
            //console.log("editable table here");
            $element.find('td.editable').attr('contenteditable', true);
            $element.find('td.editable').on('blur', function (e) {
              var newData = $(e.currentTarget).text(), data = inputTable.cell(this).data();
              if (data !== newData) {
              }
            });
          }, 100);
        }
        //onClick handler function
        function dataReloadClick(e) {
          e.preventDefault();
          //$(this).load('components/tables-uber/dataColumn.json');
          $timeout(function () {
            //console.log("editable table here");
            $element.find('td.editable').attr('contenteditable', true);
            $element.find('td.editable').on('blur', function (e) {
              var newData = $(e.currentTarget).text(), data = inputTable.cell(this).data();
              if (data !== newData) {
              }
            });
          }, 100);
        }
        // Add event listener for opening and closing details
        $element.find('tbody').on('click', 'td.details-control', function () {
          var tr = $(this).closest('tr');
          var row = table.row(tr);
          if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
          } else {
            // Open this row
            row.child(format(row.data())).show();
            tr.addClass('shown');
          }
        });
        // change positioning of search bar
        $element.each(function () {
          var datatable = $(this);
          // find the search label
          var search_label = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] label');
          search_label.addClass('hide-text');
          // SEARCH - Add the placeholder for Search and Turn this into in-line form control
          var search_input = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] input');
          search_input.attr('placeholder', 'Search');
          search_input.addClass('form-control col-xs-12 col-sm-4');
          // LENGTH - Inline-Form control
          // code below for select
          var length_sel = datatable.closest('.dataTables_wrapper').find('div[id$=_length] select');
          length_sel.addClass('form-control');
        });
      }
    };
  }
]).directive('tableResponsiveColumns', [
  '$timeout',
  function ($timeout) {
    // Runs during compile
    return {
      restrict: 'C',
      link: function ($scope, $element, $attributes, controller) {
        var datafile = 'components/tables-uber/dataColumn.json';
        //TODO need to redo sample json file so that includes configuration for columns
        if ($attributes.datafile) {
          datafile = $attributes.datafile;
        }
        function updateDataTableSelectAllCtrl(table) {
          var $table = table.table().node();
          var $chkbox_all = $('tbody input[type="checkbox"]', $table);
          var $chkbox_checked = $('tbody input[type="checkbox"]:checked', $table);
          var chkbox_select_all = $('thead input[name="select_all"]', $table).get(0);
          // If none of the checkboxes are checked
          if ($chkbox_checked.length === 0) {
            chkbox_select_all.checked = false;
            if ('indeterminate' in chkbox_select_all) {
              chkbox_select_all.indeterminate = false;
            }  // If all of the checkboxes are checked
          } else if ($chkbox_checked.length === $chkbox_all.length) {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
              chkbox_select_all.indeterminate = false;
            }  // If some of the checkboxes are checked
          } else {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
              chkbox_select_all.indeterminate = true;
            }
          }
        }
        // Array holding selected row IDs
        var rows_selected = [];
        var tableData;
        var table = $element.DataTable({
            'ajax': datafile,
            'columnDefs': [{
                'targets': 0,
                'searchable': true,
                'orderable': false,
                'stateSave': true,
                'className': 'dt-body-center',
                'render': function (data, type, full, meta) {
                  return '<input type="checkbox">';
                }
              }],
            'columns': [
              { 'data': '' },
              {
                'data': 'Company_name',
                'sClass': 'editable'
              },
              {
                'data': 'Solution_name',
                'sClass': 'editable'
              },
              {
                'data': 'Solution_ID',
                'sClass': 'editable'
              },
              {
                'data': 'Owner',
                'sClass': 'editable'
              },
              {
                'data': 'Last_edited',
                'sClass': 'editable'
              },
              {
                'data': 'List_price',
                'sClass': 'editable'
              },
              {
                'data': 'Customer_number',
                'sClass': 'editable'
              },
              {
                'data': 'Quote_number',
                'sClass': 'editable'
              },
              {
                'data': 'Status',
                'sClass': ''
              }
            ],
            'order': [
              1,
              'asc'
            ],
            dom: 'Rlfrtip',
            'pagingType': 'simple',
            'language': {
              'paginate': {
                'next': 'Next&nbsp;<span aria-hidden="true" class="icon-ui-arrowright"></span>',
                'previous': '<span aria-hidden="true" class="icon-ui-arrowleft"></span>&nbsp;Previous'
              }
            },
            'fnDrawCallback': function () {
              //bind the click handler script to the newly created elements held in the table
              $('ul.pagination a').bind('click', dataReloadClick);
              //console.log('i was clicked');
              $('th.editable.sorting_asc' || 'th.editable.sorting_desc').bind('click', dataReloadClick);  //console.log('i was sorted');
            },
            'responsive': true,
            'oLanguage': { 'sSearch': '<i class="icon-small-magnifying-glass text-blue"></i>' },
            retrieve: true
          });
        //change the position of the sorting toggle arrows
        table.columns().iterator('column', function (ctx, idx) {
          $(table.column(idx).header()).append('<span class="sort-icon"/>');
        });
        // Handle click on checkbox
        $element.find('tbody').on('click', 'input[type="checkbox"]', function (e) {
          var $row = $(this).closest('tr');
          // Get row data
          var data = table.row($row).data();
          // Get row ID
          var rowId = data[0];
          // Determine whether row ID is in the list of selected row IDs
          var index = $.inArray(rowId, rows_selected);
          // If checkbox is checked and row ID is not in list of selected row IDs
          if (this.checked && index === -1) {
            rows_selected.push(rowId);  // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
          } else if (!this.checked && index !== -1) {
            rows_selected.splice(index, 1);
          }
          if (this.checked) {
            $row.addClass('selected');
          } else {
            $row.removeClass('selected');
          }
          // Update state of "Select all" control
          updateDataTableSelectAllCtrl(table);
          //Prevent click event from propagating to parent
          e.stopPropagation();
        });
        // Handle click on "Select all" control
        $element.find('thead input[name="select_all"]').on('click', function (e) {
          if (this.checked) {
            $element.find('tbody input[type="checkbox"]:not(:checked)').trigger('click');
          } else {
            $element.find('tbody input[type="checkbox"]:checked').trigger('click');
          }
          // Prevent click event from propagating to parent
          e.stopPropagation();
        });
        // Handle table draw event
        table.on('draw', function () {
          // Update state of "Select all" control
          updateDataTableSelectAllCtrl(table);
        });
        // Handle form submission event
        $('#frm-table-uber').on('submit', function (e) {
          var form = this;
          // Iterate over all selected checkboxes
          $.each(rows_selected, function (index, rowId) {
            // Create a hidden element
            $(form).append($('<input>').attr('type', 'hidden').attr('name', 'id[]').val(rowId));
          });
        });
        var inputTable = $element.DataTable(tableData);
        if ($element.hasClass('table-editable')) {
          $timeout(function () {
            //console.log("editable table here");
            $element.find('td.editable').attr('contenteditable', true);
            $element.find('td.editable .btn').attr('contenteditable', false);
            $element.find('td.editable').on('blur', function (e) {
              var newData = $(e.currentTarget).text(), data = inputTable.cell(this).data();
              if (data !== newData) {
              }
            });
          }, 100);
        }
        //onClick handler function
        function dataReloadClick(e) {
          e.preventDefault();
          //$(this).load('components/tables-uber/dataColumn.json');
          $timeout(function () {
            //console.log("editable table here");
            $element.find('td.editable').attr('contenteditable', true);
            $element.find('td.editable').on('blur', function (e) {
              var newData = $(e.currentTarget).text(), data = inputTable.cell(this).data();
              if (data !== newData) {
              }
            });
          }, 100);
        }
        // Add event listener for opening and closing details
        $element.find('tbody').on('click', 'td.details-control', function () {
          var tr = $(this).closest('tr');
          var row = table.row(tr);
          var format = format;
          if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
          } else {
            // Open this row
            row.child(format(row.data())).show();
            tr.addClass('shown');
          }
        });
        // change positioning of search bar
        $element.each(function () {
          var datatable = $(this);
          // find the search label
          var search_label = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] label');
          search_label.addClass('hide-text');
          // SEARCH - Add the placeholder for Search and Turn this into in-line form control
          var search_input = datatable.closest('.dataTables_wrapper').find('div[id$=_filter] input');
          search_input.attr('placeholder', 'Search');
          search_input.addClass('form-control col-xs-12 col-sm-4');
          // LENGTH - Inline-Form control
          // code below for select
          var length_sel = datatable.closest('.dataTables_wrapper').find('div[id$=_length] select');
          length_sel.addClass('form-control');
        });
      }
    };
  }
]);
angular.module('dellUiComponents').directive('scroll', function () {
  return {
    restrict: 'C',
    link: function ($scope, $element, $attr, fn) {
      $element.click(function (event) {
        event.preventDefault();
        $.scrollTo($attr.href, 300, { axis: 'y' });
      });
    }
  };
});
/* globals s */
angular.module('demo', [
  'ui.utils',
  'ui.router',
  'ngAnimate',
  'dellUiComponents'
]);
angular.module('demo').config([
  '$stateProvider',
  '$urlRouterProvider',
  function ($stateProvider, $urlRouterProvider) {
    $stateProvider.state('demo', {
      url: '/:typeId/:componentId',
      templateUrl: 'demo-assets/partials/home/home.html'
    });
    /* Add New States Above */
    $urlRouterProvider.otherwise('/demo/');
  }
]);
angular.module('demo').run([
  '$rootScope',
  function ($rootScope) {
    _.str = s;
  }
]);
angular.module('demo').controller('HomeCtrl', [
  '$scope',
  '$rootScope',
  '$http',
  '$state',
  '$timeout',
  function ($scope, $rootScope, $http, $state, $timeout) {
    $rootScope.activeComponent = '';
    $rootScope.pageType = 'demo';
    var init;
    $http.get('components-list.json').success(function (data) {
      $rootScope.components = [];
      _.each(data, function (component) {
        var componentObj = {
            label: _.str.titleize(component),
            id: _.str.dasherize(component)
          };
        $rootScope.components.push(componentObj);
        if ($state.params.componentId) {
          $rootScope.activeComponent = componentObj;
        }
      });
      init = function (componentId) {
        if (componentId) {
          $rootScope.componentDemoUrl = 'components/' + componentId + '/demo-' + componentId + '.html';
          $rootScope.componentGuideUrl = 'components/' + componentId + '/guide-' + componentId + '.html';
          $rootScope.componentPlayUrl = 'components/' + componentId + '/demo-play-' + componentId + '.html';
          $rootScope.activeComponent = _.find($rootScope.components, function (c) {
            return c.id === componentId;
          });
        }
        $timeout(function () {
          $rootScope.pageType = $state.params.typeId;
        });
      };
      init($state.params.componentId);
    });
    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
      init(toParams.componentId);
    });
  }
]);
angular.module('demo').controller('ComponentsDemoCtrl', [
  '$scope',
  '$rootScope',
  '$state',
  function ($scope, $rootScope, $state) {
  }
]);
angular.module('demo').controller('PlayCtrl', [
  '$scope',
  '$rootScope',
  '$state',
  function ($scope, $rootScope, $state) {
    var init = function (componentId) {
      if (componentId) {
        $scope.componentPlayUrl = 'components/' + componentId + '/demo-play-' + componentId + '.html';
      }
    };
    init($state.params.componentId);
    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
      init(toParams.componentId);
    });
  }
]);
angular.module('demo').controller('AllComponentsCtrl', [
  '$scope',
  function ($scope) {
  }
]);
angular.module('demo').controller('alertsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('alertsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('announcementsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('announcementsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
    //this is for functionality related to play demo code
    var titleText, bodyHTML, iconHTML, ctaLinks, announcementId;
    $scope.sampleAnnouncementConfig = { type: 'blue' };
    $scope.$watch('sampleAnnouncementConfig.body', function (newValue, oldValue) {
      //console.log(newValue);
      if (newValue) {
        $scope.sampleAnnouncementConfig.body = newValue.replace(/(?:\r\n|\r|\n)/g, ' <br/>');
      }
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.type', function (newValue, oldValue) {
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.title', function (newValue, oldValue) {
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.id', function (newValue, oldValue) {
      $scope.sampleAnnouncementConfig.id = _.str.dasherize(newValue);
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.icon', function (newValue, oldValue) {
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.cta_0.url', function (newValue, oldValue) {
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.cta_1.url', function (newValue, oldValue) {
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.cta_0.label', function (newValue, oldValue) {
      refreshSample();
    });
    $scope.$watch('sampleAnnouncementConfig.cta_1.label', function (newValue, oldValue) {
      refreshSample();
    });
    function refreshSample() {
      $scope.textkeysToAdd = '';
      $scope.resourcesToAdd = '';
      if ($scope.sampleAnnouncementConfig.title) {
        titleText = '\n    <h4>' + $scope.sampleAnnouncementConfig.title + '</h4>';
      } else {
        titleText = '';
      }
      if ($scope.sampleAnnouncementConfig.body) {
        if ($scope.sampleAnnouncementConfig.body.match(/<.*>|\n/)) {
          //TODO convert markdown
          bodyHTML = '\n    ' + $scope.sampleAnnouncementConfig.body;
          $scope.textkeysToAdd = '"text_announcement_' + _.str.underscored($scope.sampleAnnouncementConfig.id) + '_markdown":"' + $scope.sampleAnnouncementConfig.body + '"';
        } else {
          bodyHTML = '\n    <p>' + $scope.sampleAnnouncementConfig.body + '</p>';
          $scope.textkeysToAdd = '"text_announcement_' + _.str.underscored($scope.sampleAnnouncementConfig.id) + '":"' + $scope.sampleAnnouncementConfig.body + '"';
        }
      } else {
        bodyHTML = '\n    <p>Deserunt sint qui cillum cillum eu et ut culpa dolor. Amet sunt culpa nisi exercitation laborum dolore aliquip eu ullamco dolore duis exercitation minim laboris.</p>';
      }
      if ($scope.sampleAnnouncementConfig.title) {
        if ($scope.sampleAnnouncementConfig.body) {
          $scope.textkeysToAdd += ',\n';
        }
        $scope.textkeysToAdd += '"title_announcement_' + _.str.underscored($scope.sampleAnnouncementConfig.id) + '":"' + $scope.sampleAnnouncementConfig.title + '"';
      }
      if ($scope.sampleAnnouncementConfig.id) {
        announcementId = ' id="' + $scope.sampleAnnouncementConfig.id + '"';
      } else {
        announcementId = '';
      }
      //TODO need to create these icons within the theme
      if ($scope.sampleAnnouncementConfig.icon) {
        iconHTML = '\n    <img class="icon-large-' + $scope.sampleAnnouncementConfig.icon + '" src="app/dell-ui-site/img/' + $scope.sampleAnnouncementConfig.icon + '.png"/>';
      } else {
        iconHTML = '';
      }
      if ($scope.sampleAnnouncementConfig.cta_0 || $scope.sampleAnnouncementConfig.cta_1) {
        ctaLinks = '';
        if ($scope.sampleAnnouncementConfig.cta_0) {
          ctaLinks += '\n    <p><a href="' + $scope.sampleAnnouncementConfig.cta_0.url + '">' + $scope.sampleAnnouncementConfig.cta_0.label + '</a></p>';
          $scope.resourcesToAdd += '"url_announcement_' + _.str.underscored($scope.sampleAnnouncementConfig.id) + '_cta_0":"' + $scope.sampleAnnouncementConfig.cta_0.url + '"';
          if ($scope.textkeysToAdd) {
            $scope.textkeysToAdd += ',\n';
          }
          $scope.textkeysToAdd += '"text_announcement_' + _.str.underscored($scope.sampleAnnouncementConfig.id) + '_cta_0":"' + $scope.sampleAnnouncementConfig.cta_0.label + '"';
        }
        if ($scope.sampleAnnouncementConfig.cta_1) {
          ctaLinks += '\n    <p><a href="' + $scope.sampleAnnouncementConfig.cta_1.url + '">' + $scope.sampleAnnouncementConfig.cta_1.label + '</a></p>';
          if ($scope.resourcesToAdd) {
            $scope.resourcesToAdd += ',\n';
          }
          $scope.resourcesToAdd += '"url_announcement_' + _.str.underscored($scope.sampleAnnouncementConfig.id) + '_cta_1":"' + $scope.sampleAnnouncementConfig.cta_1.url + '"';
          if ($scope.sampleAnnouncementConfig.cta_0 && $scope.textkeysToAdd) {
            $scope.textkeysToAdd += ',\n';
          }
          $scope.textkeysToAdd += '"text_announcement_' + _.str.underscored($scope.sampleAnnouncementConfig.id) + '_cta_1":"' + $scope.sampleAnnouncementConfig.cta_1.label + '"';
        }
      } else {
        ctaLinks = '';
      }
      $scope.playHtmlCode = '<blockquote class="blockquote-' + $scope.sampleAnnouncementConfig.type + '"' + announcementId + '>' + iconHTML + titleText + bodyHTML + ctaLinks + '\n</blockquote>';
      $scope.renderingHTML = $sce.trustAsHtml($scope.playHtmlCode);
      //console.log("$scope.renderingHTML",$scope.renderingHTML);
      $scope.sampleSherpaConfig = _.clone($scope.sampleAnnouncementConfig);
      delete $scope.sampleSherpaConfig.body;
      delete $scope.sampleSherpaConfig.title;
      $rootScope.safeApply();
    }
    refreshSample();
  }
]);
angular.module('demo').controller('breadcrumbsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('breadcrumbsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('standardButtonsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('standardButtonsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('blockButtonsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('blockButtonsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('dropdownButtonsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('dropdownButtonsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('miniButtonsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('miniButtonsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('carouselCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('carouselPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('collapsibleItemsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('collapsibleItemsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('colorsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('colorsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('containersCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('containersPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('dividersCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('dividersPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('footerCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('footerPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('formsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('formsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('iconsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('iconsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('listsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('listsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('bannerCtrl', [
  '$scope',
  '$rootScope',
  '$timeout',
  function ($scope, $rootScope, $timeout) {
    //this is for functionality related to demo code
    $scope.initOptions = function () {
      $('.jumbotron a>p+p').hide();
      $('.jumbotron h5').hide();
      $('[name="bannerOptions"]').on('click', function () {
        console.log($(this).val());
        switch ($(this).val()) {
        case 'eventTitle':
          $('.jumbotron h5').show();
          $('.jumbotron a>p+p').hide();
          break;
        case 'legal':
          $('.jumbotron h5').hide();
          $('.jumbotron a>p+p').show();
          break;
        default:
          $('.jumbotron a>p+p').hide();
          $('.jumbotron h5').hide();
        }
      });
    };
  }
]);
angular.module('demo').controller('bannerPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('labelsAndBadgesCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('labelsAndBadgesPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('modalsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('modalsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('offsetsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('offsetsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('pagersCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('pagersPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('paginationCtrl', [
  '$scope',
  '$rootScope',
  '$timeout',
  function ($scope, $rootScope, $timeout) {
  }
]);
angular.module('demo').controller('paginationPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('popoversCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('popoversPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('responsiveUtilitiesCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('responsiveUtilitiesPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('progressBarsCtrl', [
  '$scope',
  '$timeout',
  '$rootScope',
  function ($scope, $timeout, $rootScope) {
  }
]);
angular.module('demo').controller('progressBarsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('tablesCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('tablesPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('tabsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('tabsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('tooltipsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('tooltipsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('typographyCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('typographyPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').filter('_.str', function () {
  // Examples: 
  // Simple {{ string_variable | _.str:'capitalize' }}
  // multiple {{ string_variable | _.str:'capitalize,titleize' }}
  // To use filter with parameters such as _.str.prune("whatever string",10) : {{ string_variable | _.str:'prune':10 }}
  return function (str, fn, params) {
    str = str || '';
    params = params || [];
    //params.unshift(str);
    fn = fn.replace(/ /g, '').split(',');
    //strip white spaces
    if (fn.length) {
      _.each(fn, function (func) {
        str = _.str[func](str, params);
      });
      return str;
    } else {
      return str;
    }
  };
});
angular.module('demo').controller('ratingsAndReviewsCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('ratingsAndReviewsDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('ratingsAndReviewsPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('contentTeaserCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
    //this is for functionality related to demo code
    $scope.viewAll = {};
    $scope.$watch('viewAll', function (newValue) {
    });
  }
]);
angular.module('demo').controller('contentTeaserPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('searchAndNavigationCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('searchAndNavigationPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
/////////////////// CheckBox Filter Example
///////////////////////////////////////////
function myCheckboxCtrl($scope) {
  $scope.selected = {};
  $scope.classes = [
    'size1',
    'size2',
    'size3'
  ];
  $scope.cards = [
    {
      name: 'Result1',
      size: 'size1',
      price: 'price1'
    },
    {
      name: 'Result2',
      size: 'size1',
      price: 'price2'
    },
    {
      name: 'Result3',
      size: 'size1',
      price: 'price3'
    },
    {
      name: 'Result4',
      size: 'size2',
      price: 'price1'
    },
    {
      name: 'Result5',
      size: 'size2',
      price: 'price2'
    },
    {
      name: 'Result6',
      size: 'size2',
      price: 'price3'
    },
    {
      name: 'Result7',
      size: 'size3',
      price: 'price1'
    },
    {
      name: 'Result8',
      size: 'size3',
      price: 'price2'
    },
    {
      name: 'Result9',
      size: 'size3',
      price: 'price3'
    }
  ];
  function isChecked(obj) {
    var checked = [];
    for (var key in obj) {
      if (obj[key]) {
        checked.push(key);
      }
    }
    return checked;
  }
  $scope.showCards = function (card) {
    var checked = isChecked($scope.selected);
    if (checked.length < 1) {
      checked = $scope.classes;
    }
    return checked.indexOf(card.size) > -1;
  };
}
/////////////////// Drop Down Filter Example
////////////////////////////////////////////
function myDDCtrl($scope) {
  $scope.selected = {};
  $scope.filterOptions = {
    sizes: [
      { size: 'size1' },
      { size: 'size2' },
      { size: 'size3' },
      { size: 'size4' }
    ],
    prices: [
      { pricerange: 'price1' },
      { pricerange: 'price2' },
      { pricerange: 'price3' },
      { pricerange: 'price4' }
    ]
  };
  $scope.data = [
    {
      name: 'Result1',
      size: 'size1',
      pricerange: 'price1'
    },
    {
      name: 'Result2',
      size: 'size1',
      pricerange: 'price2'
    },
    {
      name: 'Result3',
      size: 'size1',
      pricerange: 'price3'
    },
    {
      name: 'Result4',
      size: 'size1',
      pricerange: 'price4'
    },
    {
      name: 'Result5',
      size: 'size2',
      pricerange: 'price2'
    },
    {
      name: 'Result6',
      size: 'size2',
      pricerange: 'price3'
    },
    {
      name: 'Result7',
      size: 'size2',
      pricerange: 'price4'
    },
    {
      name: 'Result8',
      size: 'size2',
      pricerange: 'price1'
    },
    {
      name: 'Result9',
      size: 'size3',
      pricerange: 'price2'
    },
    {
      name: 'Result10',
      size: 'size3',
      pricerange: 'price3'
    },
    {
      name: 'Result11',
      size: 'size3',
      pricerange: 'price4'
    },
    {
      name: 'Result12',
      size: 'size3',
      pricerange: 'price1'
    },
    {
      name: 'Result13',
      size: 'size4',
      pricerange: 'price2'
    },
    {
      name: 'Result14',
      size: 'size4',
      pricerange: 'price3'
    },
    {
      name: 'Result15',
      size: 'size4',
      pricerange: 'price4'
    }
  ];
  //Mapped to the model to filter
  $scope.filterItem = { store: $scope.filterOptions.sizes[0] };
  //Custom filter - filter based on the rating selected
  $scope.customFilter = function (data) {
    if (data.size === $scope.filterItem.store.sizes) {
      return true;
    } else {
      return false;
    }
  };
}
angular.module('demo').controller('contactDrawerCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('contactDrawerPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('anchoredNavCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('anchoredNavPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('tablesUberCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('tablesUberPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('mastheadCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
  }
]);
angular.module('demo').controller('mastheadPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('productStackCtrl', [
  '$scope',
  '$rootScope',
  function ($scope, $rootScope) {
    //this is for functionality related to demo code
    $('input[type="checkbox"]').on('click', function () {
      if ($(this).is(':checked')) {
        $('.compare-default').hide();
        $('.compare-active').removeClass('hide').addClass('show');
      } else {
        $('.compare-default').show();
        $('.compare-active').removeClass('show').addClass('hide');
      }
    });
  }
]);
angular.module('demo').controller('productStackPLayDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('productStackGuideDemoCtrl', [
  '$scope',
  '$rootScope',
  '$sce',
  function ($scope, $rootScope, $sce) {
  }
]);
angular.module('demo').controller('GuideCtrl', [
  '$scope',
  '$rootScope',
  '$state',
  function ($scope, $rootScope, $state) {
    var init = function (componentId) {
      if (componentId) {
        $scope.componentGuideUrl = 'components/' + componentId + '/demo-guide-' + componentId + '.html';
      }
    };
    init($state.params.componentId);
    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
      init(toParams.componentId);
    });
  }
]);
angular.module('dellUiComponents').directive('truncate', function () {
  return {
    restrict: 'A',
    link: function (scope, element, attrs, fn) {
      var textToTruncate = element.text(), charCount = attrs.truncate;
      if (!charCount) {
        charCount = 140;
      }
      if (textToTruncate.length > charCount) {
        textToTruncate = textToTruncate.substring(0, charCount) + '...';
        element.text(textToTruncate);
      }
    }
  };
});
angular.module('dellUiComponents').run([
  '$templateCache',
  function ($templateCache) {
    'use strict';
    $templateCache.put('components/alerts/demo-alerts.html', '<section ng-controller=alertsCtrl id=alerts-html-example><div class=container><h2>Alerts Demo</h2><h3 class=bottom-offset-20>Alert types</h3><div class="alert alert-warning"><p><strong>User Errors:</strong>A soft stop, requiring users to take an action before proceeding. The error cannot be dismissed and is visible until the error is fixed.</p></div><div class="row bottom-offset-20"><div class="col-xs-12 col-md-4"><div class="alert alert-success alert-collapsible"><button type=button class=close data-toggle=collapse data-target=.cssDataTargetDismiss-2>\xd7</button><p class=show-expanded><strong>Success Alerts:</strong> Indicates the task has been completed successfully. Can be collapsed and reopened.</p><p class=show-collapsed>Re-open dismissed info alert</p></div></div><div class="col-xs-12 col-md-4"><div class="alert alert-info alert-collapsible"><button type=button class=close>\xd7</button><p class=show-expanded><strong>Information Alerts:</strong> Information alerts display important information for the page. Can be collapsed and reopened.</p><p class=show-collapsed>Re-open dismissed info alert</p></div></div><div class="col-xs-12 col-md-4"><div class="alert alert-error"><p><strong>Catastrophic Errors:</strong>A hard stop, meaning users cannot go forward. Cannot be collapsed.</p></div></div></div><h3 class="top-offset-40 bottom-offset-20">Informational alerts</h3><div class="alert alert-info alert-collapsible"><button type=button class=close>\xd7</button><p class=show-expanded><strong>Informational alerts:</strong> Information alerts display important information for the page. Can be collapsed and reopened.</p><p class=show-collapsed>Re-open dismissed alert</p></div><div class="alert alert-info alert-collapsible"><button type=button class=close data-toggle=collapse data-target=".cssDataTargetDismiss-5 ">\xd7</button><div class=show-expanded><h4>Informational alerts example with a title.</h4><p>Information alerts display important information for the page. Can be collapsed and reopened.</p></div><p class=show-collapsed>Re-open dismissed alert</p></div><div class=alert><div class="alert-info alert-collapsible"><button type=button class=close>\xd7</button><div class=show-expanded><h4>Informational alerts example with a title and multiple links.</h4><p class=bottom-offset-0>Information alerts display important information for the page. Can be collapsed and reopened.</p><ul><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li></ul></div><p class=show-collapsed>Re-open <strong>first</strong> dismissed alert</p></div><div class="alert-info alert-collapsible"><button type=button class=close>\xd7</button><div class=show-expanded><h4>Additional alert example.</h4><p class=bottom-offset-0>Information alerts display important information for the page. Can be collapsed and reopened.</p><ul><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li></ul></div><p class=show-collapsed>Re-open <strong>second</strong> dismissed alert</p></div></div><h3 class="top-offset-40 bottom-offset-20">Success alerts</h3><div class="alert alert-success alert-collapsible"><button type=button class=close>\xd7</button><p class=show-expanded><strong>Success alerts:</strong> Indicates the task has been completed successfully. Can be collapsed and reopened.</p><p class=show-collapsed>Re-open dismissed alert</p></div><div class="alert alert-success alert-collapsible"><button type=button class=close>\xd7</button><div class=show-expanded><h4>Success alerts example with a title.</h4><p><strong>Success alerts:</strong>Indicates the task has been completed successfully. Can be collapsed and reopened.</p></div><p class=show-collapsed>Re-open dismissed alert</p></div><div class="alert alert-success alert-collapsible"><button type=button class=close>\xd7</button><div class=show-expanded><h4>Success alerts example with a title and multiple links.</h4><p class=bottom-offset-0>Indicates the task has been completed successfully. Can be collapsed and reopened.</p><ul><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li></ul></div><p class=show-collapsed>Re-open dismissed alert</p></div><h3 class="top-offset-40 bottom-offset-20">User Error</h3><div class="alert alert-warning alert-collapsible"><p class=show-expanded><strong>User Errors:</strong> A soft stop, requiring users to take an action before proceeding. The error cannot be dismissed and is visible until the error is fixed.</p><p class=show-collapsed>Re-open dismissed alert</p></div><div class=alert><div class=alert-warning><h4>User Errors example with a title and multiple links.</h4><p class=bottom-offset-0>A soft stop, requiring users to take an action before proceeding. The error cannot be dismissed and is visible until the error is fixed.</p><ul><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li></ul></div><div class="alert-info alert-collapsible"><button type=button class=close>\xd7</button><div class=show-expanded><h4>Dismissible informational alert example with title.</h4><p class=bottom-offset-0>Dolor sit amet, con Maecenas egestas scelerisque porttitor. Dolor sit amet, con Maecenas egestas scelerisque porttitor.</p><ul><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li><li>Lorum ipsum with <a href=javascript:;>anchor link</a></li></ul></div><p class=show-collapsed>Re-open dismissed alert</p></div></div><h3 class="top-offset-40 bottom-offset-20">Catastrophic Error</h3><div class="alert alert-error"><p><strong>Catastrophic Errors:</strong>A hard stop, meaning users cannot go forward. Cannot be collapsed.</p></div><div class="alert alert-error"><h4>Catastrophic Errors example with a title</h4><p>A hard stop, meaning users cannot go forward. Cannot be collapsed.</p></div></div></section>');
    $templateCache.put('components/alerts/demo-play-alerts.html', '<section ng-controller=alertsPLayDemoCtrl id=alerts-play-demo><div class=container><h2>Alerts Builder</h2><div></div></div></section>');
    $templateCache.put('components/anchored-nav/demo-anchored-nav.html', '<section ng-controller=anchoredNavCtrl id=anchored-nav-html-example><div class=container><h2>Anchored Nav Demo</h2><div class=row><h3 class="col-xs-12 top-offset-60">Affixed Tabs</h3></div></div><div class=container><div class=row><div class=col-sm-9><nav class="navbar hidden-xs"><ul id=nav-achored-example class="nav navbar-nav nav-anchored"><li class=active><a href=#section1>Section 1</a></li><li><a href=#section2>Section 2</a></li><li><a href=#section3>Section 3</a></li><li><a href=#section4>Section 4</a></li></ul></nav><section id=section1 class=bottom-offset-30><h3 class=text-blue><a href=javascript:;>Section 1</a></h3><div class="row bottom-offset-20"><div class=col-sm-9><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ut tempor sapien. Aliquam vitae porttitor turpis, eget porta neque. Quisque dolor sapien, maximus pellentesque mattis vitae, scelerisque egestas magna. Proin facilisis auctor tortor eu venenatis. Nulla tempor mi eu lorem porttitor condimentum. Cras ut purus molestie, tempor justo vitae, consectetur augue. In eu felis sem. Donec id ultricies sem. Phasellus efficitur ex arcu, sit amet mollis justo egestas sed. Integer luctus elit ac felis volutpat, at accumsan sapien posuere. Fusce nec lectus ex. Fusce a sagittis ante.</p></div><div class=col-sm-3><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></div></div><div class="row bottom-offset-20"><img src=http://placehold.it/175x125 class="img-responsive col-sm-2 bottom-offset-10"><p class=col-sm-5>Integer vestibulum vitae lectus non scelerisque. Integer sit amet dui pretium, elementum ex a, fermentum magna. Donec dictum purus eget ipsum mollis, sollicitudin mattis urna molestie. Mauris in pulvinar neque. Vivamus pretium dapibus sollicitudin. Sed bibendum mauris eget tortor interdum, ut consectetur ipsum vulputate.</p><p class=col-sm-5>Fusce condimentum hendrerit elementum. Curabitur pulvinar augue id venenatis malesuada. Curabitur tortor odio, faucibus ullamcorper augue id, maximus fermentum nibh. Proin id nibh leo. Aliquam lobortis augue non nisi tempor maximus. Quisque convallis pulvinar libero ut consectetur. Praesent volutpat ligula non magna.</p></div></section><hr class="hr-gray-light"><section id=section2 class=bottom-offset-30><h3 class="text-blue scroll-spy-header-spacing"><a href=javascript:;>Section 2</a></h3><div class="row bottom-offset-20"><img src=http://placehold.it/175x125 class="img-responsive col-sm-2 bottom-offset-10"><p class=col-sm-5>Integer vestibulum vitae lectus non scelerisque. Integer sit amet dui pretium, elementum ex a, fermentum magna. Donec dictum purus eget ipsum mollis, sollicitudin mattis urna molestie. Mauris in pulvinar neque. Vivamus pretium dapibus sollicitudin. Sed bibendum mauris eget tortor interdum, ut consectetur ipsum vulputate.</p><p class=col-sm-5>Fusce condimentum hendrerit elementum. Curabitur pulvinar augue id venenatis malesuada. Curabitur tortor odio, faucibus ullamcorper augue id, maximus fermentum nibh. Proin id nibh leo. Aliquam lobortis augue non nisi tempor maximus. Quisque convallis pulvinar libero ut consectetur. Praesent volutpat ligula non magna.</p></div><div class="row bottom-offset-20"><p class=col-sm-6>Fusce condimentum hendrerit elementum. Curabitur pulvinar augue id venenatis malesuada. Curabitur tortor odio, faucibus ullamcorper augue id, maximus fermentum nibh. Proin id nibh leo. Aliquam lobortis augue non nisi tempor maximus. Quisque convallis pulvinar libero ut consectetur. Praesent volutpat ligula non magna.</p><p class=col-sm-6>Integer vestibulum vitae lectus non scelerisque. Integer sit amet dui pretium, elementum ex a, fermentum magna. Donec dictum purus eget ipsum mollis, sollicitudin mattis urna molestie. Mauris in pulvinar neque. Vivamus pretium dapibus sollicitudin. Sed bibendum mauris eget tortor interdum, ut consectetur ipsum vulputate.</p></div></section><hr class="hr-gray-light"><section id=section3 class=bottom-offset-30><h3 class="text-blue scroll-spy-header-spacing"><a href=javascript:;>Section 3</a></h3><div class="row bottom-offset-20"><p class=col-sm-8>Fusce condimentum hendrerit elementum. Curabitur pulvinar augue id venenatis malesuada. Curabitur tortor odio, faucibus ullamcorper augue id, maximus fermentum nibh. Proin id nibh leo. Aliquam lobortis augue non nisi tempor maximus. Quisque convallis pulvinar libero ut consectetur. Praesent volutpat ligula non magna.</p><img src=http://placehold.it/175x125 class="img-responsive col-sm-4 bottom-offset-10"></div><div class="row bottom-offset-20"><img src=http://placehold.it/260x155 class="img-responsive col-sm-3 bottom-offset-10"><p class=col-sm-9>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ut tempor sapien. Aliquam vitae porttitor turpis, eget porta neque. Quisque dolor sapien, maximus pellentesque mattis vitae, scelerisque egestas magna. Proin facilisis auctor tortor eu venenatis. Nulla tempor mi eu lorem porttitor condimentum. Cras ut purus molestie, tempor justo vitae, consectetur augue. In eu felis sem. Donec id ultricies sem. Phasellus efficitur ex arcu, sit amet mollis justo egestas sed. Integer luctus elit ac felis volutpat, at accumsan sapien posuere. Fusce nec lectus ex. Fusce a sagittis ante.</p></div></section><hr class="hr-gray-light"><section id=section4 class=bottom-offset-30><h3 class="text-blue scroll-spy-header-spacing"><a href=javascript:;>Section 4</a></h3><div class="row bottom-offset-20"><p class=col-sm-6>Fusce condimentum hendrerit elementum. Curabitur pulvinar augue id venenatis malesuada. Curabitur tortor odio, faucibus ullamcorper augue id, maximus fermentum nibh. Proin id nibh leo. Aliquam lobortis augue non nisi tempor maximus. Quisque convallis pulvinar libero ut consectetur. Praesent volutpat ligula non magna.</p><p class=col-sm-6>Integer vestibulum vitae lectus non scelerisque. Integer sit amet dui pretium, elementum ex a, fermentum magna. Donec dictum purus eget ipsum mollis, sollicitudin mattis urna molestie. Mauris in pulvinar neque. Vivamus pretium dapibus sollicitudin. Sed bibendum mauris eget tortor interdum, ut consectetur ipsum vulputate.</p></div><div class="row bottom-offset-20"><p class=col-sm-6>Fusce condimentum hendrerit elementum. Curabitur pulvinar augue id venenatis malesuada. Curabitur tortor odio, faucibus ullamcorper augue id, maximus fermentum nibh. Proin id nibh leo. Aliquam lobortis augue non nisi tempor maximus. Quisque convallis pulvinar libero ut consectetur. Praesent volutpat ligula non magna.</p><p class=col-sm-6>Integer vestibulum vitae lectus non scelerisque. Integer sit amet dui pretium, elementum ex a, fermentum magna. Donec dictum purus eget ipsum mollis, sollicitudin mattis urna molestie. Mauris in pulvinar neque. Vivamus pretium dapibus sollicitudin. Sed bibendum mauris eget tortor interdum, ut consectetur ipsum vulputate.</p></div></section></div><div class=col-sm-3><div class=well style=height:1000px>Sidebar</div></div></div></div></section>');
    $templateCache.put('components/anchored-nav/demo-play-anchored-nav.html', '<section ng-controller=anchoredNavPLayDemoCtrl id=anchored-nav-play-demo><div class=container><h2>Anchored_nav Builder</h2><div></div></div></section>');
    $templateCache.put('components/announcements/demo-announcements.html', '<section ng-controller=announcementsCtrl id=announcements-html-example><div class=container><h2>Announcements Demo</h2><div><h3>Default announcement (Bootstrap blockquote)</h3><blockquote><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><h3>Right justified announcement (Bootstrap blockquote - pull right)</h3><blockquote class=pull-right><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><h3>Announcements with links</h3><p>An Announcement can include a maximum of 2 links. Links are stacked vertically</p><div class="bottom-offset-10 clearfix"><h3>Colored bar with title and call to action link</h3><blockquote class=blockquote-blue><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p><ul class="list-unstyled list-inline blockquote-links"><li><a href=javascript:;>Claim your rewards</a></li></ul></blockquote></div><div class="bottom-offset-10 clearfix"><h3>Colored bar with two call to action links</h3><blockquote class=blockquote-blue><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p><ul class="list-unstyled list-inline blockquote-links"><li><a href=javascript:;>Claim your rewards</a></li><li><a href=javascript:;>Register now for free</a></li></ul></blockquote></div></div><h3>Announcements with color treatment (Bootstrap enhancement)</h3><blockquote class=blockquote-blue><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-green><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-purple><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-berry><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-dark-blue><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><h3>Announcements with icon treatment (Dell specific enhancement)</h3><blockquote class=blockquote-icon><div class=blockquote-dell-dpa></div><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-icon><div class=blockquote-dell-advantage></div><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><h3>Announcements with icon treatment (in a well) (Dell specific enhancement)</h3><div class="well well-white well-white-stroke"><blockquote class=blockquote-icon><div class=blockquote-dell-dpa></div><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-icon><div class=blockquote-dell-advantage></div><h4>Lorem ipsum dolor sit amet</h4><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-icon-right><div class=blockquote-dell-advantage-right></div><h4 class=text-rtl>Lorem ipsum dolor sit amet</h4><p class=text-rtl>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote></div><blockquote class=blockquote-icon-right><div class=blockquote-dell-advantage-right></div><h4 class=text-rtl>Lorem ipsum dolor sit amet</h4><p class=text-rtl>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><h3>Right justified announcements with icon treatment (Dell specific enhancement)</h3><blockquote class=blockquote-icon-right><div class=blockquote-dell-dpa-right></div><h4 class=text-rtl>Lorem ipsum dolor sit amet</h4><p class=text-rtl>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><blockquote class=blockquote-icon-right><div class=blockquote-dell-advantage-right></div><h4 class=text-rtl>Lorem ipsum dolor sit amet</h4><p class=text-rtl>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote></div></section>');
    $templateCache.put('components/announcements/demo-play-announcements.html', '<section ng-controller=announcementsPLayDemoCtrl id=announcements-play-demo><div class=container><h2>Announcements Builder</h2><div><h4>Rendered Example</h4><div id=announcement-play-code ng-bind-html=renderingHTML></div><h4>Rendered HTML Code</h4><div class=play-code><button to-clipboard clipboard-target=#announcement-play-code class="btn btn-xs btn-default copy-play-code">copy html</button><pre><code>{{playHtmlCode}}</code></pre></div><hr><div class=row><div class=col-sm-5><h4>Customize</h4><div class=form-group><label for=text-label-input>ID</label><div><input type=text class=form-control id=sample-announcement-id placeholder=optional ng-model=sampleAnnouncementConfig.id></div></div><div class=form-group><label for=sample-announcement-type>Type</label><select class=form-control id=sample-announcement-type ng-model=sampleAnnouncementConfig.type><option value=blue>Blue (Default)</option><option value=purple>Purple</option><option value=green>Green</option><option value=orange>Orange</option><option value=berry>Berry</option><option value=dark-blue>Dark blue</option><option value=red>Red</option><option value=red-dark>Dark red</option><option value=gray>Gray</option><option value=gray-dark>Dark gray</option><option value=icon>Icon</option></select></div><div class=form-group ng-if="sampleAnnouncementConfig.type===\'icon\'"><label for=sample-announcement-icon>Icon</label><select class=form-control id=sample-announcement-icon ng-model=sampleAnnouncementConfig.icon><option value=dell-advantage-star>Star (Default)</option><option value=dpa-card>Dell Prefered Card</option></select></div><div class=form-group><label for=text-label-input>Title</label><div><input type=text class=form-control id=sample-announcement-title placeholder=optional ng-model=sampleAnnouncementConfig.title></div></div><div class=form-group><label for=textarea>Body text</label><textarea id=sample-announcement-body class=form-control rows=5 ng-model=sampleAnnouncementConfig.body></textarea></div><div class=form-group><label for=text-label-input>First Link</label><div><input type=text class="form-control bottom-offset-10" placeholder=label ng-model=sampleAnnouncementConfig.cta_0.label> <input type=text class=form-control placeholder=url ng-model=sampleAnnouncementConfig.cta_0.url></div></div><div class=form-group><label for=text-label-input>Second Link</label><div><input type=text class="form-control bottom-offset-10" placeholder=label ng-model=sampleAnnouncementConfig.cta_1.label> <input type=text class=form-control placeholder=url ng-model=sampleAnnouncementConfig.cta_1.url></div></div></div><div class=col-sm-7><prototype-code-title></prototype-code-title><div ng-if=sampleAnnouncementConfig.id><h5>HTML code</h5><div class=play-code><button to-clipboard clipboard-target=#announcement-sherpa-code class="btn btn-xs btn-default copy-play-code">copy html</button><pre><code id=announcement-sherpa-code>&lt;blockquote id="{{sampleSherpaConfig.id | _.str: \'dasherize\'}}" class="blockquote-{{sampleSherpaConfig.type}}"&gt;\r' + '\n' + '\t&lt;h4 msg="title_{{sampleSherpaConfig.id | _.str: \'underscored\'}}"&gt;&lt;/h4&gt;\r' + '\n' + '\t&lt;p msg="text_{{sampleSherpaConfig.id | _.str: \'underscored\'}}"&gt;&lt;/p&gt;\r' + '\n' + '&lt;/blockquote&gt;</code></pre></div><h5>Textkeys to add to messages file</h5><div class=play-code ng-if=textkeysToAdd><button to-clipboard clipboard-target=#announcement-sherpa-keys class="btn btn-xs btn-default copy-play-code">copy keys</button><pre><code id=announcement-sherpa-keys>{{textkeysToAdd}}</code></pre></div><pre ng-if=!textkeysToAdd>None specified until custom body or title is entered.</pre><h5>Resource keys to add to resources file</h5><div class=play-code ng-if=resourcesToAdd><button to-clipboard clipboard-target=#announcement-sherpa-resource-keys class="btn btn-xs btn-default copy-play-code">copy keys</button><pre><code id=announcement-sherpa-resource-keys>{{resourcesToAdd}}</code></pre></div><pre ng-if=!resourcesToAdd>None specified until cta is specified.</pre></div><p ng-if=!sampleAnnouncementConfig.id>Must enter id to see Sherpa code</p></div></div></div></div></section>');
    $templateCache.put('components/banner/demo-banner.html', '<section ng-controller=bannerCtrl><div class=container><div><h2>Banners (Jumbotron)</h2></div></div><div class=jumbotron><a href="javascript:alert(\'hello\');"><img src=http://placehold.it/3000x1011.png alt=" ideal image size is 1400x472" class=img-responsive></a><div class=container><div class=row><a href="javascript:alert(\'hello\');"><div class=well><h5>Sample event title</h5><h2>Headline lorem ipsum dolor sit amet orc.</h2><p>Subhead lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in purus sed dolor posuerat.</p><p><small>Sample Legal text for placement only.</small></p><p><a href=javascript:; class="btn btn-primary hidden-xs hidden-sm">Sample CTA</a> <a href=javascript:; class="visible-xs visible-sm">Sample CTA</a></p></div></a></div></div></div><div class="col-xs-12 well well-berry">place holder text to show another element below the banner</div><div ng-init=initOptions() class=container><h5>Optional event title and legal statement cannot appear at the same time</h5><label class=radio-inline><input type=radio name=bannerOptions id=none value=none checked> No options</label><label class=radio-inline><input type=radio name=bannerOptions id=eventTitle value=eventTitle> Show optional event title</label><label class=radio-inline><input type=radio name=bannerOptions id=legal value=legal> Show optional legal</label></div></section>');
    $templateCache.put('components/block-buttons/demo-block-buttons.html', '<section ng-controller=blockButtonsCtrl id=block-buttons-html-example><div class=container><h2 class=bottom-offset-40>Block-Buttons Demo</h2><div class="top-offset-20 bottom-offset-30"><div class=row><h4 class=col-xs-12>Block level button col-xs-12</h4><div class=col-xs-12><button class="btn btn-primary btn-lg btn-block" type=button>col-xs-12</button></div><h4 class="top-offset-40 col-xs-12">Block level button col-xs-6</h4><div class=col-xs-6><button class="btn btn-primary btn-lg btn-block" type=button>col-xs-6</button></div><h4 class="top-offset-40 col-xs-12">Block level button col-xs-4</h4><div class=col-xs-4><button class="btn btn-primary btn-lg btn-block" type=button>col-xs-4</button></div></div></div></div></section>');
    $templateCache.put('components/block-buttons/demo-play-block-buttons.html', '<section ng-controller=blockButtonsPLayDemoCtrl id=block-buttons-play-demo><div class=container><h2>Block-Buttons Builder</h2><div></div></div></section>');
    $templateCache.put('components/breadcrumbs/demo-breadcrumbs.html', '<section ng-controller=breadcrumbsCtrl id=breadcrumbs-html-example><div class=container><h2 class=bottom-offset-20>Breadcrumbs Demo</h2><div class=bottom-offset-30><h4>Generic Breadcrumb</h4><ul class=breadcrumb><li><a href=#></a><span class=divider></span></li><li><a href=#>Level 1</a><span class=divider></span></li><li><a href=#>Level 2</a><span class=divider></span></li><li><a href=#>Level 3</a><span class=divider></span></li><li><a href=#>Level 4</a><span class=divider></span></li><li class=active>Level 5</li></ul></div></div></section>');
    $templateCache.put('components/breadcrumbs/demo-play-breadcrumbs.html', '<section ng-controller=breadcrumbsPLayDemoCtrl id=breadcrumbs-play-demo><div class=container><h2>Breadcrumbs Builder</h2><div></div></div></section>');
    $templateCache.put('components/carousel/demo-carousel.html', '<section ng-controller=carouselCtrl id=carousel-html-example><div class=container><h2>Carousel Demo</h2><h3 class=top-offset-40>Banner carousel with all options</h3><div id=banner-carousel-example class="carousel slide carousel-gallery" data-ride=carousel><div class=carousel-inner><div class=item><a href=javascript:;><img alt="First slide" src=http://placehold.it/1140x430></a></div><div class="item active"><a href=javascript:;><img alt="Second slide" src=http://placehold.it/1140x430></a></div><div class=item><a href=javascript:;><img alt="Third slide" src=http://placehold.it/1140x430></a></div></div><ol class=carousel-indicators><li data-target=#banner-carousel-example data-slide-to=0></li><li data-target=#banner-carousel-example data-slide-to=1 class=active></li><li data-target=#banner-carousel-example data-slide-to=2></li></ol><a class="left carousel-control" href=#banner-carousel-example data-slide=prev></a> <a class="right carousel-control" href=#banner-carousel-example data-slide=next></a></div><hr><h3 class=top-offset-40>Banner carousel with no arrows</h3><div id=banner-carousel-no-arrows-example class="carousel slide carousel-gallery" data-ride=carousel><div class=carousel-inner><div class=item><a href=javascript:;><img alt="First slide" src=http://placehold.it/1140x430></a></div><div class="item active"><a href=javascript:;><img alt="Second slide" src=http://placehold.it/1140x430></a></div><div class=item><a href=javascript:;><img alt="Third slide" src=http://placehold.it/1140x430></a></div></div><ol class=carousel-indicators><li data-target=#banner-carousel-no-arrows-example data-slide-to=0></li><li data-target=#banner-carousel-no-arrows-example data-slide-to=1 class=active></li><li data-target=#banner-carousel-no-arrows-example data-slide-to=2></li></ol></div><hr><h3 class=top-offset-40>Banner carousel captions no arrows</h3><div id=carousel-caption class="carousel slide carousel-gallery" data-ride=carousel><div class=carousel-inner><div class="item active"><img alt="First slide" src=http://placehold.it/1140x430 alt=Image class=image><div class="well well-banner pull-left"><h2 class=hidden-xs>First slide lorem ipsum dolor sit amet.</h2><p class="hidden-xs hidden-sm">First slide: Mauris in ultricies leo, fermentum consectetur ligula.</p><p><a href=# class="btn btn-primary pull-left hidden-xs hidden-sm">Buy Now!</a> <a href=# class="pull-left visible-xs-block visible-sm-block">Buy Now!</a></p></div></div><div class=item><img alt="second slide" src=http://placehold.it/1140x430 alt=Image class=image><div class="well well-banner pull-left"><h2 class=hidden-xs>Second slide lorem ipsum dolor sit amet.</h2><p class="hidden-xs hidden-sm">Second slide: Mauris in ultricies leo, fermentum consectetur ligula.</p><p><a href=# class="btn btn-primary pull-left hidden-xs hidden-sm">Buy Now!</a> <a href=# class="pull-left visible-xs-block visible-sm-block">Buy Now!</a></p></div></div><div class=item><img alt="second slide" src=http://placehold.it/1140x430 alt=Image class=image><div class="well well-banner pull-left"><h2 class=hidden-xs>Second slide lorem ipsum dolor sit amet.</h2><p class="vhidden-xs hidden-sm">Third slide: Mauris in ultricies leo, fermentum consectetur ligula.</p><p><a href=# class="btn btn-primary pull-left hidden-xs hidden-sm">Buy Now!</a> <a href=# class="pull-left visible-xs-block visible-sm-block">Buy Now!</a></p></div></div><div class=item><img alt="second slide" src=http://placehold.it/1140x430 alt=Image class=image><div class="well well-banner pull-left"><h2 class=hidden-xs>Fourth slide lorem ipsum dolor sit amet.</h2><p class="hidden-xs hidden-sm">Fourth slide: Mauris in ultricies leo, fermentum consectetur ligula.</p><p><a href=# class="btn btn-primary pull-left hidden-xs hidden-sm">Buy Now!</a> <a href=# class="pull-left visible-xs-block visible-sm-block">Buy Now!</a></p></div></div></div><ol class=carousel-indicators><li data-target=#carousel-caption data-slide-to=0 class=active></li><li data-target=#carousel-caption data-slide-to=1></li><li data-target=#carousel-caption data-slide-to=2></li><li data-target=#carousel-caption data-slide-to=3></li></ol></div><h3 class=top-offset-40>Banner carousel captions no arrows</h3><div id=jumbotron-carousel class="carousel slide carousel-gallery" data-ride=carousel><div class=carousel-inner><div class="item active"><div class=jumbotron><a href="javascript:alert(\'hello\');"><img src=http://placehold.it/3000x1011.png alt=" ideal image size is 1400x472" class=img-responsive></a><div class=container><div class=row><a href="javascript:alert(\'hello\');"><div class=well><h5 class="hidden-xs hidden-sm">Sample event title</h5><h2>Headline lorem ipsum dolor sit amet orc.</h2><p>Subhead lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in purus sed dolor posuerat.</p><p><small class="hidden-xs hidden-sm">Sample Legal text for placement only.</small></p><p><a href=javascript:; class="btn btn-primary hidden-xs hidden-sm">Sample CTA</a> <a href=javascript:; class="visible-xs visible-sm">Sample CTA</a></p></div></a></div></div></div></div><div class=item><div class=jumbotron><a href="javascript:alert(\'hello\');"><img src=http://placehold.it/3000x1011.png alt=" ideal image size is 1400x472" class=img-responsive></a><div class=container><div class=row><a href="javascript:alert(\'hello\');"><div class=well><h5 class="hidden-xs hidden-sm">Sample event title</h5><h2>Headline lorem ipsum dolor sit amet orc.</h2><p>Subhead lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in purus sed dolor posuerat.</p><p><small class="hidden-xs hidden-sm">Sample Legal text for placement only.</small></p><p><a href=javascript:; class="btn btn-primary hidden-xs hidden-sm">Sample CTA</a> <a href=javascript:; class="visible-xs visible-sm">Sample CTA</a></p></div></a></div></div></div></div><div class=item><div class=jumbotron><a href="javascript:alert(\'hello\');"><img src=http://placehold.it/3000x1011.png alt=" ideal image size is 1400x472" class=img-responsive></a><div class=container><div class=row><a href="javascript:alert(\'hello\');"><div class=well><h5 class="hidden-xs hidden-sm">Sample event title</h5><h2>Headline lorem ipsum dolor sit amet orc.</h2><p>Subhead lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in purus sed dolor posuerat.</p><p><small class="hidden-xs hidden-sm">Sample Legal text for placement only.</small></p><p><a href=javascript:; class="btn btn-primary hidden-xs hidden-sm">Sample CTA</a> <a href=javascript:; class="visible-xs visible-sm">Sample CTA</a></p></div></a></div></div></div></div><div class=item><div class=jumbotron><a href="javascript:alert(\'hello\');"><img src=http://placehold.it/3000x1011.png alt=" ideal image size is 1400x472" class=img-responsive></a><div class=container><div class=row><a href="javascript:alert(\'hello\');"><div class=well><h5 class="hidden-xs hidden-sm">Sample event title</h5><h2>Headline lorem ipsum dolor sit amet orc.</h2><p>Subhead lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in purus sed dolor posuerat.</p><p><small class="hidden-xs hidden-sm">Sample Legal text for placement only.</small></p><p><a href=javascript:; class="btn btn-primary hidden-xs hidden-sm">Sample CTA</a> <a href=javascript:; class="visible-xs visible-sm">Sample CTA</a></p></div></a></div></div></div></div></div><ol class=carousel-indicators><li data-target=#jumbotron-carousel data-slide-to=0 class=active></li><li data-target=#jumbotron-carousel data-slide-to=1></li><li data-target=#jumbotron-carousel data-slide-to=2></li><li data-target=#jumbotron-carousel data-slide-to=3></li></ol></div><h3 class=top-offset-40>Adaptive carousel mobile / static mosaic desktop & tablet</h3><div class=hidden-xs><div class=row><div class="col-sm-12 col-md-6 bottom-offset-20"><div class="well well-teaser"><img src=http://placehold.it/720x505 alt=720x505 class=img-responsive></div><div class=well-caption><a href=javascript:;><h5 class=text-blue>Better security for better business.</h5></a></div></div></div><div class=row><div class="col-sm-6 col-md-3 bottom-offset-20"><div class="well well-teaser"><img src=http://placehold.it/720x505 alt=720x505 class=img-responsive></div><div class=well-caption><a href=javascript:;><h5 class=text-blue>Security is a shared responsibility.</h5></a></div></div><div class="col-sm-6 col-md-3 bottom-offset-20"><div class="well well-teaser"><img src=http://placehold.it/720x505 alt=720x505 class=img-responsive></div><div class=well-caption><a href=javascript:;><h5 class=text-blue>Can your IT security lorum ipsum?</h5></a></div></div></div></div><div id=mosaic-carousel class="carousel slide carousel-gallery visible-xs-block" data-ride=carousel><div class=carousel-inner><div class="item active"><img src=http://placehold.it/720x505 alt=720x505 class=img-responsive><div class="well well-banner"><a href=javascript:;><h3 class=text-blue>Better security for better business.</h3></a></div></div><div class=item><img src=http://placehold.it/720x505 alt=720x505 class=img-responsive><div class="well well-banner pull-left"><a href=javascript:;><h3 class=text-blue>Security is a shared responsibility.</h3></a></div></div><div class=item><img alt="First slide" src=http://placehold.it/720x505 alt=Image class=img-responsive><div class="well well-banner pull-left"><a href=javascript:;><h3 class=text-blue>Can your IT security lorum ipsum?</h3></a></div></div></div><ol class=carousel-indicators><li data-target=#mosaic-carousel data-slide-to=0 class=active></li><li data-target=#mosaic-carousel data-slide-to=1></li><li data-target=#mosaic-carousel data-slide-to=2></li></ol></div><hr class="top-offset-60"><h3 class=top-offset-40>Filmstrip carousel images (no arrows on XS)</h3><div class="well well-white well-white-stroke"><div class="carousel carousel-filmstrip"><div class=carousel-inner><div class=item><a href=javascript:;><img src="http://placehold.it/250x250/cccccc/FFFFFF&text=Image 1" alt=Image class=img-responsive></a></div><div class=item><a href=javascript:;><img src="http://placehold.it/250x250/cccccc/FFFFFF&text=Image 2" alt=Image class=img-responsive></a></div><div class=item><a href=javascript:;><img src="http://placehold.it/250x250/cccccc/FFFFFF&text=Image 3" alt=Image class=img-responsive></a></div><div class=item><a href=javascript:;><img src="http://placehold.it/250x250/cccccc/FFFFFF&text=Image 4" alt=Image class=img-responsive></a></div><div class=item><a href=javascript:;><img src="http://placehold.it/250x250/cccccc/FFFFFF&text=Image 5" alt=Image class=img-responsive></a></div><div class=item><a href=javascript:;><img src="http://placehold.it/250x250/cccccc/FFFFFF&text=Image 6" alt=Image class=img-responsive></a></div><div class=item><a href=javascript:;><img src="http://placehold.it/250x250/cccccc/FFFFFF&text=Image 7" alt=Image class=img-responsive></a></div></div></div></div><h3 class=top-offset-40>Filmstrip carousel with images and content block (no arrows on XS)</h3><div class="carousel carousel-filmstrip-arrow-only"><div class=carousel-inner><div class=item><a href=javascript:;><img src="http://placehold.it/300x200/cccccc/FFFFFF&text=Image 1" alt=300x200 class=img-responsive><h5 class=text-blue>Content Headline Title Goes Here</h5></a><p>Etiam velit ex, sagittis non vehicula in, efficitur vel massa. Aliquam erat volutpat. Maecenas id laoreet leo. Ut ut pretium ex. Nunc fermentum vehicula lectus, non interdum felis ornare sit amet.</p></div><div class=item><a href=javascript:;><img src="http://placehold.it/300x200/cccccc/FFFFFF&text=Image 2" alt=300x200 class=img-responsive><h5 class=text-blue>Headline Title Goes Here with Additional Headline</h5></a><p>Aenean interdum nulla sed ante imperdiet, sit amet aliquam dui iaculis. Vivamus tempus ligula eget fringilla venenatis. Suspendisse malesuada leo nunc, in suscipit velit molestie sed. Integer lacus quam, gravida eu sollicitudin in, convallis ac justo. Nullam eget turpis eu elit finibus aliquet in in nisl.</p></div><div class=item><a href=javascript:;><img src="http://placehold.it/300x200/cccccc/FFFFFF&text=Image 3" alt=300x200 class=img-responsive><h5 class=text-blue>Content Headline Title Goes Here</h5></a><p>Etiam velit ex, sagittis non vehicula in, efficitur vel massa. Aliquam erat volutpat. Maecenas id laoreet leo. Ut ut pretium ex. Nunc fermentum vehicula lectus.</p></div><div class=item><a href=javascript:;><img src="http://placehold.it/300x200/cccccc/FFFFFF&text=Image 4" alt=300x200 class=img-responsive><h5 class=text-blue>Headline Title Goes Here</h5></a><p>Vehicula in, efficitur vel massa. Aliquam erat volutpat. Maecenas id laoreet leo. Ut ut pretium ex. Nunc fermentum vehicula lectus, non interdum felis ornare sit amet. Aliquam erat volutpat.</p></div><div class=item><a href=javascript:;><img src="http://placehold.it/300x200/cccccc/FFFFFF&text=Image 5" alt=300x200 class=img-responsive><h5 class=text-blue>Content Headline Title Goes Here</h5></a><p>Nullam eget turpis eu elit finibus aliquet in in nisl. Aenean interdum nulla sed ante imperdiet, sit amet aliquam dui iaculis. Vivamus tempus ligula eget fringilla venenatis. Suspendisse malesuada leo nunc, in suscipit velit molestie sed. Integer lacus quam, gravida eu sollicitudin in, convallis ac justo.</p></div><div class=item><a href=javascript:;><img src="http://placehold.it/300x200/cccccc/FFFFFF&text=Image 6" alt=300x200 class=img-responsive><h5 class=text-blue>Headline Title Goes Here</h5></a><p>Etiam velit ex, sagittis non vehicula in, efficitur vel massa. Aliquam erat volutpat. Maecenas id laoreet leo. Ut ut pretium ex. Nunc fermentum vehicula lectus, non interdum felis ornare sit amet.</p></div><div class=item><a href=javascript:;><img src="http://placehold.it/300x200/cccccc/FFFFFF&text=Image 7" alt=300x200 class=img-responsive><h5 class=text-blue>Content Headline Title Goes Here</h5></a><p>liquam erat volutpat. Maecenas id laoreet leo. Ut ut pretium ex. efficitur vel massa. Aliquam erat volutpat. Maecenas id laoreet leo. Ut ut pretium ex. Nunc fermentum vehicula lectus, non interdum felis ornare sit amet.</p></div></div></div></div></section>');
    $templateCache.put('components/carousel/demo-play-carousel.html', '<section ng-controller=carouselPLayDemoCtrl id=carousel-play-demo><div class=container><h2>Carousel Builder</h2><div></div></div></section>');
    $templateCache.put('components/collapsible-items/demo-collapsible-items.html', '<section ng-controller=collapsibleItemsCtrl id=collapsible-items-html-example><div class=container><h2>Collapsible-Items Demo</h2><div class=bottom-offset-40><h3 class=bottom-offset-30>Standard accordion</h3><div class=panel-group id=accordion><div class="panel panel-default"><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion href=#One>Headline title goes here</a></h4></div><div id=One class="panel-collapse collapse in"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-bags><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-bags class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div><div class="panel panel-default"><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion href=#Two class=collapsed>Headline title goes here</a></h4></div><div id=Two class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-tax><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-tax class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div><div class="panel panel-default"><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion href=#Three class=collapsed>Headline title goes here</a></h4></div><div id=Three class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-solutions><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-solutions class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div></div></div><div ng-if=!guidanceOff class="alert alert-info alert-dismissable bottom-offset-40"><h4>To default a panel open:</h4><p>You have to do two things:</p><ul><li>Remove the class <code>collapsed</code> from the trigger.</li><li>Add the class <code>in</code> to the target panel-collapse.</li></ul></div><div class=bottom-offset-60><h3 class=bottom-offset-30>Accordion with independent panels</h3><div id=accordion-independent-panels><div class=panel-group id=accordion-independant><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#bags-1>Headline title goes here</a></h4></div><div id=bags-1 class="panel-collapse collapse in"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-bags-1><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-bags-1 class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#tax-1 class=collapsed>Headline title goes here</a></h4></div><div id=tax-1 class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-tax-1><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-tax-1 class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#home-1 class=collapsed>Headline title goes here</a></h4></div><div id=home-1 class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-solutions-1><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-solutions-1 class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div></div></div><div class=bottom-offset-60><h3 class=bottom-offset-30>Accordion with independent panels in a well</h3><div class="well well-white text-gray-medium well-white-stroke"><div id=accordion-independent-panels-well><div class=panel-group id=accordion-independent-1A><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independent-1A href=#bags-1A>Headline title goes here</a></h4></div><div id=bags-1A class="panel-collapse collapse in"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-bags-1A><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-bags-1A class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#tax-1A class=collapsed>Headline title goes here</a></h4></div><div id=tax-1A class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-tax-1A><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-tax-1A class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#home-1A class=collapsed>Headline title goes here</a></h4></div><div id=home-1A class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-solutions-1A><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-solutions-1A class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div></div></div></div><div class=bottom-offset-60><h3 class=bottom-offset-20>Accordion with show/hide links</h3><div class=show-hide-links><a href=javascript:; class=collapsed data-toggle=collapse data-target="#accordion-independent-with-show-all .panel-collapse:not(.in)" aria-expanded=false>Show all</a> | <a href=javascript:; class=collapsed data-toggle=collapse data-target="#accordion-independent-with-show-all .panel-collapse.in" aria-expanded=false>Hide all</a></div><div class=panel-group id=accordion-independent-with-show-all><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independent-with-show-all href=#bags-2 class=collapsed>Headline title goes here</a></h4></div><div id=bags-2 class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-bags-a><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-bags-a class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independent-with-show-all href=#tax-2 class=collapsed>Headline title goes here</a></h4></div><div id=tax-2 class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-tax-a><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-tax-a class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independent-with-show-all href=#home-2 class=collapsed>Headline title goes here</a></h4></div><div id=home-2 class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-solutions-a><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-solutions-a class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div></div><h3 class=bottom-offset-20>From a link</h3><div class=bottom-offset-40><div class=bottom-offset-10><p><a href=javascript:; class=collapsed data-toggle=collapse data-target=#collapsible-example-area-5><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show stuff</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide stuff</span></a></p><p id=collapsible-example-area-5 class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis. Pellentesque molestie posuere tortor. Mauris feugiat elit et lacus tristique, et aliquet risus fermentum.</p></div></div><h3 class="bottom-offset-10 top-offset-40">Show-hide expand/collapse</h3><div class=bottom-offset-40><div class=bottom-offset-10><ul id=truncated-list-sample class=list-truncated><li><a class=btn-link href=javascript:;>one</a></li><li><a class=btn-link href=javascript:;>two</a></li><li><a class=btn-link href=javascript:;>three</a></li><li><a class=btn-link href=javascript:;>four</a></li><li><a class=btn-link href=javascript:;>five</a></li><li><a class=btn-link href=javascript:;>six</a></li><li><a class=btn-link href=javascript:;>seven</a></li><li><a class=btn-link href=javascript:;>eight</a></li><li><a class=btn-link href=javascript:;>nine</a></li><li><a class=btn-link href=javascript:;>ten</a></li><li><a class=btn-link href=javascript:;>eleven</a></li><li><a class=btn-link href=javascript:;>twelve</a></li><li><a class=btn-link href=javascript:;>thirteen</a></li></ul><a href=javascript:; class=collapsed data-toggle=list-truncated data-target=#truncated-list-sample><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a></div></div><h3 class="bottom-offset-10 top-offset-40">Show-hide expand no-collapse</h3><div class=bottom-offset-40><div class=bottom-offset-10><ul id=truncated-list-sample-expand class=list-truncated><li><a class=btn-link href=javascript:;>one</a></li><li><a class=btn-link href=javascript:;>two</a></li><li><a class=btn-link href=javascript:;>three</a></li><li><a class=btn-link href=javascript:;>four</a></li><li><a class=btn-link href=javascript:;>five</a></li><li><a class=btn-link href=javascript:;>six</a></li><li><a class=btn-link href=javascript:;>seven</a></li><li><a class=btn-link href=javascript:;>eight</a></li><li><a class=btn-link href=javascript:;>nine</a></li><li><a class=btn-link href=javascript:;>ten</a></li><li><a class=btn-link href=javascript:;>eleven</a></li><li><a class=btn-link href=javascript:;>twelve</a></li><li><a class=btn-link href=javascript:;>thirteen</a></li></ul><a href=javascript:; class=collapsed data-toggle=list-truncated data-target=#truncated-list-sample-expand><span class="show-collapsed btn-link">Show more</span></a></div></div><div class="bottom-offset-60bottom-offset-20 top-offset-40"><h3 class=bottom-offset-20>Social links show/hide</h3><div class=inline-image-content-links><h4 class=bottom-offset-5>Dell on Dell</h4><ul class="list-inline image-content-links list-group content-card icon-tooltip" ng-class="{\'view-all\': viewAll[\'parent-image-link-1\']}"><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Facebook" class=icon-social-facebook></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Twitter" class=icon-social-twitter></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on LinkedIn" class=icon-social-linkedin></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Google+" class=icon-social-google_plus></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on SlideShare" class=icon-social-slideshare></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on YouTube" class=icon-social-youtube></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Flickr" class=icon-social-flickr></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Storify" class=icon-social-storify></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Pinterest" class=icon-social-pinterest></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Xing" class=icon-social-xing></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Renren" class=icon-social-renren></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Dell on Weibo" class=icon-social-weibo></a></li></ul><div class=content-toggle ng-hide="viewAll[\'parent-image-link-1\']"><a href=javascript:; class=visible-xs ng-click="viewAll[\'parent-image-link-1\'] = true">View All</a></div></div></div><div class="bottom-offset-60bottom-offset-20 top-offset-40 well well-white text-gray-medium well-white-stroke foobar"><h3 class=bottom-offset-20>Content gallery show/hide</h3><ul class=content-gallery><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li><li class=col-sm-3><div class=content-gallery-container equalize-height=.content-gallery-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:;><h4 class="btn-link text-blue">Content Headline Here</h4></a><p>Controlling access and achieving governance has become more complicated than ever.</p><a href=javascript:; class=content-gallery-show-more><span class="show-collapsed btn-link">Show more</span> <span class="hide-expanded btn-link">Show less</span></a><div class=container-fluid><div class=content-gallery-details><div class=row><div class=col-xs-10><h4>Additional Headline Goes Here</h4></div></div><div class=row><div class=col-sm-3><img src=http://placehold.it/250x250 class="img-responsive bottom-offset-10"></div><div class=col-sm-9><div class=row><div class=col-sm-4><p>Controlling access and achieving governance has become more complicated than ever.</p></div><div class=col-sm-4><p>Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p></div><div class=col-sm-4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eu purus arcu. Phasellus at felis ac nulla volutpat mollis.</p></div></div></div></div></div></div></div></li></ul></div><h2>Collapsible-Items Demo</h2><div class=bottom-offset-40><h3 class=bottom-offset-30>Standard accordion</h3><div class=panel-group id=accordion><div class="panel panel-default"><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion href=#One>Headline title goes here</a></h4></div><div id=One class="panel-collapse collapse in"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-bags><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-bags class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div><div class="panel panel-default"><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion href=#Two class=collapsed>Headline title goes here</a></h4></div><div id=Two class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-tax><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-tax class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div><div class="panel panel-default"><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion href=#Three class=collapsed>Headline title goes here</a></h4></div><div id=Three class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-solutions><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-solutions class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div></div></div><div ng-if=!guidanceOff class="alert alert-info alert-dismissable bottom-offset-40"><h4>To default a panel open:</h4><p>You have to do two things:</p><ul><li>Remove the class <code>collapsed</code> from the trigger.</li><li>Add the class <code>in</code> to the target panel-collapse.</li></ul></div><div class=bottom-offset-60><h3 class=bottom-offset-30>Accordion with independent panels</h3><div id=accordion-independent-panels><div class=panel-group id=accordion-independant><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#bags-1>Headline title goes here</a></h4></div><div id=bags-1 class="panel-collapse collapse in"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-bags-1><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-bags-1 class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#tax-1 class=collapsed>Headline title goes here</a></h4></div><div id=tax-1 class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-tax-1><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-tax-1 class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#accordion-independant href=#home-1 class=collapsed>Headline title goes here</a></h4></div><div id=home-1 class="panel-collapse collapse"><div class=panel-body>Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.<div class=top-offset-10><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#show-hide-solutions-1><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show more</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Show less</span></a></div><div id=show-hide-solutions-1 class=collapse>Etiam odio velit, eleifend id vehicula non, vulputate quis metus. Ut sit amet justo nec urna tincidunt porttitor. Phasellus massa nisl, fringilla ac ligula vitae, ultrices vulputate turpis.</div></div></div></div></div></div></div><div class=bottom-offset-60><h3 class=bottom-offset-30>Paragraph with show more</h3><p>Lorem ipsum dolor sit amet, vim ad phaedrum tincidunt. Eos case tractatos liberavisse ei, ad atomorum praesent theophrastus quo. Alia copiosae ea eam. Sint disputando sed ea. Ludus dolores ad per, ea nam sint vituperata, et omnium accommodare duo. Est iisque eruditi saperet ex, sea ne euismod accumsan constituam. Eam in aliquip reprehendunt, ea feugiat mediocrem est. Tantas ridens id vis, id nam equidem debitis, labitur minimum recusabo eos eu. Exerci cotidieque reformidans vim at, cum cibo persequeris ex, est ut quando disputationi. <a href=#more-reading-example data-toggle=collapse class="collapsed hide-expanded">Show more</a> <span id=more-reading-example class="collapse inline">Sit dico graecis in, vel ne saepe senserit. Mundi noluisse est eu, quo alienum expetenda at. Ex reque atomorum quaerendum mea, cum id animal concludaturque. Sit et essent delenit deleniti, te eirmod nostrud eum. Eu voluptua perpetua persequeris nam. Nemore doctus nam an, vel labitur iudicabit repudiare ne, case partem interesset est te. Ad mei percipitur accommodare. Duo appetere ocurreret in, ne dicat nobis appareat cum. At eos verear tibique erroribus. Mentitum ponderum quo ex, et sensibus definiebas intellegebat sea. <a href=#more-reading-example data-toggle=collapse class=when-expanded>Show less</a></span></p></div></div></section>');
    $templateCache.put('components/collapsible-items/demo-play-collapsible-items.html', '<section ng-controller=collapsibleItemsPLayDemoCtrl id=collapsible-items-play-demo><div class=container><h2>Collapsible-Items Builder</h2><div></div></div></section>');
    $templateCache.put('components/colors/demo-colors.html', '<section ng-controller=colorsCtrl id=colors-html-example><div class=container><h2>Colors Demo</h2><div><div class=row><div class="col-sm-12 col-md-4"><div class="well well-white text-gray-dark well-white-stroke"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;White</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#ffffff</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-white</span><br></div><div class="well text-gray-dark"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Light Gray</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#eeeeee</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;n/a</span><br></div><div class="well text-white well-gray"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Gray</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#aaaaaa</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;n/a</span><br></div><div class="well well-gray-dark"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Gray Dark</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#444444</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-gray-dark</span><br></div><div class="well well-blue"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Blue</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#007db8</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-blue</span><br></div><div class="well well-dark-blue"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Dark Blue</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#00447c</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-dark-blue</span><br></div><div class="well text-gray-medium well-light-green"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Light Green</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#C1D82F</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;n/a</span><br></div></div><div class="col-sm-12 col-md-4"><div class="well well-green"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Green</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#6EA204</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-green</span><br></div><div class="well well-yellow"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Yellow</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#f2af00</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;n/a</span><br></div><div class="well well-orange"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Orange</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#EE6411</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-orange</span><br></div><div class="well well-red"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Red</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#D74324</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-red</span><br></div><div class="well well-red-dark"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Dark Red</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#CE1126</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-red-dark</span><br></div><div class="well well-berry"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Berry</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#B7295A</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-berry</span><br></div><div class="well well-purple"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Purple</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#6E2585</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;text-purple</span><br></div><div class="well well-teal"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Dell Teal</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#42aeaf</span><br><span class=pull-left>css:</span><span class=pull-right>&nbsp;&nbsp;n/a</span><br></div></div><div class="col-sm-12 col-md-4 well"><p>**The following colors may <strong>only be used</strong> in instances associated below.</p><div class="well text-gray-dark well-gray-very-light well-gray-very-light-stroke"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;7% Dell Light Gray</span><br><span class=pull-left>use:</span><span class=pull-right>&nbsp;&nbsp;backgrounds only</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#f9f9f9</span><br></div><div class="well text-white well-gray-medium"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;75% Dell Gray Dark</span><br><span class=pull-left>use:</span><span class=pull-right>&nbsp;&nbsp;borders only</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#737373</span><br></div><div id=containers-html-example><div class="well text-gray-dark well-alert-yellow"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;Online Alert Yellow</span><br><span class=pull-left>use:</span><span class=pull-right>&nbsp;&nbsp;Alerts only</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#FFFFC9</span><br></div><div class="well text-gray-dark well-dell-blue-20-percent"><span class=pull-left>color:</span><span class=pull-right>&nbsp;&nbsp;20% Dell Blue</span><br><span class=pull-left>use:</span><span class=pull-right>&nbsp;&nbsp; highlighting and selecting</span><br><span class=pull-left>hex:</span><span class=pull-right>&nbsp;&nbsp;#CCE5F1</span><br></div></div></div></div></div></div></section>');
    $templateCache.put('components/colors/demo-play-colors.html', '<section ng-controller=colorsPLayDemoCtrl id=colors-play-demo><div class=container><h2>Colors Builder</h2><div></div></div></section>');
    $templateCache.put('components/contact-drawer/demo-contact-drawer.html', '<section ng-controller=contactDrawerCtrl id=contact-drawer-html-example><div class=container id=contact-drawer><h2>Contact-Drawer Demo</h2><div class=block-grid-item><div class="hidden-xs hidden-sm contact-drawer"><div class=contact-drawer-cta>Contact us</div><div class=contact-drawer-panel><ul class=unstyled><li><div class=icon><i class=icon-small-chat></i></div><div class=description><p>Get immediate answers about your product.</p><p><a href=javascript:;>Chat now</a></p></div></li><li><div class=icon><i class=icon-small-phone></i></div><div class=description><p>Talk to a Dell expert over the phone.</p><p><a href=javascript:;>Call 1-800-WWW-DELL</a></p></div></li><li><div class=icon><i class=icon-small-mail></i></div><div class=description><p>Email us, and we\'ll reply within one business day</p><p><a href=javascript:;>Email us</a></p></div></li></ul></div></div></div></div></section>');
    $templateCache.put('components/contact-drawer/demo-play-contact-drawer.html', '<section ng-controller=contactDrawerPLayDemoCtrl id=contact-drawer-play-demo><div class=container><h2>Contact-Drawer Builder</h2><div></div></div></section>');
    $templateCache.put('components/containers/demo-containers.html', '<section ng-controller=containersCtrl id=containers-html-example><div class=container><h2>Containers Demo</h2><div><h4>Default well example</h4><div id=example-well><div class="well well-transparent-stroke"><p>This is a default Well...</p></div></div></div><h4>Solid colored wells &amp; containers</h4><div class="well well-lg well-blue"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-blue"</strong></p></div><div class="well well-lg well-dark-blue"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-dark-blue"</strong></p></div><div class="well well-lg well-purple"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-purple"</strong></p></div><div class="well well-lg well-berry"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-berry"</strong></p></div><div class="well well-lg well-red"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-red"</strong></p></div><div class="well well-lg well-gray-medium"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-gray-medium"</strong></p></div><div class="well well-lg well-gray-dark"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-gray-dark"</strong></p></div><h4 class=top-offset-60>Color stroked wells &amp; containers</h4><div class="well well-lg well-blue-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-blue-stroke"</strong></p></div><div class="well well-lg well-dark-blue-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-dark-blue-stroke"</strong></p></div><div class="well well-lg well-purple-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-purple-stroke"</strong></p></div><div class="well well-lg well-berry-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-berry-stroke"</strong></p></div><div class="well well-lg well-red-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-red-stroke"</strong></p></div><div class="well well-lg well-red-dark-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-red-dark-stroke"</strong></p></div><div class="well well-lg well-gray-medium-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-gray-medium-stroke"</strong></p></div><div class="well well-lg well-gray-dark-stroke"><h2>Headline</h2><p>Content placed in a <strong>"well well-lg well-gray-dark-stroke"</strong></p></div><h4 class=top-offset-60>Color stroked wells &amp; containers with title</h4><div class="well well-lg well-blue-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-blue-stroke"</strong></p></div><div class="well well-lg well-dark-blue-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-dark-blue-stroke"</strong></p></div><div class="well well-lg well-purple-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-purple-stroke"</strong></p></div><div class="well well-lg well-berry-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-berry-stroke"</strong></p></div><div class="well well-lg well-red-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-red-stroke"</strong></p></div><div class="well well-lg well-red-dark-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-red-dark-stroke"</strong></p></div><div class="well well-lg well-gray-medium-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-gray-medium-stroke"</strong></p></div><div class="well well-lg well-gray-dark-stroke"><h4 class=container-title>A really long title goes here</h4><p>Content placed in a <strong>"well well-lg well-gray-dark-stroke"</strong></p></div><h4 class=top-offset-60>Color stroked wells &amp; containers with title</h4><div class="panel panel-blue"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-blue"</strong></p></div><div class="panel panel-dark-blue"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-dark-blue"</strong></p></div><div class="panel panel-purple"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-purple"</strong></p></div><div class="panel panel-purple"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-purple"</strong></p></div><div class="panel panel-berry"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-berry"</strong></p></div><div class="panel panel-red"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-red"</strong></p></div><div class="panel panel-red-dark"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-red-dark"</strong></p></div><div class="panel panel-gray-medium"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-gray-medium"</strong></p></div><div class="panel panel-gray-dark"><h3 class=panel-heading>A really long title goes here</h3><p class=panel-body>Content placed in a <strong>"panel panel-gray-dark"</strong></p></div></div></section>');
    $templateCache.put('components/containers/demo-play-containers.html', '<section ng-controller=containersPLayDemoCtrl id=containers-play-demo><div class=container><h2>Containers Builder</h2><div></div></div></section>');
    $templateCache.put('components/content-teaser/demo-content-teaser.html', '<section ng-controller=contentTeaserCtrl id=content-teaser-html-example><div class=container><h2>Teasers Demo</h2><h3 class=bottom-offset-20>Vertical Teaser \u2013 Show/no-hide</h3><div class=row equalize-height=.content-teaser-container><div class="col-xs-12 col-sm-3"><div class=content-teaser-container id=content-teaser-no-hide><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a><h4><a href=javascript:; class=btn-link>Content headline title</a></h4><p>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled detail-links list-group content-card" ng-class="{\'view-all\': viewAll[\'parent-link-1\']}"><li><a href=javascript:; class=btn-link>1 Sample Link</a></li><li><a href=javascript:; class=btn-link>2 Sample Link</a></li><li><a href=javascript:; class=btn-link>3 Sample Link</a></li><li><a href=javascript:; class=btn-link>4 Sample Link</a></li><li><a href=javascript:; class=btn-link>5 Sample Link</a></li><li><a href=javascript:; class=btn-link>6 Sample Link</a></li><li><a href=javascript:; class=btn-link>7 Sample Link</a></li><li><a href=javascript:; class=btn-link>8 Sample Link</a></li><li><a href=javascript:; class=btn-link>9 Sample Link</a></li></ul><div class=content-toggle ng-hide="viewAll[\'parent-link-1\']"><a href=javascript:; class="hidden-xs btn-link" ng-click="viewAll[\'parent-link-1\'] = true">View All</a> <a href=javascript:; class="visible-xs btn-link" id=viewAll-no-hide ng-click="viewAll[\'parent-link-1\'] = true">More</a></div></div></div></div><div class="col-xs-12 col-sm-3"><div class=content-teaser-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a><h4><a href=javascript:; class=btn-link>Content headline title</a></h4><p>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled detail-links list-group" ng-class="{\'view-all\': viewAll[\'parent-link-2\']}"><li><a href=javascript:; class=btn-link>1 Sample Link</a></li><li><a href=javascript:; class=btn-link>2 Sample Link</a></li><li><a href=javascript:; class=btn-link>3 Sample Link</a></li><li><a href=javascript:; class=btn-link>4 Sample Link</a></li><li><a href=javascript:; class=btn-link>5 Sample Link</a></li><li><a href=javascript:; class=btn-link>6 Sample Link</a></li><li><a href=javascript:; class=btn-link>7 Sample Link</a></li><li><a href=javascript:; class=btn-link>8 Sample Link</a></li><li><a href=javascript:; class=btn-link>9 Sample Link</a></li></ul><div class=content-toggle ng-hide="viewAll[\'parent-link-2\']"><a href=javascript:; class="hidden-xs btn-link" ng-click="viewAll[\'parent-link-2\'] = true">View All</a> <a href=javascript:; class="visible-xs btn-link" ng-click="viewAll[\'parent-link-2\'] = true">More</a></div></div></div></div><div class="col-xs-12 col-sm-3"><div class=content-teaser-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a><h4><a href=javascript:; class=btn-link>Content headline title</a></h4><p>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled detail-links list-group" ng-class="{\'view-all\': viewAll[\'parent-link-3\']}"><li><a href=javascript:; class=btn-link>1 Sample Link</a></li><li><a href=javascript:; class=btn-link>2 Sample Link</a></li><li><a href=javascript:; class=btn-link>3 Sample Link</a></li><li><a href=javascript:; class=btn-link>4 Sample Link</a></li><li><a href=javascript:; class=btn-link>5 Sample Link</a></li><li><a href=javascript:; class=btn-link>6 Sample Link</a></li><li><a href=javascript:; class=btn-link>7 Sample Link</a></li><li><a href=javascript:; class=btn-link>8 Sample Link</a></li><li><a href=javascript:; class=btn-link>9 Sample Link</a></li></ul><div class=content-toggle ng-hide="viewAll[\'parent-link-3\']"><a href=javascript:; class="hidden-xs btn-link" ng-click="viewAll[\'parent-link-3\'] = true">View All</a> <a href=javascript:; class="visible-xs btn-link" ng-click="viewAll[\'parent-link-3\'] = true">More</a></div></div></div></div><div class="col-xs-12 col-sm-3"><div class=content-teaser-container><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a><h4><a href=javascript:; class=btn-link>Content headline title</a></h4><p>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled detail-links list-group" ng-class="{\'view-all\': viewAll[\'parent-link-4\']}"><li><a href=javascript:; class=btn-link>1 Sample Link</a></li><li><a href=javascript:; class=btn-link>2 Sample Link</a></li><li><a href=javascript:; class=btn-link>3 Sample Link</a></li><li><a href=javascript:; class=btn-link>4 Sample Link</a></li><li><a href=javascript:; class=btn-link>5 Sample Link</a></li><li><a href=javascript:; class=btn-link>6 Sample Link</a></li><li><a href=javascript:; class=btn-link>7 Sample Link</a></li><li><a href=javascript:; class=btn-link>8 Sample Link</a></li><li><a href=javascript:; class=btn-link>9 Sample Link</a></li></ul><div class=content-toggle ng-hide="viewAll[\'parent-link-4\']"><a href=javascript:; class="hidden-xs btn-link" ng-click="viewAll[\'parent-link-4\'] = true">View All</a> <a href=javascript:; class="visible-xs btn-link" ng-click="viewAll[\'parent-link-4\'] = true">More</a></div></div></div></div></div><hr><h3 class=bottom-offset-20>Vertical Teaser \u2013 truncated content with dropdown CTA</h3><div class=row><div class="col-xs-12 col-sm-3 bottom-offset-30"><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:; class=btn-link><h4 class=text-blue>Content headline title</h4></a><p class=multiline-ellipsis>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled list-group bottom-offset-10"><li class=text-gray-medium>Updated: 3/25/2015</li></ul></div><div class=btn-group><a class="btn btn-default dropdown-toggle" data-toggle=dropdown href=javascript:;>Actions <i class=caret></i></a><ul class="dropdown-menu dropdown-icon-menu"><li><a href=javascript:; class=btn-link><i class=icon-small-download></i>&nbsp;&nbsp;Download</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-share></i>&nbsp;&nbsp;Share</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-chat></i>&nbsp;&nbsp;Contact an Expert</a></li></ul></div></div><div class="col-xs-12 col-sm-3 bottom-offset-30"><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:; class=btn-link><h4 class=text-blue>Content headline title</h4></a><p class=multiline-ellipsis>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled list-group bottom-offset-10"><li class=text-gray-medium>Updated: 3/25/2015</li></ul></div><div class=btn-group><a class="btn btn-default dropdown-toggle" data-toggle=dropdown href=javascript:;>Actions <i class=caret></i></a><ul class="dropdown-menu dropdown-icon-menu"><li><a href=javascript:; class=btn-link><i class=icon-small-download></i>&nbsp;&nbsp;Download</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-share></i>&nbsp;&nbsp;Share</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-chat></i>&nbsp;&nbsp;Contact an Expert</a></li></ul></div></div><div class="col-xs-12 col-sm-3 bottom-offset-30"><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:; class=btn-link><h4 class=text-blue>Content headline title</h4></a><p class=multiline-ellipsis>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled list-group bottom-offset-10"><li class=text-gray-medium>Updated: 3/25/2015</li></ul></div><div class=btn-group><a class="btn btn-default dropdown-toggle" data-toggle=dropdown href=javascript:;>Actions <i class=caret></i></a><ul class="dropdown-menu dropdown-icon-menu"><li><a href=javascript:; class=btn-link><i class=icon-small-download></i>&nbsp;&nbsp;Download</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-share></i>&nbsp;&nbsp;Share</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-chat></i>&nbsp;&nbsp;Contact an Expert</a></li></ul></div></div><div class="col-xs-12 col-sm-3 bottom-offset-30"><a href=javascript:;><img src=http://placehold.it/260x155 class="img-responsive bottom-offset-10"></a> <a href=javascript:; class=btn-link><h4 class=text-blue>Content headline title</h4></a><p class=multiline-ellipsis>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled list-group bottom-offset-10"><li class=text-gray-medium>Updated: 3/25/2015</li></ul></div><div class=btn-group><a class="btn btn-default dropdown-toggle" data-toggle=dropdown href=javascript:;>Actions <i class=caret></i></a><ul class=dropdown-menu><li><a href=javascript:; class=btn-link><i class=icon-small-download></i>&nbsp;&nbsp;Download</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-share></i>&nbsp;&nbsp;Share</a></li><li><a href=javascript:; class=btn-link><i class=icon-small-chat></i>&nbsp;&nbsp;Contact an Expert</a></li></ul></div></div></div><hr><h3 class=bottom-offset-20>Vertical Teaser \u2013 truncated content</h3><div class=row><div class="col-xs-12 col-sm-6 stacked-detail-links"><a href=javascript:;><img src=http://placehold.it/555x275 class="img-responsive bottom-offset-10"></a><h4><a href=javascript:; class=btn-link>Headline Title Goes Here <img src="components/content-teaser/demo-pdficon_small.png"></a></h4><p class=multiline-ellipsis>Controlling access and achieving governance has become more complicated than ever. Today\u2019s diverse mix of applications and access scenarios make identity and access management (IAM) extremely complex and time-consuming.</p><div class=stacked-detail-links><ul class="list-unstyled list-group"><li class=text-gray-medium>Updated: 3/25/2015</li><li><a href=javascript:; class=btn-link>View all Security resources</a></li></ul></div></div></div><hr><h3 class=bottom-offset-20>Horizontal teaser image left (responsive image)</h3><div class=form-compressed><div class=row><div class="col-xs-3 vertical-center"><a href=javascript:;><img class=img-responsive alt=275x175 src=http://placehold.it/275x175 data-holder-rendered=true></a></div><div class="col-xs-8 vertical-center"><h5 class=teaser-media-heading><a href=javascript:; class=btn-link>Middle aligned left</a></h5><p class=bottom-offset-5>Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo as purus odio.</p><button class="btn btn-success hidden-xs hidden-sm" type=submit>Call to Action</button> <a href=javascript:; class="btn-link visible-xs-block visible-sm-block">Call to Action</a></div></div></div><hr><h3 class=bottom-offset-20>Horizontal teaser image right (responsive)</h3><div class=form-compressed><div class=row><div class="col-xs-8 vertical-center"><h5 class=teaser-media-heading><a href=javascript:; class=btn-link>Middle aligned right</a></h5><p>Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo as purus odio.</p><button class="btn btn-success hidden-xs hidden-sm" type=submit>Call to Action</button> <a href=javascript:; class="btn-link visible-xs-block visible-sm-block">Call to Action</a></div><div class="col-xs-3 vertical-center"><a href=javascript:;><img class=img-responsive alt=275x175 src=http://placehold.it/275x175 data-holder-rendered=true></a></div></div></div><hr><h3 class=bottom-offset-20>Horizontal teaser full-bleed text overlay</h3><div class=row><div class="col-xs-12 col-sm-7"><div class="well well-teaser"><a href=javascript:;><img alt=750x275 src=http://placehold.it/750x275 class=img-responsive></a></div><div class=well-caption><a href=javascript:; class=btn-link>Sed susscipt ligua nec lorem semper, velimydfgentum.</a></div></div></div></div><div class=container-fluid><div class=container><h3 class=bottom-offset-20>Horizontal teaser full-width gradient</h3></div><div class=row><div class=col-xs-12><div class=well-site-wide><p class=text-center>Text area may contain centered text up to 140 characters including spaces and call-to-action.&nbsp;&nbsp;<a href=javascript:; class="btn-link div-link">Call to Action</a></p></div></div></div></div><div class=container><h3 class=bottom-offset-20>Value props</h3></div><div id=value-props class="container-fluid value-props-gallery" equalize-height="#value-props .gallery-item"><div class="col-xs-12 col-sm-4 gallery-item"><a href=javascript:;><i class="icon-large-shipping text-blue"></i><h5>Free shipping, free returns</h5><p class=text-gray-dark>Shop now with free shipping and no-cost returns.</p></a></div><div class="col-xs-12 col-sm-4 gallery-item"><a href=javascript:;><i class="icon-large-calculator text-blue"></i><h5>Fast. Easy. Financing.*</h5><p class=text-gray-dark>Dell Preferred Account <sup>TM</sup> makes purchasing easier.</p></a></div><div class="col-xs-12 col-sm-4 gallery-item"><a href=javascript:;><i class="icon-large-giftcard text-blue"></i><h5>Dell Advantage Loyalty Program.</h5><p class=text-gray-dark>Here\'s how much we appreciate our customers.</p></a></div></div></section>');
    $templateCache.put('components/content-teaser/demo-play-content-teaser.html', '<section ng-controller=contentTeaserPLayDemoCtrl id=content-teaser-play-demo><div class=container><h2>Content-Teaser Builder</h2><div></div></div></section>');
    $templateCache.put('components/dividers/demo-dividers.html', '<section ng-controller=dividersCtrl id=dividers-html-example><div class=container><h2>Dividers Demo</h2><div><div><h4>Section dividers with shadow<small>(supported browsers)</small></h4><hr class=shadow-separator></div><div class=bottom-offset-30><h4>Section dividers default dividers<small>(example of non-supported browsers)</small></h4><hr class=separator-default></div><div class=top-offset-40><h2>Horizontal Dividers</h2></div><div class=top-offset-20><h4>Primary divider</h4><hr class="hr-gray"></div><div class=top-offset-20><h4>Secondary dividers</h4><hr></div><div class=bottom-offset-30><h4>Tertiary dividers</h4><hr class="hr-gray-light"></div><div class=top-offset-40><h2>Vertical Dividers</h2></div><div class=row><div class="col-xs-12 top-offset-20 bottom-offset-20"><div class="col-xs-4 border-left-gray-stroke text-left">&nbsp;vertical divider left</div><div class="col-xs-4 border-right-gray-stroke text-right">&nbsp;vertical divider right</div></div><div class="col-xs-12 top-offset-20 bottom-offset-20"><div class="col-xs-4 border-left-thick-gray-stroke text-left">&nbsp;vertical thick divider left</div><div class="col-xs-4 border-right-thick-gray-stroke text-right">&nbsp;vertical thick divider right</div></div></div></div></div></section>');
    $templateCache.put('components/dividers/demo-play-dividers.html', '<section ng-controller=dividersPLayDemoCtrl id=dividers-play-demo><div class=container><h2>Dividers Builder</h2><div></div></div></section>');
    $templateCache.put('components/dropdown-buttons/demo-dropdown-buttons.html', '<section ng-controller=dropdownButtonsCtrl id=dropdown-buttons-html-example><div class=container><h2 class=bottom-offset-20>Dropdown-Buttons Demo</h2><div class=bottom-offset-30><h4>Primary Non-Purchase Dropdown</h4><div class=btn-group id=button-primary-dropdown><button type=button class="btn btn-primary dropdown-toggle" data-toggle=dropdown aria-expanded=false>Primary <span class=caret></span></button><ul class=dropdown-menu role=menu><li><a href=javascript:;>Action</a></li><li><a href=javascript:;>Another action</a></li><li><a href=javascript:;>Something else here</a></li><li class=divider></li><li><a href=javascript:;>Separated link</a></li></ul></div></div><div class=bottom-offset-30><h4>Primary Purchase Dropdown</h4><div class=btn-group id=button-success-dropdown><a class="btn btn-success dropdown-toggle" data-toggle=dropdown href=javascript:;>Purchase <i class=caret></i></a><ul class=dropdown-menu><li><a href=javascript:;>Action</a></li><li><a href=javascript:;>Another action</a></li><li><a href=javascript:;>Something else here</a></li><li class=divider></li><li><a href=javascript:;>Separated link</a></li></ul></div></div><div class=bottom-offset-30><h4>Secondary or General Use Dropdown</h4><div class=btn-group id=button-default-dropdown><a class="btn btn-default dropdown-toggle" data-toggle=dropdown href=javascript:;>General Use <i class=caret></i></a><ul class=dropdown-menu><li><a href=javascript:;>Action</a></li><li><a href=javascript:;>Another action</a></li><li><a href=javascript:;>Something else here</a></li><li class=divider></li><li><a href=javascript:;>Separated link</a></li></ul></div></div><hr><div class=bottom-offset-30><h4>Primary Split Non-Purchase Dropdown</h4><div class=btn-group id=button-primary-split><button type=button class="btn btn-primary">Primary split</button> <button type=button class="btn btn-primary dropdown-toggle" data-toggle=dropdown aria-expanded=false><span class=caret></span> <span class=sr-only>Toggle Dropdown</span></button><ul class=dropdown-menu role=menu><li><a href=javascript:;>Action</a></li><li><a href=javascript:;>Another action</a></li><li><a href=javascript:;>Something else here</a></li><li class=divider></li><li><a href=javascript:;>Separated link</a></li></ul></div></div><div class=bottom-offset-30><h4>Primary Split Purchase Dropdown</h4><div class=btn-group id=button-success-split><button type=button class="btn btn-success">Purchase split</button> <button type=button class="btn btn-success dropdown-toggle" data-toggle=dropdown aria-expanded=false><span class=caret></span> <span class=sr-only>Toggle Dropdown</span></button><ul class=dropdown-menu role=menu><li><a href=javascript:;>Action</a></li><li><a href=javascript:;>Another action</a></li><li><a href=javascript:;>Something else here</a></li><li class=divider></li><li><a href=javascript:;>Separated link</a></li></ul></div></div><div class=bottom-offset-30><h4>Secondary Split or General Use Dropdown</h4><div class=btn-group id=button-default-split><button type=button class="btn btn-default">General Use split</button> <button type=button class="btn btn-default dropdown-toggle" data-toggle=dropdown aria-expanded=false><span class=caret></span> <span class=sr-only>Toggle Dropdown</span></button><ul class=dropdown-menu role=menu><li><a href=javascript:;>Action</a></li><li><a href=javascript:;>Another action</a></li><li><a href=javascript:;>Something else here</a></li><li class=divider></li><li><a href=javascript:;>Separated link</a></li></ul></div></div></div></section>');
    $templateCache.put('components/dropdown-buttons/demo-play-dropdown-buttons.html', '<section ng-controller=dropdownButtonsPLayDemoCtrl id=dropdown-buttons-play-demo><div class=container><h2>Dropdown-Buttons Builder</h2><div></div></div></section>');
    $templateCache.put('components/footer/demo-footer.html', '<section ng-controller=footerCtrl id=footer-html-example><div class=container><h2>Footer Demo</h2><h3>Simplified Footer</h3><div class=row><div class=col-md-9><div equalizer=group class="well well-white text-gray-medium well-white-stroke"><div class="center-component component-code" id=navigation-footer-simplified-footer><footer class=navbar><div class=container><ul class="nav navbar-nav"><li><a href=javascript:;>&copy;2015 Dell</a></li><li><a href=javascript:;>Terms of Sale</a></li><li><a href=javascript:;>Privacy Statement</a></li><li><a href=javascript:;>Ads &amp; Emails</a></li><li><a href=javascript:;>Legal &amp; Regulatory</a></li><li><a href=javascript:;>Corporate Social Responsibility</a></li><li><a href=javascript:;>Contact</a></li></ul></div></footer></div><div class=row><div class=col-xs-12><hr class="rule-break hr-gray-light"><h5 class=fragment-title>Simplified Footer</h5><div class=description>Use for the minimum required footer functionality/content for dell.com pages.</div></div></div></div></div><div class=col-md-3><div class=well>sidebar</div></div></div><h3>Default Footer</h3><div class=row><div class=col-md-9><div equalizer=group class="well well-white text-gray-medium well-white-stroke"><div class="center-component component-code" id=navigation-footer-default-footer><footer class="navbar default-footer" data-datafile=components/footer/footerData.json><div class="footer-about well-gray-light"><div class=container><ul class="nav navbar-nav about-links"><li><a href=javascript:;>About Dell</a></li><li><a href=javascript:;>Careers</a></li><li><a href=javascript:;>Community</a></li><li><a href=javascript:;>Events</a></li><li><a href=javascript:;>PartnerDirect</a></li><li><a href=javascript:;>Premier</a></li><li class="country-selector btn-group dropup"><a href=javascript:; class=dropdown-toggle data-toggle=dropdown tabindex=16><img src=components/footer/us.gif class="flag"> United States&nbsp;</a><ul class="dropdown-menu country-names"></ul></li></ul></div></div><div class="navbar footer-menu"><div class=footer-top-section><div class=footer-shadow-section></div><div class=container><ul class="nav navbar-nav"><li class=language><ul><li><a href=javascript:; tabindex=15>English</a></li><li class="language-divider text-white">&nbsp;|&nbsp;</li><li><a href=javascript:; tabindex=16>Spanish</a></li></ul></li><li><a href=javascript:;>&copy;2015 Dell</a></li><li><a href=javascript:;>Terms of Sale</a></li><li><a href=javascript:;>Privacy Statement</a></li><li><a href=javascript:;>Ads &amp; Emails</a></li><li><a href=javascript:;>Legal &amp; Regulatory</a></li><li><a href=javascript:;>Corporate Social Responsibility</a></li><li><a href=javascript:;>Contact</a></li></ul></div></div><div class=footer-shadow-section></div><div class="footer-bottom-section container"><div class=disclaimer><p>*DELL PREFERRED ACCOUNT (DPA): Offered to U.S. residents by WebBank, who determines qualifications for and terms of credit. Promotion eligibility varies and is determined by WebBank. Taxes, shipping, and other charges are extra and vary.</p><p>Offers subject to change, not combinable with all other offers. Taxes, shipping, handling and other fees apply. U.S. Dell Home new purchases only. Free shipping and handling offer available in Continental (except Alaska) U.S. only. Availability of electronics and accessories varies and quantities may be limited. Dell reserves the right to cancel orders arising from pricing or other errors.</p></div></div></div></footer></div><div class=row><div class=col-xs-12><hr class="rule-break hr-gray-light"><h5 class=fragment-title>Default Footer</h5><div class=description>Use for the maximum required footer functionality/content for dell.com pages.</div></div></div></div></div><div class=col-md-3><div class=well>sidebar</div></div></div></div><footer class=navbar><div class=container><ul class="nav navbar-nav"><li><a href=javascript:;>&copy;2015 Dell</a></li><li><a href=javascript:;>Terms of Sale</a></li><li><a href=javascript:;>Privacy Statement</a></li><li><a href=javascript:;>Ads &amp; Emails</a></li><li><a href=javascript:;>Legal &amp; Regulatory</a></li><li><a href=javascript:;>Corporate Social Responsibility</a></li><li><a href=javascript:;>Contact</a></li></ul></div></footer><div class="bottom-offset-60 top-offset-60">spacer!!!!</div><footer class="navbar default-footer" data-datafile=components/footer/footerData.json><div class="footer-about well-gray-light"><div class=container><ul class="nav navbar-nav about-links"><li><a href=javascript:;>About Dell</a></li><li><a href=javascript:;>Careers</a></li><li><a href=javascript:;>Community</a></li><li><a href=javascript:;>Events</a></li><li><a href=javascript:;>PartnerDirect</a></li><li><a href=javascript:;>Premier</a></li><li class="country-selector btn-group dropup"><a href=javascript:; class=dropdown-toggle data-toggle=dropdown tabindex=16><img src=components/footer/us.gif class="flag"> United States&nbsp;</a><ul class="dropdown-menu country-names"></ul></li></ul></div></div><div class="navbar footer-menu"><div class=footer-top-section><div class=footer-shadow-section></div><div class=container><ul class="nav navbar-nav"><li class=language><ul><li><a href=javascript:; tabindex=15>English</a></li><li class="language-divider text-white">&nbsp;|&nbsp;</li><li><a href=javascript:; tabindex=16>Spanish</a></li></ul></li><li><a href=javascript:;>&copy;2015 Dell</a></li><li><a href=javascript:;>Terms of Sale</a></li><li><a href=javascript:;>Privacy Statement</a></li><li><a href=javascript:;>Ads &amp; Emails</a></li><li><a href=javascript:;>Legal &amp; Regulatory</a></li><li><a href=javascript:;>Corporate Social Responsibility</a></li><li><a href=javascript:;>Contact</a></li></ul></div></div><div class=footer-shadow-section></div><div class="footer-bottom-section container"><div class=disclaimer><p>*DELL PREFERRED ACCOUNT (DPA): Offered to U.S. residents by WebBank, who determines qualifications for and terms of credit. Promotion eligibility varies and is determined by WebBank. Taxes, shipping, and other charges are extra and vary.</p><p>Offers subject to change, not combinable with all other offers. Taxes, shipping, handling and other fees apply. U.S. Dell Home new purchases only. Free shipping and handling offer available in Continental (except Alaska) U.S. only. Availability of electronics and accessories varies and quantities may be limited. Dell reserves the right to cancel orders arising from pricing or other errors.</p></div></div></div></footer></section>');
    $templateCache.put('components/footer/demo-play-footer.html', '<section ng-controller=footerPLayDemoCtrl id=footer-play-demo><div class=container><h2>Footer Builder</h2><div></div></div></section>');
    $templateCache.put('components/forms/demo-forms.html', '<section ng-controller=formsCtrl id=forms-html-example><div class=container><h2>Forms Demo</h2><h3 class=top-offset-20>individual form controls</h3><hr><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label" for=text-label-input>Text input label</label><div class="col-xs-12 col-sm-5"><input type=text class=form-control id=text-label-input><p class=help-block>In addition to freeform text, any HTML5 text-based input appears like so.</p></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label" for=uneditable>Uneditable input</label><div class="col-xs-12 col-sm-5"><span id=uneditable class="uneditable-input form-control">Some value here</span></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label" for=disabledInput>Disabled input</label><div class="col-xs-12 col-sm-5"><input class="disabled form-control" id=disabledInput type=text placeholder="Disabled input here\u2026" disabled></div></div></div></form></div><div class=bottom-offset-40><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label" for=textarea>Textarea input</label><div class="col-xs-12 col-sm-5"><textarea id=textarea class=form-control rows=5></textarea></div></div></div></form></div><div class=row><div class="col-xs-12 col-sm-6 bottom-offset-40"><h4>Checkboxes</h4><div class=checkbox><label><input type=checkbox value="option 1"> Checkbox one</label></div><div class="checkbox disabled bottom-offset-20"><label><input type=checkbox value="value option 2" disabled> Checkbox two is disabled</label></div></div><div class="col-xs-12 col-sm-6 bottom-offset-40"><h4>Inline checkboxes</h4><label class=checkbox-inline><input type=checkbox id=inlineCheckbox1 value=option1>1</label><label class=checkbox-inline><input type=checkbox id=inlineCheckbox2 value=option2>2</label><label class=checkbox-inline><input type=checkbox id=inlineCheckbox3 value=option3>3</label></div></div><div class=row><div class="col-xs-12 col-sm-6 bottom-offset-40"><h4>Radio Buttons</h4><div class=radio><label><input type=radio name=optionsRadios id=options-radio-1 value=option1 checked> Option one radio button</label></div><div class=radio><label><input type=radio name=optionsRadios id=options-radio-2 value=option2> Option two radio button</label></div><div class="radio disabled"><label><input type=radio name=optionsRadios id=options-radio-3 value=option3 disabled> Option three is disabled</label></div></div><div class="col-xs-12 col-sm-6 bottom-offset-40"><h4>Inline Radio Buttons</h4><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio1 value=option1> 1</label><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio2 value=option2> 2</label><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio3 value=option3> 3</label></div></div><div class=row><div class="col-xs-12 col-sm-8 bottom-offset-40"><h4>Tree Checkboxes</h4><ul class=list-tree><li><label class=checkbox><input type=checkbox value=option1-parent1> Checkbox value (parent 1)</label><ul><li><label class=checkbox><input type=checkbox value=option1-parent1-child1> Checkbox value (child 1)</label><ul><li><label class=checkbox><input type=checkbox value=option1-parent1-grandchild1> Checkbox value (grand child 1)</label></li></ul></li><li><label class=checkbox><input type=checkbox value=option1-parent1-child2> Checkbox value (child 2)</label><ul><li><label class=checkbox><input type=checkbox value=option1-parent1-grandchild3> Checkbox value (grand child 3)</label></li><li><label class=checkbox><input type=checkbox value=option1-parent1-grandchild4> Checkbox value (grand child 4)</label></li><li><label class=checkbox><input type=checkbox value=option1-parent1-grandchild5> Checkbox value (grand child 5)</label><ul><li><label class=checkbox><input type=checkbox value=option1-parent1-greatgrandchild1> Checkbox value (great grand child 1)</label></li><li><label class=checkbox><input type=checkbox value=option1-parent1-greatgrandchild2> Checkbox value (great grand child 2)</label></li><li><label class=checkbox><input type=checkbox value=option1-parent1-greatgrandchild3> Checkbox value (great grand child 3)</label></li></ul></li></ul></li></ul></li><li><label class=checkbox><input type=checkbox value=option1-parent2> Checkbox value (parent 2)</label><ul><li><label class=checkbox><input type=checkbox value=option1-parent2-child1> Checkbox value (child 1)</label><ul><li><label class=checkbox><input type=checkbox value=option1-parent2-grandchild1> Checkbox value (grand child 1)</label></li></ul></li></ul></li></ul></div></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label" for=exampleInputFile>File upload label</label><div class="col-xs-6 col-sm-6"><input type=file id=exampleInputFile><p class=help-block>Example block-level help text here.</p></div></div></div></form></div><hr><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label" for=inputError>Email: default error msg</label><div class="col-xs-6 col-sm-6"><input type=text class="email-check form-control"></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label" for=inputError>Email: Custom msg/localized</label><div class="col-xs-6 col-sm-6"><input type=text class="email-check form-control" data-error-message="Hello!! Please input a valid email address!"></div></div></div></form></div><hr><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class="form-group show-hide-password"><label for=passwordShowHide class="col-xs-12 col-sm-2 form-label">Password</label><div class="col-xs-6 col-sm-6"><input id=password-show-hide-example type=password class=form-control></div><div class="col-xs-12 col-sm-6 col-sm-offset-2 col-md-6 col-md-offset-2"><label class="checkbox help-block"><input type="checkbox"> <span class=show-password>Show password</span> <span class=hide-password>Hide password</span></label></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class="col-xs-6 col-sm-8 col-md-8"><label class="col-xs-12 col-sm-3 form-label" for=phone>Phone number</label><div class="col-xs-12 col-sm-9"><input id=phone type=text class="form-control phone-number" placeholder="(555) 111-2222"></div></div></div><div class=row><div class="col-xs-12 col-sm-8 col-md-8"><div class="col-xs-12 col-sm-6 col-sm-offset-3 col-md-6 col-md-offset-3 help-ext"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#phone-ext><span><label class=show-collapsed><i aria-hidden=true class=icon-ui-plus></i>&nbsp;Add extension</label></span> <span><label class=hide-expanded><i aria-hidden=true class=icon-ui-minus></i>&nbsp;Remove extension</label></span></a></div><div id=phone-ext class="collapse col-xs-6 col-sm-9 col-sm-offset-3 col-md-9 col-md-offset-3"><input type=text class="form-control phone-extension" placeholder="ext: (2222)"></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label">Spin box vertical</label><div class=spinbox data-orient=vertical data-spinmin=0 data-spindefault=0 data-spinmax=30 data-spinstep=1 data-spinincrease="&lt;i class=\'icon-ui-plus\'&gt;&lt;/i&gt;" data-spindecrease="&lt;i class=\'icon-ui-minus\'&gt;&lt;/i&gt;" data-spinname=""></div></div></div></form></div><div class=bottom-offset-40><form class=form-compressed role=form><div class=row><div class=form-group><label class="col-xs-12 col-sm-2 form-label">Spin box horizontal</label><div class=spinbox data-orient=horizontal data-spinmin=0 data-spindefault=0 data-spinmax=30 data-spinstep=1 data-spinincrease="&lt;i class=\'icon-ui-plus\'&gt;&lt;/i&gt;" data-spindecrease="&lt;i class=\'icon-ui-minus\'&gt;&lt;/i&gt;" data-spinname=""></div></div></div></form></div><div class="bottom-offset-40 top-offset-40"><form class=form-compressed role=form><div class=row><div class=form-group><div class="col-xs-12 col-sm-6"><label for=select01 class=form-label>Single handle Slider: current value</label><input class=bs-slider id=single-handle-ex1 data-slider-id=ex1Slider type=text data-slider-min=0 data-slider-max=20 data-slider-step=1 data-slider-value=14 data-slider-label="Current value: "></div></div></div></form></div><div class=bottom-offset-40><form class=form-compressed role=form><div class=row><div class=form-group><div class="col-xs-12 col-sm-6"><label for=select01 class=form-label>Single handle Slider: tooltip constant</label><input class=bs-slider id=single-handle-ex2 data-slider-id=ex1Slider type=text data-slider-min=0 data-slider-max=20 data-slider-step=1 data-slider-value=14 data-slider-tooltip="always"></div></div></div></form></div><div class=bottom-offset-40><form class=form-compressed role=form><div class=row><div class="form-group single-handle-slider"><div class="col-xs-12 col-sm-6"><label for=select01 class=form-label>Double handler Slider</label><input class=bs-slider id=double-handle-ex1 type=text data-slider-min=0 data-slider-max=10 data-slider-range=true data-slider-value="[3,7]"></div></div></div></form></div><h3 class=top-offset-40>select form controls</h3><hr><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><div class="col-xs-12 col-sm-6"><label for=select01 class=form-label>Select list</label><select class=form-control id=select01><option>Please choose</option><option>2</option><option>3</option><option>4</option><option>5</option></select></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><div class="col-xs-12 col-sm-6"><label for=select-01 class=form-label>Tiered select list</label><select class=form-control id=select-01><option class=text-gray-dark value=all>All</option><optgroup class=text-gray-dark label="Original Release Date"><option class=text-gray-dark value="0-30 days">0-30 days</option><option class=text-gray-dark value="0-90 days">0-90 days</option><option class=text-gray-dark value=older>older</option></optgroup><optgroup class=text-gray-dark label="Last updated date"><option class=text-gray-dark value="0-30 days">0-30 days</option><option class=text-gray-dark value="0-90 days">0-90 days</option><option class=text-gray-dark value=older>older</option></optgroup></select></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class=form-group><div class="col-xs-12 col-sm-6"><label for=multiSelect class=form-label>multi-select</label><select multiple id=multiSelect><option>1</option><option>2</option><option>3</option><option>4</option><option>5</option></select></div></div></div></form></div><div class=bottom-offset-40><form class=form-compressed role=form><div class=row><div class=form-group><div class="col-xs-12 col-sm-6"><div class=form-group><label for=ms class=form-label>Multi-select with checkboxes</label><select class=ms-checkbox id=ms multiple><option value=1>January</option><option value=2>February</option><option value=3>March</option><option value=4>April</option><option value=5>May</option><option value=6>June</option><option value=7>July</option><option value=8>August</option><option value=9>September</option><option value=10>October</option><option value=11>November</option><option value=12>December</option></select><p class=help-block>i.e. "Months"</p></div></div></div></div></form></div><h3 class=top-offset-40>Selects with pre-populated states (U.S. only)</h3><hr><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class="col-xs-12 col-sm-6"><div class=form-group><label for=default-select-state class=form-label>Standard Select U.S. States</label><select class="form-control select-state" id=default-select-state ng-model=stateDefault></select></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class="col-xs-12 col-sm-6"><div class=form-group><label for=short-select-state class=form-label>States with Abbreviations</label><select class="form-control select-state" data-format=short id=short-select-state ng-model=stateDefault></select></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class="col-xs-12 col-sm-6"><div class=form-group><label for=both-select-state class=form-label>States with Abbreviations and Name</label><select class="form-control select-state" data-format=both id=both-select-state ng-model=stateDefault></select></div></div></div></form></div><div class=bottom-offset-20><form class=form-compressed role=form><div class=row><div class="col-xs-12 col-sm-6"><div class=form-group><label for=emptyname-select-state class=form-label>States with Custom Select Text</label><select class="form-control select-state" data-format="" data-empty-name="Please select a state" id=emptyname-select-state ng-model=stateDefault></select></div></div></div></form></div><h3 class=top-offset-40>Common Forms</h3><hr><div class=bottom-offset-40><form class=form-compressed role=form><div class=row><h4 class="col-xs-12 col-sm-9"></h4></div><div class=row><div class="col-xs-11 col-sm-6"><label class="col-xs-8 col-sm-2 hidden-sm form-label" for=first-name>First Name</label><label class="col-xs-8 col-sm-2 visible-sm-block form-label" for=first-name>First</label><div class="col-xs-12 col-sm-10"><input type=text class=form-control id=first-name placeholder=""></div></div><div class=col-xs-1><label class="col-xs-12 col-sm-4 form-label" for=middle-initial>MI</label><div class="col-xs-12 col-sm-8"><input type=text class=form-control id=middle-initial placeholder=""></div></div><div class="col-xs-12 col-sm-5"><label class="col-xs-12 col-sm-2 col-md-3 hidden-sm form-label" for=last-name>Last Name</label><label class="col-xs-12 col-sm-2 col-md-3 visible-sm-block form-label" for=last-name>Last</label><div class="col-xs-12 col-sm-10 col-md-9"><input type=text class=form-control id=last-name placeholder=""></div></div></div><div class=row><div class="col-xs-6 col-sm-6"><label class="col-xs-8 col-sm-2 form-label" for=phone-number>Phone #</label><div class="col-xs-12 col-sm-10"><input type=text class="form-control phone-number" id=phone-number placeholder="(555) 111-2222"></div></div><div class="col-xs-6 col-sm-6"><label class="col-xs-8 col-sm-2 col-md-1 form-label" for=email-address>Email&nbsp;</label><div class="col-xs-12 col-sm-10 col-md-11"><input type=text class="form-control email-address" id=email-address placeholder=""></div></div></div><div class=row><div class="col-xs-12 col-sm-6"><div class="col-xs-12 col-sm-6 col-sm-offset-2 help-ext"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#phonegroup-ext><span><label class=show-collapsed><i aria-hidden=true class=icon-ui-plus></i>&nbsp;Add extension</label></span> <span><label class=hide-expanded><i aria-hidden=true class=icon-ui-minus></i>&nbsp;Remove extension</label></span></a></div><div id=phonegroup-ext class="collapse col-xs-12 col-sm-10 col-sm-offset-2"><input type=text class="form-control phone-extension" placeholder="ext: (2222)"></div></div></div><div class=row><div class="col-xs-12 col-sm-12 col-md-12"><label class="col-xs-8 col-sm-1 form-label" for=address-1>Address</label><div class="col-xs-12 col-sm-11"><input type=text class=form-control id=address-1 placeholder=""></div></div></div><div class=row><div class="col-xs-12 col-sm-12 col-md-12"><label class="col-xs-8 col-sm-1 col-md-1 form-label" for=address-2>Address</label><div class="col-xs-12 col-sm-11"><input type=text class=form-control id=address-2 placeholder=""></div></div></div><div class=row><div class="col-xs-12 col-sm-12 col-md-12"><div class="col-xs-12 col-sm-6 col-sm-offset-1 col-md-11 col-md-offset-1 help-ext"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#additional-address><span><label class=show-collapsed for=ph-ext><i aria-hidden=true class=icon-ui-plus></i>&nbsp;Additional address</label></span> <span><label class=hide-expanded for=ph-ext><i aria-hidden=true class=icon-ui-minus></i>&nbsp;Remove address</label></span></a></div><div id=additional-address class="collapse col-xs-12 col-sm-11 col-sm-offset-1 col-md-11 col-md-offset-1"><input type=text class=form-control placeholder=""></div></div></div><div class=row><div class="col-xs-12 col-sm-6 col-md-6"><label class="col-xs-8 col-sm-2 form-label" for=city>City</label><div class="col-xs-12 col-sm-10"><input type=text class=form-control id=city placeholder=""></div></div><div class="col-xs-6 col-sm-3"><label class="col-xs-8 col-sm-2 form-label visible-xs-block" for=default-state>&nbsp;</label><div><select class="form-control select-state" id=default-state ng-model=stateDefault></select></div></div><div class="col-xs-6 col-sm-3 col-md-3"><label class="col-xs-8 col-sm-2 form-label" for=zip>Zip</label><div class="col-xs-12 col-sm-10"><input type=text class=form-control id=zip placeholder=""></div></div></div></form><hr class="top-offset-40"><h3>Ship to (group addressed form in Well)</h3><div class=bottom-offset-40><div class=row><div class=col-md-9><div class="well well-white text-gray-medium well-white-stroke"><form class=form-compressed role=form><div class=row><h4 class="col-xs-12 col-sm-9">Ship to</h4></div><div class=row><div class="col-xs-11 col-sm-6"><label class="col-xs-8 col-sm-2 hidden-sm form-label" for=first-name>First<span class="hidden-xs hidden-sm hidden-md">Name</span></label><label class="col-xs-8 col-sm-2 visible-sm-block form-label" for=first-name-1>First<span class="hidden-xs hidden-sm hidden-md">Name</span></label><div class="col-xs-12 col-sm-10"><input type=text class=form-control id=first-name-1 placeholder=""></div></div><div class=col-xs-1><label class="col-xs-12 col-sm-4 form-label" for=middle-initial-1>MI</label><div class="col-xs-12 col-sm-8"><input type=text class=form-control id=middle-initial-1 placeholder=""></div></div><div class="col-xs-12 col-sm-5"><label class="col-xs-12 col-sm-2 hidden-sm form-label" for=last-name>Last<span class="hidden-xs hidden-sm hidden-md">Name</span></label><label class="col-xs-12 col-sm-2 visible-sm-block form-label" for=last-name-1>Last<span class="hidden-xs hidden-sm hidden-md">Name</span></label><div class="col-xs-12 col-sm-10"><input type=text class=form-control id=last-name-1 placeholder=""></div></div></div><div class=row><div class="col-xs-6 col-sm-6"><label class="col-xs-8 col-sm-2 form-label" for=phone-number>Phone<span class="hidden-xs hidden-sm hidden-md">#</span></label><div class="col-xs-12 col-sm-10"><input type=text class="form-control phone-number" id=phone-number-1 placeholder="(555) 111-2222"></div></div><div class="col-xs-6 col-sm-6"><label class="col-xs-8 col-sm-2 form-label" for=email-address-1>Email&nbsp;</label><div class="col-xs-12 col-sm-10"><input type=text class="form-control email-address" id=email-address-1 placeholder=""></div></div></div><div class=row><div class="col-xs-12 col-sm-6"><div class="col-xs-12 col-sm-6 col-sm-offset-2 help-ext"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#phonegroup-ext-2><span><label class=show-collapsed><i aria-hidden=true class=icon-ui-plus></i>&nbsp;Add extension</label></span> <span><label class=hide-expanded><i aria-hidden=true class=icon-ui-minus></i>&nbsp;Remove extension</label></span></a></div><div id=phonegroup-ext-2 class="collapse col-xs-12 col-sm-9 col-sm-offset-3"><input type=text class="form-control phone-extension" placeholder="ext: (2222)"></div></div></div><div class=row><div class=col-xs-12><label class="col-xs-8 col-sm-1 form-label" for=address-A>Address</label><div class="col-xs-12 col-sm-11"><input type=text class=form-control id=address-A placeholder=""></div></div></div><div class=row><div class=col-xs-12><label class="col-xs-8 col-sm-1 form-label" for=address-B>Address</label><div class="col-xs-12 col-sm-11"><input type=text class=form-control id=address-B placeholder=""></div></div></div><div class=row><div class=col-xs-12><div class="col-xs-12 col-sm-6 col-sm-offset-1 col-md-11 col-md-offset-1 help-ext"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#additional-address-1><span><label class=show-collapsed for=ph-ext><i aria-hidden=true class=icon-ui-plus></i>&nbsp;Additional address</label></span> <span><label class=hide-expanded for=ph-ext><i aria-hidden=true class=icon-ui-minus></i>&nbsp;Remove address</label></span></a></div><div id=additional-address-1 class="collapse col-xs-12 col-sm-11 col-sm-offset-1 col-md-11 col-md-offset-1"><input type=text class=form-control placeholder="*Additional Address"></div></div></div><div class=row><div class="col-xs-12 col-sm-6 col-md-6"><label class="col-xs-8 col-sm-2 form-label" for=city-1>City</label><div class="col-xs-12 col-sm-10"><input type=text class=form-control id=city-1 placeholder=""></div></div><div class="col-xs-6 col-sm-3"><label class="col-xs-8 col-sm-2 form-label visible-xs-block" for=default-state-1>&nbsp;</label><div><select class="form-control select-state" id=default-state-1 ng-model=stateDefault></select></div></div><div class="col-xs-6 col-sm-3 col-md-3"><label class="col-xs-8 col-sm-2 form-label" for=zip-1>Zip</label><div class="col-xs-12 col-sm-10"><input type=text class=form-control id=zip-1 placeholder=""></div></div></div></form></div></div></div></div><hr class="top-offset-40"><h3>Date Selector Demo</h3><div id=child-selects><div equalizer=group class="equalize well well-white text-gray-medium well-white-stroke"><div class="center-component component-code" id=forms-selects-date-selector><form class=bottom-offset-40 role=form><div class=row><div class=form-group id=date-selector-example role=form><div class="col-xs-12 col-sm-2"><label class=form-label for=date-selector-input>Date</label></div><div class="col-xs-6 col-sm-6"><div class=date-selector><input type=text class=form-control id=date-selector-input> <i class=icon-small-calendar></i><p class=help-block>mm/dd/yyyy</p></div></div></div></div></form></div><div class=row><div class=col-xs-12><hr class="rule-break hr-gray-light"><h5 class=fragment-title>Date selector</h5><div class=description>Allows a user to easily select a date from a calendar.</div></div></div></div></div><p class="top-offset-60 bottom-offset-60">&nbsp;</p><p class="top-offset-60 bottom-offset-60">&nbsp;</p><p class="top-offset-60 bottom-offset-60">&nbsp;</p><p class="top-offset-60 bottom-offset-60">&nbsp;</p><p class="top-offset-60 bottom-offset-60">&nbsp;</p></div><div class="label label-green-marker">Recent purchase</div></div></section>');
    $templateCache.put('components/forms/demo-play-forms.html', '<section ng-controller=formsPLayDemoCtrl id=forms-play-demo><div class=container><h2>Forms Builder</h2><div></div></div></section>');
    $templateCache.put('components/grid/demo-grid.html', '<section><div class=container id=grid-html-example><h2>Grid sample</h2><h3 class=top-offset-20>Gutter explanation</h3><div class=grid-gutter-demo><div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 outer-div-column-area"><span class="visible-xs-block text-center inner-div-live-area">Live Area<br>.col-xs-3</span> <span class="visible-sm-block text-center inner-div-live-area">Live Area<br>.col-sm-3</span> <span class="visible-md-block text-center inner-div-live-area">Live Area<br>.col-md-3</span> <span class="visible-lg-block text-center inner-div-live-area">Live Area<br>.col-lg-3</span></div><div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 outer-div-column-area"><span class="visible-xs-block text-center inner-div-live-area">Live Area<br>.col-xs-3</span> <span class="visible-sm-block text-center inner-div-live-area">Live Area<br>.col-sm-3</span> <span class="visible-md-block text-center inner-div-live-area">Live Area<br>.col-md-3</span> <span class="visible-lg-block text-center inner-div-live-area">Live Area<br>.col-lg-3</span></div><div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 outer-div-column-area"><span class="visible-xs-block text-center inner-div-live-area">Live Area<br>.col-xs-3</span> <span class="visible-sm-block text-center inner-div-live-area">Live Area<br>.col-sm-3</span> <span class="visible-md-block text-center inner-div-live-area">Live Area<br>.col-md-3</span> <span class="visible-lg-block text-center inner-div-live-area">Live Area<br>.col-lg-3</span></div><div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 outer-div-column-area"><span class="visible-xs-block text-center inner-div-live-area">Live Area<br>.col-xs-3</span> <span class="visible-sm-block text-center inner-div-live-area">Live Area<br>.col-sm-3</span> <span class="visible-md-block text-center inner-div-live-area">Live Area<br>.col-md-3</span> <span class="visible-lg-block text-center inner-div-live-area">Live Area<br>.col-lg-3</span></div></div><div class="row top-offset-20"><div class="well well-white"><div class=media><div class=media-left><div class=outer-div-column-area-square-div></div></div><div class=media-body><h4 class=media-heading>Columns<a class=anchorjs-link href=#media-heading><span class=anchorjs-icon></span></a></h4>Inside each column is 15px of padding placed on the left and right <i><strong>( See the light gray shaded area )</strong></i>. This padding pushes the live area in by a total of 30px per column. The "Gutter" is created by the sum of the padding between two adjacent columns.</div></div><div class=media><div class=media-left><div class=inner-div-live-area-square-div></div></div><div class=media-body><h4 class=media-heading>Inside Live Area for a Column<a class=anchorjs-link href=#media-heading><span class=anchorjs-icon></span></a></h4>The live content area for each column is indicated by the light yellow shaded area with red dotted lines.</div></div></div></div><hr></div></section>');
    $templateCache.put('components/icons/demo-icons.html', '<section ng-controller=iconsCtrl id=icons-html-example><div class=container><h2>Icons Demo</h2><div class=row><div class="col-xs-12 bottom-offset-20 top-offset-20"><p><strong>Dev guidance:</strong> The following icons are specific to Dell Brand Standards. Please use the following icon class names in place of native Bootstrap icon class names.</p><p><strong>Color guidance:</strong> All of the icons below can change to the following colors by adding these class modifiers <code>.text-blue</code>, <code>.text-dark-blue</code>, <code>.text-purple</code>, <code>.text-berry</code>, <code>.text-red</code>, <code>.text-red-dark</code>, <code>.text-gray-medium</code>, <code>.text-gray-dark</code>, <code>.text-orange</code>, <code>.text-green</code>, or <code>.text-white</code>. For example: <code>class="icon-ui-arrowleft text-blue"</code> change the modifier color after the <code>.text-*</code>.</p></div></div><div class=row><div class="col-xs-12 bottom-offset-20 top-offset-20"><h3 class=top-offset-20>UI icons</h3><ul class=icons-gallery-list><li><i class=icon-ui-arrowleft aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-arrowleft</span></li><li><i class=icon-ui-arrowright aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-arrowright</span></li><li><i class=icon-ui-close aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-close</span></li><li><i class=icon-ui-closecircle aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-closecircle</span></li><li><i class=icon-ui-collapse aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-collapse</span></li><li><i class=icon-ui-dell aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-dell</span></li><li><i class=icon-ui-expand aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-expand</span></li><li><i class=icon-ui-grid-view aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-grid-view</span></li><li><i class=icon-ui-list-view aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-list-view</span></li><li><i class=icon-ui-menucollapsed aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-menucollapsed</span></li><li><i class=icon-ui-minus aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-minus</span></li><li><i class=icon-ui-pause aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-pause</span></li><li><i class=icon-ui-play aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-play</span></li><li><i class=icon-ui-plus aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-plus</span></li><li><i class=icon-ui-triangledown aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-triangledown</span></li><li><i class=icon-ui-triangleleft aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-triangleleft</span></li><li><i class=icon-ui-triangleright aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-triangleright</span></li><li><i class=icon-ui-triangleup aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-triangleup</span></li><li><i class=icon-ui-loading aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-loading</span></li><li><i class=icon-ui-handle aria-hidden=true></i> <span class=icons-gallery-class>icon-ui-handle</span></li></ul></div></div><hr><div class=row><div class="col-xs-12 bottom-offset-20 top-offset-20"><h3>Small icons</h3><p>The small icons have less detail and are intended to be used at the default font size of 16px. Please use the small icons for task based communications. For crisper small icons use the following sizes: 16px, 28px and 42px.</p><ul class=icons-gallery-list><li><i class="icon-small-360-hinge text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-360-hinge</span></li><li><i class="icon-small-add text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-add</span></li><li><i class="icon-small-alertcomplete text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-alertcomplete</span></li><li><i class="icon-small-alerterror text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-alerterror</span></li><li><i class="icon-small-alertinfo text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-alertinfo</span></li><li><i class="icon-small-alertnotice text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-alertnotice</span></li><li><i class="icon-small-audiocard text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-audiocard</span></li><li><i class="icon-small-audiospeaker text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-audiospeaker</span></li><li><i class="icon-small-award text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-award</span></li><li><i class="icon-small-battery text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-battery</span></li><li><i class="icon-small-bell text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-bell</span></li><li><i class="icon-small-cables text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-cables</span></li><li><i class="icon-small-calculator text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-calculator</span></li><li><i class="icon-small-calendar text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-calendar</span></li><li><i class="icon-small-carryingcase text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-carryingcase</span></li><li><i class="icon-small-cart text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-cart</span></li><li><i class="icon-small-chat text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-chat</span></li><li><i class="icon-small-checkmark text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-checkmark</span></li><li><i class="icon-small-chipset text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-chipset</span></li><li><i class="icon-small-clock text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-clock</span></li><li><i class="icon-small-cloud text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-cloud</span></li><li><i class="icon-small-color text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-color</span></li><li><i class="icon-small-computergeneric text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-computergeneric</span></li><li><i class="icon-small-contact text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-contact</span></li><li><i class="icon-small-copy text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-copy</span></li><li><i class="icon-small-data text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-data</span></li><li><i class="icon-small-deals text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-deals</span></li><li><i class="icon-small-detachable text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-detachable</span></li><li><i class="icon-small-diagnostic text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-diagnostic</span></li><li><i class="icon-small-dimensionsweight text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-dimensionsweight</span></li><li><i class="icon-small-display text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-display</span></li><li><i class="icon-small-download text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-download</span></li><li><i class="icon-small-drivers text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-drivers</span></li><li><i class="icon-small-edit text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-edit</span></li><li><i class="icon-small-employee text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-employee</span></li><li><i class="icon-small-energyefficient text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-energyefficient</span></li><li><i class="icon-small-enterprise text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-enterprise</span></li><li><i class="icon-small-e-value text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-e-value</span></li><li><i class="icon-small-gift-card text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-gift-card</span></li><li><i class="icon-small-globe text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-globe</span></li><li><i class="icon-small-graphics-card text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-graphics-card</span></li><li><i class="icon-small-harddrive text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-harddrive</span></li><li><i class="icon-small-help text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-help</span></li><li><i class="icon-small-house text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-house</span></li><li><i class="icon-small-infrastructure text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-infrastructure</span></li><li><i class="icon-small-inktoner text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-inktoner</span></li><li><i class="icon-small-keyboard text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-keyboard</span></li><li><i class="icon-small-lightbulb text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-lightbulb</span></li><li><i class="icon-small-location text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-location</span></li><li><i class="icon-small-magnifying-glass text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-magnifying-glass</span></li><li><i class="icon-small-mail text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-mail</span></li><li><i class="icon-small-memory text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-memory</span></li><li><i class="icon-small-memorycardreader text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-memorycardreader</span></li><li><i class="icon-small-missingimage text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-missingimage</span></li><li><i class="icon-small-mobile text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-mobile</span></li><li><i class="icon-small-mouse text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-mouse</span></li><li><i class="icon-small-music text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-music</span></li><li><i class="icon-small-network text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-network</span></li><li><i class="icon-small-notebook text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-notebook</span></li><li><i class="icon-small-operatingsystem text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-operatingsystem</span></li><li><i class="icon-small-opticaldrive text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-opticaldrive</span></li><li><i class="icon-small-package text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-package</span></li><li><i class="icon-small-partners text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-partners</span></li><li><i class="icon-small-performance text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-performance</span></li><li><i class="icon-small-phone text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-phone</span></li><li><i class="icon-small-photos text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-photos</span></li><li><i class="icon-small-ports text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-ports</span></li><li><i class="icon-small-powersupply text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-powersupply</span></li><li><i class="icon-small-printer text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-printer</span></li><li><i class="icon-small-processor text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-processor</span></li><li><i class="icon-small-projector text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-projector</span></li><li><i class="icon-small-protection text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-protection</span></li><li><i class="icon-small-recycle text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-recycle</span></li><li><i class="icon-small-refresh text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-refresh</span></li><li><i class="icon-small-rss text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-rss</span></li><li><i class="icon-small-save text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-save</span></li><li><i class="icon-small-scale-out text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-scale-out</span></li><li><i class="icon-small-searchleft text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-searchleft</span></li><li><i class="icon-small-secure text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-secure</span></li><li><i class="icon-small-securesoftware text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-securesoftware</span></li><li><i class="icon-small-server text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-server</span></li><li><i class="icon-small-serverrack text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-serverrack</span></li><li><i class="icon-small-share text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-share</span></li><li><i class="icon-small-shipping text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-shipping</span></li><li><i class="icon-small-socialnetworking text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-socialnetworking</span></li><li><i class="icon-small-software text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-software</span></li><li><i class="icon-small-solutions text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-solutions</span></li><li><i class="icon-small-speakers text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-speakers</span></li><li><i class="icon-small-star text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-star</span></li><li><i class="icon-small-storage text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-storage</span></li><li><i class="icon-small-support text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-support</span></li><li><i class="icon-small-surgeprotection text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-surgeprotection</span></li><li><i class="icon-small-tablet text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-tablet</span></li><li><i class="icon-small-thinclient text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-thinclient</span></li><li><i class="icon-small-touch text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-touch</span></li><li><i class="icon-small-touch-pad text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-touch-pad</span></li><li><i class="icon-small-towergeneric text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-towergeneric</span></li><li><i class="icon-small-trash text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-trash</span></li><li><i class="icon-small-tv text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-tv</span></li><li><i class="icon-small-useraccount text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-useraccount</span></li><li><i class="icon-small-video text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-video</span></li><li><i class="icon-small-videocard text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-videocard</span></li><li><i class="icon-small-virtualization text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-virtualization</span></li><li><i class="icon-small-warranty text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-warranty</span></li><li><i class="icon-small-webcam text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-webcam</span></li><li><i class="icon-small-whitepaper text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-whitepaper</span></li><li><i class="icon-small-wireless text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-wireless</span></li><li><i class="icon-small-zoomin text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-zoomin</span></li><li><i class="icon-small-zoomout text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-small-zoomout</span></li></ul></div></div><hr><div class=row><div class="col-xs-12 bottom-offset-20 top-offset-20"><h3>Large icons</h3><p>The large icons have more detail then the small icons. These should be used to support content only. For crisper large icons use the following sizes: 36px, 72px and 108px.</p><ul class="icons-gallery-list large"><li><i class="icon-large-360-hinge text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-360-hinge</span></li><li><i class="icon-large-add text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-add</span></li><li><i class="icon-large-alertcomplete text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-alertcomplete</span></li><li><i class="icon-large-alerterror text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-alerterror</span></li><li><i class="icon-large-alertinfo text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-alertinfo</span></li><li><i class="icon-large-alertnotice text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-alertnotice</span></li><li><i class="icon-large-audicard text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-audicard</span></li><li><i class="icon-large-audiospeaker text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-audiospeaker</span></li><li><i class="icon-large-award text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-award</span></li><li><i class="icon-large-battery text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-battery</span></li><li><i class="icon-large-bell text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-bell</span></li><li><i class="icon-large-cables text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-cables</span></li><li><i class="icon-large-calculator text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-calculator</span></li><li><i class="icon-large-calendar text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-calendar</span></li><li><i class="icon-large-carryingcase text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-carryingcase</span></li><li><i class="icon-large-cart text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-cart</span></li><li><i class="icon-large-chat text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-chat</span></li><li><i class="icon-large-checkmark text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-checkmark</span></li><li><i class="icon-large-chipset text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-chipset</span></li><li><i class="icon-large-clock text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-clock</span></li><li><i class="icon-large-cloud text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-cloud</span></li><li><i class="icon-large-color text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-color</span></li><li><i class="icon-large-computergeneric text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-computergeneric</span></li><li><i class="icon-large-contact text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-contact</span></li><li><i class="icon-large-copy text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-copy</span></li><li><i class="icon-large-data text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-data</span></li><li><i class="icon-large-deals text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-deals</span></li><li><i class="icon-large-detachable text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-detachable</span></li><li><i class="icon-large-diagnostic text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-diagnostic</span></li><li><i class="icon-large-dimensionsweight text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-dimensionsweight</span></li><li><i class="icon-large-display text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-display</span></li><li><i class="icon-large-download text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-download</span></li><li><i class="icon-large-drivers text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-drivers</span></li><li><i class="icon-large-edit text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-edit</span></li><li><i class="icon-large-employee text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-employee</span></li><li><i class="icon-large-energyefficient text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-energyefficient</span></li><li><i class="icon-large-enterprise text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-enterprise</span></li><li><i class="icon-large-e-value text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-e-value</span></li><li><i class="icon-large-giftcard text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-giftcard</span></li><li><i class="icon-large-globe text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-globe</span></li><li><i class="icon-large-graphics-card text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-graphics-card</span></li><li><i class="icon-large-harddrive text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-harddrive</span></li><li><i class="icon-large-help text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-help</span></li><li><i class="icon-large-house text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-house</span></li><li><i class="icon-large-infrastructure text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-infrastructure</span></li><li><i class="icon-large-inktoner text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-inktoner</span></li><li><i class="icon-large-keyboard text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-keyboard</span></li><li><i class="icon-large-lightbulb text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-lightbulb</span></li><li><i class="icon-large-location text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-location</span></li><li><i class="icon-large-magnifying-glass text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-magnifying-glass</span></li><li><i class="icon-large-mail text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-mail</span></li><li><i class="icon-large-memory text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-memory</span></li><li><i class="icon-large-memorycarreader text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-memorycarreader</span></li><li><i class="icon-large-missingimage text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-missingimage</span></li><li><i class="icon-large-mobile text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-mobile</span></li><li><i class="icon-large-mouse text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-mouse</span></li><li><i class="icon-large-music text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-music</span></li><li><i class="icon-large-network text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-network</span></li><li><i class="icon-large-notebook text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-notebook</span></li><li><i class="icon-large-operatingsystem text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-operatingsystem</span></li><li><i class="icon-large-opticaldrive text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-opticaldrive</span></li><li><i class="icon-large-package text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-package</span></li><li><i class="icon-large-partners text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-partners</span></li><li><i class="icon-large-performance text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-performance</span></li><li><i class="icon-large-phone text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-phone</span></li><li><i class="icon-large-photos text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-photos</span></li><li><i class="icon-large-ports text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-ports</span></li><li><i class="icon-large-powersupply text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-powersupply</span></li><li><i class="icon-large-printer text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-printer</span></li><li><i class="icon-large-processor text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-processor</span></li><li><i class="icon-large-projector text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-projector</span></li><li><i class="icon-large-protection text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-protection</span></li><li><i class="icon-large-recycle text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-recycle</span></li><li><i class="icon-large-refresh text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-refresh</span></li><li><i class="icon-large-rss text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-rss</span></li><li><i class="icon-large-save text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-save</span></li><li><i class="icon-large-scale-out text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-scale-out</span></li><li><i class="icon-large-searchleft text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-searchleft</span></li><li><i class="icon-large-secure text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-secure</span></li><li><i class="icon-large-securesoftware text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-securesoftware</span></li><li><i class="icon-large-server text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-server</span></li><li><i class="icon-large-serverrack text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-serverrack</span></li><li><i class="icon-large-share text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-share</span></li><li><i class="icon-large-shipping text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-shipping</span></li><li><i class="icon-large-socialnetworking text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-socialnetworking</span></li><li><i class="icon-large-software text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-software</span></li><li><i class="icon-large-solutions text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-solutions</span></li><li><i class="icon-large-speakers text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-speakers</span></li><li><i class="icon-large-star text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-star</span></li><li><i class="icon-large-storage text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-storage</span></li><li><i class="icon-large-support text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-support</span></li><li><i class="icon-large-surgeprotection text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-surgeprotection</span></li><li><i class="icon-large-tablet text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-tablet</span></li><li><i class="icon-large-thinclient text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-thinclient</span></li><li><i class="icon-large-touch text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-touch</span></li><li><i class="icon-large-touchpad text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-touchpad</span></li><li><i class="icon-large-towergeneric text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-towergeneric</span></li><li><i class="icon-large-trash text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-trash</span></li><li><i class="icon-large-tv text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-tv</span></li><li><i class="icon-large-useraccount text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-useraccount</span></li><li><i class="icon-large-video text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-video</span></li><li><i class="icon-large-videocard text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-videocard</span></li><li><i class="icon-large-virtualization text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-virtualization</span></li><li><i class="icon-large-warranty text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-warranty</span></li><li><i class="icon-large-webcam text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-webcam</span></li><li><i class="icon-large-whitepaper text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-whitepaper</span></li><li><i class="icon-large-wireless text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-wireless</span></li><li><i class="icon-large-zoomin text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-zoomin</span></li><li><i class="icon-large-zoomout text-blue" aria-hidden=true></i> <span class=icons-gallery-class>icon-large-zoomout</span></li></ul></div></div><hr><div class=row><div class="col-xs-12 bottom-offset-20 top-offset-20"><h3>Ratings icons</h3><p>The rating icons have been broken down to 10% increments. These small changes are demonstrated on the last star of the examples below</p><ul class=icons-gallery-list><li><i class=icon-small-favorite-100 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-100</span></li><li><i class=icon-small-favorite-90 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-90</span></li><li><i class=icon-small-favorite-80 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-80</span></li><li><i class=icon-small-favorite-70 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-70</span></li><li><i class=icon-small-favorite-60 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-60</span></li><li><i class=icon-small-favorite-50 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-50</span></li><li><i class=icon-small-favorite-40 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-40</span></li><li><i class=icon-small-favorite-30 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-30</span></li><li><i class=icon-small-favorite-20 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-20</span></li><li><i class=icon-small-favorite-10 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-10</span></li><li><i class=icon-small-favorite-0 aria-hidden=true></i> <span class=icons-gallery-class>icon-small-favorite-0</span></li></ul></div></div></div></section>');
    $templateCache.put('components/icons/demo-play-icons.html', '<section ng-controller=iconsPLayDemoCtrl id=icons-play-demo><div class=container><h2>Icons Builder</h2><div></div></div></section>');
    $templateCache.put('components/labels-and-badges/demo-labels-and-badges.html', '<section ng-controller=labelsAndBadgesCtrl id=labels-and-badges-html-example><div class=container><h2 class=bottom-offset-30>Labels-And-Badges Demo</h2><h4>Standard label</h4><div class=row><div class="col-xs-6 col-sm-5"><div class=bottom-offset-30 id=help-label><span class="label label-info">Help</span></div></div></div><h4>Standards badges</h4><div class=row><div class="col-xs-6 col-sm-5"><ul class="nav nav-pills nav-stacked"><li class=active><a href=javascript:;><span class="badge pull-right">42</span> Home</a></li><li><a href=javascript:;>Profile</a></li><li><a href=javascript:;><span class="badge pull-right">3</span> Messages</a></li></ul></div></div></div></section>');
    $templateCache.put('components/labels-and-badges/demo-play-labels-and-badges.html', '<section ng-controller=labelsAndBadgesPLayDemoCtrl id=labels-and-badges-play-demo><div class=container><h2>Labels-And-Badges Builder</h2><div></div></div></section>');
    $templateCache.put('components/lists/demo-lists.html', '<section ng-controller=listsCtrl id=lists-html-example><div class=container><h2 class=bottom-offset-30>Lists Demo</h2><h3 class=bottom-offset-20>Horizontal inline link collector</h3><div class=row><div class="col-xs-12 col-sm-9 clearfix"><div class=inline-content-links><ul class="list-unstyled list-inline content-links"><li><a href=javascript:; class=btn-link>Security Online Training</a></li><li><a href=javascript:; class=btn-link>Security Webcasts</a></li><li><a href=javascript:; class=btn-link>Contact an Expert</a></li><li><a href=javascript:; class=btn-link>Additional Link</a></li></ul></div></div></div><hr class="bottom-offset-30"><h3 class=bottom-offset-20>Unordered lists</h3><ul><li>Lorem ipsum dolor sit amet</li><li>Consectetur adipiscing elit</li><li>Integer molestie lorem at massa</li><li>Facilisis in pretium nisl aliquet</li><li>Nulla volutpat aliquam velit<ul><li>Phasellus iaculis neque</li><li>Purus sodales ultricies</li><li>Vestibulum laoreet porttitor sem</li><li>Ac tristique libero volutpat at</li></ul></li><li>Faucibus porta lacus fringilla vel</li><li>Aenean sit amet erat nunc</li><li>Eget porttitor lorem</li></ul><hr class="bottom-offset-30"><h3 class=bottom-offset-20>Ordered</h3><ol><li>Lorem ipsum dolor sit amet</li><li>Consectetur adipiscing elit</li><li>Integer molestie lorem at massa</li><li>Facilisis in pretium nisl aliquet</li><li>Nulla volutpat aliquam velit</li><li>Faucibus porta lacus fringilla vel</li><li>Aenean sit amet erat nunc</li><li>Eget porttitor lorem</li></ol><hr class="bottom-offset-30"><h3 class=bottom-offset-20>Unstyled</h3><ul class=list-unstyled><li>Lorem ipsum dolor sit amet</li><li>Consectetur adipiscing elit</li><li>Integer molestie lorem at massa</li><li>Facilisis in pretium nisl aliquet</li><li>Nulla volutpat aliquam velit<ul><li>Phasellus iaculis neque</li><li>Purus sodales ultricies</li><li>Vestibulum laoreet porttitor sem</li><li>Ac tristique libero volutpat at</li></ul></li><li>Faucibus porta lacus fringilla vel</li><li>Aenean sit amet erat nunc</li><li>Eget porttitor lorem</li></ul><hr class="bottom-offset-30"><h3 class=bottom-offset-20>Inline</h3><ul class=list-inline><li>Lorem ipsum</li><li>Phasellus iaculis</li><li>Nulla volutpat</li><li>Happy</li><li>Trees</li></ul><hr class="bottom-offset-30"><h3 class=bottom-offset-20>Description</h3><dl><dt>Description lists</dt><dd>A description list is perfect for defining terms.</dd><dt>Euismod</dt><dd>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.</dd><dd>Donec id elit non mi porta gravida at eget metus.</dd><dt>Malesuada porta</dt><dd>Etiam porta sem malesuada magna mollis euismod.</dd></dl><hr class="bottom-offset-30"><h3 class=bottom-offset-20>Horizontal description</h3><dl class=dl-horizontal><dt>Description lists</dt><dd>A description list is perfect for defining terms.</dd><dt>Euismod</dt><dd>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.</dd><dd>Donec id elit non mi porta gravida at eget metus.</dd><dt>Malesuada porta</dt><dd>Etiam porta sem malesuada magna mollis euismod.</dd><dt>Felis euismod semper eget lacinia</dt><dd>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</dd></dl></div></section>');
    $templateCache.put('components/lists/demo-play-lists.html', '<section ng-controller=listsPLayDemoCtrl id=lists-play-demo><div class=container><h2>Lists Builder</h2><div></div></div></section>');
    $templateCache.put('components/masthead/demo-masthead.html', '<section ng-controller=mastheadCtrl id=masthead-html-example><div class=container><h2>Masthead Demo</h2><div class=row><div class=col-sm-9><div equalizer=group class="equalize well well-white text-gray-medium well-white-stroke"><div class="center-component component-code" id=navigation-masthead-simplified-masthead><header class=masthead><div class=navbar><div class=container><div class=navbar-header><a href=# class=navbar-brand><i class=icon-ui-dell></i></a></div></div></div><div class=masthead-shadow></div></header></div><div class=row><div class=col-xs-12><hr class="rule-break hr-gray-light"><h5 class=fragment-title>Simplified Masthead</h5><div class=description>Used when we want to keep users focused on the task at hand and limit the likelihood they will accidentally navigate away. Used predominately in cart and checkout and workflow pages.</div></div></div></div></div><div class=col-sm-3><div class=well>Sidebar</div></div></div></div></section>');
    $templateCache.put('components/masthead/demo-play-masthead.html', '<section ng-controller=mastheadPLayDemoCtrl id=masthead-play-demo><div class=container><h2>Masthead Builder</h2><div></div></div></section>');
    $templateCache.put('components/mini-buttons/demo-mini-buttons.html', '<section ng-controller=miniButtonsCtrl id=mini-buttons-html-example><div class=container><h2 class=bottom-offset-30>Mini-Buttons Demo</h2><div class=bottom-offset-30><h4>Primary Non-Purchase</h4><a class="btn btn-primary btn-xs" href=javascript:;>Primary</a></div><div class=bottom-offset-30><h4>Primary Non-Purchase disabled</h4><a class="btn btn-primary btn-xs disabled" href=javascript:;>Primary</a></div><hr><div class=bottom-offset-30><h4>Primary Purchase</h4><a class="btn btn-success btn-xs" href=javascript:;>Purchase</a></div><div class=bottom-offset-30><h4>Primary Purchase disabled</h4><a class="btn btn-success btn-xs disabled" href=javascript:;>Purchase</a></div><hr><div class=bottom-offset-30><h4>Secondary or General Use</h4><a class="btn btn-default btn-xs" href=javascript:;>General Use</a></div><div class=bottom-offset-30><h4>Secondary or General Use disabled</h4><a class="btn btn-default btn-xs disabled" href=javascript:;>General Use</a></div><hr></div></section>');
    $templateCache.put('components/mini-buttons/demo-play-mini-buttons.html', '<section ng-controller=miniButtonsPLayDemoCtrl id=mini-buttons-play-demo><div class=container><h2>Mini-Buttons Builder</h2><div></div></div></section>');
    $templateCache.put('components/modals/demo-modals.html', '<section ng-controller=modalsCtrl id=modals-html-example><div class=container><h2 class=bottom-offset-30>Modals Demo</h2><button class="btn btn-default" data-toggle=modal data-target=#modal-example data-backdrop=static data-keyboard=false>Launch demo modal</button><div aria-labelledby=modal-example><div class="modal fade" role=modal id=modal-example><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Modal title</h3></div><div class=modal-body><p>Placeholder for body text</p></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button> <button type=button class="btn btn-primary">Save changes</button></div></div></div></div></div><blockquote class="blockquote-red top-offset-40"><code>data-backdrop="static"</code> <code>data-keyboard="false"</code> are used to prevent a click on the backdrop or esc key to dismiss the modal. Remove these if you want these to be able to dismiss the modal.</blockquote></div></section>');
    $templateCache.put('components/modals/demo-play-modals.html', '<section ng-controller=modalsPLayDemoCtrl id=modals-play-demo><div class=container><h2>Modals Builder</h2><div></div></div></section>');
    $templateCache.put('components/offsets/demo-offsets.html', '<section ng-controller=offsetsCtrl id=offsets-html-example><div class=container><h2>Offsets Demo</h2><div class="bottom-offset-30 row"><ul class=list-unstyled><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>0px</p><hr class=hr-offset-demo><div id=top-offset-0><div class="well well-blue top-offset-0">class="top-offset-0"</div></div></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>5px</p><hr class=hr-offset-demo><div id=top-offset-5><div class="well well-blue top-offset-5">class="top-offset-5"</div></div></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>10px</p><hr class=hr-offset-demo><div id=top-offset-10><div class="well well-blue top-offset-10">class="top-offset-10"</div></div></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>20px</p><hr class=hr-offset-demo><div id=top-offset-20><div class="well well-blue top-offset-20">class="top-offset-20"</div></div></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>30px</p><hr class=hr-offset-demo><div id=top-offset-30><div class="well well-blue top-offset-30">class="top-offset-30"</div></div></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>40px</p><hr class=hr-offset-demo><div id=top-offset-40><div class="well well-blue top-offset-40">class="top-offset-40"</div></div></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>60px</p><hr class=hr-offset-demo><div id=top-offset-60><div class="well well-blue top-offset-60">class="top-offset-60"</div></div></div></li></ul></div><hr><div class=bottom-offset-10><h3>Bottom offsets <small>(by pixel modifier)</small></h3></div><div class="bottom-offset-30 row"><ul class=list-unstyled><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>0px</p><div id=bottom-offset-0><div class="well well-green bottom-offset-0">class="bottom-offset-0"</div></div><hr class=hr-offset-demo></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>5px</p><div id=bottom-offset-5><div class="well well-green bottom-offset-5">class="bottom-offset-5"</div></div><hr class=hr-offset-demo></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>10px</p><div id=bottom-offset-10><div class="well well-green bottom-offset-10">class="bottom-offset-10"</div></div><hr class=hr-offset-demo></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>20px</p><div id=bottom-offset-20><div class="well well-green bottom-offset-20">class="bottom-offset-20"</div></div><hr class=hr-offset-demo></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>30px</p><div id=bottom-offset-30><div class="well well-green bottom-offset-30">class="bottom-offset-30"</div></div><hr class=hr-offset-demo></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>40px</p><div id=bottom-offset-40><div class="well well-green bottom-offset-40">class="bottom-offset-40"</div></div><hr class=hr-offset-demo></div></li><li class="col-xs-12 col-sm-3"><div class="well well-gray-light offset-example"><p>60px</p><div id=bottom-offset-60><div class="well well-green bottom-offset-60">class="bottom-offset-60"</div></div><hr class=hr-offset-demo></div></li></ul></div></div></section>');
    $templateCache.put('components/offsets/demo-play-offsets.html', '<section ng-controller=offsetsPLayDemoCtrl id=offsets-play-demo><div class=container><h2>Offsets Builder</h2><div></div></div></section>');
    $templateCache.put('components/pagers/demo-pagers.html', '<section ng-controller=pagersCtrl id=pagers-html-example><div class=container><h2>Pagers Demo</h2><div><div class=bottom-offset-60><h3 class=bottom-offset-40>Standard pagers</h3><div class=bottom-offset-40><ul class=pager><li><a href=javascript:;><span aria-hidden=true class=icon-ui-arrowleft></span></a></li><li><a href=javascript:;><span aria-hidden=true class=icon-ui-arrowright></span></a></li></ul></div><h3>Pagers with text</h3><div class=bottom-offset-40><ul class=pager><li><a href=javascript:;><span aria-hidden=true class=icon-ui-arrowleft></span>&nbsp;Previous</a></li><li><a href=javascript:;>Next&nbsp;<span aria-hidden=true class=icon-ui-arrowright></span></a></li></ul></div></div></div></div></section>');
    $templateCache.put('components/pagers/demo-play-pagers.html', '<section ng-controller=pagersPLayDemoCtrl id=pagers-play-demo><div class=container><h2>Pagers Builder</h2><div></div></div></section>');
    $templateCache.put('components/pagination/demo-pagination.html', '<section ng-controller=paginationCtrl id=pagination-html-example><div class=container><h2>Pagination Demo</h2><div><h3 class="top-offset-40 bottom-offset-20">Centered pagination</h3><div class="pagination center-block"><ul class=pager><li><a href=# data-action=previous><span aria-hidden=true class=icon-ui-arrowleft></span>&nbsp;Previous</a></li><li><span class="pager-span hidden-xs">page</span><input class=pagination-input type=text readonly data-max-page="40"><span class="pager-span hidden-xs">of 40</span></li><li><a href=# data-action=next>Next&nbsp;<span aria-hidden=true class=icon-ui-arrowright></span></a></li></ul></div><h3 class="top-offset-40 bottom-offset-20">Justified pagination</h3><div class=row><div class="pagination col-xs-12"><ul class="pager bottom-offset-20"><li class=previous><a href=# data-action=previous><span aria-hidden=true class=icon-ui-arrowleft></span>&nbsp;Previous</a></li><li><span class="pager-span hidden-xs">page</span><input class=pagination-input type=text readonly data-max-page="40"><span class="pager-span hidden-xs">of 40</span></li><li class=next><a href=# data-action=next>Next&nbsp;<span aria-hidden=true class=icon-ui-arrowright></span></a></li></ul></div></div><h3 class="top-offset-40 bottom-offset-20">Centered pagination with filters</h3><div class=row><div class="pagination col-xs-12 col-md-8"><ul class="pager bottom-offset-10"><li class="previous pull-left"><a href=# data-action=previous><span aria-hidden=true class=icon-ui-arrowleft></span>&nbsp;Previous</a></li><li><span class="pager-span hidden-xs">page</span><input class=pagination-input type=text readonly data-max-page="40"><span class="pager-span hidden-xs">of 40</span></li><li class="next pull-right"><a href=# data-action=next>Next&nbsp;<span aria-hidden=true class=icon-ui-arrowright></span></a></li></ul></div><div class="col-xs-12 col-md-4 bottom-offset-10"><select class=form-control><option value="Items per page">Items per page</option><option value="20 per page">20 per page</option><option value="30 per page">30 per page</option><option value="40 per page">40 per page</option></select></div></div></div><div class="top-offset-40 bottom-offset-5"><h3 class=bottom-offset-40>Tap-to-Load</h3></div><div class=bottom-offset-60><ul id=load-more-example class=load-more data-load-more-button-text="Load more results" data-load-more-increment=5><li class="well well-blue"><p class=text-white>This is data set example <strong>A</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>B</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>C</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>D</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>E</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>F</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>G</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>H</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>I</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>J</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>K</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>L</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>M</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>N</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>O</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>P</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>Q</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>R</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>S</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>T</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>U</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>V</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>W</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>X</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>Y</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>Z</strong></p></li></ul></div><div id=child-loading><div class=block-grid-item><div class="top-offset-40 bottom-offset-5"><h3 class=bottom-offset-40>Lazy Load (inside a scrollable element)</h3></div><div class=bottom-offset-60><ul id=enclosed-lazy-load-example class="load-more load-more-lazy" data-scroll-target="#child-loading .block-grid-item"><li class="well well-blue"><p class=text-white>This is data set example <strong>A</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>B</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>C</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>D</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>E</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>F</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>G</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>H</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>I</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>J</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>K</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>L</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>M</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>N</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>O</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>P</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>Q</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>R</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>S</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>T</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>U</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>V</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>W</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>X</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>Y</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>Z</strong></p></li></ul></div></div></div><div class="top-offset-40 bottom-offset-5"><h3 class=bottom-offset-40>Lazy Load (when bottom of the page is reached)</h3></div><div class=bottom-offset-60><ul id=lazy-load-example class="load-more load-more-lazy" data-load-more-increment=5><li class="well well-blue"><p class=text-white>This is data set example <strong>A</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>B</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>C</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>D</strong></p></li><li class="well well-blue"><p class=text-white>This is data set example <strong>E</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>F</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>G</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>H</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>I</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>J</strong></p></li><li class="well well-berry"><p class=text-white>This is data set example <strong>K</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>L</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>M</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>N</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>O</strong></p></li><li class="well well-orange"><p class=text-white>This is data set example <strong>P</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>Q</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>R</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>S</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>T</strong></p></li><li class="well well-light-green"><p class=text-white>This is data set example <strong>U</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>V</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>W</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>X</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>Y</strong></p></li><li class="well well-purple"><p class=text-white>This is data set example <strong>Z</strong></p></li></ul></div></div></section>');
    $templateCache.put('components/pagination/demo-play-pagination.html', '<section ng-controller=paginationPLayDemoCtrl id=pagination-play-demo><div class=container><h2>Pagination Builder</h2><div></div></div></section>');
    $templateCache.put('components/popovers/demo-play-popovers.html', '<section ng-controller=popoversPLayDemoCtrl id=popovers-play-demo><div class=container><h2>Popovers Builder</h2><div></div></div></section>');
    $templateCache.put('components/popovers/demo-popovers.html', '<section ng-controller=popoversCtrl id=popovers-html-example><div class=container><h2>Popovers Demo</h2><div><div class=bottom-offset-60><ul class="unstyled list-inline"><li class=top-offset-20 aria-describedby=popover-top><a tabindex=0 role=popover id=popover-top data-trigger=show class="btn btn-default" data-html=true data-toggle=popover data-placement=top data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus." data-original-title="Popover on top <button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'>\xd7</button>">Popover on top</a></li><li class=top-offset-20 aria-describedby=popover-right><a tabindex=1 role=popover id=popover-right data-trigger=focus class="btn btn-default" data-html=true data-toggle=popover data-placement=right data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus." data-original-title="Popover on right <button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'>\xd7</button>">Popover on right</a></li><li class=top-offset-20 aria-describedby=popover-bottom><a tabindex=2 role=tooltip id=popover-bottom data-trigger=focus class="btn btn-default" data-html=true data-toggle=popover data-placement=bottom data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus." data-original-title="Popover on bottom <button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'>\xd7</button>">Popover on bottom</a></li><li class=top-offset-20 aria-describedby=popover-left><a tabindex=3 role=popover id=popover-left data-trigger=focus class="btn btn-default" data-html=true data-toggle=popover data-placement=left data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus." data-original-title="Popover on left <button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'>\xd7</button>">Popover on left</a></li></ul></div></div><div class="example-help-popover bottom-offset-40"><p aria-describedby=popover-with-help-icon>Example of inline help icon with popover <a tabindex=4 role=popover id=popover-with-help-icon data-trigger=show data-html=true data-toggle=popover data-placement=right data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus." data-original-title="Popover on right <button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'>\xd7</button>"><i class=icon-small-alertinfo></i></a></p></div><div class=example-popover><div class="popover top"><div class=arrow></div><h3 class=popover-title>Popover top</h3><div class=popover-content><p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p></div></div><div class="popover right"><div class=arrow></div><h3 class=popover-title>Popover right</h3><div class=popover-content><p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p></div></div></div><div class="example-popover clearfix"><div class="popover left"><div class=arrow></div><h3 class=popover-title>Popover left</h3><div class=popover-content><p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p></div></div><div class="popover bottom"><div class=arrow></div><h3 class=popover-title>Popover bottom</h3><div class=popover-content><p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p></div></div></div></div></section>');
    $templateCache.put('components/product-stack/demo-guide-product-stack.html', '<section ng-controller=productStackGuideDemoCtrl id=product-stack-guide-demo><div class="container demo-guides"><h1>Product Stack</h1><hr class="shadow-separator bottom-offset-60"><div class=row><div class="col-lg-12 bottom-offset-30"><h2 class=bottom-offset-5>Standard Product Stack</h2><p>A Product Stack is a pattern that enables pages to display selected, at-a-glance details about a product or product bundle.</p></div><div class="col-xs-12 col-sm-4 col-md-3 bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec hidden-xs"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#product-stack-xs-single-offer><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=product-stack-xs-single-offer class="collapse popover-overflow"><div><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#special-single-offer-modal-xs data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=special-single-offer-modal-xs><div class="modal fade" role=modal id=special-single-offer-modal-xs><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=single-discount-xs-modal><a tabindex=0 role=button id=single-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                                 &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-stack-single-xs><a tabindex=0 role=button id=rewards-stack-single-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                                     &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                                     &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                     &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                           &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                           ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div></div><div class=hidden-xs><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#special-single-offer-modal data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=special-single-offer-modal><div class="modal fade" role=modal id=special-single-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-discount-desktop-single-offer><a tabindex=0 role=button id=popover-discount-desktop-single-offer data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                                 &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-single-offer><a tabindex=0 role=button id=rewards-single-offer data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                                     &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                                     &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                     &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                           &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                           ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div><div class="col-xs-12 col-sm-4 col-md-3 bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec hidden-xs"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#product-stack-xs><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=product-stack-xs class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#2-special-offer-modal data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=2-special-offer-modal><div class="modal fade" role=modal id=2-special-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-single-discount-xs-modal><a tabindex=0 role=button id=popover-single-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                             &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=popover-top-sinlge-xs><a tabindex=0 role=button id=popover-top-sinlge-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                                 &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                                 &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                    &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                    &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                    &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                 &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                       &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                       ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=hidden-xs><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#2-special-offer-modal-workflow data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=2-special-offer-modal-workflowl><div class="modal fade" role=modal id=2-special-offer-modal-workflow><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-discount-desktop><a tabindex=0 role=button id=popover-discount-desktop data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                                 &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=popover-top><a tabindex=0 role=button id=popover-top data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                                     &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                                     &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                     &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                           &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                           ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div><div class="col-xs-12 col-sm-4 col-md-3 bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec hidden-xs"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#product-stack-x-deals-offer><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=product-stack-x-deals-offer class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div><div class=special-offers><ul><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li></ul></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-single-discount-xs-modal-deals><a tabindex=0 role=button id=popover-single-discount-xs-modal-deals data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                                 &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-deals-xs><a tabindex=0 role=button id=rewards-deals-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                                     &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                                     &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                     &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                           &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                           ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=hidden-xs><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><ul><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li></ul></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-discount-desktop-deals><a tabindex=0 role=button id=popover-discount-desktop-deals data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                     &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                     &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                                     &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-popover-deals-stack><a tabindex=0 role=button id=rewards-popover-deals-stack data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                                         &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                                         &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                            &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                         &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                               &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                               ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><div class=row><div class="col-lg-12 bottom-offset-30"><h2 class=bottom-offset-5>Search Product Stack</h2><p>A horizontal version of the stack is used within search and this is the only place a horizontal stack appears.</p></div><div class="col-lg-12 bottom-offset-30"><div class=bottom-offset-60><div class="product-stack-search-wrapper hidden-xs"><div class=row><div class="col-xs-4 col-sm-3"><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div></div><div class="col-xs-8 col-sm-6"><div class=product-title-stack><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul></div><div class=tech-spec><div class=row><div class="col-xs-12 col-sm-6"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div></div><div class="col-xs-12 col-sm-6"><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div></div></div><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div></div><div class="col-xs-12 col-sm-3"><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-special-single-offer-modal data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=special-single-offer-modal><div class="modal fade" role=modal id=search-special-single-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-2-special-offer-modal data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=search-2-special-offer-modal><div class="modal fade" role=modal id=search-2-special-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-popover-discount-desktop><a tabindex=0 role=button id=search-popover-discount-desktop data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                             &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><div class="col-xs-12 col-sm-4 col-md-3 visible-xs-block bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#search-product-stack-xs-single-offer><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=search-product-stack-xs-single-offer class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-special-single-offer-modal-xs data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=search-special-single-offer-modal-xs><div class="modal fade" role=modal id=search-special-single-offer-modal-xs><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-single-discount-xs-modal><a tabindex=0 role=button id=search-single-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                     &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-search-stack-single-xs><a tabindex=0 role=button id=rewards-search-stack-single-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                         &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                         &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                            &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                         &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                               &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                               ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><hr></div><div class="col-lg-12 bottom-offset-30"><div class=bottom-offset-60><div class="product-stack-search-wrapper hidden-xs"><div class=row><div class="col-xs-4 col-sm-3"><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div></div><div class="col-xs-8 col-sm-6"><div class=product-title-stack><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul></div><div class=tech-spec><div class=row><div class="col-xs-12 col-sm-6"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div></div><div class="col-xs-12 col-sm-6"><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div></div></div><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div></div><div class="col-xs-12 col-sm-3"><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-special-2-offers-modal-workflow data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=search-special-2-offers-modal-workflow><div class="modal fade" role=modal id=search-special-2-offers-modal-workflow><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-popover-discount><a tabindex=0 role=button id=search-popover-discount data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                             &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><div class="col-xs-12 col-sm-4 col-md-3 visible-xs-block bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#search-product-stack-xs-2-offers><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=search-product-stack-xs-2-offers class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-2-offers-modal data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=search-2-offers-modal><div class="modal fade" role=modal id=search-2-offers-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-2-discount-xs-modal><a tabindex=0 role=button id=search-2-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                     &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-search-2-offer-xs><a tabindex=0 role=button id=rewards-search-2-offer-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                         &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                         &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                            &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                         &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                               &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                               ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div></div></div><hr class="shadow-separator bottom-offset-60"><div class=row><div class="col-lg-12 bottom-offset-30"><h2 class=bottom-offset-5>Product Stack Elements: Overview</h2><p>Using a common Dell application framework control, elements are combined together to create a product stack. All the elements are optional, except the product title which is required, and each element has unique rules and guidelines, which are laid out in detail below.</p></div><div class="col-xs-12 col-sm-4 col-md-3 bottom-offset-30"><div class=product-stack-wrapper><div class="compare outer-box"><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div><p></p></div><a tabindex=1 role=button id=compare data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Allows users to compare up to three products. At least 2 products must be selected before a user can compare.&lt;/p&gt; &lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Add To Compare &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><a tabindex=1 role=button id=stack-label data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;The Stack Label is used to highlight a unique product attribute based on logic that incorporates legal requirements, lifecycle needs, timed events, and marketing differentiation.&lt;/p&gt; &lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Stack Label &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><a tabindex=1 role=button id=ratings-substack data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;&lt;strong&gt;Asset Substack:&lt;/strong&gt; Provide users with visual images of the product and/or its options. Use the violator to only message a differentiating feature or offer on the page. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Product title:&lt;/strong&gt; The Product Name, allow for an optional display of product description, and provide a link to more product details (usually the PD page). &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Ratings Substack: &lt;/strong&gt;To provide customers with at-a-glance ratings for a given product to help customers during decision-making.&lt;/p&gt; &lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Asset, Title and Review &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class="tech-spec hidden-xs"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div><a tabindex=1 role=button id=tech-specs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provide a visual overview of the specs for a product and how it compares to other products. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt; &lt;p&gt;1) Maximum use of four specs. For desktop and laptops, the first spec is always processor and the OS is always the second spec.&lt;/p&gt;&lt;p&gt;2) The ratings scale of each spec will be manually determined by business.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Tech Specs &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class="outer-box visible-xs-block"><div class=tech-spec><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><a tabindex=1 role=button id=tech-specs-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provide a visual overview of the specs for a product and how it compares to other products. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt; &lt;p&gt;1) Maximum use of four specs. For desktop and laptops, the first spec is always processor and the OS is always the second spec.&lt;/p&gt;&lt;p&gt;2) The ratings scale of each spec will be manually determined by business.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Tech Specs &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#pStack-demo-xs-single-offer><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=pStack-demo-xs-single-offer class="collapse popover-overflow"><div><div class=outer-box><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><a tabindex=1 role=button id=product-differentiator-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provide a callout for a featured tech spec, such as touch-enabled or giant hard drive. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt; &lt;p&gt;1) Must always use icon.&lt;/p&gt;&lt;p&gt;2) Must use plain text.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Featured Spec &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><a tabindex=1 role=button id=product-blurb-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provide a short marketing statement about the product. Note that with the addition of the Tech Specs field, the Blurb is no longer used for showcasing tech specs or product dimensions. &lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Product Blurb &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#pStack-demo-single-offer-modal-xs data-backdrop=static data-keyboard=false>1 Special offer</button></div><a tabindex=1 role=button id=special-offers-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Product Offers always link to further product details. They can be displayed in one of three variants. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single offer:&lt;/strong&gt; A single offer launches a modal where the user can read the offer and proceed from an action link.&lt;p&gt;&lt;strong&gt;Multiple offers:&lt;/strong&gt; Multiple Offers launch a workflow window process where each of the offer links continue to the specific product offer.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deals offer:&lt;/strong&gt; Deal offers are always listed as links and can only appear in deals product stacks&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Special Offer(s) &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div aria-labelledby=special-single-offer-modal-xs><div class="modal fade" role=modal id=pStack-demo-single-offer-modal-xs><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=outer-box><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=pStack-demo-discount-xs-modal><a tabindex=0 role=button id=pStack-demo-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                 &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                 &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                 &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><a tabindex=1 role=button id=pricing-substack-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;The pricing overview displays the final price and is only visible in a simplified version of the product stack, typically for small or extra small screen sizes. Upon clicking more details, the full pricing sub stack is then displayed, and only then could the pricing sub stack and overview pricing be displayed together. The pricing sub stack and overview pricing can never be displayed together upon first arrival at the product stack. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; The pricing overview is automatically generated through the pricing sub stack. See the Pricing Sub Stack to learn about the legal requirements of the final price.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Pricing Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><a tabindex=1 role=button id=legal-messaging-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Legal disclaimers must be displayed near the Final Price. This is legally mandated placement. &lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Legal Messaging &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><a tabindex=1 role=button id=finance-lease-substack-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provides users the price with leasing or financing.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Finance/Lease Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=pStack-demo-rewards-single-xs><a tabindex=0 role=button id=pStack-demo-rewards-single-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                     &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                     &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                        &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                     &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><a tabindex=1 role=button id=rewards-substack-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Dell Advantage offers customers incentives and rewards to purchase from Dell again.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Rewards Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=row><div class=col-xs-12><div class=shipping-stack><img src=components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                           &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                           ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div><a tabindex=1 role=button id=shipping-substack-xs data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provides customers with realistic expectations about a product shipping date.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Shipping Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class="inner-box inner-box-margin-top"><i class=icon-ui-plus aria-hidden=true></i></div></a></div></div></div><div class=hidden-xs><div class=outer-box><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><a tabindex=1 role=button id=product-differentiator data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provide a callout for a featured tech spec, such as touch-enabled or giant hard drive. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt; &lt;p&gt;1) Must always use icon.&lt;/p&gt;&lt;p&gt;2) Must use plain text.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Featured Spec &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><a tabindex=1 role=button id=product-blurb data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provide a short marketing statement about the product. Note that with the addition of the Tech Specs field, the Blurb is no longer used for showcasing tech specs or product dimensions. &lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Product Blurb &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#pStack-demo-single-offer-modal data-backdrop=static data-keyboard=false>1 Special offer</button></div><a tabindex=1 role=button id=special-offers data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Product Offers always link to further product details. They can be displayed in one of three variants. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single offer:&lt;/strong&gt; A single offer launches a modal where the user can read the offer and proceed from an action link.&lt;p&gt;&lt;strong&gt;Multiple offers:&lt;/strong&gt; Multiple Offers launch a workflow window process where each of the offer links continue to the specific product offer.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deals offer:&lt;/strong&gt; Deal offers are always listed as links and can only appear in deals product stacks&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Special Offer(s) &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div aria-labelledby=pStack-demo-single-offer-modal><div class="modal fade" role=modal id=pStack-demo-single-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=outer-box><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=pStack-demo-discount><a tabindex=0 role=button id=pStack-demo-discount data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                 &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                 &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                 &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><a tabindex=1 role=button id=pricing-substack data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;The pricing overview displays the final price and is only visible in a simplified verison of the product stack, typically for small or extra small screen sizes. Upon clicking more details, the full pricing sub stack is then displayed, and only then could the pricing sub stack and overview pricing be displayed together. The pricing sub stack and overview pricing can never be displayed together upon first arrival at the product stack. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; The pricing overview is automatically generated through the pricing sub stack. See the Pricing Sub Stack to learn about the legal requirements of the final price.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Pricing Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><a tabindex=1 role=button id=legal-messaging data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Legal disclaimers must be displayed near the Final Price. This is legally mandated placement. &lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Legal Messaging &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><a tabindex=1 role=button id=finance-lease-substack data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provides users the price with leasing or financing.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Finance/Lease Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=pStack-demo-rewards><a tabindex=0 role=button id=pStack-demo-rewards data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                     &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                     &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                        &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                        &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                     &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><a tabindex=1 role=button id=rewards-substack data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Dell Advantage offers customers incentives and rewards to purchase from Dell again.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Rewards Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class=inner-box><i class=icon-ui-plus aria-hidden=true></i></div></a></div><div class=outer-box><div class=row><div class=col-xs-12><div class=shipping-stack><img src=components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                           &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                           ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div><a tabindex=1 role=button id=Shipping-substack data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;Provides customers with realistic expectations about a product shipping date.&lt;/p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="Shipping Substack &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class="inner-box inner-box-margin-top"><i class=icon-ui-plus aria-hidden=true></i></div></a></div></div><div class=outer-box><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div><a tabindex=1 role=button id=e-value-cta data-html=true data-toggle=popover data-placement=right data-content="&lt;p&gt;&lt;strong&gt;E-Value: &lt;/strong&gt;This code is the main (and sometimes the only) reference point for a customer to mention or point to when speaking to a sales support rep over the phone or over Live Chat. In essence, the e-value code becomes the unique identifier (i.e. sku number) for a customer to reference a particular configuration or Order Code on the site. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;CTA Substack:&lt;/strong&gt; To provide primary and secondary calls to action for the product. These calls to action are subject to all visual and interaction rules defined in the Buttons Pattern.&lt;p&gt;&lt;p&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;Additional information&lt;/a&gt;&lt;/p&gt;" data-original-title="E-Value and CTA &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;"><div class="inner-box inner-box-margin-top"><i class=icon-ui-plus aria-hidden=true></i></div></a></div></div></div></div><hr><div class=row><div class="col-xs-12 bottom-offset-20"><h3>Horizontal Search stack with 2 Special Offers and workflow example</h3></div><div class="product-stack-search-wrapper bottom-offset-60"><div class=hidden-xs><div class="col-xs-4 col-sm-3"><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div></div><div class="col-xs-8 col-sm-6"><div class=product-title-stack><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul></div><div class=tech-spec><div class=row><div class="col-xs-12 col-sm-6"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div></div><div class="col-xs-12 col-sm-6"><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div></div></div><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div></div><div class="col-xs-12 col-sm-3"><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-demo-2-offer-modal-workflow data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=search-demo-2-offer-modal-workflow><div class="modal fade" role=modal id=search-demo-2-offer-modal-workflow><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>When there are two or more special offers present, use a workflow for each CTA.</h3><h5 class=text-red>See example below</h5></div><div class=modal-body-shadow><header class=masthead><div class=navbar><div class=container><div class=navbar-header><a href=# class=navbar-brand><i class=icon-ui-dell></i></a></div></div></div><div class=masthead-shadow></div></header><div><div class=demo-workflow><div class=modal-header><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div></div></div><footer class=navbar><div class=container><ul class="nav navbar-nav"><li><a href=javascript:;>&copy;2015 Dell</a></li><li><a href=javascript:;>Terms of Sale</a></li><li><a href=javascript:;>Privacy Statement</a></li><li><a href=javascript:;>Ads &amp; Emails</a></li></ul></div></footer></div><div class=modal-body><h5 class=text-red>Example HTML landing page</h5><p>Use a workflow HTML landing page like the example above if there are more than 2 special offers in the product stack. Each offer has a unique CTA which corresponds to the offer specific location.</p></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class="dell-price pull-left"><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=ptSearch-discount><a tabindex=0 role=button id=ptSearch-discount data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                                 &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                                 &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><div class="col-xs-12 col-sm-4 col-md-3 visible-xs-block bottom-offset-30"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#ptSearch-xs-2-offers><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=ptSearch-xs-2-offers class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#ps-Search-2-offers-modal data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=ps-Search-2-offers-modal><div class="modal fade" role=modal id=ps-Search-2-offers-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>When there are two or more special offers present, use a workflow for each CTA.</h3><h5 class=text-red>See example below</h5></div><div class=modal-body-shadow><header class=masthead><div class=navbar><div class=container><div class=navbar-header><a href=# class=navbar-brand><i class=icon-ui-dell></i></a></div></div></div><div class=masthead-shadow></div></header><div class=demo-workflow><div class=modal-header><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div></div><footer class=navbar><div class=container><ul class="nav navbar-nav"><li><a href=javascript:;>&copy;2015 Dell</a></li><li><a href=javascript:;>Terms of Sale</a></li><li><a href=javascript:;>Privacy Statement</a></li><li><a href=javascript:;>Ads &amp; Emails</a></li></ul></div></footer></div><div class=modal-body><h5 class=text-red>Example HTML landing page</h5><p>Use a workflow HTML landing page like the example above if there are more than 2 special offers in the product stack. Each offer has a unique CTA which corresponds to the offer specific location.</p></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=ptSearch-2-discount-xs-modal><a tabindex=0 role=button id=ptSearch-2-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                         &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=ptSearch-rewards><a tabindex=0 role=button id=ptSearch-rewards data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                             &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                             &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                             &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                   &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                   ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div></div><hr class="shadow-separator top-offset-60"><div class=row><div class="col-lg-12 bottom-offset-30"><h2 class=bottom-offset-5>Product Stack Elements: Details</h2></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Stack Label</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/stacklabel.png alt="stack label"></div><p>The Stack Label is used to highlight a unique product attribute based on logic that incorporates legal requirements, lifecycle needs, timed events, and marketing differentiation.</p></div><div class=col-sm-7><div class=panel-group id=stack-label-accordion-independent><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#stack-label-accordion-independent href=#stack-label-code>Code/Logic</a></h4></div><div id=stack-label-code class="panel-collapse collapse in"><div class=panel-body><ul><li>Optional. Allow ON only for items at SKU/Order Code (OC) level.</li><li>Automatically toggle OFF for items at Model and Franchise levels.</li><li>Text only. No special formatting.</li><li>Use an inheritance model to provide Bugs that can cascade across Franchise, Model, and OC levels.</li><li>In situations where there is no required legal need, display of the Bug is based on business logic and priority rankings. For example, business logic may specify that timed event Bugs can be overridden by ATS (available-to-sell) conditions, so that Cyber Monday Special text is replaced by Only [N] Left! when inventory levels hit a certain threshold.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#stack-label-accordion-independent href=#stack-label-ux class=collapsed>UX</a></h4></div><div id=stack-label-ux class="panel-collapse collapse"><div class=panel-body><ul><li>Not clickable. No interaction.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#stack-label-accordion-independent href=#stack-label-visual class=collapsed>Visual Notes</a></h4></div><div id=stack-label-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Text is centered or left-aligned to match with other elements in the stack.</li><li>Text wraps as necessary.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#stack-label-accordion-independent href=#stack-label-content class=collapsed>Content Usage</a></h4></div><div id=stack-label-content class="panel-collapse collapse"><div class=panel-body><ul><li>Business-controlled copy assigned at the SKU/OC level. Content is ideally concise to keep the bug on one line, without wrapping.</li><li>The stack label can be displayed in any Product Stack context, including search results, Browse, product carousels, and Cart.</li><li>When the stack label is manually maintained for each Order Code, the Business must create a solid content strategy for assigning useful differentiators to each OC. When all OCs on a page show the same bug text (for example, \u201cDell Recommended\u201d), the stack label no longer serves its purpose as a useful differentiator.</li><li>DCX recommends that the stack label be suppressed in Product Stacks for items whose <a href="" class=btn-link><strong>Product Titles</strong></a> are also using differentiator terms (such as Good, Better, or Best or Fast, Ultra Fast, or Turbo Charged). This is to allow the user to focus on one key differentiator per item and avoid any potential conflicts between differentiator content in the Bug and the Title.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Asset Substack</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/assetSubstack.png alt="Asset Substack"></div><p>Provide users with visual images of the product and/or its options. Use the violator to only message a differentiating feature or offer on the page.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=asset-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#asset-accordion href=#asset-code>Code/Logic</a></h4></div><div id=asset-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow ON for items at any level, except on pages where the Image Gallery pattern is being used to display product assets.</li></ul><ul><li class=list-unstyled><strong>Main Image</strong></li><li>Can be linked or unlinked. When linked, the Main Image links to the same location as the Product Title (usually the PD page).</li><li>On PD pages, the Main Image is not linked and has no interaction.</li></ul><ul><li class=list-unstyled><strong>Image Violators</strong></li><li>Optional</li><li>1 violator per image</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#asset-accordion href=#asset-ux class=collapsed>UX</a></h4></div><div id=asset-ux class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Can be clickable to the same destination.</li></ul><ul><li class=list-unstyled><strong>Main Image</strong></li><li>N/A</li></ul><ul><li class=list-unstyled><strong>Image Violators</strong></li><li>0-3 max violators per page (exception: search results pages, because multiple results can be pulled without business control)</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#asset-accordion href=#asset-visual class=collapsed>Visual Notes</a></h4></div><div id=asset-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Image Violators</li><li>Place at the top of the product on the right side.</li><li>Text is right aligned and wraps as necessary</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#asset-accordion href=#asset-content class=collapsed>Content Usage</a></h4></div><div id=asset-content class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>Main Image \u2013 Legal Requirements</strong></li><li>When the base model price is displayed, the base model image must be displayed.</li><li>If an image showing an upgrade option is displayed, the price must reflect the upgrade charge.</li><li>When showing images/assets for a pre-configured Order Code or SKU, use the exact pre-configured OC/SKU images, including color or other visual options.</li><li>When showing a family image, you can include an upgradable option as long as the base model is also shown.</li><li>When showing an image for a bundle, indicate all the items included in either the main image or an image violator.</li><li class=bottom-offset-10>When showing images/assets for a configurable Order Code, you can use: (a) The base model images/assets. No Legal Disclosure is required. (b) A non-base model image/asset, but a Legal Disclosure must be attached indicate that the image shown is not the base model.</li><li class=list-unstyled><strong>Also see requirements under <a href="" class=btn-link><strong>Pricing Substack</strong></a> for details on image and pricing requirements.Image Violators</strong></li><li>Image violators provide business controlled content that sits above the main image to call out a key differentiator.</li><li>1-5 words max in any language</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Product Title</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/productTitle.png alt="Product Title"></div><p>The Product Name, allow for an optional display of product description, and provide a link to more product details (usually the PD page).</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=product-title-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-title-independent-accordion href=#product-title-code>Code/Logic</a></h4></div><div id=product-title-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>REQUIRED</li><li>Can be linked (optional). When linked, the Title always links to the same location as the Main Image of the <a href="" class=btn-link><strong>Asset Substack</strong></a> (usually the PD page).</li><li>On the PD page itself, the Title is not linked and does not have any interaction.</li><li>On Search Result pages, Title can take OnHover state (optional).</li></ul><ul><li class=list-unstyled><strong>Values</strong></li><li>For Systems Order Code level stacks, use the OC/SKU name (product name).</li><li>For Systems Model level stacks, use the Model name.</li><li>For Systems Franchise level stacks, use the Franchise name.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-title-independent-accordion href=#product-title-ux class=collapsed>UX</a></h4></div><div id=product-title-ux class="panel-collapse collapse"><div class=panel-body><ul><li>N/A</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-title-independent-accordion href=#product-title-visual class=collapsed>Visual Notes</a></h4></div><div id=product-title-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Text wraps as necessary.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-title-independent-accordion href=#product-title-content class=collapsed>Content Usage</a></h4></div><div id=product-title-content class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>SNP titles come from a variety of 3rd party data sources; titles from various data feeds may be inconsistent compared to others. For this reason, truncation can be dangerous because the differentiator in the title may be the very last item.</li></ul><ul><li class=list-unstyled><strong>Best Practices for using Title as a Differentiator</strong></li><li>For Order Code/SKU level stacks, assign a product title that quickly \u2013 in the first few words - helps users understand what differentiates one OC from another.</li><li>For a Bundle or Buddy Order Code, indicate the bundle in the Product Title.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Ratings Substack</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/ratings.png alt="Ratings Substack"></div><p>To provide customers with at-a-glance ratings for a given product to help customers during decision-making.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=ratings-substack-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#ratings-substack-independent-accordion href=#ratings-substack-code>Code/Logic</a></h4></div><div id=ratings-substack-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow ON for items at any level.</li></ul><ul><li class=list-unstyled><strong>Ratings Calculations</strong></li><li>SKU: Ratings shown for a SKU display the ratings received only for that SKU</li><li>Order Code: Ratings shown for an OC item are actually the ratings received for the Model. All OCs under a model display the same Ratings substack.</li><li>Model: Ratings shown for a Model include all the ratings received for the model.</li><li>Franchise: Ratings a franchise level must be calculated by averaging all ratings from all models within the franchise.</li></ul><ul><li class=list-unstyled><strong>Globalization</strong></li><li>When the Ratings substack is displayed in a Right-to-Left orientation, the stars icons must flip, so that the number of stars increases from right to left, rather than left to right. The number of ratings should also flip to read from right to left.</li><li>See the <a href="" class=btn-link><strong>Ratings & Reviews</strong></a> pattern for more information.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#ratings-substack-independent-accordion href=#ratings-substack-ux class=collapsed>UX</a></h4></div><div id=ratings-substack-ux class="panel-collapse collapse"><div class=panel-body><ul><li>See the <a href="" class=btn-link><strong>Ratings & Reviews</strong></a> pattern for more information.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#ratings-substack-independent-accordion href=#ratings-substack-visual class=collapsed>Visual Notes</a></h4></div><div id=ratings-substack-visual class="panel-collapse collapse"><div class=panel-body><ul><li>See the <a href="" class=btn-link><strong>Ratings & Reviews</strong></a> pattern for more information.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#ratings-substack-independent-accordion href=#ratings-substack-content class=collapsed>Content Usage</a></h4></div><div id=ratings-substack-content class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>The Ratings Substack can be displayed in any Product Stack context (including search results, Browse, or \u201cshort stacks\u201d such as product carousels). However, because Ratings are intended for use mostly during the decision-making process, the Ratings Substack is typically not shown in Cart (post-decision state).</li><li>See the <a href="" class=btn-link><strong>Ratings & Reviews</strong></a> pattern for more information.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Pricing Overview</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/priceOverview.png alt="Pricing Overview"></div><p>The pricing overview displays the final price and is only visible in a simplified version of the product stack, typically for small or extra small screen sizes. Upon clicking more details, the full pricing sub stack is then displayed, and only then could the pricing sub stack and overview pricing be displayed together. The pricing sub stack and overview pricing can never be displayed together upon first arrival at the product stack.</p><p><strong>Important!</strong> The pricing overview is automatically generated through the pricing sub stack. See the Pricing Sub Stack to learn about the legal requirements of the final price.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=pricing-overview-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#pricing-overview-independent-accordion href=#pricing-overview-code>Code/Logic</a></h4></div><div id=pricing-overview-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Can be displayed in a simplified version of the product stack.</li><li>The overview pricing and pricing substack can never be displayed at the same time without first clicking \u201cmore details\u201d.</li><li>Final price is pulled from the pricing sub stack.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#pricing-overview-independent-accordion href=#pricing-overview-ux class=collapsed>UX</a></h4></div><div id=pricing-overview-ux class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>If the pricing overview is used with the \u201cMore Info\u201d control, clicking or tapping \u201cMore Info\u201d will expose the full pricing stack.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#pricing-overview-independent-accordion href=#pricing-overview-visual class=collapsed>Visual Notes</a></h4></div><div id=pricing-overview-visual class="panel-collapse collapse"><div class=panel-body><ul><li>N/A</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#pricing-overview-independent-accordion href=#pricing-overview-content class=collapsed>Content Usage</a></h4></div><div id=pricing-overview-content class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Price only is pulled from the pricing sub stack, labels aren\u2019t used.</li><li>If using the pricing overview, the price should not be used in the title.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Tech Specs - Selected Specs</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/techSpecs.png alt="Tech Specs - Selected Specs"></div><p>Provide a visual overview of the specs for a product and how it compares to other products.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=tech-specs-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#tech-specs-independent-accordion href=#tech-specs-code>Code/Logic</a></h4></div><div id=tech-specs-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow ON for items at the OC level only.</li><li>Maximum use of four specs. For desktop and laptops, the first spec is always processor and the OS is always the second spec.</li><li>The ratings scale of each spec will be manually determined by business.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#tech-specs-independent-accordion href=#tech-specs-ux class=collapsed>UX</a></h4></div><div id=tech-specs-ux class="panel-collapse collapse"><div class=panel-body><ul><li>Not clickable. No interaction.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#tech-specs-independent-accordion href=#tech-specs-visual class=collapsed>Visual Notes</a></h4></div><div id=tech-specs-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Text wraps as necessary.</li><li>Visual tech specs are accessibility compliant</li><li>Visual treatment is usually used in horizontal stack layouts such as Search Results.</li><li>Specs use text only in small/extra small, as the visuals are too hard to compare on small screens</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#tech-specs-independent-accordion href=#tech-specs-content class=collapsed>Content Usage</a></h4></div><div id=tech-specs-content class="panel-collapse collapse"><div class=panel-body><ul><li>Ensure that lists are MDA compliant, mainly by listing processor and OS first and second respectively. See the MDA Compliance CORAL wiki for more information.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Featured Specs</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/featuredSpes.png alt="Featured Specs"></div><p>Provide a callout for a featured tech spec, such as touch-enabled or giant hard drive.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=featured-specs-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#featured-specs-independent-accordion href=#tech-specs-code>Code/Logic</a></h4></div><div id=featured-specs-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow ON for items at any level.</li><li>Only simple text and image.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#featured-specs-independent-accordion href=#featured-specs-ux class=collapsed>UX</a></h4></div><div id=featured-specs-ux class="panel-collapse collapse"><div class=panel-body><ul><li>Not clickable. No interaction.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#featured-specs-independent-accordion href=#featured-specs-visual class=collapsed>Visual Notes</a></h4></div><div id=featured-specs-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Text is centered or left-aligned to match with other elements in the stack.</li><li>Text wraps as necessary.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#featured-specs-independent-accordion href=#featured-specs-content class=collapsed>Content Usage</a></h4></div><div id=featured-specs-content class="panel-collapse collapse"><div class=panel-body><ul><li>Use the differentiator in conjunction with these other items to fully implement the product content strategy:<ul><li>Product Bug</li><li>Product Title</li><li>Tech Specs</li><li>Product Image, and Image Violators</li></ul></li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Product Blurb</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/ProductBlurb.png alt="Product Blurb"></div><p>Provide a short marketing statement about the product. Note that with the addition of the Tech Specs field, the Blurb is no longer used for showcasing tech specs or product dimensions.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=product-blurb-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-blurb-independent-accordion href=#product-blurb-code>Code/Logic</a></h4></div><div id=product-blurb-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow ON for items at any level.</li><li>Text only, no special formatting.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-blurb-independent-accordion href=#product-blurb-ux class=collapsed>UX</a></h4></div><div id=product-blurb-ux class="panel-collapse collapse"><div class=panel-body><ul><li>Not clickable. No interaction.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-blurb-independent-accordion href=#product-blurb-visual class=collapsed>Visual Notes</a></h4></div><div id=product-blurb-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Text is centered or left-aligned to match with other elements in the stack.</li><li>Text wraps as necessary.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#product-blurb-independent-accordion href=#product-blurb-content class=collapsed>Content Usage</a></h4></div><div id=product-blurb-content class="panel-collapse collapse"><div class=panel-body><ul><li>Use the Blurb in conjunction with these other items to fully implement the product content strategy:<ul><li>Product Bug</li><li>Product Title</li><li>Tech Specs</li><li>Product Image</li></ul></li><li></li><li>Product blurb is owned by the business.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Special Offers</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/specialOffers.png alt="Pricing Substack"></div><p>Product Offers always link to further product details. They can be displayed in one of three variants.</p><p><strong>Single offer:</strong> A single offer launches a modal where the user can read the offer and proceed from an action link.</p><p><strong>Multiple offers:</strong> Multiple Offers launch a workflow window process where each of the offer links continue to the specific product offer.</p><p><strong>Deals offer:</strong> Deal offers are always listed as links and can only appear in deals product stacks</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=special-offers-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#special-offers-independent-accordion href=#special-offers-code>Code/Logic</a></h4></div><div id=special-offers-code class="panel-collapse collapse in"><div class=panel-body><ul><li>Allow ON for items at any level</li><li>Text only, no special formatting.</li><li>Offer details displayed differently depending on the number of offers and where the product stack is being displayed.</li></ul><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#special-flowchart><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show Offer Process</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide Offer Process</span></a></div><div id=special-flowchart class=collapse><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/specialOfferDiagram.png alt="special offers flow chart"></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#special-offers-independent-accordion href=#special-offers-ux class=collapsed>UX</a></h4></div><div id=special-offers-ux class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>1 Special Offer</strong></li><li>Utilize a modal</li></ul><ul><li class=list-unstyled><strong>2+ Special Offers</strong></li><li>Utilize a workflow</li></ul><ul><li class=list-unstyled><strong>Product Stacks on Deals Page Pages</strong></li><li>Special Offers are listed out. They must be clearly distinguishable from the next.</li><li>Utilize a modal if additional details for each offer are needed.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#special-offers-independent-accordion href=#special-offers-visual class=collapsed>Visual Notes</a></h4></div><div id=special-offers-visual class="panel-collapse collapse"><div class=panel-body><ul><li>N/A</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#special-offers-independent-accordion href=#special-offers-content class=collapsed>Content Usage</a></h4></div><div id=special-offers-content class="panel-collapse collapse"><div class=panel-body><ul><li>Offers should each have defined CTA\u2019s. If an offer doesn\u2019t have a defined CTA, it takes on the primary product stack CTA.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Pricing Substack</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/pricingSubstack.png alt="Pricing Substack"></div><p>The pricing overview displays the final price and is only visible in a simplified verison of the product stack, typically for small or extra small screen sizes. Upon clicking more details, the full pricing sub stack is then displayed, and only then could the pricing sub stack and overview pricing be displayed together. The pricing sub stack and overview pricing can never be displayed together upon first arrival at the product stack.</p><p><strong>Important!</strong> The pricing overview is automatically generated through the pricing sub stack. See the Pricing Sub Stack to learn about the legal requirements of the final price.</p><p>The pricing stack itself contains other subprocesses:</p><ul><li>Base Price</li><li>Total Savings</li><li>Final Price</li><li>Currency Symbol</li></ul></div><div class=col-sm-7><div class="demo-guide panel-group" id=pricing-substack-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#pricing-substack-independent-accordion href=#pricing-substack-base>Base Price Subprocess</a></h4></div><div id=pricing-substack-base class="panel-collapse collapse in"><div class=panel-body><ul><li>\u201cBase Price\u201d is a generic label that describes SAPP (Starting at Price Point).</li><li>MAPP stands for Minimum Advertised Price Point. This means that we cannot show the price to the customer until they have taken further action. That action is dependent on the manufacturer\u2019s contracts with Dell.</li></ul><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#base-flowchart><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show Base Subprocess</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide Base Subprocess</span></a></div><div id=base-flowchart class=collapse><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/base-price-chart.png alt="base flow chart"></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#total-savings-independent-accordion href=#total-savings-ux class=collapsed>Total Savings</a></h4></div><div id=total-savings-ux class="panel-collapse collapse"><div class=panel-body><ul><li>Total Savings, Instant Savings, Aggregated Savings, and Instant Discounts used synonymously.</li><li>There are three types of savings that are counted in the Total Savings line: Instant Rebates, EPP (Employee Purchase Program), and Premier Specific Discounts.</li></ul><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#total-flowchart><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show Total Savings</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide Total Savings</span></a></div><div id=total-flowchart class=collapse><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/total-savings-chart.png alt="special offers flow chart"></div><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#overlay-subprocess-flowchart><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show Total Savings Overlay Subprocess</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide Total Savings Overlay Subprocess</span></a></div><div id=overlay-subprocess-flowchart class=collapse><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/total-savings-overlay-chart.png alt="overlay-subprocess"></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#pricing-substack-independent-accordion href=#final-price-subprocess class=collapsed>Final Price Subprocess</a></h4></div><div id=final-price-subprocess class="panel-collapse collapse"><div class=panel-body><ul><li>\u201cFinal Price\u201d is the price displayed after all instant discounts (inclusive of instant rebates, if applicable) have been applied. Remember that promo value is not subtracted from the Base Price value and thus not included in the Final Price value.</li><li>MAPP stands for Minimum Advertised Price Point. This means that we cannot show the price to the customer until they have taken further action. That action is dependent on the manufacturer\u2019s contracts with Dell.</li></ul><div class=bottom-offset-5><a href=javascript:; class=collapsed data-toggle=collapse data-target=#final-price-flowchart><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>Show Final Price Subprocess</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide Final Price Subprocess</span></a></div><div id=final-price-flowchart class=collapse><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/finalPrice-chart.png alt="final price"></div></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#pricing-substack-independent-accordion href=#pricing-substack-content class=collapsed>Currency Symbol Subprocess</a></h4></div><div id=pricing-substack-content class="panel-collapse collapse"><div class=panel-body><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/currency.png alt="final price"></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Legal Messaging</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/legalDisclose.png alt="Pricing Substack"></div><p>Legal disclaimers must be displayed near the Final Price. This is legally mandated placement.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=legal-messaging-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#legal-messaging-independent-accordion href=#legal-overview>Legal Overview</a></h4></div><div id=legal-overview class="panel-collapse collapse in"><div class=panel-body><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/legal-overview-chart.png alt="legal overview chart"></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Finance Lease Subprocess</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/finance-lease.png alt="Pricing Substack"></div><p>Provides users the price with leasing or financing.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=finance-lease-subprocess-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#finance-lease-subprocess-independent-accordion href=#finance-overview>Finance Overview</a></h4></div><div id=finance-overview class="panel-collapse collapse in"><div class=panel-body><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/finance-chart-option.png alt="legal overview chart"></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Dell Advantage</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/rewards.png alt="Pricing Substack"></div><p>Dell Advantage offers customers incentives and rewards to purchase from Dell again.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=dell-advantage-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#dell-advantage-independent-accordion href=#dell-advantage-code>Code/Logic</a></h4></div><div id=dell-advantage-code class="panel-collapse collapse in"><div class=panel-body><p>The messaging for Dell Advantage changes dependent on the user. If a user has visited Dell.com and previously been cookied, they will be presented with a Hot state. If they are new to Dell.com or haven\u2019t been cookied, they will be presented with a cold state.</p></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#dell-advantage-independent-accordion href=#dell-advantage-ux class=collapsed>UX</a></h4></div><div id=dell-advantage-ux class="panel-collapse collapse"><div class=panel-body><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/dell-advantage-chart.png alt="special offers flow chart"></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#dell-advantage-independent-accordion href=#dell-advantage-visual class=collapsed>Visual Notes</a></h4></div><div id=dell-advantage-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Only Dell Advantage logo can be used</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#dell-advantage-independent-accordion href=#dell-advantage-content class=collapsed>Content Usage</a></h4></div><div id=dell-advantage-content class="panel-collapse collapse"><div class=panel-body><ul><li>Content and linking is business controlled but an overall strategy should be followed.</li><li>Hot \u2013 provide users with details on their rewards</li><li>Cold \u2013 explain Dell Advantage and link to additional details</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>Shipping Substack</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/shipping.png alt="Shipping Substack"></div><p>Provides customers with realistic expectations about a product shipping date.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=shipping-substack-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#shipping-substack-independent-accordion href=#shipping-substack-code>Code/Logic</a></h4></div><div id=shipping-substack-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow ON only for items at SKU/OC level.</li><li>Automatically toggle OFF for items at Model and Franchise levels.</li></ul><ul><li class=list-unstyled><strong>Text Label</strong></li><li>Required (ON) if Shipping substack is ON.</li><li>If Estimated Ship Date: label is shown, Date must also be shown.</li><li>Is globalized using standard App Framework methods.</li></ul><ul><li class=list-unstyled><strong>Date</strong></li><li>Required if Text Label = \u201cEstimated Ship Date:\u201d.</li><li>Is concatenated to the end of the Shipping Date label text.</li><li>Is globalized using standard App Framework methods.</li></ul><ul><li class=list-unstyled><strong>Logo</strong></li><li>Required if using Smart Select Date</li><li>Must use the approved Smart Select logo, refer to the DAM for latest logo.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#shipping-substack-independent-accordion href=#shipping-substack-ux class=collapsed>UX</a></h4></div><div id=shipping-substack-ux class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>The Shipping Substack can be displayed in any context. However, because of space constraints, the Shipping Substack is not recommended for display in \u201cshort stacks\u201d such as carousels or related products contexts.</li></ul><ul><li class=list-unstyled><strong>Text Label</strong></li><li>Can be linked or unlinked. If linked, bring up additional information or shipping disclaimers using the Overlay Window pattern. The destination, content, and method of display (modal, pop-up, tooltip, etc.) are configurable by project.</li></ul><ul><li class=list-unstyled><strong>Date</strong></li><li>Required if Estimated Ship Date: label is used. Not recommended with other labels.</li></ul><ul><li class=list-unstyled><strong>Logo</strong></li><li>Required if using Smart Select Date</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#shipping-substack-independent-accordion href=#shipping-substack-visual class=collapsed>Visual Notes</a></h4></div><div id=shipping-substack-visual class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>None</li></ul><ul><li class=list-unstyled><strong>Text Label</strong></li><li>Wraps as necessary to fit container.</li><li>Shifts to align with container edge if Icon is not shown.</li></ul><ul><li class=list-unstyled><strong>Date</strong></li><li>Is concatenated to the end of the Shipping Date label text. If the container allows, the Date can remain on the same line as the Text Label.</li></ul><ul><li class=list-unstyled><strong>Logo</strong></li><li>Only Smart Select Logo can be used.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#shipping-substack-independent-accordion href=#shipping-substack-content class=collapsed>Content Usage</a></h4></div><div id=shipping-substack-content class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>The Shipping Substack can be displayed in any context. However, because of space constraints, the Shipping Substack is not recommended for display in \u201cshort stacks\u201d such as carousels or related products contexts.</li></ul><ul><li class=list-unstyled><strong>Text Label</strong></li><li>Can include Estimated Ship Date:, Ships Fast or Next Business Day labels; and Inventory/ATS messaging, such as Pre-Order, Out-of-Stock, Backordered.</li></ul><ul><li class=list-unstyled><strong>Date</strong></li><li>None.</li></ul><ul><li class=list-unstyled><strong>Logo</strong></li><li>None.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>e-Value Stack</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/e-value.png alt="e-Value Stack"></div><p>E-Value code is the main (and sometimes the only) reference point for a customer to mention or point to when speaking to a sales support rep over the phone or over Live Chat. In essence, the e-value code becomes the unique identifier (i.e. sku number) for a customer to reference a particular configuration or Order Code on the site.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=e-value-substack-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#e-value-substack-independent-accordion href=#e-value-substack-code>Code/Logic</a></h4></div><div id=e-value-substack-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow ON for items at the OC level only.</li><li>Text only, no special formatting.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#e-value-substack-independent-accordion href=#e-value-substack-ux class=collapsed>UX</a></h4></div><div id=e-value-substack-ux class="panel-collapse collapse"><div class=panel-body><ul><li>Not clickable. No interaction.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#e-value-independent-accordion href=#e-value-substack-visual class=collapsed>Visual Notes</a></h4></div><div id=e-value-substack-visual class="panel-collapse collapse"><div class=panel-body><ul><li>Refer to the Button pattern for all interaction notes.</li><li>Text is centered or left aligned to match other elements.></li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#e-value-substack-independent-accordion href=#e-value-substack-content class=collapsed>Content Usage</a></h4></div><div id=e-value-substack-content class="panel-collapse collapse"><div class=panel-body><ul><li>Each e-value code is unique and acts as the unique identifier for each product.</li></ul></div></div></div></div></div><div class="row bottom-offset-60"><div class=col-xs-12><h3>CTA Substack</h3></div><div class=col-sm-5><div class="img-element well well-gray-very-light-stroke" equalize-height=.img-element><img class="img-responsive bottom-offset-10 center-block" src=components/product-stack/product-img/cta.png alt="CTA Substack"></div><p>To provide primary and secondary calls to action for the product. These calls to action are subject to all visual and interaction rules defined in the Buttons Pattern.</p></div><div class=col-sm-7><div class="demo-guide panel-group" id=cta-substack-independent-accordion><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#cta-substack-independent-accordion href=#cta-substack-code>Code/Logic</a></h4></div><div id=cta-substack-code class="panel-collapse collapse in"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Allow CTA Substack ON for items at any level.</li><li>Allow max 3 CTAs for any stack: one primary, one secondary and one \u201cAdd to Compare\u201d.</li><li>If only Primary CTA is used, it can choose green purchase path button treatment OR general use treatment.</li><li>Refer to Button pattern and purchase path notes for all code/logic notes.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#cta-substack-independent-accordion href=#cta-substack-ux class=collapsed>UX</a></h4></div><div id=cta-substack-ux class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Refer to the Button pattern for all interaction notes.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#cta-substack-independent-accordion href=#cta-substack-visual class=collapsed>Visual Notes</a></h4></div><div id=cta-substack-visual class="panel-collapse collapse"><div class=panel-body><ul><li class=list-unstyled><strong>General</strong></li><li>Refer to the Button pattern for all interaction notes.</li></ul></div></div><div class=panel-heading><h4 class=panel-title><a data-toggle=collapse data-parent=#cta-substack-independent-accordion href=#cta-substack-content class=collapsed>Content Usage</a></h4></div><div id=cta-substack-content class="panel-collapse collapse"><div class=panel-body><ul><li>The wording of the CTA must describe the action the user will take. For example:<ul><li>Franchise level stacks often use a \u201cView Details\u201d CTA to take users to a Model PD page</li><li>Model level stacks often use a \u201cSelect\u201d CTA to take the user to the Model FS page</li><li>Configurable OC level stacks often use a \u201cCustomize\u201d CTA to take the user to Cconfigure</li><li>Preconfigured OC or SNP SKU stacks often use an \u201cAdd to Cart\u201d CTA to add the item directly to cart</li></ul></li></ul></div></div></div></div></div></div></section>');
    $templateCache.put('components/product-stack/demo-play-product-stack.html', '<section ng-controller=productStackPLayDemoCtrl id=product-stack-play-demo><div class=container><h2>Product-Stack Builder</h2><div></div></div></section>');
    $templateCache.put('components/product-stack/demo-product-stack.html', '<section ng-controller=productStackCtrl id=product-stack-html-example><div class=container><h2 class=top-offset-60>Search Product-Stack</h2><div class=row><h5 class="text-red bottom-offset-0 col-xs-12 col-sm-6">Search Product-Stack: 1 Offer Option</h5></div><hr class="hidden-xs bottom-offset-40"><hr class="visible-xs-block bottom-offset-40"><div class=bottom-offset-60><div class="product-stack-search-wrapper hidden-xs"><div class=row><div class="col-xs-4 col-sm-3"><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div></div><div class="col-xs-8 col-sm-6"><div class=product-title-stack><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul></div><div class=tech-spec><div class=row><div class="col-xs-12 col-sm-6"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div></div><div class="col-xs-12 col-sm-6"><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div></div></div><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div></div><div class="col-xs-12 col-sm-3"><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-special-single-offer-modal data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=special-single-offer-modal><div class="modal fade" role=modal id=search-special-single-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-2-special-offer-modal data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=search-2-special-offer-modal><div class="modal fade" role=modal id=search-2-special-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-popover-discount-desktop><a tabindex=0 role=button id=search-popover-discount-desktop data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                             &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><div class="col-xs-12 col-sm-4 col-md-3 visible-xs-block bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#search-product-stack-xs-single-offer><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=search-product-stack-xs-single-offer class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-special-single-offer-modal-xs data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=search-special-single-offer-modal-xs><div class="modal fade" role=modal id=search-special-single-offer-modal-xs><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-single-discount-xs-modal><a tabindex=0 role=button id=search-single-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                     &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-search-stack-single-xs><a tabindex=0 role=button id=rewards-search-stack-single-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                         &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                         &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                            &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                         &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                               &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                               ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><div class=row><h5 class="text-red bottom-offset-0 col-xs-12 col-sm-6">Search Product-Stack: 2 Offers Option</h5></div><hr class="hidden-xs bottom-offset-40"><hr class="visible-xs-block bottom-offset-40"><div class=bottom-offset-60><div class="product-stack-search-wrapper hidden-xs"><div class=row><div class="col-xs-4 col-sm-3"><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div></div><div class="col-xs-8 col-sm-6"><div class=product-title-stack><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul></div><div class=tech-spec><div class=row><div class="col-xs-12 col-sm-6"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div></div><div class="col-xs-12 col-sm-6"><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div></div></div><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div></div><div class="col-xs-12 col-sm-3"><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-special-2-offers-modal-workflow data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=search-special-2-offers-modal-workflow><div class="modal fade" role=modal id=search-special-2-offers-modal-workflow><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-popover-discount><a tabindex=0 role=button id=search-popover-discount data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                             &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><div class="col-xs-12 col-sm-4 col-md-3 visible-xs-block bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#search-product-stack-xs-2-offers><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=search-product-stack-xs-2-offers class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#search-2-offers-modal data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=search-2-offers-modal><div class="modal fade" role=modal id=search-2-offers-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=search-2-discount-xs-modal><a tabindex=0 role=button id=search-2-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                     &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-search-2-offer-xs><a tabindex=0 role=button id=rewards-search-2-offer-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                         &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                         &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                            &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                         &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                               &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                               ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><h2 class=top-offset-60>Product-Stack Demo</h2><div class=row><h5 class="hidden-xs text-red bottom-offset-0 col-xs-12 col-sm-4 col-md-3">Product-Stack: 1 Offer Option</h5><h5 class="hidden-xs text-red bottom-offset-0 col-xs-12 col-sm-4 col-md-3">Product-Stack: 2 Offers Option</h5><h5 class="hidden-xs text-red bottom-offset-0 col-xs-12 col-sm-4 col-md-3">Product-Stack: Deals Offer Option</h5></div><div class="row visible-xs-block"><h5 class="text-red col-xs-12 bottom-offset-0">Product-Stack: 1 Offer Option</h5></div><hr class="hidden-xs bottom-offset-40"><hr class="visible-xs-block bottom-offset-40"><div class="col-xs-12 col-sm-4 col-md-3 bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec hidden-xs"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#product-stack-xs-single-offer><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=product-stack-xs-single-offer class="collapse popover-overflow"><div><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#special-single-offer-modal-xs data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=special-single-offer-modal-xs><div class="modal fade" role=modal id=special-single-offer-modal-xs><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=single-discount-xs-modal><a tabindex=0 role=button id=single-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                         &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-stack-single-xs><a tabindex=0 role=button id=rewards-stack-single-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                             &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                             &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                             &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                   &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                   ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div></div><div class=hidden-xs><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#special-single-offer-modal data-backdrop=static data-keyboard=false>1 Special offer</button></div><div aria-labelledby=special-single-offer-modal><div class="modal fade" role=modal id=special-single-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p></div><div class=modal-footer><button class="btn btn-success" type=button>Add to Cart</button></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-discount-desktop-single-offer><a tabindex=0 role=button id=popover-discount-desktop-single-offer data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                         &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-single-offer><a tabindex=0 role=button id=rewards-single-offer data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                             &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                             &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                             &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                   &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                   ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div><div class="row visible-xs-block"><h5 class="text-red col-xs-12 bottom-offset-0">Product-Stack: 2 Offer Option</h5></div><hr class="visible-xs-block bottom-offset-40"><div class="col-xs-12 col-sm-4 col-md-3 bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec hidden-xs"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#product-stack-xs><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=product-stack-xs class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#2-special-offer-modal data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=2-special-offer-modal><div class="modal fade" role=modal id=2-special-offer-modal><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-single-discount-xs-modal><a tabindex=0 role=button id=popover-single-discount-xs-modal data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                     &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                     &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=popover-top-sinlge-xs><a tabindex=0 role=button id=popover-top-sinlge-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                         &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                         &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                            &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                            &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                         &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                               &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                               ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=hidden-xs><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><button class="btn btn-link">2 Special offers</button></div><div class=hidden><div class=special-offers><button class="btn btn-link" data-toggle=modal data-target=#2-special-offer-modal-workflow data-backdrop=static data-keyboard=false>2 Special offers</button></div><div aria-labelledby=2-special-offer-modal-workflowl><div class="modal fade" role=modal id=2-special-offer-modal-workflow><div class=modal-dialog><div class=modal-content><div class=modal-header><button type=button class=close data-dismiss=modal aria-hidden=true>\xd7</button><h3 class=modal-title>Save $50 off of PCs $699 plus with coupon code <strong>50OFF699</strong> for a limited time. Coupon applies in cart.</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p><strong>Dell Coupon Offer:</strong> Offer valid 4/30/2015 7:00am - 4/29/2016 6:00am CST or 40,000 redemptions, whichever comes first. Coupon is good with select other offers, but not with other coupons. Coupon is valid on select order codes. Offer does not apply to, and is not available with, systems or items purchased through refurbished items or spare parts. Purchase limit of 3 items per order. Not valid for resellers and/or online auctions. Dell reserves the right to cancel orders arising from pricing or other errors. Only valid on select order codes.</p><div class=row><div class=col-xs-12><button class="btn btn-primary pull-right" type=button>Copy Coupon Code</button></div></div></div><div class=modal-header><h3 class=modal-title>Free Shipping & Easy Returns!</h3></div><div class=modal-body><h4>Limited Time Offer!</h4><p>Free 3-5 business day ground shipping on all orders placed on Dell.com. No minimum purchase required.</p><p><strong>Easy Returns:</strong> Send the product back to Dell within 30-days of the invoice date for a full refund. Includes free return shipping and no restocking fee. Excludes software if opened or downloaded.</p><div class=row><div class=col-xs-12><button class="btn btn-success pull-right" type=button>Add to Cart</button></div></div></div><div class=modal-footer><button type=button class="btn btn-default" data-dismiss=modal>Close</button></div></div></div></div></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-discount-desktop><a tabindex=0 role=button id=popover-discount-desktop data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                         &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=popover-top><a tabindex=0 role=button id=popover-top data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                             &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                             &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                             &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                   &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                   ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div><div class="row visible-xs-block"><h5 class="text-red col-xs-12 bottom-offset-0">Product-Stack: Deals Offer Option</h5></div><hr class="visible-xs-block bottom-offset-40"><div class="col-xs-12 col-sm-4 col-md-3 bottom-offset-60"><div class=product-stack-wrapper><div class="compare-stack compare"><input type=checkbox value="option 1" class=pull-left> <span class="compare-default text-gray-medium">Add to Compare</span> <span class="compare-active hide">Compare 1</span></div><div class="well product-bug"><div class=triangle></div><p>3 Year Accidental Damage Service Included</p></div><div class=product-title-stack><div class=row><div class="col-xs-4 col-sm-12"><a href=javascript:;><img src=/components/product-stack/product-img/series-thumb-laptops-precision_7000.png class="img-responsive center-block"></a><div class="badge badge-overlay">New</div></div><div class="col-xs-8 col-sm-12"><a href=javascript:;><h4 class=btn-link>Product Title Goes Here</h4></a><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li><a href=javascript:; class=btn-link>200 Reviews</a></li></ul><h5 class="visible-xs-block pull-left"><strong>$0,000,000.00</strong></h5></div></div></div><div class="tech-spec hidden-xs"><div><p>4th Generation Intel Core i5 Processor</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li></ul></div><div><p>Windows 8</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li></ul></div><div><p>6GB Memory</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div><div><p>500GB Hard Drive</p><ul class="list-inline list-unstyled"><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar active"></li><li class="spec-bar default"></li><li class="spec-bar default"></li></ul></div></div><div class="tech-spec visible-xs-block"><ul><li>4th Generation Intel Core i5 Processor</li><li>Windows 8</li><li>6GB Memory</li><li>500GB Hard Drive</li></ul></div><div class="details-toggle visible-xs-block"><a href=javascript:; class=collapsed data-toggle=collapse data-target=#product-stack-x-deals-offer><span class=show-collapsed><i aria-hidden=true class=icon-ui-triangleright></i>More info</span> <span class=hide-expanded><i aria-hidden=true class=icon-ui-triangledown></i>Hide info</span></a></div><div id=product-stack-x-deals-offer class="collapse popover-overflow"><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div><div class=special-offers><ul><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li></ul></div></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-single-discount-xs-modal-deals><a tabindex=0 role=button id=popover-single-discount-xs-modal-deals data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                         &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                         &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-deals-xs><a tabindex=0 role=button id=rewards-deals-xs data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                             &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                             &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                             &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                   &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                   ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=hidden-xs><div class=feature-spec><div class=wrapper><i class=icon-large-touch></i><p><strong>Touch-enabled</strong></p></div></div><div class=row><div class=col-xs-12><p>Includes a faster processor, more memory and a larger hard drive for the ultimate computing experience.</p></div></div><div class=special-offers><ul><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li><li><a href=javascript:; class=btn-link>Dell Precision 17 5000 Series price includes $140 instant discount.</a></li></ul></div><div class=price-stack><div class="well well-transparent-stroke"><h4 class=dell-price><small>Final price</small></h4><h4 class=price><strong>$0,000,000.00</strong></h4><div class=price-discount-popup><h6 aria-describedby=popover-discount-desktop-deals><a tabindex=0 role=button id=popover-discount-desktop-deals data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Instant Discount&lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;h6&gt;Market value  &lt;a href=\'#legal-regulatory\' class=\'btn-link scroll\'&gt;  &lt;sup&gt; 1 &lt;/sup&gt; &lt;/a&gt;    &lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;h6 class=\'text-berry\'&gt;Instant discount&lt;span class=\'pull-right\'&gt;-$00.00&lt;/span&gt;&lt;/h6&gt;\r' + '\n' + '                                                             &lt;hr class=\'dotted-hr\'/&gt;\r' + '\n' + '                                                             &lt;h6&gt;&lt;strong&gt;Dell price&lt;span class=\'pull-right\'&gt;$000.00&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;">$20 Discount included</a></h6></div></div></div><div class=row><div class=col-xs-12><p class=legal-stack>Legal disclosures if any including VAT and shipping.</p></div></div><div class=finance-stack><h5 class=finance>Financing</h5><h5><small><a href=javascript:; class="btn-link finance-discount">As low as <sup>$</sup>20/mo<sup>^</sup></a></small></h5><div class=row><div class=col-xs-12><h5><small><a href=javascript:; class="btn-link finance-special-discount">6-month special financing</a></small></h5></div></div></div><div class=rewards-stack><div class=row><div class=col-xs-12><h5 class=rewards><i aria-hidden=true class="icon-small-star text-blue pull-left"></i>&nbsp;Rewards</h5><h6 class=rewards-discount aria-describedby=rewards-popover-deals-stack><a tabindex=0 role=button id=rewards-popover-deals-stack data-trigger=show class=popover-link data-html=true data-toggle=popover data-placement=top data-original-title="Get up to $80 back&lt;sup&gt;*^&lt;/sup&gt; &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Get $80.00 (10%) back in rewards on financed purchases or $40.00 (5%) back in rewards, no financing required.&lt;/p&gt;\r' + '\n' + '                                                                 &lt;p &gt;With Dell Rewards, all purchases qualify for free 2nd business day shipping.^&lt;/p&gt;\r' + '\n' + '                                                                 &lt;ul class=\'list-inline\'>\r' + '\n' + '                                                                    &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'&gt;With financing&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                    &lt;li class=\'pipe\'&gt;|&lt;/li&gt;\r' + '\n' + '                                                                    &lt;li&gt;&lt;a href=\'javascript:;\' class=\'btn-link\'>No financing required&lt;/a&gt;&lt;/li&gt;\r' + '\n' + '                                                                 &lt;/ul&gt;">Up to $80 back</a></h6></div></div></div><div class=row><div class=col-xs-12><div class=shipping-stack><img src=/components/product-stack/product-img/Smart_Selection_Green_64px.png class="img-responsive pull-left" alt="Responsive image"><div class=same-day-ship><h6><strong><a href=javascript:; data-toggle=popover data-html=true data-placement=top data-original-title="Smart Selection &lt;button type=\'button\' class=\'close pull-right visible-phone\' data-dismiss=\'popover\'&gt;\xd7&lt;/button&gt;" data-content="&lt;p&gt;Dell Smart Selection systems are our best value, ready-to-ship systems prebuilt based on customer insights. With Smart Selection, you get a simplified ordering process and fast shipping. Our experts will also recommend preselected software and accessories so that you get everything you need in one purchase. And you can add our custom-selected support services to keep your computer up and running.&lt;/p&gt;\r' + '\n' + '                                                                                       &lt;p &gt;Limited system quantities available. Smart Selection system orders typically ship out from Dell facilities the next business day after payment processing. 3-5 day shipping method is standard. Not available for APO/FPO orders. Electronics and accessories may ship separately.&lt;/p&gt;\r' + '\n' + '                                                                                       ">Smart Selection</a></strong></h6><h6><strong>Ship date: 02/10/16</strong></h6></div></div></div></div></div><div class=row><div class=col-xs-12><p class="text-gray-medium bottom-offset-5"><small>E-Value Code: 0000000</small></p></div><div class="col-xs-12 bottom-offset-5"><button class="btn btn-success btn-sm btn-block" type=button>Add to Cart</button></div><div class="col-xs-12 bottom-offset-10"><button class="btn btn-primary btn-sm btn-block" type=button>View Details</button></div></div></div></div></div><footer class=navbar><div class=container><ul class="nav navbar-nav"><li><a href=javascript:;>&copy;2015 Dell</a></li><li><a href=javascript:;>Terms of Sale</a></li><li><a href=javascript:;>Privacy Statement</a></li><li><a href=javascript:;>Ads &amp; Emails</a></li><li id=legal-regulatory><a href=javascript:;>Legal &amp; Regulatory</a></li><li><a href=javascript:;>Corporate Social Responsibility</a></li><li><a href=javascript:;>Contact</a></li></ul></div></footer></section>');
    $templateCache.put('components/progress-bars/demo-play-progress-bars.html', '<section ng-controller=progressBarsPLayDemoCtrl id=progress-bars-play-demo><div class=container><h2>Progress-Bars Builder</h2><div></div></div></section>');
    $templateCache.put('components/progress-bars/demo-progress-bars.html', '<section ng-controller=progressBarsCtrl id=progress-bars-html-example><div class=container><h2>Progress-Bars Demo</h2><div class=row><div class="col-md-6 bottom-offset-20"><h4>Default</h4><div class=progress><div class=bar style="width: 60%"></div></div><h4>Default with percentage</h4><div class=progress><div class=bar style="width: 60%">60%</div></div></div></div><div class=bottom-offset-60><h4>Default progress status</h4><div class="progress progress-status"><a href=javascript:; class="bar bar-complete" style="width: 33.3%"><span class="hidden-xs hidden-sm">Shipping</span></a><div class="bar bar-progress" style="width: 33.3%"><span class="hidden-xs hidden-sm">Payment</span></div><div class="bar bar-incomplete" style="width: 33.4%"><span class="hidden-xs hidden-sm">Verify &amp; Submit Order</span></div></div></div><div class=bottom-offset-60><h4>Progress Status: Disabled</h4><div class="progress progress-status"><div href=javascript:; class="bar bar-disabled" style="width: 33.3%"><span class="hidden-xs hidden-sm">Shipping</span></div><div class="bar bar-progress-disabled" style="width: 33.3%"><span class="hidden-xs hidden-sm">Payment</span></div><div class="bar bar-incomplete" style="width: 33.4%"><span class="hidden-xs hidden-sm">Verify &amp; Submit Order</span></div></div></div><div class=bottom-offset-60><h4>Progress Status 2-Step minimum</h4><div class="progress progress-status"><a href=javascript:; class="bar bar-complete" style="width: 50%"><span class="hidden-xs hidden-sm">Payment</span></a><div class="bar bar-incomplete" style="width: 50%"><span class="hidden-xs hidden-sm">Verify &amp; submit order</span></div></div></div><div class=bottom-offset-60><h4>Progress status 6-Step maximum</h4><div class="progress progress-status"><a href=javascript:; class="bar bar-complete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 1</span></a> <a href=javascript:; class="bar bar-complete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 2</span></a> <a href=javascript:; class="bar bar-complete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 3</span></a><div class="bar bar-progress" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 4</span></div><div class="bar bar-incomplete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 5</span></div><div class="bar bar-incomplete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 6</span></div></div></div><div class="well well-gray-very-light-stroke bottom-offset-60"><div class=bottom-offset-60><h4>Progress status 6-Step maximum</h4><div class="progress progress-status"><a href=javascript:; class="bar bar-complete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 1</span></a> <a href=javascript:; class="bar bar-complete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 2</span></a> <a href=javascript:; class="bar bar-complete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 3</span></a><div class="bar bar-progress" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 4</span></div><div class="bar bar-incomplete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 5</span></div><div class="bar bar-incomplete" style="width: 16.666%"><span class="hidden-xs hidden-sm">Step 6</span></div></div></div></div><div class=bottom-offset-60><h4>Animated Striped</h4><p>Add <code>.active</code> to <code>.progress-bar-striped</code> to animate the stripes right to left. Not available in IE9 and below.</p><div class=progress><div class="progress-bar progress-bar-striped active" role=progressbar aria-valuenow=45 aria-valuemin=0 aria-valuemax=100 style="width: 45%"><span class=sr-only>45% Complete</span></div></div></div><div class=bottom-offset-60><h4>Striped progress</h4><div ng-init=fakeAnimation() class=interactive-progress-bar><div class="progress bottom-offset-5"><div ng-class=stripeAnimate class="progress-bar progress-bar-striped" role=progressbar aria-valuenow={{fakeAnimationValue}} aria-valuemin=0 aria-valuemax=100 style="width: {{fakeAnimationValue}}%"></div><div><div class="pull-right progress-counter hidden-xs"><h5>{{fakeAnimationValue}}%</h5></div></div></div><div class=row><div class=col-xs-12><div>Download<span ng-if="fakeAnimationValue < 100">ing</span><span ng-if="fakeAnimationValue === 100">ed</span> {{fakeAnimationSteps}} of 5<div class="btn-group pull-right fake-animation-controls"><button type=reset class="btn btn-default" ng-click=resetFakeAnimation() ng-if="fakeAnimationValue !== 100">Cancel</button> <button type=submit class="btn btn-primary" ng-click=pauseFakeAnimation() ng-if="fakeAnimationId && fakeAnimationValue !== 100">Pause</button> <button type=submit class="btn btn-primary" ng-click=fakeAnimation() ng-if="!fakeAnimationId && fakeAnimationValue !== 100">Resume</button> <button type=submit class="btn btn-primary" ng-if="fakeAnimationValue === 100" ng-click=resetFakeAnimation()>Ok</button></div></div></div></div></div></div><div class=bottom-offset-60><h4>Dropdown progress status</h4><div class=btn-toolbar><div class=btn-group id=button-default-dropdown><a class="btn btn-default dropdown-toggle btn-progress" data-toggle=dropdown href=javascript:; aria-expanded=false>Step 5 of 9: Lorem ispum</a><ul class=dropdown-menu><li class=completed><a href=javascript:;>Step 1 of 9: Lorem ispum</a></li><li class=completed><a href=javascript:;>Step 2 of 9: Lorem ispum</a></li><li class=completed><a href=javascript:;>Step 3 of 9: Lorem ispum</a></li><li class=completed><a href=javascript:;>Step 4 of 9: Lorem ispum</a></li><li class=active><a href=javascript:;>Step 5 of 9: Lorem ispum</a></li><li class=disabled><a href=javascript:;>Step 6 of 9: Lorem ispum</a></li><li class=disabled><a href=javascript:;>Step 7 of 9: Lorem ispum</a></li><li class=disabled><a href=javascript:;>Step 8 of 9: Lorem ispum</a></li><li class=disabled><a href=javascript:;>Step 9 of 9: Lorem ispum</a></li><li><a href=javascript:;>Summary</a></li></ul></div><div class=btn-group><a class="btn btn-primary" href=javascript:;>Next</a></div><div class=btn-group><a class="btn btn-link" href=javascript:;>Exit</a></div></div></div></div></section>');
    $templateCache.put('components/ratings-and-reviews/demo-play-ratings-and-reviews.html', '<section ng-controller=ratingsAndReviewsPLayDemoCtrl id=ratings-and-reviews-play-demo><div class=container><h2>Ratings-And-Reviews Builder</h2><div></div></div></section>');
    $templateCache.put('components/ratings-and-reviews/demo-ratings-and-reviews.html', '<div class=container><div class=row><div class=col-md-9><section ng-controller=ratingsAndReviewsDemoCtrl id=ratings-and-reviews-html-example><h2>Ratings-And-Reviews Demo</h2><div class=row><div class=col-sm-6><h3>Star Ratings (with reviews & no histogram)</h3><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li class=pull-right><a href=javascript:; class=btn-link>200 ratings</a></li><li class=pull-right><a href=javascript:; class=btn-link>Write a review</a></li></ul></div></div><hr><div class=row><div class=col-sm-6><h3>Star Ratings (no reviews & no histogram)</h3><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-0></i></li><li><i class=icon-small-favorite-0></i></li><li><i class=icon-small-favorite-0></i></li><li><i class=icon-small-favorite-0></i></li><li><i class=icon-small-favorite-0></i></li></ul></li><li class=pull-right><a href=javascript:; class=btn-link>Write a review</a></li></ul></div></div><hr><div class=row><div class=col-sm-6><h3>Star Ratings (Reviews w/Histogram)</h3><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li class=pull-right><a href=javascript:; class=btn-link>200 ratings</a></li><li class=pull-right><a href=javascript:; class=btn-link>Write a review</a></li></ul><p>4.6 out of 5</p><div class=ratings-histogram><div class=row><div class=col-xs-3>5&nbsp;stars</div><div class=col-xs-7><div class=progress><div class=bar style="width: 51%"></div></div></div><div class=col-xs-1>107</div></div><div class=row><div class=col-xs-3>4&nbsp;stars</div><div class=col-xs-7><div class=progress><div class=bar style="width: 25%"></div></div></div><div class=col-xs-1>54</div></div><div class=row><div class=col-xs-3>3&nbsp;stars</div><div class=col-xs-7><div class=progress><div class=bar style="width: 11%"></div></div></div><div class=col-xs-1>23</div></div><div class=row><div class=col-xs-3>2&nbsp;stars</div><div class=col-xs-7><div class=progress><div class=bar style="width: 5%"></div></div></div><div class=col-xs-1>12</div></div><div class=row><div class=col-xs-3>1&nbsp;stars</div><div class=col-xs-7><div class=progress><div class=bar style="width: 5%"></div></div></div><div class=col-xs-1>12</div></div></div></div></div><hr><h3>Recomendation Ratio</h3><p><strong>74</strong> out of <strong>91</strong> (81%) people would recommend this product to a friend.</p><hr><div class=row><div class=col-sm-6><h3>Customer Review Quote</h3><blockquote class=blockquote-unstyled><h3>When I received the XPS 16 I was so surprised at how thin, sharp, and stylish it was.</h3><footer>jevester, September 24, 2009</footer></blockquote></div></div><hr><h3>Customer review example</h3><div class=row><div class=col-sm-5><div><ul class=ratings><li><ul class=rating-stars><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-100></i></li><li><i class=icon-small-favorite-60></i></li></ul></li><li class=pull-right><a href=javascript:; class=btn-link>200 ratings</a></li><li class=pull-right><a href=javascript:; class=btn-link>Write a review</a></li></ul><ul class=list-unstyled><li><p><span>Features</span> <span class=pull-right>4.4/5</span></p></li><li><p><span>Performance</span> <span class=pull-right>4.6/5</span></p></li><li><p><span>Value</span> <span class=pull-right>5/5</span></p></li><li><p><span>Customer Service</span> <span class=pull-right>3.9/5</span></p></li><li><p><span>Operating System</span> <span class=pull-right>4.1/5</span></p></li></ul></div><div class="panel panel-default"><div class=panel-body><div class=row><div class=col-sm-2><i class=icon-large-useraccount></i></div><div class=col-sm-10><h4><a href=javascript:;>Mark555</a></h4><p>New York, NY</p></div></div><p><i class="icon-small-star text-gray-medium"></i> <a href=javascript:; class=btn-link>Featured review</a><br><i class="icon-small-award text-gray-medium"></i> <a href=javascript:; class=btn-link>Verified buyer</a></p><p><strong>Duration of product use:</strong><br>less than a month</p><p><strong>Level of expertise:</strong><br>Expert</p><p><strong>I use my PC for:</strong><br>Everyday Computing</p><p><strong>Your Lifestyle:</strong><br>Professional</p></div></div></div><div class=col-sm-7><h4>this is an awesome laptop!</h4><p><small>June 4, 2015</small></p><p><i class="icon-sm-checkmark text-blue"></i> <strong>Yes, I would recommend this product</strong></p><p>I\'ve had this dell laptop for 6 months and it is wonderful. Easy to set up and use with windows 8.1. And I\'m not very computer savvy. I used dell support a couple of times but other than that, I did the rest on my own.</p><p>The other day I was using my dell laptop at our kitchen island/breakfast bar and I had it plugged in to charge. My sandal caught the cord when I stood up and the laptop flew up in the air and 5 feet away, and proceeded to smash to the floor. The keyboard fell out as the laptop was in the open position. It landed in an inverted "V".</p><p>Very, very frantic I picked it and the keyboard up. The laptop did not have a scratch on it. My husband re-plugged the ribbon wire for the keyboard and put it back in.<span class=collapsed data-toggle=collapse data-target=#review-example-more aria-expanded=true><span class=show-collapsed>..(<a href=javascript:;>read more</a>)</span></span></p><div id=review-example-more class=collapse><p>The laptop and keyboard worked. No chips. No cracks at all. It works perfectly.</p><p>This is such a durable laptop. I cannot express the force that this laptop took. When I heard it land...I thought it was broken for sure.</p><p>I would highly recommend it for home or office use. I\'m so glad to have chosen the dell inspiron 5000.</p></div><p>Was this review helpful?</p><p><button type=button class="btn btn-default">Yes (74)</button> <button type=button class="btn btn-default">No (6)</button></p><p><a href=javascript:; class=btn-link>Report review</a></p><ul class=list-inline><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Connect with Facebook" class=icon-social-facebook></a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=top data-original-title="Connect with Twitter" class=icon-social-twitter></a></li></ul></div></div><hr></section></div><div id=leftCol class=col-md-3 style="position: relative; top: 35px"><div id=side-bar-menu class=hidden-sx><div id=sidebar-component-parent class=well><h4 class=bottom-offset-0>Variations</h4><ul class="list-unstyled sidebar-component nav"><li class=active><a class=component-item href="#/" data-ga-event-action="" data-ga-event-category=variations1 data-ga-event-trigger=click>Variation 1</a></li><li class=active><a class=component-item href="#/" data-ga-event-action="" data-ga-event-category=variations2 data-ga-event-trigger=click>Variation 2</a></li><li class=active><a class=component-item href="#/" data-ga-event-action="" data-ga-event-category=variations3 data-ga-event-trigger=click>Variation 3</a></li></ul><hr><ul class="list-unstyled variations-list sidebar-component nav tab-links"><li><a class="component-item tab-link" href=#additional-notes data-ga-event-action="link clicked" data-ga-event-category="additional notes" data-ga-event-trigger=click>Additional notes</a></li><li><a class="component-item tab-link" href=#archive-history data-ga-event-action="link clicked" data-ga-event-category="archive history" data-ga-event-trigger=click>Archive history</a></li></ul><hr><div><h4 class=bottom-offset-0>Tags</h4><hr class="top-offset-5 bottom-offset-10"><ul class=list-inline><li><a class="btn btn-default btn-xs bottom-offset-5" href="#/" data-ga-event-action=validate data-ga-event-category=tags data-ga-event-trigger=click>Tag1</a></li><li><a class="btn btn-default btn-xs bottom-offset-5" href="#/" data-ga-event-action=validation data-ga-event-category=tags data-ga-event-trigger=click>Tag2</a></li></ul></div><br><div class="well bold-12"><span class="text-blue icon-small-star"></span> <span>NOTE: This is just for layout and Demo so the left column is laidout correct.</span></div></div></div></div></div></div>');
    $templateCache.put('components/responsive-utilities/demo-play-responsive-utilities.html', '<section ng-controller=responsiveUtilitiesPLayDemoCtrl id=responsive-utilities-play-demo><div class=container><h2>Responsive-Utilities Builder</h2><div></div></div></section>');
    $templateCache.put('components/responsive-utilities/demo-responsive-utilities.html', '<section ng-controller=responsiveUtilitiesCtrl id=responsive-utilities-html-example><div class=container><h2 class=bottom-offset-30>Responsive-Utilities Demo</h2><div class=bottom-offset-30><h3>Available classes</h3><p>Use a single or combination of the available classes for toggling content across viewport breakpoints.</p><div><table class="table table-bordered table-striped"><thead><tr><th></th><th>Extra small devices<br><small>Phones (&lt;768px)</small></th><th>Small devices<br><small>Tablets (\u2265768px)</small></th><th>Medium devices<br><small>Desktops (\u2265992px)</small></th><th>Large devices<br><small>Desktops (\u22651200px)</small></th></tr></thead><tbody><tr><td><code>.visible-xs-*</code></td><td class=is-visible>Visible</td><td class=is-hidden>Hidden</td><td class=is-hidden>Hidden</td><td class=is-hidden>Hidden</td></tr><tr><td><code>.visible-sm-*</code></td><td class=is-hidden>Hidden</td><td class=is-visible>Visible</td><td class=is-hidden>Hidden</td><td class=is-hidden>Hidden</td></tr><tr><td><code>.visible-md-*</code></td><td class=is-hidden>Hidden</td><td class=is-hidden>Hidden</td><td class=is-visible>Visible</td><td class=is-hidden>Hidden</td></tr><tr><td><code>.visible-lg-*</code></td><td class=is-hidden>Hidden</td><td class=is-hidden>Hidden</td><td class=is-hidden>Hidden</td><td class=is-visible>Visible</td></tr></tbody><tbody><tr><td><code>.hidden-xs</code></td><td class=is-hidden>Hidden</td><td class=is-visible>Visible</td><td class=is-visible>Visible</td><td class=is-visible>Visible</td></tr><tr><td><code>.hidden-sm</code></td><td class=is-visible>Visible</td><td class=is-hidden>Hidden</td><td class=is-visible>Visible</td><td class=is-visible>Visible</td></tr><tr><td><code>.hidden-md</code></td><td class=is-visible>Visible</td><td class=is-visible>Visible</td><td class=is-hidden>Hidden</td><td class=is-visible>Visible</td></tr><tr><td><code>.hidden-lg</code></td><td class=is-visible>Visible</td><td class=is-visible>Visible</td><td class=is-visible>Visible</td><td class=is-hidden>Hidden</td></tr></tbody></table></div></div><div><h3>Print classes</h3><p>Similar to the regular responsive classes, use these for toggling content for print.</p><div class=table-responsive><table class="table table-bordered table-striped responsive-utilities"><thead><tr><td>Class</td><td>Browser</td><td>Print</td></tr></thead><tbody><tr><td><code>.visible-print</code></td><td class=is-hidden>Hidden</td><td class=is-visible>Visible</td></tr><tr><td><code>.hidden-print</code></td><td class=is-visible>Visible</td><td class=is-hidden>Hidden</td></tr></tbody></table></div></div></div></section>');
    $templateCache.put('components/search-and-navigation/demo-play-search-and-navigation.html', '<section ng-controller=searchAndNavigationPLayDemoCtrl id=search-and-navigation-play-demo><div class=container><h2>Search-And-Navigation Builder</h2><div></div></div></section>');
    $templateCache.put('components/search-and-navigation/demo-search-and-navigation.html', '<section ng-controller=searchAndNavigationCtrl id=search-and-navigation-html-example><div class=container><h2>Search-And-Filtering Demo</h2><div><div data-ng-app data-ng-controller=myCheckboxCtrl><div class=row><h2>Filtering</h2></div><div class=row><h3>Filter by checkbox</h3></div><div class=row id=filter-checkbox><div class="pull-left col-sm-3 col-xs-12"><p>Narrow your search by screen size</p><label class=pull-left ng-repeat="c in classes"><input type=checkbox ng-model="selected[c]"> <span>{{c}}</span></label></div><div class="col-sm-9 col-xs-12"><div class="pull-left searchCard text-center well-gray" ng-repeat="card in cards | filter:showCards"><h3>{{card.name}}</h3><em>{{card.size}}</em><br><em>{{card.price}}</em></div></div></div></div><hr><div data-ng-app data-ng-controller=myDDCtrl><div class=row><h3>Filter by dropdown</h3></div><div class=row id=filter-drop><div class="pull-left col-sm-3 col-xs-12"><p class="text-left top-padding-5">Screen size:</p><select ng-model=screenSize ng-options="item.size for item in filterOptions.sizes"><option value="" selected>-- Select your Size --</option></select><div><p class="text-left top-padding-5">Price:</p><select ng-model=priceRange ng-options="item.pricerange for item in filterOptions.prices"><option value="" selected>-- Select your Range --</option></select></div></div><div class="col-sm-9 col-xs-12"><div class="pull-left searchCard text-center well-gray" ng-repeat="item in data | filter:screenSize | filter:priceRange"><h3>{{item.name}}</h3><em>{{item.size}}</em><br><em>{{item.pricerange}}</em></div></div></div></div></div></div></section>');
    $templateCache.put('components/site-wide-messaging/demo-guide-site-wide-messaging.html', '<section ng-controller=siteWideMessagingGuideDemoCtrl id=site-wide-messaging-guide-demo><div class=container><h2>Site-Wide-Messaging Guide</h2><div></div></div></section>');
    $templateCache.put('components/site-wide-messaging/demo-play-site-wide-messaging.html', '<section ng-controller=siteWideMessagingPLayDemoCtrl id=site-wide-messaging-play-demo><div class=container><h2>Site-Wide-Messaging Builder</h2><div></div></div></section>');
    $templateCache.put('components/site-wide-messaging/demo-site-wide-messaging.html', '<section ng-controller=siteWideMessagingCtrl id=site-wide-messaging-html-example><div class=container><h2>Site-Wide-Messaging Demo</h2><div class=row><div class=col-md-9><div equalizer=group class="equalize well well-white text-gray-medium well-white-stroke"><div><div class="site-wide-messaging well-gray-light" id=siteWideMessage data-counter-deadline="August 30 2016 09:47:00 GMT-05:00" data-desktop-original-text="Members get twice the discount on all PCs, plus an extra 15% off XPS PCs with coupon code 150FFXPS. Ends 10/13/2015." data-desktop-replacement-text="This is desktop replacement text" data-mobile-original-text="Get 15% off all XPS PCs with coupon code 150FFXPS until midnight." data-mobile-replacement-text="This is mobile replacement text" data-cta="Shop PCs" data-optional-cta="Shop XPS" data-optional-cta-mobile=false data-optional-image=components/site-wide-messaging/xps_8900.png><ul class=list-inline><li class="col-lg-10 col-md-10 col-sm-10"><div class=site-wide-messaging-product-image><img alt="XPS 8900"></div><div class=site-wide-messaging-copy><span class=mobile-countdown id=mobileCountDown></span> <span class=site-wide-messaging-text></span> <a href=javascript:; id=cta></a> <span class="site-wide-messaging-cta-optional text-blue">|&nbsp;<a href=javascript:;></a></span></div></li><li class="col-lg-2 col-md-2 col-sm-2 desktop-countdown" id=desktopCountDown></li></ul></div></div><div class=col-xs-12><hr class="rule-break hr-gray-light"><h5 class=fragment-title>Site-wide Messaging</h5><div class=description>Use for the time sensitive promotions on dell.com.</div></div></div></div><div class=col-md-3><div class=well>sidebar</div></div></div></div></section>');
    $templateCache.put('components/standard-buttons/demo-play-standard-buttons.html', '<section ng-controller=standardButtonsPLayDemoCtrl id=standard-buttons-play-demo><div class=container><h2>Standard-Buttons Builder</h2><div></div></div></section>');
    $templateCache.put('components/standard-buttons/demo-standard-buttons.html', '<section ng-controller=standardButtonsCtrl id=standard-buttons-html-example><div class=container><h2 class=bottom-offset-20>Standard-Buttons Demo</h2><div class=bottom-offset-30><h4>Primary Non-Purchase</h4><a class="btn btn-primary" href=javascript:;>Primary</a></div><div class=bottom-offset-30><h4>Primary Non-Purchase disabled</h4><a class="btn btn-primary disabled" href=javascript:;>Primary</a></div><hr><div class=bottom-offset-30><h4>Primary Purchase</h4><a class="btn btn-success" href=javascript:;>Purchase</a></div><div class=bottom-offset-30><h4>Primary Purchase disabled</h4><a class="btn btn-success disabled" href=javascript:;>Purchase</a></div><hr><div class=bottom-offset-30><h4>Secondary or General Use</h4><a class="btn btn-default" href=javascript:;>General Use</a></div><div class=bottom-offset-30><h4>Secondary or General Use disabled</h4><a class="btn btn-default disabled" href=javascript:;>General Use</a></div><hr><div class=bottom-offset-30><h4>Primary link</h4><a class="btn btn-link" href=javascript:;>Link</a></div><div class=bottom-offset-30><h4>Primary link disabled</h4><a class="btn btn-link disabled" href=javascript:;>Link</a></div></div></section>');
    $templateCache.put('components/tables-uber/demo-play-tables-uber.html', '<section ng-controller=tablesUberPLayDemoCtrl id=tables-uber-play-demo><div class=container><h2>Tables-Uber Builder</h2><div></div></div></section>');
    $templateCache.put('components/tables-uber/demo-tables-uber.html', '<section ng-controller=tablesUberCtrl id=tables-uber-html-example><div class=container><h2>Tables-Uber Demo</h2><div><h3 class="bottom-offset-5 top-offset-60">Data Tables - Expandable Details</h3><div class=bottom-offset-60><form class=dt-form-inline role=form><div class="form-group pull-left"><label for=expand-details class=control-label>Bulk actions</label><div class=form-group><select class=form-control id=expand-details><option disabled selected>choose option</option><option>Export</option><option>Delete</option><option>Add to group</option><option>Remove from group</option></select></div></div></form><table class="table table-striped table-hover table-expandable-row table-pagination table-editable nowrap compact" data-datafile=components/tables-uber/data-responsive.json><thead><tr><th><input name=select_all value=1 type=checkbox></th><th class=truncate>Company name</th><th class=truncate>Solution ID</th><th class=truncate>List price</th><th class=truncate>Quote number</th></tr></thead></table></div><div class=bottom-offset-60><form class=dt-form-inline role=form><div class="form-group pull-left"><label for=expand-details-1 class=control-label>Bulk actions</label><div class=form-group><select class=form-control id=expand-details-1><option disabled selected>choose option</option><option>Export</option><option>Delete</option><option>Add to group</option><option>Remove from group</option></select></div></div></form><table class="table table-striped table-hover table-expandable-row table-pagination table-editable nowrap compact" data-datafile=components/tables-uber/data-responsive.json><thead><tr><th><input name=select_all value=1 type=checkbox></th><th class=truncate>Company name</th><th class=truncate>Solution ID</th><th class=truncate>List price</th><th class=truncate>Quote number</th></tr></thead></table></div><h3 class="bottom-offset-20 top-offset-60">Data Tables - Responsive Collapsing Column</h3><div class=bottom-offset-60><div class="well well-gray-very-light-stroke overflow-hidden"><form class=dt-form-inline role=form><div class="form-group pull-left"><label for=collapse-columns-2 class=control-label>Bulk actions</label><div class=form-group><select class=form-control id=collapse-columns-2><option disabled selected>choose option</option><option>Export</option><option>Delete</option><option>Add to group</option><option>Remove from group</option></select></div></div></form><table class="table table-striped table-hover table-responsive-columns table-pagination table-editable" data-datafile=components/tables-uber/dataColumn.json><thead><tr><th><span><input name=select_all value=1 type=checkbox></span></th><th>Company name</th><th>Solution name</th><th>Solution ID</th><th>Owner</th><th>Last edited</th><th>List price</th><th>Customer number</th><th>Quote number</th><th>Status</th></tr></thead></table></div></div><hr><div class=bottom-offset-60><div class="well well-gray-very-light-stroke overflow-hidden"><form class=dt-form-inline role=form><div class="form-group pull-left"><label for=collapse-columns-3 class=control-label>Bulk actions</label><div class=form-group><select class=form-control id=collapse-columns-3><option disabled selected>choose option</option><option>Export</option><option>Delete</option><option>Add to group</option><option>Remove from group</option></select></div></div></form><table class="table table-striped table-hover table-responsive-columns table-pagination table-editable" data-datafile=components/tables-uber/dataColumn.json><thead><tr><th><span><input name=select_all value=1 type=checkbox></span></th><th>Company name</th><th>Solution name</th><th>Solution ID</th><th>Owner</th><th>Last edited</th><th>List price</th><th>Customer number</th><th>Quote number</th><th>Status</th></tr></thead></table></div></div><hr><div class=bottom-offset-60><div class="well well-gray-very-light-stroke overflow-hidden"><form class=dt-form-inline role=form><div class="form-group pull-left"><label for=collapse-columns class=control-label>Bulk actions</label><div class=form-group><select class=form-control id=collapse-columns><option disabled selected>choose option</option><option>Export</option><option>Delete</option><option>Add to group</option><option>Remove from group</option></select></div></div></form><table class="table table-striped table-hover table-responsive-columns table-pagination table-editable" data-datafile=components/tables-uber/dataColumn.json><thead><tr><th><span><input name=select_all value=1 type=checkbox></span></th><th>Company name</th><th>Solution name</th><th>Solution ID</th><th>Owner</th><th>Last edited</th><th>List price</th><th>Customer number</th><th>Quote number</th><th>Status</th></tr></thead></table></div></div></div></div></section>');
    $templateCache.put('components/tables/demo-play-tables.html', '<section ng-controller=tablesPLayDemoCtrl id=tables-play-demo><div class=container><h2>Tables Builder</h2><div></div></div></section>');
    $templateCache.put('components/tables/demo-tables.html', '<section ng-controller=tablesCtrl id=tables-html-example><div class=container><h2>Tables Demo</h2><h3 class="bottom-offset-5 top-offset-60">Data Tables - Simple</h3><div class=bottom-offset-60><div class=table-responsive><table class="table table-hover"><thead><tr><th>Date</th><th>Order</th><th>Product</th><th>Description</th><th>Status</th><th>Delivery</th><th>Tracking</th></tr></thead><tbody><tr><th scope=row>03/19/15</th><td>#42568</td><td><a href=javascript:;>Optiplex 9020</a></td><td>OptiPlex 9020-Dell\u2019s premium business-class desktop.</td><td>In process</td><td>03/22/15</td><td>TBD</td></tr><tr><th scope=row>03/22/15</th><td>#77475</td><td><a href=javascript:;>OptiPlex 7020</a></td><td>Mainstream performance, and advanced security and manageability.</td><td>Shipping</td><td>04/05/15</td><td><a href=javascript:;>#de467ft53s</a></td></tr><tr><th scope=row>03/24/15</th><td>#44356</td><td><a href=javascript:;>OptiPlex XE2</a></td><td>Long-term computing solution and highly durable OptiPlex XE2</td><td>Out for Delivery</td><td>04/08/15</td><td><a href=javascript:;>#0U812-90210s</a></td></tr></tbody></table></div></div><h3 class="bottom-offset-5 top-offset-60">Data Tables - Simple w/ optional zebra striping</h3><div class=bottom-offset-60><div class=table-responsive><table class="table table-hover table-striped"><thead><tr><th>&nbsp;</th><th>Column 1</th><th>Column 2</th><th>Column 3</th><th>Column 4</th><th>Column 5</th><th>Column 6</th></tr></thead><tbody><tr><th scope=row>1</th><td>value 1:1</td><td><a href=javascript:;>value 1:2</a></td><td>value 1:3</td><td>value 1:4</td><td>value 1:5</td><td>value 1:6</td></tr><tr><th scope=row>2</th><td>value 2:1</td><td>value 2:2</td><td><a href=javascript:;>value 2:3</a></td><td>value 2:4</td><td>value 2:5</td><td>value 2:6</td></tr><tr><th scope=row>3</th><td>value 3:1</td><td>value 3:2</td><td>value 3:3</td><td>value 3:4</td><td>value 3:5</td><td>value 3:6</td></tr></tbody></table></div></div><h3 class="bottom-offset-5 top-offset-60">Data Tables - Responsive Simple Table</h3><div class=bottom-offset-60><div id=responsive-simple-table><table class="table table-hover table-striped table-responsive"><thead data-rtcontainerbreakpoint=1000><tr><th>Date</th><th>Order</th><th>Product</th><th>Description</th><th>Status</th><th>Delivery</th><th>Tracking</th></tr></thead><tbody><tr><td scope=row><strong>03/19/15</strong></td><td>#42568</td><td><a href=javascript:;>Optiplex 9020</a></td><td>OptiPlex 9020-Dell\u2019s premium business-class desktop.</td><td>In process</td><td>03/22/15</td><td>TBD</td></tr><tr><td scope=row><strong>03/22/15</strong></td><td>#77475</td><td><a href=javascript:;>OptiPlex 7020</a></td><td>Mainstream performance, and advanced security and manageability.</td><td>Shipping</td><td>04/05/15</td><td><a href=javascript:;>#de467ft53s</a></td></tr><tr><td scope=row><strong>03/24/15</strong></td><td>#44356</td><td><a href=javascript:;>OptiPlex XE2</a></td><td>Long-term computing solution and highly durable OptiPlex XE2</td><td>Out for Delivery</td><td>04/08/15</td><td><a href=javascript:;>#0U812-90210s</a></td></tr></tbody></table></div></div><h3 class="bottom-offset-5 top-offset-60">Data Tables - Carousel (Fixed 1st Column)</h3><div class=bottom-offset-60><table class="table table-hover table-striped table-fixed-column table-column" cellspacing=0 width=100%><thead><tr><th>First name</th><th>Last name</th><th>Position</th><th>Office</th><th>Age</th><th>Start date</th><th>Salary</th><th>Extn.</th><th>E-mail</th></tr></thead><tbody><tr><td>Tiger</td><td>Nixon</td><td>System Architect</td><td>Edinburgh</td><td>61</td><td>2011/04/25</td><td>$320,800</td><td>5421</td><td>t.nixon@datatables.net</td></tr><tr><td>Garrett</td><td>Winters</td><td>Accountant</td><td>Tokyo</td><td>63</td><td>2011/07/25</td><td>$170,750</td><td>8422</td><td>g.winters@datatables.net</td></tr><tr><td>Ashton</td><td>Cox</td><td>Junior Technical Author</td><td>San Francisco</td><td>66</td><td>2009/01/12</td><td>$86,000</td><td>1562</td><td>a.cox@datatables.net</td></tr><tr><td>Cedric</td><td>Kelly</td><td>Senior Javascript Developer</td><td>Edinburgh</td><td>22</td><td>2012/03/29</td><td>$433,060</td><td>6224</td><td>c.kelly@datatables.net</td></tr><tr><td>Airi</td><td>Satou</td><td>Accountant</td><td>Tokyo</td><td>33</td><td>2008/11/28</td><td>$162,700</td><td>5407</td><td>a.satou@datatables.net</td></tr><tr><td>Brielle</td><td>Williamson</td><td>Integration Specialist</td><td>New York</td><td>61</td><td>2012/12/02</td><td>$372,000</td><td>4804</td><td>b.williamson@datatables.net</td></tr><tr><td>Herrod</td><td>Chandler</td><td>Sales Assistant</td><td>San Francisco</td><td>59</td><td>2012/08/06</td><td>$137,500</td><td>9608</td><td>h.chandler@datatables.net</td></tr><tr><td>Rhona</td><td>Davidson</td><td>Integration Specialist</td><td>Tokyo</td><td>55</td><td>2010/10/14</td><td>$327,900</td><td>6200</td><td>r.davidson@datatables.net</td></tr><tr><td>Colleen</td><td>Hurst</td><td>Javascript Developer</td><td>San Francisco</td><td>39</td><td>2009/09/15</td><td>$205,500</td><td>2360</td><td>c.hurst@datatables.net</td></tr><tr><td>Sonya</td><td>Frost</td><td>Software Engineer</td><td>Edinburgh</td><td>23</td><td>2008/12/13</td><td>$103,600</td><td>1667</td><td>s.frost@datatables.net</td></tr><tr><td>Jena</td><td>Gaines</td><td>Office Manager</td><td>London</td><td>30</td><td>2008/12/19</td><td>$90,560</td><td>3814</td><td>j.gaines@datatables.net</td></tr><tr><td>Quinn</td><td>Flynn</td><td>Support Lead</td><td>Edinburgh</td><td>22</td><td>2013/03/03</td><td>$342,000</td><td>9497</td><td>q.flynn@datatables.net</td></tr><tr><td>Charde</td><td>Marshall</td><td>Regional Director</td><td>San Francisco</td><td>36</td><td>2008/10/16</td><td>$470,600</td><td>6741</td><td>c.marshall@datatables.net</td></tr><tr><td>Haley</td><td>Kennedy</td><td>Senior Marketing Designer</td><td>London</td><td>43</td><td>2012/12/18</td><td>$313,500</td><td>3597</td><td>h.kennedy@datatables.net</td></tr><tr><td>Tatyana</td><td>Fitzpatrick</td><td>Regional Director</td><td>London</td><td>19</td><td>2010/03/17</td><td>$385,750</td><td>1965</td><td>t.fitzpatrick@datatables.net</td></tr><tr><td>Michael</td><td>Silva</td><td>Marketing Designer</td><td>London</td><td>66</td><td>2012/11/27</td><td>$198,500</td><td>1581</td><td>m.silva@datatables.net</td></tr><tr><td>Paul</td><td>Byrd</td><td>Chief Financial Officer (CFO)</td><td>New York</td><td>64</td><td>2010/06/09</td><td>$725,000</td><td>3059</td><td>p.byrd@datatables.net</td></tr><tr><td>Gloria</td><td>Little</td><td>Systems Administrator</td><td>New York</td><td>59</td><td>2009/04/10</td><td>$237,500</td><td>1721</td><td>g.little@datatables.net</td></tr><tr><td>Bradley</td><td>Greer</td><td>Software Engineer</td><td>London</td><td>41</td><td>2012/10/13</td><td>$132,000</td><td>2558</td><td>b.greer@datatables.net</td></tr><tr><td>Dai</td><td>Rios</td><td>Personnel Lead</td><td>Edinburgh</td><td>35</td><td>2012/09/26</td><td>$217,500</td><td>2290</td><td>d.rios@datatables.net</td></tr><tr><td>Jenette</td><td>Caldwell</td><td>Development Lead</td><td>New York</td><td>30</td><td>2011/09/03</td><td>$345,000</td><td>1937</td><td>j.caldwell@datatables.net</td></tr><tr><td>Yuri</td><td>Berry</td><td>Chief Marketing Officer (CMO)</td><td>New York</td><td>40</td><td>2009/06/25</td><td>$675,000</td><td>6154</td><td>y.berry@datatables.net</td></tr><tr><td>Caesar</td><td>Vance</td><td>Pre-Sales Support</td><td>New York</td><td>21</td><td>2011/12/12</td><td>$106,450</td><td>8330</td><td>c.vance@datatables.net</td></tr><tr><td>Doris</td><td>Wilder</td><td>Sales Assistant</td><td>Sidney</td><td>23</td><td>2010/09/20</td><td>$85,600</td><td>3023</td><td>d.wilder@datatables.net</td></tr><tr><td>Angelica</td><td>Ramos</td><td>Chief Executive Officer (CEO)</td><td>London</td><td>47</td><td>2009/10/09</td><td>$1,200,000</td><td>5797</td><td>a.ramos@datatables.net</td></tr><tr><td>Gavin</td><td>Joyce</td><td>Developer</td><td>Edinburgh</td><td>42</td><td>2010/12/22</td><td>$92,575</td><td>8822</td><td>g.joyce@datatables.net</td></tr><tr><td>Jennifer</td><td>Chang</td><td>Regional Director</td><td>Singapore</td><td>28</td><td>2010/11/14</td><td>$357,650</td><td>9239</td><td>j.chang@datatables.net</td></tr><tr><td>Brenden</td><td>Wagner</td><td>Software Engineer</td><td>San Francisco</td><td>28</td><td>2011/06/07</td><td>$206,850</td><td>1314</td><td>b.wagner@datatables.net</td></tr><tr><td>Fiona</td><td>Green</td><td>Chief Operating Officer (COO)</td><td>San Francisco</td><td>48</td><td>2010/03/11</td><td>$850,000</td><td>2947</td><td>f.green@datatables.net</td></tr><tr><td>Shou</td><td>Itou</td><td>Regional Marketing</td><td>Tokyo</td><td>20</td><td>2011/08/14</td><td>$163,000</td><td>8899</td><td>s.itou@datatables.net</td></tr><tr><td>Michelle</td><td>House</td><td>Integration Specialist</td><td>Sidney</td><td>37</td><td>2011/06/02</td><td>$95,400</td><td>2769</td><td>m.house@datatables.net</td></tr><tr><td>Suki</td><td>Burks</td><td>Developer</td><td>London</td><td>53</td><td>2009/10/22</td><td>$114,500</td><td>6832</td><td>s.burks@datatables.net</td></tr><tr><td>Prescott</td><td>Bartlett</td><td>Technical Author</td><td>London</td><td>27</td><td>2011/05/07</td><td>$145,000</td><td>3606</td><td>p.bartlett@datatables.net</td></tr><tr><td>Gavin</td><td>Cortez</td><td>Team Leader</td><td>San Francisco</td><td>22</td><td>2008/10/26</td><td>$235,500</td><td>2860</td><td>g.cortez@datatables.net</td></tr><tr><td>Martena</td><td>Mccray</td><td>Post-Sales support</td><td>Edinburgh</td><td>46</td><td>2011/03/09</td><td>$324,050</td><td>8240</td><td>m.mccray@datatables.net</td></tr><tr><td>Unity</td><td>Butler</td><td>Marketing Designer</td><td>San Francisco</td><td>47</td><td>2009/12/09</td><td>$85,675</td><td>5384</td><td>u.butler@datatables.net</td></tr><tr><td>Howard</td><td>Hatfield</td><td>Office Manager</td><td>San Francisco</td><td>51</td><td>2008/12/16</td><td>$164,500</td><td>7031</td><td>h.hatfield@datatables.net</td></tr><tr><td>Hope</td><td>Fuentes</td><td>Secretary</td><td>San Francisco</td><td>41</td><td>2010/02/12</td><td>$109,850</td><td>6318</td><td>h.fuentes@datatables.net</td></tr><tr><td>Vivian</td><td>Harrell</td><td>Financial Controller</td><td>San Francisco</td><td>62</td><td>2009/02/14</td><td>$452,500</td><td>9422</td><td>v.harrell@datatables.net</td></tr><tr><td>Timothy</td><td>Mooney</td><td>Office Manager</td><td>London</td><td>37</td><td>2008/12/11</td><td>$136,200</td><td>7580</td><td>t.mooney@datatables.net</td></tr><tr><td>Jackson</td><td>Bradshaw</td><td>Director</td><td>New York</td><td>65</td><td>2008/09/26</td><td>$645,750</td><td>1042</td><td>j.bradshaw@datatables.net</td></tr><tr><td>Olivia</td><td>Liang</td><td>Support Engineer</td><td>Singapore</td><td>64</td><td>2011/02/03</td><td>$234,500</td><td>2120</td><td>o.liang@datatables.net</td></tr><tr><td>Bruno</td><td>Nash</td><td>Software Engineer</td><td>London</td><td>38</td><td>2011/05/03</td><td>$163,500</td><td>6222</td><td>b.nash@datatables.net</td></tr><tr><td>Sakura</td><td>Yamamoto</td><td>Support Engineer</td><td>Tokyo</td><td>37</td><td>2009/08/19</td><td>$139,575</td><td>9383</td><td>s.yamamoto@datatables.net</td></tr><tr><td>Thor</td><td>Walton</td><td>Developer</td><td>New York</td><td>61</td><td>2013/08/11</td><td>$98,540</td><td>8327</td><td>t.walton@datatables.net</td></tr><tr><td>Finn</td><td>Camacho</td><td>Support Engineer</td><td>San Francisco</td><td>47</td><td>2009/07/07</td><td>$87,500</td><td>2927</td><td>f.camacho@datatables.net</td></tr><tr><td>Serge</td><td>Baldwin</td><td>Data Coordinator</td><td>Singapore</td><td>64</td><td>2012/04/09</td><td>$138,575</td><td>8352</td><td>s.baldwin@datatables.net</td></tr><tr><td>Zenaida</td><td>Frank</td><td>Software Engineer</td><td>New York</td><td>63</td><td>2010/01/04</td><td>$125,250</td><td>7439</td><td>z.frank@datatables.net</td></tr><tr><td>Zorita</td><td>Serrano</td><td>Software Engineer</td><td>San Francisco</td><td>56</td><td>2012/06/01</td><td>$115,000</td><td>4389</td><td>z.serrano@datatables.net</td></tr><tr><td>Jennifer</td><td>Acosta</td><td>Junior Javascript Developer</td><td>Edinburgh</td><td>43</td><td>2013/02/01</td><td>$75,650</td><td>3431</td><td>j.acosta@datatables.net</td></tr><tr><td>Cara</td><td>Stevens</td><td>Sales Assistant</td><td>New York</td><td>46</td><td>2011/12/06</td><td>$145,600</td><td>3990</td><td>c.stevens@datatables.net</td></tr><tr><td>Hermione</td><td>Butler</td><td>Regional Director</td><td>London</td><td>47</td><td>2011/03/21</td><td>$356,250</td><td>1016</td><td>h.butler@datatables.net</td></tr><tr><td>Lael</td><td>Greer</td><td>Systems Administrator</td><td>London</td><td>21</td><td>2009/02/27</td><td>$103,500</td><td>6733</td><td>l.greer@datatables.net</td></tr><tr><td>Jonas</td><td>Alexander</td><td>Developer</td><td>San Francisco</td><td>30</td><td>2010/07/14</td><td>$86,500</td><td>8196</td><td>j.alexander@datatables.net</td></tr><tr><td>Shad</td><td>Decker</td><td>Regional Director</td><td>Edinburgh</td><td>51</td><td>2008/11/13</td><td>$183,000</td><td>6373</td><td>s.decker@datatables.net</td></tr><tr><td>Michael</td><td>Bruce</td><td>Javascript Developer</td><td>Singapore</td><td>29</td><td>2011/06/27</td><td>$183,000</td><td>5384</td><td>m.bruce@datatables.net</td></tr><tr><td>Donna</td><td>Snider</td><td>Customer Support</td><td>New York</td><td>27</td><td>2011/01/25</td><td>$112,000</td><td>4226</td><td>d.snider@datatables.net</td></tr></tbody></table></div><h3 class="bottom-offset-5 top-offset-60">Data Tables - Responsive (Sorting )</h3><div class=bottom-offset-60><table id=example-rdt class="table table-striped table-hover responsive-data-table display" cellspacing=0 width=100%><thead><tr><th>First name</th><th>Last name</th><th>Position</th><th>Office</th><th>Age</th><th>Start date</th><th>Salary</th><th>Extn.</th></tr></thead><tbody><tr><td>Tiger</td><td>Nixon</td><td>System Architect</td><td>Edinburgh</td><td>61</td><td>2011/04/25</td><td>$320,800</td><td>5421</td></tr><tr><td>Garrett</td><td>Winters</td><td>Accountant</td><td>Tokyo</td><td>63</td><td>2011/07/25</td><td>$170,750</td><td>8422</td></tr><tr><td>Ashton</td><td>Cox</td><td>Junior Technical Author</td><td>San Francisco</td><td>66</td><td>2009/01/12</td><td>$86,000</td><td>1562</td></tr><tr><td>Cedric</td><td>Kelly</td><td>Senior Javascript Developer</td><td>Edinburgh</td><td>22</td><td>2012/03/29</td><td>$433,060</td><td>6224</td></tr><tr><td>Airi</td><td>Satou</td><td>Accountant</td><td>Tokyo</td><td>33</td><td>2008/11/28</td><td>$162,700</td><td>5407</td></tr><tr><td>Brielle</td><td>Williamson</td><td>Integration Specialist</td><td>New York</td><td>61</td><td>2012/12/02</td><td>$372,000</td><td>4804</td></tr><tr><td>Herrod</td><td>Chandler</td><td>Sales Assistant</td><td>San Francisco</td><td>59</td><td>2012/08/06</td><td>$137,500</td><td>9608</td></tr><tr><td>Rhona</td><td>Davidson</td><td>Integration Specialist</td><td>Tokyo</td><td>55</td><td>2010/10/14</td><td>$327,900</td><td>6200</td></tr><tr><td>Colleen</td><td>Hurst</td><td>Javascript Developer</td><td>San Francisco</td><td>39</td><td>2009/09/15</td><td>$205,500</td><td>2360</td></tr><tr><td>Sonya</td><td>Frost</td><td>Software Engineer</td><td>Edinburgh</td><td>23</td><td>2008/12/13</td><td>$103,600</td><td>1667</td></tr><tr><td>Jena</td><td>Gaines</td><td>Office Manager</td><td>London</td><td>30</td><td>2008/12/19</td><td>$90,560</td><td>3814</td></tr><tr><td>Quinn</td><td>Flynn</td><td>Support Lead</td><td>Edinburgh</td><td>22</td><td>2013/03/03</td><td>$342,000</td><td>9497</td></tr><tr><td>Charde</td><td>Marshall</td><td>Regional Director</td><td>San Francisco</td><td>36</td><td>2008/10/16</td><td>$470,600</td><td>6741</td></tr><tr><td>Haley</td><td>Kennedy</td><td>Senior Marketing Designer</td><td>London</td><td>43</td><td>2012/12/18</td><td>$313,500</td><td>3597</td></tr><tr><td>Tatyana</td><td>Fitzpatrick</td><td>Regional Director</td><td>London</td><td>19</td><td>2010/03/17</td><td>$385,750</td><td>1965</td></tr><tr><td>Michael</td><td>Silva</td><td>Marketing Designer</td><td>London</td><td>66</td><td>2012/11/27</td><td>$198,500</td><td>1581</td></tr><tr><td>Paul</td><td>Byrd</td><td>Chief Financial Officer (CFO)</td><td>New York</td><td>64</td><td>2010/06/09</td><td>$725,000</td><td>3059</td></tr><tr><td>Gloria</td><td>Little</td><td>Systems Administrator</td><td>New York</td><td>59</td><td>2009/04/10</td><td>$237,500</td><td>1721</td></tr><tr><td>Bradley</td><td>Greer</td><td>Software Engineer</td><td>London</td><td>41</td><td>2012/10/13</td><td>$132,000</td><td>2558</td></tr><tr><td>Dai</td><td>Rios</td><td>Personnel Lead</td><td>Edinburgh</td><td>35</td><td>2012/09/26</td><td>$217,500</td><td>2290</td></tr><tr><td>Jenette</td><td>Caldwell</td><td>Development Lead</td><td>New York</td><td>30</td><td>2011/09/03</td><td>$345,000</td><td>1937</td></tr><tr><td>Yuri</td><td>Berry</td><td>Chief Marketing Officer (CMO)</td><td>New York</td><td>40</td><td>2009/06/25</td><td>$675,000</td><td>6154</td></tr><tr><td>Caesar</td><td>Vance</td><td>Pre-Sales Support</td><td>New York</td><td>21</td><td>2011/12/12</td><td>$106,450</td><td>8330</td></tr><tr><td>Doris</td><td>Wilder</td><td>Sales Assistant</td><td>Sidney</td><td>23</td><td>2010/09/20</td><td>$85,600</td><td>3023</td></tr><tr><td>Angelica</td><td>Ramos</td><td>Chief Executive Officer (CEO)</td><td>London</td><td>47</td><td>2009/10/09</td><td>$1,200,000</td><td>5797</td></tr><tr><td>Gavin</td><td>Joyce</td><td>Developer</td><td>Edinburgh</td><td>42</td><td>2010/12/22</td><td>$92,575</td><td>8822</td></tr><tr><td>Jennifer</td><td>Chang</td><td>Regional Director</td><td>Singapore</td><td>28</td><td>2010/11/14</td><td>$357,650</td><td>9239</td></tr><tr><td>Brenden</td><td>Wagner</td><td>Software Engineer</td><td>San Francisco</td><td>28</td><td>2011/06/07</td><td>$206,850</td><td>1314</td></tr><tr><td>Fiona</td><td>Green</td><td>Chief Operating Officer (COO)</td><td>San Francisco</td><td>48</td><td>2010/03/11</td><td>$850,000</td><td>2947</td></tr><tr><td>Shou</td><td>Itou</td><td>Regional Marketing</td><td>Tokyo</td><td>20</td><td>2011/08/14</td><td>$163,000</td><td>8899</td></tr><tr><td>Michelle</td><td>House</td><td>Integration Specialist</td><td>Sidney</td><td>37</td><td>2011/06/02</td><td>$95,400</td><td>2769</td></tr><tr><td>Suki</td><td>Burks</td><td>Developer</td><td>London</td><td>53</td><td>2009/10/22</td><td>$114,500</td><td>6832</td></tr><tr><td>Prescott</td><td>Bartlett</td><td>Technical Author</td><td>London</td><td>27</td><td>2011/05/07</td><td>$145,000</td><td>3606</td></tr><tr><td>Gavin</td><td>Cortez</td><td>Team Leader</td><td>San Francisco</td><td>22</td><td>2008/10/26</td><td>$235,500</td><td>2860</td></tr><tr><td>Martena</td><td>Mccray</td><td>Post-Sales support</td><td>Edinburgh</td><td>46</td><td>2011/03/09</td><td>$324,050</td><td>8240</td></tr><tr><td>Unity</td><td>Butler</td><td>Marketing Designer</td><td>San Francisco</td><td>47</td><td>2009/12/09</td><td>$85,675</td><td>5384</td></tr><tr><td>Howard</td><td>Hatfield</td><td>Office Manager</td><td>San Francisco</td><td>51</td><td>2008/12/16</td><td>$164,500</td><td>7031</td></tr><tr><td>Hope</td><td>Fuentes</td><td>Secretary</td><td>San Francisco</td><td>41</td><td>2010/02/12</td><td>$109,850</td><td>6318</td></tr><tr><td>Vivian</td><td>Harrell</td><td>Financial Controller</td><td>San Francisco</td><td>62</td><td>2009/02/14</td><td>$452,500</td><td>9422</td></tr><tr><td>Timothy</td><td>Mooney</td><td>Office Manager</td><td>London</td><td>37</td><td>2008/12/11</td><td>$136,200</td><td>7580</td></tr><tr><td>Jackson</td><td>Bradshaw</td><td>Director</td><td>New York</td><td>65</td><td>2008/09/26</td><td>$645,750</td><td>1042</td></tr><tr><td>Olivia</td><td>Liang</td><td>Support Engineer</td><td>Singapore</td><td>64</td><td>2011/02/03</td><td>$234,500</td><td>2120</td></tr><tr><td>Bruno</td><td>Nash</td><td>Software Engineer</td><td>London</td><td>38</td><td>2011/05/03</td><td>$163,500</td><td>6222</td></tr><tr><td>Sakura</td><td>Yamamoto</td><td>Support Engineer</td><td>Tokyo</td><td>37</td><td>2009/08/19</td><td>$139,575</td><td>9383</td></tr><tr><td>Thor</td><td>Walton</td><td>Developer</td><td>New York</td><td>61</td><td>2013/08/11</td><td>$98,540</td><td>8327</td></tr><tr><td>Finn</td><td>Camacho</td><td>Support Engineer</td><td>San Francisco</td><td>47</td><td>2009/07/07</td><td>$87,500</td><td>2927</td></tr><tr><td>Serge</td><td>Baldwin</td><td>Data Coordinator</td><td>Singapore</td><td>64</td><td>2012/04/09</td><td>$138,575</td><td>8352</td></tr><tr><td>Zenaida</td><td>Frank</td><td>Software Engineer</td><td>New York</td><td>63</td><td>2010/01/04</td><td>$125,250</td><td>7439</td></tr><tr><td>Zorita</td><td>Serrano</td><td>Software Engineer</td><td>San Francisco</td><td>56</td><td>2012/06/01</td><td>$115,000</td><td>4389</td></tr><tr><td>Jennifer</td><td>Acosta</td><td>Junior Javascript Developer</td><td>Edinburgh</td><td>43</td><td>2013/02/01</td><td>$75,650</td><td>3431</td></tr><tr><td>Cara</td><td>Stevens</td><td>Sales Assistant</td><td>New York</td><td>46</td><td>2011/12/06</td><td>$145,600</td><td>3990</td></tr><tr><td>Hermione</td><td>Butler</td><td>Regional Director</td><td>London</td><td>47</td><td>2011/03/21</td><td>$356,250</td><td>1016</td></tr><tr><td>Lael</td><td>Greer</td><td>Systems Administrator</td><td>London</td><td>21</td><td>2009/02/27</td><td>$103,500</td><td>6733</td></tr><tr><td>Jonas</td><td>Alexander</td><td>Developer</td><td>San Francisco</td><td>30</td><td>2010/07/14</td><td>$86,500</td><td>8196</td></tr><tr><td>Shad</td><td>Decker</td><td>Regional Director</td><td>Edinburgh</td><td>51</td><td>2008/11/13</td><td>$183,000</td><td>6373</td></tr><tr><td>Michael</td><td>Bruce</td><td>Javascript Developer</td><td>Singapore</td><td>29</td><td>2011/06/27</td><td>$183,000</td><td>5384</td></tr><tr><td>Donna</td><td>Snider</td><td>Customer Support</td><td>New York</td><td>27</td><td>2011/01/25</td><td>$112,000</td><td>4226</td></tr></tbody></table></div><h3 class="bottom-offset-5 top-offset-60">Data Tables - Responsive (Complex)</h3><div class=bottom-offset-60><table id=example-complex class="table table-striped table-hover table-complex display" cellspacing=0 width=100%><thead><tr><th></th><th>Name</th><th>Position</th><th>Office</th><th>Salary</th></tr></thead></table></div></div></section>');
    $templateCache.put('components/tabs/demo-play-tabs.html', '<section ng-controller=tabsPLayDemoCtrl id=tabs-play-demo><div class=container><h2>Tabs Builder</h2><div></div></div></section>');
    $templateCache.put('components/tabs/demo-tabs.html', '<section ng-controller=tabsCtrl id=tabs-html-example><div class=container><h2>Tabs Demo</h2><h3>Tabs <small>(default)</small></h3><div class=bottom-offset-60><div class="row-offcanvas row-offcanvas-right"><ul class="nav nav-tabs"><li role=presentation class=active><a href=#home aria-controls=home role=tab data-toggle=tab>Home <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#profile aria-controls=profile role=tab data-toggle=tab>Profile <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#messages aria-controls=messages role=tab data-toggle=tab>Messages <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#settings aria-controls=settings role=tab data-toggle=tab>Settings <i class="icon-ui-arrowright visible-xs"></i></a></li></ul><div class=tab-content><div role=tabpanel class="tab-pane fade active in" id=home><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Home vestibulum bibendum tellus eget risus consectetur, eu pharetra mi luctus. Etiam congue a massa et lacinia. Maecenas tellus ipsum, scelerisque id massa eu, condimentum viverra velit. Donec nec lorem nulla. Sed justo arcu, tincidunt eu lacus et, placerat egestas urna.</p></div><div role=tabpanel class="tab-pane fade" id=profile><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Profile ellentesque porta quam id turpis commodo, eget malesuada risus malesuada. Nullam sit amet varius urna. In finibus scelerisque lacus, sed rutrum ex molestie vitae. vestibulum at faucibus nisi. Maecenas lacinia congue venenatis.</p></div><div role=tabpanel class="tab-pane fade" id=messages><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Messages sed justo arcu, tincidunt eu lacus et, placerat egestas urna. Ut varius purus id aliquet tristique.</p></div><div role=tabpanel class="tab-pane fade" id=settings><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Settings sivamus nec tristique felis, vitae accumsan enim. Aenean in volutpat justo. Sed dui elit, tristique non felis quis, posuere sodales nisi.</p></div></div></div></div><hr><h3>Tabs <small>(overflow: more tabs than the container width can handle)</small></h3><div class=bottom-offset-60><div class="row-offcanvas row-offcanvas-right"><ul class="nav nav-tabs" id=overflow-tabs-example><li role=presentation class=active><a href=#overflow-1 aria-controls=home role=tab data-toggle=tab>Home <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-2 aria-controls=profile role=tab data-toggle=tab>Profile <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-3 aria-controls=messages role=tab data-toggle=tab>Messages <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-4 aria-controls=settings role=tab data-toggle=tab>Settings <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-5 aria-controls=more-stuff role=tab data-toggle=tab>Sed at sapien turpis <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-6 aria-controls=even-more-stuff role=tab data-toggle=tab>Nulla iaculis rhoncus <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-7 aria-controls=too-much-stuff role=tab data-toggle=tab>Curabitur eleifend <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-8 aria-controls=way-too-much-stuff role=tab data-toggle=tab>Sociis natoque penatibus <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-9 aria-controls=absolutely-way-too-much-stuff role=tab data-toggle=tab>Morbi sed sagittis puru <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-10 aria-controls=this-needs-to-stop role=tab data-toggle=tab>Nam sed velit vel tortor suscipit egestas <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-11 aria-controls=seriously-stop role=tab data-toggle=tab>Etiam tincidunt ut<br>ante sed ultrices <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-12 aria-controls=ok-done role=tab data-toggle=tab>Sed condimentum interdum est nec imperdiet <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#overflow-13 aria-controls=ok-done role=tab data-toggle=tab>Sed quis egestas libero <i class="icon-ui-arrowright visible-xs"></i></a></li></ul><div class=tab-content><div role=tabpanel class="tab-pane fade active in" id=overflow-1><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Home vestibulum bibendum tellus eget risus consectetur, eu pharetra mi luctus. Etiam congue a massa et lacinia. Maecenas tellus ipsum, scelerisque id massa eu, condimentum viverra velit. Donec nec lorem nulla. Sed justo arcu, tincidunt eu lacus et, placerat egestas urna.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-2><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Profile ellentesque porta quam id turpis commodo, eget malesuada risus malesuada. Nullam sit amet varius urna. In finibus scelerisque lacus, sed rutrum ex molestie vitae. vestibulum at faucibus nisi. Maecenas lacinia congue venenatis.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-3><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Messages sed justo arcu, tincidunt eu lacus et, placerat egestas urna. Ut varius purus id aliquet tristique.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-4><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Settings sivamus nec tristique felis, vitae accumsan enim. Aenean in volutpat justo. Sed dui elit, tristique non felis quis, posuere sodales nisi.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-5><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Sed at sapien turpis. Ut at nulla eget ligula facilisis feugiat. Mauris egestas erat tortor, sit amet blandit enim sollicitudin eu. Curabitur malesuada metus est, vel bibendum tortor mollis id. Nunc efficitur non quam quis porttitor. Nam odio tellus, efficitur et suscipit a, rutrum quis magna. Fusce luctus leo ut justo fringilla, in pellentesque nisl fringilla. Aliquam ullamcorper ex et nunc egestas, eget venenatis magna varius. Morbi in tortor eu quam ullamcorper porta sed at nisi. Sed sed sapien eros. Praesent rutrum purus ut libero feugiat cursus. Fusce in justo lorem. Phasellus consequat felis sapien, sit amet tempor mi hendrerit sed. Nullam nulla eros, condimentum quis elit tristique, convallis blandit sem.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-6><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Nulla iaculis rhoncus lacus ac dictum. Aenean ut sem mi. Quisque nec sapien porta, iaculis justo eu, feugiat mi. Proin vel tellus in nulla pretium dignissim sit amet pulvinar justo. Donec ac tempus eros. Morbi pretium turpis diam, id imperdiet nibh tempor sed. In scelerisque eros quis ultricies hendrerit. Aenean aliquam ante sed metus rhoncus, eget ornare libero imperdiet. Nam erat nunc, vestibulum vel lacinia nec, ultrices nec justo. Curabitur interdum massa leo, vel tempor velit accumsan quis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris felis augue, porttitor ut lacinia id, volutpat at lorem. Phasellus accumsan vestibulum odio, sit amet elementum ex rhoncus eu.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-7><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Curabitur eleifend, ligula sed commodo imperdiet, odio quam pellentesque nulla, ornare ullamcorper lorem augue vel sapien. Ut pretium, ligula eu elementum semper, ipsum dui auctor eros, eget tincidunt est arcu nec arcu. Sed sapien odio, mollis et elit in, dapibus viverra orci. Duis nec lacus ut libero molestie bibendum at at justo. Integer blandit massa nec elit aliquet, nec commodo metus semper. Donec lectus tortor, dapibus eu sodales at, dictum a nibh. Duis in justo et nibh placerat sodales in eget magna.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-8><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Vestibulum sit amet eros egestas, rhoncus enim suscipit, aliquam leo. Vestibulum non porta risus. Phasellus sit amet mattis purus. Aenean arcu mi, consequat vel faucibus et, tincidunt ut lectus. Curabitur eget tincidunt augue. Praesent id pellentesque elit. Ut ultricies, ligula quis faucibus finibus, dolor massa fringilla eros, ac porttitor odio nisl at enim. Nullam condimentum lobortis massa nec pellentesque. Interdum et malesuada fames ac ante ipsum primis in faucibus.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-9><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Morbi sed sagittis purus. Pellentesque pretium tortor eget aliquam faucibus. Sed vestibulum scelerisque consequat. Maecenas commodo pellentesque auctor. Proin sed eros sit amet felis condimentum maximus. Quisque in nibh lacinia elit consectetur ultrices nec et dolor. Fusce tempus nisi vitae lectus accumsan sollicitudin. Donec non tempus erat. Aliquam semper eleifend ornare. Nulla elementum dignissim libero sit amet tincidunt. Ut mattis mi neque, vel fermentum enim elementum vel. Vivamus lobortis congue massa a hendrerit. Morbi sed aliquam mauris, non ultrices ipsum.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-10><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Nam sed velit vel tortor suscipit egestas. Vestibulum lobortis felis et elit facilisis lobortis. Quisque at nulla eleifend, rhoncus tortor id, convallis leo. Donec malesuada ex nibh, et auctor libero consequat porta. Donec a elementum metus. Morbi dolor elit, gravida id elementum nec, ullamcorper at lorem. In sodales turpis eu nisl aliquet, in mollis mi efficitur. Cras sagittis pharetra dapibus. Pellentesque lacinia a tortor sit amet mattis. Suspendisse potenti. Nullam id lacus diam. Mauris laoreet elit a orci tincidunt dignissim. Quisque tristique ex vitae libero commodo, a suscipit mi consequat. Donec sed rutrum augue. Nullam ornare condimentum tempus.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-11><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Etiam tincidunt ut ante sed ultrices. Proin vitae vulputate arcu. Nulla vehicula scelerisque tincidunt. Pellentesque a sollicitudin nulla, quis pellentesque libero. In pharetra, urna et lobortis scelerisque, ipsum mi commodo massa, vel cursus lectus dolor sit amet lectus. Curabitur eget lobortis nibh. Nulla rhoncus orci tincidunt, porta sapien ut, cursus tellus. Quisque pretium nisi sem. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam felis odio, fermentum ac laoreet sit amet, tempor eu nisl. Phasellus sed augue eu lectus dictum ornare in ut tortor.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-12><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Sed condimentum interdum est nec imperdiet. Proin eu purus blandit, finibus felis id, ultrices magna. Curabitur consectetur dolor sit amet tellus ultricies, in auctor turpis lacinia. Donec sagittis ligula commodo, vehicula sapien at, eleifend mauris. Vestibulum ac elit eget nibh vulputate efficitur sit amet at orci. Ut sit amet pulvinar nunc. Praesent condimentum eu felis non tincidunt. Duis malesuada turpis vel elit vulputate, a fermentum erat tincidunt.</p></div><div role=tabpanel class="tab-pane fade" id=overflow-13><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Sed quis egestas libero. Suspendisse lobortis viverra velit, vel lacinia justo consequat vel. Proin ipsum elit, ultricies non erat quis, auctor molestie lacus. Phasellus sodales commodo eros, id ullamcorper tellus posuere ac. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Praesent quis suscipit urna. Sed porta odio ligula, a varius eros hendrerit nec. Cras et ante in sem tempor pretium sit amet vitae odio. Vivamus efficitur tortor id metus eleifend pellentesque. Cras semper mi enim, at dapibus turpis fermentum eu. Fusce porta scelerisque elit vitae tincidunt.</p></div></div></div></div><hr><h3>Tabs <small>(justified)</small></h3><div class=bottom-offset-60><div class="row-offcanvas row-offcanvas-right"><ul class="nav nav-tabs nav-justified" role=tablist><li role=presentation class=active><a href=#long-example aria-controls=long-example role=tab data-toggle=tab>Example to show the auto adjusted tab height. <i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#automobile aria-controls=Automobile role=tab data-toggle=tab>Automobile<i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#boats aria-controls=Boats role=tab data-toggle=tab>Boats<i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#planes aria-controls=Planes role=tab data-toggle=tab>Planes<i class="icon-ui-arrowright visible-xs"></i></a></li></ul><div class=tab-content><div role=tabpanel class="tab-pane fade active in" id=long-example><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Long example ipsum dolor sit amet, consectetur adipiscing elit. Curabitur semper vulputate justo, nec fermentum ante pellentesque at. Aliquam erat volutpat. Mauris vehicula rhoncus velit vitae scelerisque.</p></div><div role=tabpanel class="tab-pane fade" id=automobile><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Automobile et metus at urna auctor varius. Cras mattis tincidunt eros facilisis efficitur. Nam ullamcorper faucibus neque nec eleifend.</p></div><div role=tabpanel class="tab-pane fade" id=boats><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Boats sapien quam, facilisis gravida magna sit amet, dignissim vehicula mauris. Proin tellus purus, condimentum in ex nec, varius malesuada neque.</p></div><div role=tabpanel class="tab-pane fade" id=planes><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Planes condimentum urna sit amet interdum mattis. Vivamus fermentum porttitor libero id faucibus. Duis nec suscipit nisi. Aenean in egestas metus.</p></div></div></div></div><hr><h3>Tabs <small>(centered)</small></h3><div class=bottom-offset-60><div class="row-offcanvas row-offcanvas-right"><ul class="nav nav-tabs nav-centered" role=tablist><li role=presentation class=active><a href=#inspiron role=tab data-toggle=tab><img class=tab-image alt=80x80 src=http://placehold.it/80x80><h4>Inspiron Laptops</h4><p class=text-gray-dark>For home and home office</p><i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#latitude role=tab data-toggle=tab><img class=tab-image alt=80x80 src=http://placehold.it/80x80><h4>Latitude Laptops</h4><p class=text-gray-dark>For business-class security and reliability</p><i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#vostro role=tab data-toggle=tab><img class=tab-image alt=80x80 src=http://placehold.it/80x80><h4>Vostro Laptops</h4><p class=text-gray-dark>For small business computing</p><i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#XPS role=tab data-toggle=tab><img class=tab-image alt=80x80 src=http://placehold.it/80x80><h4>XPS Laptops</h4><p class=text-gray-dark>For the ultimate experience</p><i class="icon-ui-arrowright visible-xs"></i></a></li><li role=presentation><a href=#precision role=tab data-toggle=tab><img class=tab-image alt=80x80 src=http://placehold.it/80x80><h4>Dell Precision Mobile Workstation\'s</h4><p class=text-gray-dark>For professional creators</p><i class="icon-ui-arrowright visible-xs"></i></a></li></ul><div class=tab-content><div role=tabpanel class="tab-pane fade active in" id=inspiron><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Inspiron condimentum urna sit amet interdum mattis. Vivamus fermentum porttitor libero id faucibus. Duis nec suscipit nisi. Aenean in egestas metus.</p></div><div role=tabpanel class="tab-pane fade" id=latitude><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Latitude as et metus at urna auctor varius. Cras mattis tincidunt eros facilisis efficitur. Nam ullamcorper faucibus neque nec eleifend.</p></div><div role=tabpanel class="tab-pane fade" id=vostro><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Vostro estibulum nec pharetra magna, vitae auctor erat. Suspendisse quam enim, bibendum quis ante quis, hendrerit condimentum len.</p></div><div role=tabpanel class="tab-pane fade" id=XPS><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>XPS sollicitudin, metus eget venenatis bibendum, ex neque posuere diam, sed pharetra urna tortor in justo. Maecenas faucibus quam sit amet fermentum sodales.</p></div><div role=tabpanel class="tab-pane fade" id=precision><button class="btn btn-default btn-block visible-xs" data-toggle=offcanvas><i class=icon-ui-arrowleft></i> Back</button><p>Precision vel nibh et risus fringilla molestie. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.</p></div></div></div></div></div></section>');
    $templateCache.put('components/tooltips/demo-play-tooltips.html', '<section ng-controller=tooltipsPLayDemoCtrl id=tooltips-play-demo><div class=container><h2>Tooltips Builder</h2><div></div></div></section>');
    $templateCache.put('components/tooltips/demo-tooltips.html', '<section ng-controller=tooltipsCtrl id=tooltips-html-example><div class=container><h2 class=bottom-offset-20>Tooltips Demo</h2><ul class="unstyled list-inline top-offset-10"><li aria-describedby=tooltip-top><a id=tooltip-top href=javascript:; data-toggle=tooltip data-container=body data-placement=top title="Tooltip on bottom with simple filler copy">Tooltip on top</a></li><li aria-describedby=tooltip-right><a href=javascript:; data-toggle=tooltip data-container=body data-placement=right title="Tooltip on left with simple filler copy">Tooltip on right</a></li><li aria-describedby=tooltip-bottom><a href=javascript:; data-toggle=tooltip data-container=body data-placement=bottom title="Tooltip on bottom with simple filler copy">Tooltip on bottom</a></li><li><a href=javascript:; data-toggle=tooltip data-container=body data-placement=left title="Tooltip on left with simple filler copy">Tooltip on left</a></li></ul></div></section>');
    $templateCache.put('components/typography/demo-play-typography.html', '<section ng-controller=typographyPLayDemoCtrl id=typography-play-demo></section>');
    $templateCache.put('components/typography/demo-typography.html', '<section ng-controller=typographyCtrl id=typography-html-example><div class=container><h2>Typography Demo</h2><div class=well><table class="table bottom-offset-0"><tr><td><h1 class=visible-lg>H1 : 32px/40px</h1><h1 class=visible-md>H1 : 32px/40px</h1><h1 class=visible-sm>H1 : 30px/36px</h1><h1 class=visible-xs>H1 : 24px/28px</h1><p><small>font-family: Roboto-Light</small></p><p><small>font-weight: 300</small></p></td></tr><tr><td><h2 class=visible-lg>H2 : 28px/32px</h2><h2 class=visible-md>H2 : 28px/32px</h2><h2 class=visible-sm>H2 : 26px/30px</h2><h2 class=visible-xs>H2 : 20px/24px</h2><p><small>font-family: Roboto-Light</small></p><p><small>font-weight: 300</small></p></td></tr><tr><td><h3 class="visible-lg feature">H3 "feature" : 24px/28px</h3><h3 class="visible-md feature">H3 "feature" : 24px/28px</h3><h3 class="visible-sm feature">H3 "feature" : 22px/26px</h3><h3 class="visible-xs feature">H3 "feature" : 18px/22px</h3><p><small>font-family: Roboto-Light</small></p><p><small>font-weight: 300</small></p></td></tr><tr><td><h3 class=visible-lg>H3 : 20px/24px</h3><h3 class=visible-md>H3 : 20px/24px</h3><h3 class=visible-sm>H3 : 20px/24px</h3><h3 class=visible-xs>H3 : 17px/20px</h3><p><small>font-family: Roboto-Light</small></p><p><small>font-weight: 300</small></p></td></tr><tr><td><h4 class=visible-lg>H4 : 18px/22px</h4><h4 class=visible-md>H4 : 18px/22px</h4><h4 class=visible-sm>H4 : 18px/22px</h4><h4 class=visible-xs>H4 : 16px/20px</h4><p><small>font-family: Roboto-Regular</small></p><p><small>font-weight: 400</small></p></td></tr><tr><td><h5 class=visible-lg>H5 : 16px/20px</h5><h5 class=visible-md>H5 : 16px/20px</h5><h5 class=visible-sm>H5 : 16px/20px</h5><h5 class=visible-xs>H5 : 14px/20px</h5><p><small>font-family: Roboto-Regular</small></p><p><small>font-weight: 400</small></p></td></tr><tr><td><p class="bold-16 visible-lg">Bold 16 : 16px/20px</p><p class="bold-16 visible-md">Bold 16 : 16px/20px</p><p class="bold-16 visible-sm">Bold 16 : 16px/20px</p><p class="bold-16 visible-xs">Bold 16 : 16px/20px</p><p><small>font-family: Roboto-Regular</small></p><p><small>font-weight: 400</small></p></td></tr><tr><td><p class="bold-14 visible-lg">Bold 14 : 14px/20px</p><p class="bold-14 visible-md">Bold 14 : 14px/20px</p><p class="bold-14 visible-sm">Bold 14 : 14px/20px</p><p class="bold-14 visible-xs">Bold 14 : 14px/20px</p><p><small>font-family: Roboto-Regular</small></p><p><small>font-weight: 400</small></p></td></tr><tr><td><p class="bold-12 visible-lg">Bold 12 : 12px/15px</p><p class="bold-12 visible-md">Bold 12 : 12px/15px</p><p class="bold-12 visible-sm">Bold 12 : 12px/15px</p><p class="bold-12 visible-xs">Bold 12 : 12px/15px</p><p><small>font-family: Roboto-Regular</small></p><p><small>font-weight: 400</small></p></td></tr></table></div><div class=row><div class="col-xs-12 col-sm-6 bottom-offset-20"><h3>Example body text <small>(default)</small></h3><div id=example-body-text><p>Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div><p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec sed odio dui.</p><div class="top-offset-30 bottom-offset-20"><h3>Example small text <small>(fine print)</small></h3><p id=example-small-body-text><small>This copy is meant to be treated as fine print. Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula ut id elit.</small></p><p><small>This copy is meant to be treated as fine print. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec sed odio dui.</small></p></div></div></div><div class=row><div class="col-xs-12 col-sm-6 bottom-offset-20"><h3 class=text-rtl>Example body text <small>(default)</small></h3><p class=text-rtl>Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p><p class=text-rtl>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec sed odio dui.</p><div class="top-offset-30 bottom-offset-20"><h3 class=text-rtl>Example small text <small>(fine print)</small></h3><p class=text-rtl><small>This copy is meant to be treated as fine print. Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula ut id elit.</small></p><p class=text-rtl><small>This copy is meant to be treated as fine print. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec sed odio dui.</small></p></div></div></div><div class=bottom-offset-40><h3>Example bold copy</h3><div class="well well-sm bottom-offset-40"><div id=strong-text><strong>Text rendered as bold text</strong></div></div><h3>Example italicized copy</h3><div class="well well-sm bottom-offset-40"><div id=italic-text><em>Text rendered as italicized text</em></div></div></div><h3>Example colored text</h3><div class="well well-sm" style="background: #ddd"><p class=text-gray-dark>This text is <strong>text-gray-dark</strong> <small>&nbsp;(default)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-blue>This text is <strong>text-blue</strong> <small>&nbsp;(Brand name: Dell Blue)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-dark-blue>This text is <strong>text-dark-blue</strong> <small>&nbsp;(Brand name: Dell Dark Blue)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-purple>This text is <strong>text-purple</strong> <small>&nbsp;(Brand name: Dell Purple)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-berry>This text is <strong>text-berry</strong> <small>&nbsp;(Brand name: Dell Berry)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-red>This text is <strong>text-red</strong> <small>&nbsp;(Brand name: Dell Red)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-red-dark>This text is <strong>text-red-dark</strong> <small>&nbsp;(Brand name: Dell Dark Red)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-white>This text is <strong>text-white</strong> <small>&nbsp;(Brand name: White)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-gray-medium>This text is <strong>text-gray-medium</strong> <small>&nbsp;(Brand name: 75% Dell Dark Gray)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-gray-dark>This text is <strong>text-gray-dark</strong> <small>&nbsp;(Brand name: Dell Dark Gray)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-orange>This text is <strong>text-orange</strong> <small>&nbsp;(Brand name: Dell Orange)</small> .</p></div><div class="well well-sm" style="background: #ddd"><p class=text-green>This text is <strong>text-orange</strong> <small>&nbsp;(Brand name: Dell Green)</small> .</p></div><h3>Example text alignment</h3><div class="well well-sm"><div id=left-aligned-text><p class=text-left>Left aligned text.</p></div><hr><div id=center-aligned-text><p class=text-center>Center aligned text.</p></div><hr><div id=right-aligned-text><p class=text-right>Right aligned text.</p></div></div><h3>Example strikethrough</h3><div class="well well-sm bottom-offset-40"><div id=strikethrough-text><p class=strike-through>This is an example of strikethrough text.</p></div></div></div></section>');
    $templateCache.put('demo-assets/partials/all-components/all-components.html', '<div ng-controller=AllComponentsCtrl><h2>All components</h2><ul><li ng-repeat="item in components"><a href=#/demo/{{item.id}}>{{item.label}} demo</a> | <a href=#/play/{{item.id}}>play</a></li></ul></div>');
    $templateCache.put('demo-assets/partials/demo/demo.html', '<div ng-controller=ComponentsDemoCtrl><div ng-if=activeComponent ng-include=componentDemoUrl></div><div ng-if=!activeComponent class=container ng-include="\'demo-assets/partials/all-components/all-components.html\'"></div></div>');
    $templateCache.put('demo-assets/partials/guide/guide.html', '<div ng-controller=GuideCtrl><div ng-if=activeComponent ng-include=componentGuideUrl></div><div ng-if=!activeComponent class=container ng-include="\'demo-assets/partials/all-components/all-components.html\'"></div></div>');
    $templateCache.put('demo-assets/partials/home/home.html', '<div ng-controller=HomeCtrl><nav class="navbar navbar-inverse"><div class=container><div class=row><div class="navbar-header col-sm-9"><button type=button class="navbar-toggle collapsed" data-toggle=collapse data-target=#navbar aria-expanded=false aria-controls=navbar><span class=sr-only>Toggle navigation</span> <span class=icon-bar></span> <span class=icon-bar></span> <span class=icon-bar></span></button> <a class=navbar-brand href=#><i class=icon-ui-dell style="font-size: 42px;\r' + '\n' + '                          position: relative;\r' + '\n' + '                          top: -12px"></i> <span style="position: relative;\r' + '\n' + '                            top: -24px;\r' + '\n' + '                            left: 0px;\r' + '\n' + '                            font-size: 20px">Dell UI Components Demo</span></a></div><div id=navbar class="collapse navbar-collapse col-sm-3 pull-right" ng-if=activeComponent><div class="btn-group pull-right top-offset-10"><a class="btn btn-default dropdown-toggle" data-toggle=dropdown href=javascript:;><span ng-if=activeComponent>{{activeComponent.label}}</span> <i class=caret></i></a><ul class=dropdown-menu><li><a href=#/demo>All components</a></li><li ng-repeat="item in components"><a href=#{{pageType}}/{{item.id}}>{{item.label}}</a></li></ul></div></div></div></div></nav><div class=container ng-if=activeComponent><div class="btn-group demo-play-switcher"><a href=#demo/{{activeComponent.id}} class="btn btn-default btn-xs" ng-class="{\'btn-primary\':pageType === \'demo\'}">Demo</a> <a href=#play/{{activeComponent.id}} class="btn btn-default btn-xs" ng-class="{\'btn-primary\':pageType === \'play\'}">Play</a> <a href=#guide/{{activeComponent.id}} class="btn btn-default btn-xs" ng-class="{\'btn-primary\':pageType === \'guide\'}">Guide</a></div></div><div id=component-{{pageType}} ng-include="\'demo-assets/partials/\'+pageType+\'/\'+pageType+\'.html\'"></div></div>');
    $templateCache.put('demo-assets/partials/play/play.html', '<div ng-controller=PlayCtrl><div ng-if=activeComponent ng-include=componentPlayUrl></div><div ng-if=!activeComponent class=container ng-include="\'demo-assets/partials/all-components/all-components.html\'"></div></div>');
    $templateCache.put('templates/component/demo-guide-partial.html', '<section ng-controller="<%= camelId %>GuideDemoCtrl" id="<%= dashedId %>-guide-demo"><div class=container><h2><%= name %>Guide</h2><div></div></div></section>');
    $templateCache.put('templates/component/demo-partial.html', '<section ng-controller="<%= camelId %>Ctrl" id="<%= dashedId %>-html-example"><div class=container><h2><%= name %>Demo</h2><div></div></div></section>');
    $templateCache.put('templates/component/demo-play-partial.html', '<section ng-controller="<%= camelId %>PLayDemoCtrl" id="<%= dashedId %>-play-demo"><div class=container><h2><%= name %>Builder</h2><div></div></div></section>');
    $templateCache.put('templates/directive/directive.html', '<div></div>');
  }
]);